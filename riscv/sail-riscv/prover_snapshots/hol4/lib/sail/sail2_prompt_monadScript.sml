(*Generated by Lem from sail2_prompt_monad.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_valuesTheory sail2_instr_kindsTheory sail2_state_monadTheory;

val _ = numLib.prefer_num();



val _ = new_theory "sail2_prompt_monad"

(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_state_monad*)

(* Fake interface of the prompt monad by redirecting to the state monad, since
   the former is not currently supported by HOL4 *)

val _ = type_abbrev((* ( 'a_rv, 'b_a, 'c_e) *) "monad" , ``:('a_rv,'b_a,'c_e) monadS``);
val _ = type_abbrev((* ( 'a_rv, 'b_a, 'c_e, 'd_r) *) "monadR" , ``:('a_rv,'b_a,'c_e,'d_r) monadRS``);

(* We need to use a target_rep for these because HOL doesn't handle unused
   type parameters well. *)

(*type base_monad 'regval 'regstate 'a 'e = monad 'regstate 'a 'e*)
(*type base_monadR 'regval 'regstate 'a 'r 'e = monadR 'regstate 'a 'r 'e*)
val _ = Define `
 ((barrier:'c -> 'a sequential_state ->(((unit),'b)result#'a sequential_state)set) _=  (returnS () ))`;

val _ = Define `
 ((footprint:'c -> 'a sequential_state ->(((unit),'b)result#'a sequential_state)set) _=  (returnS () ))`;

val _ = export_theory()

