(*Generated by Lem from ../../src/lem_interp/sail2_instr_kinds.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory;

val _ = numLib.prefer_num();



val _ = new_theory "sail2_instr_kinds"

(*========================================================================*)
(*     Sail                                                               *)
(*                                                                        *)
(*  Copyright (c) 2013-2017                                               *)
(*    Kathyrn Gray                                                        *)
(*    Shaked Flur                                                         *)
(*    Stephen Kell                                                        *)
(*    Gabriel Kerneis                                                     *)
(*    Robert Norton-Wright                                                *)
(*    Christopher Pulte                                                   *)
(*    Peter Sewell                                                        *)
(*    Alasdair Armstrong                                                  *)
(*    Brian Campbell                                                      *)
(*    Thomas Bauereiss                                                    *)
(*    Anthony Fox                                                         *)
(*    Jon French                                                          *)
(*    Dominic Mulligan                                                    *)
(*    Stephen Kell                                                        *)
(*    Mark Wassell                                                        *)
(*                                                                        *)
(*  All rights reserved.                                                  *)
(*                                                                        *)
(*  This software was developed by the University of Cambridge Computer   *)
(*  Laboratory as part of the Rigorous Engineering of Mainstream Systems  *)
(*  (REMS) project, funded by EPSRC grant EP/K008528/1.                   *)
(*                                                                        *)
(*  Redistribution and use in source and binary forms, with or without    *)
(*  modification, are permitted provided that the following conditions    *)
(*  are met:                                                              *)
(*  1. Redistributions of source code must retain the above copyright     *)
(*     notice, this list of conditions and the following disclaimer.      *)
(*  2. Redistributions in binary form must reproduce the above copyright  *)
(*     notice, this list of conditions and the following disclaimer in    *)
(*     the documentation and/or other materials provided with the         *)
(*     distribution.                                                      *)
(*                                                                        *)
(*  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''    *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED     *)
(*  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A       *)
(*  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR   *)
(*  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,          *)
(*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      *)
(*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF      *)
(*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND   *)
(*  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,    *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT    *)
(*  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF    *)
(*  SUCH DAMAGE.                                                          *)
(*========================================================================*)

(*open import Pervasives_extra*)


val _ = Hol_datatype `
(*  'a *) EnumerationType_class= <|
  toNat_method : 'a -> num
|>`;



(*val enumeration_typeCompare : forall 'a. EnumerationType 'a => 'a -> 'a -> ordering*)
val _ = Define `
 ((enumeration_typeCompare:'a EnumerationType_class -> 'a -> 'a -> ordering)dict_Sail2_instr_kinds_EnumerationType_a e1 e2=
   (genericCompare (<) (=) (
  dict_Sail2_instr_kinds_EnumerationType_a.toNat_method e1) (dict_Sail2_instr_kinds_EnumerationType_a.toNat_method e2)))`;



val _ = Define `
((instance_Basic_classes_Ord_var_dict:'a EnumerationType_class -> 'a Ord_class)dict_Sail2_instr_kinds_EnumerationType_a= (<|

  compare_method := 
  (enumeration_typeCompare dict_Sail2_instr_kinds_EnumerationType_a);

  isLess_method := (\  r1 r2. (enumeration_typeCompare 
  dict_Sail2_instr_kinds_EnumerationType_a r1 r2) = LESS);

  isLessEqual_method := (\ r1 r2. (enumeration_typeCompare 
  dict_Sail2_instr_kinds_EnumerationType_a r1 r2) <> GREATER);

  isGreater_method := (\  r1 r2. (enumeration_typeCompare 
  dict_Sail2_instr_kinds_EnumerationType_a r1 r2) = GREATER);

  isGreaterEqual_method := (\ r1 r2. (enumeration_typeCompare 
  dict_Sail2_instr_kinds_EnumerationType_a r1 r2) <> LESS)|>))`;



(* Data structures for building up instructions *)

(* careful: changes in the read/write/barrier kinds have to be
   reflected in deep_shallow_convert *)
val _ = Hol_datatype `
 read_kind =
  (* common reads *)
    Read_plain
  (* Power reads *)
  | Read_reserve
  (* AArch64 reads *)
  | Read_acquire | Read_exclusive | Read_exclusive_acquire | Read_stream
  (* RISC-V reads *)
  | Read_RISCV_acquire  | Read_RISCV_strong_acquire
  | Read_RISCV_reserved | Read_RISCV_reserved_acquire
  | Read_RISCV_reserved_strong_acquire
  (* x86 reads *)
  | Read_X86_locked`;
 (* the read part of a lock'd instruction (rmw) *)

val _ = Define `
((instance_Show_Show_Sail2_instr_kinds_read_kind_dict:(read_kind)Show_class)= (<|

  show_method := (\x .  
  (case x of
        Read_plain => "Read_plain"
    | Read_reserve => "Read_reserve"
    | Read_acquire => "Read_acquire"
    | Read_exclusive => "Read_exclusive"
    | Read_exclusive_acquire => "Read_exclusive_acquire"
    | Read_stream => "Read_stream"
    | Read_RISCV_acquire => "Read_RISCV_acquire"
    | Read_RISCV_strong_acquire => "Read_RISCV_strong_acquire"
    | Read_RISCV_reserved => "Read_RISCV_reserved"
    | Read_RISCV_reserved_acquire => "Read_RISCV_reserved_acquire"
    | Read_RISCV_reserved_strong_acquire => "Read_RISCV_reserved_strong_acquire"
    | Read_X86_locked => "Read_X86_locked"
  ))|>))`;


val _ = Hol_datatype `
 write_kind =
  (* common writes *)
    Write_plain
  (* Power writes *)
  | Write_conditional
  (* AArch64 writes *)
  | Write_release | Write_exclusive | Write_exclusive_release
  (* RISC-V *)
  | Write_RISCV_release     | Write_RISCV_strong_release
  | Write_RISCV_conditional | Write_RISCV_conditional_release
  | Write_RISCV_conditional_strong_release
  (* x86 writes *)
  | Write_X86_locked`;
 (* the write part of a lock'd instruction (rmw) *)

val _ = Define `
((instance_Show_Show_Sail2_instr_kinds_write_kind_dict:(write_kind)Show_class)= (<|

  show_method := (\x .  
  (case x of
        Write_plain => "Write_plain"
    | Write_conditional => "Write_conditional"
    | Write_release => "Write_release"
    | Write_exclusive => "Write_exclusive"
    | Write_exclusive_release => "Write_exclusive_release"
    | Write_RISCV_release => "Write_RISCV_release"
    | Write_RISCV_strong_release => "Write_RISCV_strong_release"
    | Write_RISCV_conditional => "Write_RISCV_conditional"
    | Write_RISCV_conditional_release => "Write_RISCV_conditional_release"
    | Write_RISCV_conditional_strong_release => "Write_RISCV_conditional_strong_release"
    | Write_X86_locked => "Write_X86_locked"
  ))|>))`;


val _ = Hol_datatype `
 barrier_kind =
  (* Power barriers *)
  Barrier_Sync | Barrier_LwSync | Barrier_Eieio | Barrier_Isync
  (* AArch64 barriers *)
  | Barrier_DMB | Barrier_DMB_ST | Barrier_DMB_LD | Barrier_DSB
  | Barrier_DSB_ST | Barrier_DSB_LD | Barrier_ISB
  | Barrier_TM_COMMIT
  (* MIPS barriers *)
  | Barrier_MIPS_SYNC
  (* RISC-V barriers *)
  | Barrier_RISCV_rw_rw
  | Barrier_RISCV_r_rw
  | Barrier_RISCV_r_r
  | Barrier_RISCV_rw_w
  | Barrier_RISCV_w_w
  | Barrier_RISCV_w_rw
  | Barrier_RISCV_rw_r
  | Barrier_RISCV_r_w
  | Barrier_RISCV_w_r
  | Barrier_RISCV_tso
  | Barrier_RISCV_i
  (* X86 *)
  | Barrier_x86_MFENCE`;



val _ = Define `
((instance_Show_Show_Sail2_instr_kinds_barrier_kind_dict:(barrier_kind)Show_class)= (<|

  show_method := (\x .  
  (case x of
        Barrier_Sync => "Barrier_Sync"
    | Barrier_LwSync => "Barrier_LwSync"
    | Barrier_Eieio => "Barrier_Eieio"
    | Barrier_Isync => "Barrier_Isync"
    | Barrier_DMB => "Barrier_DMB"
    | Barrier_DMB_ST => "Barrier_DMB_ST"
    | Barrier_DMB_LD => "Barrier_DMB_LD"
    | Barrier_DSB => "Barrier_DSB"
    | Barrier_DSB_ST => "Barrier_DSB_ST"
    | Barrier_DSB_LD => "Barrier_DSB_LD"
    | Barrier_ISB => "Barrier_ISB"
    | Barrier_TM_COMMIT => "Barrier_TM_COMMIT"
    | Barrier_MIPS_SYNC => "Barrier_MIPS_SYNC"
    | Barrier_RISCV_rw_rw => "Barrier_RISCV_rw_rw"
    | Barrier_RISCV_r_rw => "Barrier_RISCV_r_rw"
    | Barrier_RISCV_r_r => "Barrier_RISCV_r_r"
    | Barrier_RISCV_rw_w => "Barrier_RISCV_rw_w"
    | Barrier_RISCV_w_w => "Barrier_RISCV_w_w"
    | Barrier_RISCV_w_rw => "Barrier_RISCV_w_rw"
    | Barrier_RISCV_rw_r => "Barrier_RISCV_rw_r"
    | Barrier_RISCV_r_w => "Barrier_RISCV_r_w"
    | Barrier_RISCV_w_r => "Barrier_RISCV_w_r"
    | Barrier_RISCV_tso => "Barrier_RISCV_tso"
    | Barrier_RISCV_i => "Barrier_RISCV_i"
    | Barrier_x86_MFENCE => "Barrier_x86_MFENCE"
  ))|>))`;


val _ = Hol_datatype `
 trans_kind =
  (* AArch64 *)
    Transaction_start | Transaction_commit | Transaction_abort`;


val _ = Define `
((instance_Show_Show_Sail2_instr_kinds_trans_kind_dict:(trans_kind)Show_class)= (<|

  show_method := (\x .  
  (case x of
        Transaction_start => "Transaction_start"
    | Transaction_commit => "Transaction_commit"
    | Transaction_abort => "Transaction_abort"
  ))|>))`;


(* cache maintenance instructions *)
val _ = Hol_datatype `
 cache_op_kind =
  (* AArch64 DC *)
    Cache_op_D_IVAC | Cache_op_D_ISW  | Cache_op_D_CSW  |  Cache_op_D_CISW
  | Cache_op_D_ZVA  | Cache_op_D_CVAC | Cache_op_D_CVAU | Cache_op_D_CIVAC
  (* AArch64 IC *)
  | Cache_op_I_IALLUIS | Cache_op_I_IALLU | Cache_op_I_IVAU`;


val _ = Define `
((instance_Show_Show_Sail2_instr_kinds_cache_op_kind_dict:(cache_op_kind)Show_class)= (<|

  show_method := (\x .  
  (case x of
        Cache_op_D_IVAC => "Cache_op_D_IVAC"
    | Cache_op_D_ISW => "Cache_op_D_ISW"
    | Cache_op_D_CSW => "Cache_op_D_CSW"
    | Cache_op_D_CISW => "Cache_op_D_CISW"
    | Cache_op_D_ZVA => "Cache_op_D_ZVA"
    | Cache_op_D_CVAC => "Cache_op_D_CVAC"
    | Cache_op_D_CVAU => "Cache_op_D_CVAU"
    | Cache_op_D_CIVAC => "Cache_op_D_CIVAC"
    | Cache_op_I_IALLUIS => "Cache_op_I_IALLUIS"
    | Cache_op_I_IALLU => "Cache_op_I_IALLU"
    | Cache_op_I_IVAU => "Cache_op_I_IVAU"
  ))|>))`;


val _ = Hol_datatype `
 instruction_kind =
    IK_barrier   of barrier_kind
  | IK_mem_read  of read_kind
  | IK_mem_write of write_kind
  | IK_mem_rmw   of (read_kind # write_kind)
  | IK_branch    of unit(* this includes conditional-branch (multiple nias, none of which is NIA_indirect_address),
  indirect/computed-branch (single nia of kind NIA_indirect_address)
  and branch/jump (single nia of kind NIA_concrete_address) *)
  | IK_trans     of trans_kind
  | IK_simple    of unit
  | IK_cache_op  of cache_op_kind`;



val _ = Define `
((instance_Show_Show_Sail2_instr_kinds_instruction_kind_dict:(instruction_kind)Show_class)= (<|

  show_method := (\x .  
  (case x of
        IK_barrier barrier_kind => STRCAT "IK_barrier "
                                     (((\x .  (case x of
                                                    Barrier_Sync => "Barrier_Sync"
                                                | Barrier_LwSync => "Barrier_LwSync"
                                                | Barrier_Eieio => "Barrier_Eieio"
                                                | Barrier_Isync => "Barrier_Isync"
                                                | Barrier_DMB => "Barrier_DMB"
                                                | Barrier_DMB_ST => "Barrier_DMB_ST"
                                                | Barrier_DMB_LD => "Barrier_DMB_LD"
                                                | Barrier_DSB => "Barrier_DSB"
                                                | Barrier_DSB_ST => "Barrier_DSB_ST"
                                                | Barrier_DSB_LD => "Barrier_DSB_LD"
                                                | Barrier_ISB => "Barrier_ISB"
                                                | Barrier_TM_COMMIT => 
                                              "Barrier_TM_COMMIT"
                                                | Barrier_MIPS_SYNC => 
                                              "Barrier_MIPS_SYNC"
                                                | Barrier_RISCV_rw_rw => 
                                              "Barrier_RISCV_rw_rw"
                                                | Barrier_RISCV_r_rw => 
                                              "Barrier_RISCV_r_rw"
                                                | Barrier_RISCV_r_r => 
                                              "Barrier_RISCV_r_r"
                                                | Barrier_RISCV_rw_w => 
                                              "Barrier_RISCV_rw_w"
                                                | Barrier_RISCV_w_w => 
                                              "Barrier_RISCV_w_w"
                                                | Barrier_RISCV_w_rw => 
                                              "Barrier_RISCV_w_rw"
                                                | Barrier_RISCV_rw_r => 
                                              "Barrier_RISCV_rw_r"
                                                | Barrier_RISCV_r_w => 
                                              "Barrier_RISCV_r_w"
                                                | Barrier_RISCV_w_r => 
                                              "Barrier_RISCV_w_r"
                                                | Barrier_RISCV_tso => 
                                              "Barrier_RISCV_tso"
                                                | Barrier_RISCV_i => 
                                              "Barrier_RISCV_i"
                                                | Barrier_x86_MFENCE => 
                                              "Barrier_x86_MFENCE"
                                              )) barrier_kind))
    | IK_mem_read read_kind => STRCAT "IK_mem_read "
                                 (((\x .  (case x of
                                                Read_plain => "Read_plain"
                                            | Read_reserve => "Read_reserve"
                                            | Read_acquire => "Read_acquire"
                                            | Read_exclusive => "Read_exclusive"
                                            | Read_exclusive_acquire => 
                                          "Read_exclusive_acquire"
                                            | Read_stream => "Read_stream"
                                            | Read_RISCV_acquire => "Read_RISCV_acquire"
                                            | Read_RISCV_strong_acquire => 
                                          "Read_RISCV_strong_acquire"
                                            | Read_RISCV_reserved => 
                                          "Read_RISCV_reserved"
                                            | Read_RISCV_reserved_acquire => 
                                          "Read_RISCV_reserved_acquire"
                                            | Read_RISCV_reserved_strong_acquire => 
                                          "Read_RISCV_reserved_strong_acquire"
                                            | Read_X86_locked => "Read_X86_locked"
                                          )) read_kind))
    | IK_mem_write write_kind => STRCAT "IK_mem_write "
                                   (((\x .  (case x of
                                                  Write_plain => "Write_plain"
                                              | Write_conditional => 
                                            "Write_conditional"
                                              | Write_release => "Write_release"
                                              | Write_exclusive => "Write_exclusive"
                                              | Write_exclusive_release => 
                                            "Write_exclusive_release"
                                              | Write_RISCV_release => 
                                            "Write_RISCV_release"
                                              | Write_RISCV_strong_release => 
                                            "Write_RISCV_strong_release"
                                              | Write_RISCV_conditional => 
                                            "Write_RISCV_conditional"
                                              | Write_RISCV_conditional_release => 
                                            "Write_RISCV_conditional_release"
                                              | Write_RISCV_conditional_strong_release => 
                                            "Write_RISCV_conditional_strong_release"
                                              | Write_X86_locked => "Write_X86_locked"
                                            )) write_kind))
    | IK_mem_rmw (r, w) => STRCAT "IK_mem_rmw "
                             (STRCAT
                                (((\x .  (case x of
                                               Read_plain => "Read_plain"
                                           | Read_reserve => "Read_reserve"
                                           | Read_acquire => "Read_acquire"
                                           | Read_exclusive => "Read_exclusive"
                                           | Read_exclusive_acquire => 
                                         "Read_exclusive_acquire"
                                           | Read_stream => "Read_stream"
                                           | Read_RISCV_acquire => "Read_RISCV_acquire"
                                           | Read_RISCV_strong_acquire => 
                                         "Read_RISCV_strong_acquire"
                                           | Read_RISCV_reserved => "Read_RISCV_reserved"
                                           | Read_RISCV_reserved_acquire => 
                                         "Read_RISCV_reserved_acquire"
                                           | Read_RISCV_reserved_strong_acquire => 
                                         "Read_RISCV_reserved_strong_acquire"
                                           | Read_X86_locked => "Read_X86_locked"
                                         )) r))
                                (STRCAT " "
                                   (((\x .  (case x of
                                                  Write_plain => "Write_plain"
                                              | Write_conditional => 
                                            "Write_conditional"
                                              | Write_release => "Write_release"
                                              | Write_exclusive => "Write_exclusive"
                                              | Write_exclusive_release => 
                                            "Write_exclusive_release"
                                              | Write_RISCV_release => 
                                            "Write_RISCV_release"
                                              | Write_RISCV_strong_release => 
                                            "Write_RISCV_strong_release"
                                              | Write_RISCV_conditional => 
                                            "Write_RISCV_conditional"
                                              | Write_RISCV_conditional_release => 
                                            "Write_RISCV_conditional_release"
                                              | Write_RISCV_conditional_strong_release => 
                                            "Write_RISCV_conditional_strong_release"
                                              | Write_X86_locked => "Write_X86_locked"
                                            )) w))))
    | IK_branch ()  => "IK_branch"
    | IK_trans trans_kind => STRCAT "IK_trans "
                               (((\x .  (case x of
                                              Transaction_start => "Transaction_start"
                                          | Transaction_commit => "Transaction_commit"
                                          | Transaction_abort => "Transaction_abort"
                                        )) trans_kind))
    | IK_simple ()  => "IK_simple"
    | IK_cache_op cache_kind => STRCAT "IK_cache_op "
                                  (((\x .  (case x of
                                                 Cache_op_D_IVAC => "Cache_op_D_IVAC"
                                             | Cache_op_D_ISW => "Cache_op_D_ISW"
                                             | Cache_op_D_CSW => "Cache_op_D_CSW"
                                             | Cache_op_D_CISW => "Cache_op_D_CISW"
                                             | Cache_op_D_ZVA => "Cache_op_D_ZVA"
                                             | Cache_op_D_CVAC => "Cache_op_D_CVAC"
                                             | Cache_op_D_CVAU => "Cache_op_D_CVAU"
                                             | Cache_op_D_CIVAC => "Cache_op_D_CIVAC"
                                             | Cache_op_I_IALLUIS => 
                                           "Cache_op_I_IALLUIS"
                                             | Cache_op_I_IALLU => "Cache_op_I_IALLU"
                                             | Cache_op_I_IVAU => "Cache_op_I_IVAU"
                                           )) cache_kind))
  ))|>))`;



val _ = Define `
 ((read_is_exclusive:read_kind -> bool)= 
  (\x .  (case x of
               Read_plain => F
           | Read_reserve => T
           | Read_acquire => F
           | Read_exclusive => T
           | Read_exclusive_acquire => T
           | Read_stream => F
           | Read_RISCV_acquire => F
           | Read_RISCV_strong_acquire => F
           | Read_RISCV_reserved => T
           | Read_RISCV_reserved_acquire => T
           | Read_RISCV_reserved_strong_acquire => T
           | Read_X86_locked => T
         )))`;




val _ = Define `
((instance_Sail2_instr_kinds_EnumerationType_Sail2_instr_kinds_read_kind_dict:(read_kind)EnumerationType_class)= (<|

  toNat_method := (\x .  
  (case x of
        Read_plain =>( 0 : num)
    | Read_reserve =>( 1 : num)
    | Read_acquire =>( 2 : num)
    | Read_exclusive =>( 3 : num)
    | Read_exclusive_acquire =>( 4 : num)
    | Read_stream =>( 5 : num)
    | Read_RISCV_acquire =>( 6 : num)
    | Read_RISCV_strong_acquire =>( 7 : num)
    | Read_RISCV_reserved =>( 8 : num)
    | Read_RISCV_reserved_acquire =>( 9 : num)
    | Read_RISCV_reserved_strong_acquire =>( 10 : num)
    | Read_X86_locked =>( 11 : num)
  ))|>))`;


val _ = Define `
((instance_Sail2_instr_kinds_EnumerationType_Sail2_instr_kinds_write_kind_dict:(write_kind)EnumerationType_class)= (<|

  toNat_method := (\x .  
  (case x of
        Write_plain =>( 0 : num)
    | Write_conditional =>( 1 : num)
    | Write_release =>( 2 : num)
    | Write_exclusive =>( 3 : num)
    | Write_exclusive_release =>( 4 : num)
    | Write_RISCV_release =>( 5 : num)
    | Write_RISCV_strong_release =>( 6 : num)
    | Write_RISCV_conditional =>( 7 : num)
    | Write_RISCV_conditional_release =>( 8 : num)
    | Write_RISCV_conditional_strong_release =>( 9 : num)
    | Write_X86_locked =>( 10 : num)
  ))|>))`;


val _ = Define `
((instance_Sail2_instr_kinds_EnumerationType_Sail2_instr_kinds_barrier_kind_dict:(barrier_kind)EnumerationType_class)= (<|

  toNat_method := (\x .  
  (case x of
        Barrier_Sync =>( 0 : num)
    | Barrier_LwSync =>( 1 : num)
    | Barrier_Eieio =>( 2 : num)
    | Barrier_Isync =>( 3 : num)
    | Barrier_DMB =>( 4 : num)
    | Barrier_DMB_ST =>( 5 : num)
    | Barrier_DMB_LD =>( 6 : num)
    | Barrier_DSB =>( 7 : num)
    | Barrier_DSB_ST =>( 8 : num)
    | Barrier_DSB_LD =>( 9 : num)
    | Barrier_ISB =>( 10 : num)
    | Barrier_TM_COMMIT =>( 11 : num)
    | Barrier_MIPS_SYNC =>( 12 : num)
    | Barrier_RISCV_rw_rw =>( 13 : num)
    | Barrier_RISCV_r_rw =>( 14 : num)
    | Barrier_RISCV_r_r =>( 15 : num)
    | Barrier_RISCV_rw_w =>( 16 : num)
    | Barrier_RISCV_w_w =>( 17 : num)
    | Barrier_RISCV_w_rw =>( 18 : num)
    | Barrier_RISCV_rw_r =>( 19 : num)
    | Barrier_RISCV_r_w =>( 20 : num)
    | Barrier_RISCV_w_r =>( 21 : num)
    | Barrier_RISCV_tso =>( 22 : num)
    | Barrier_RISCV_i =>( 23 : num)
    | Barrier_x86_MFENCE =>( 24 : num)
  ))|>))`;

val _ = export_theory()

