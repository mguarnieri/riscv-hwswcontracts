(*Generated by Lem from ../../src/gen_lib/sail2_operators.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory lem_machine_wordTheory sail2_valuesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "sail2_operators"

(*open import Pervasives_extra*)
(*open import Machine_word*)
(*open import Sail2_values*)

(*** Bit vector operations *)

(*val concat_bv : forall 'a 'b. Bitvector 'a, Bitvector 'b => 'a -> 'b -> list bitU*)
val _ = Define `
 ((concat_bv:'a Bitvector_class -> 'b Bitvector_class -> 'a -> 'b ->(bitU)list)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b l r=  (
  dict_Sail2_values_Bitvector_a.bits_of_method l ++ dict_Sail2_values_Bitvector_b.bits_of_method r))`;


(*val cons_bv : forall 'a. Bitvector 'a => bitU -> 'a -> list bitU*)
val _ = Define `
 ((cons_bv:'a Bitvector_class -> bitU -> 'a ->(bitU)list)dict_Sail2_values_Bitvector_a b v=  (b :: 
  dict_Sail2_values_Bitvector_a.bits_of_method v))`;


(*val cast_unit_bv : bitU -> list bitU*)
val _ = Define `
 ((cast_unit_bv:bitU ->(bitU)list) b=  ([b]))`;


(*val bv_of_bit : integer -> bitU -> list bitU*)
val _ = Define `
 ((bv_of_bit:int -> bitU ->(bitU)list) len b=  (extz_bits len [b]))`;


val _ = Define `
 ((most_significant:'a Bitvector_class -> 'a -> bitU)dict_Sail2_values_Bitvector_a v=  ((case  
  dict_Sail2_values_Bitvector_a.bits_of_method v of
    b :: _ => b
  | _ => B0 (* Treat empty bitvector as all zeros *)
  )))`;


val _ = Define `
 ((get_max_representable_in:bool -> int -> int) sign (n : int) : int=
   (if (n =( 64 : int)) then (case sign of   T => max_64 | F => max_64u )
  else if (n=( 32 : int)) then (case sign of   T => max_32 | F => max_32u )
  else if (n=( 8 : int)) then max_8
  else if (n=( 5 : int)) then max_5
  else (case sign of   T => (( 2 : int))** ((Num (ABS (I n))) -( 1 : num))
                       | F => (( 2 : int))** (Num (ABS (I n)))
       )))`;


val _ = Define `
 ((get_min_representable_in:'a -> int -> int) _ (n : int) : int=
   (if n =( 64 : int) then min_64
  else if n =( 32 : int) then min_32
  else if n =( 8 : int) then min_8
  else if n =( 5 : int) then min_5
  else( 0 : int) - ((( 2 : int))** (Num (ABS (I n))))))`;


(*val arith_op_bv_int : forall 'a 'b. Bitvector 'a =>
  (integer -> integer -> integer) -> bool -> 'a -> integer -> 'a*)
val _ = Define `
 ((arith_op_bv_int:'a Bitvector_class ->(int -> int -> int) -> bool -> 'a -> int -> 'a)dict_Sail2_values_Bitvector_a op sign l r=
   (let r' = (dict_Sail2_values_Bitvector_a.of_int_method (dict_Sail2_values_Bitvector_a.length_method l) r) in  dict_Sail2_values_Bitvector_a.arith_op_bv_method op sign l r'))`;


(*val arith_op_int_bv : forall 'a 'b. Bitvector 'a =>
  (integer -> integer -> integer) -> bool -> integer -> 'a -> 'a*)
val _ = Define `
 ((arith_op_int_bv:'a Bitvector_class ->(int -> int -> int) -> bool -> int -> 'a -> 'a)dict_Sail2_values_Bitvector_a op sign l r=
   (let l' = (dict_Sail2_values_Bitvector_a.of_int_method (dict_Sail2_values_Bitvector_a.length_method r) l) in  dict_Sail2_values_Bitvector_a.arith_op_bv_method op sign l' r))`;


val _ = Define `
 ((arith_op_bv_bool:'a Bitvector_class ->(int -> int -> int) -> bool -> 'a -> bool -> 'a)dict_Sail2_values_Bitvector_a op sign l r=  (arith_op_bv_int 
  dict_Sail2_values_Bitvector_a op sign l (if r then( 1 : int) else( 0 : int))))`;

val _ = Define `
 ((arith_op_bv_bit:'a Bitvector_class ->(int -> int -> int) -> bool -> 'a -> bitU -> 'a option)dict_Sail2_values_Bitvector_a op sign l r=  (OPTION_MAP (arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a op sign l) (bool_of_bitU r)))`;


(* TODO (or just omit and define it per spec if needed)
val arith_op_overflow_bv : forall 'a. Bitvector 'a =>
  (integer -> integer -> integer) -> bool -> integer -> 'a -> 'a -> (list bitU * bitU * bitU)
let arith_op_overflow_bv op sign size l r =
  let len = length l in
  let act_size = len * size in
  match (int_of_bv sign l, int_of_bv sign r, int_of_bv false l, int_of_bv false r) with
    | (Just l_sign, Just r_sign, Just l_unsign, Just r_unsign) ->
       let n = op l_sign r_sign in
       let n_unsign = op l_unsign r_unsign in
       let correct_size = of_int act_size n in
       let one_more_size_u = bits_of_int (act_size + 1) n_unsign in
       let overflow =
         if n <= get_max_representable_in sign len &&
              n >= get_min_representable_in sign len
         then B0 else B1 in
       let c_out = most_significant one_more_size_u in
       (correct_size,overflow,c_out)
    | (_, _, _, _) ->
       (repeat [BU] act_size, BU, BU)
  end

let add_overflow_bv = arith_op_overflow_bv integerAdd false 1
let adds_overflow_bv = arith_op_overflow_bv integerAdd true 1
let sub_overflow_bv = arith_op_overflow_bv integerMinus false 1
let subs_overflow_bv = arith_op_overflow_bv integerMinus true 1
let mult_overflow_bv = arith_op_overflow_bv integerMult false 2
let mults_overflow_bv = arith_op_overflow_bv integerMult true 2

val arith_op_overflow_bv_bit : forall 'a. Bitvector 'a =>
  (integer -> integer -> integer) -> bool -> integer -> 'a -> bitU -> (list bitU * bitU * bitU)
let arith_op_overflow_bv_bit op sign size l r_bit =
  let act_size = length l * size in
  match (int_of_bv sign l, int_of_bv false l, r_bit = BU) with
    | (Just l', Just l_u, false) ->
       let (n, nu, changed) = match r_bit with
         | B1 -> (op l' 1, op l_u 1, true)
         | B0 -> (l', l_u, false)
         | BU -> (* unreachable due to check above *)
            failwith "arith_op_overflow_bv_bit applied to undefined bit"
         end in
       let correct_size = of_int act_size n in
       let one_larger = bits_of_int (act_size + 1) nu in
       let overflow =
         if changed
         then
           if n <= get_max_representable_in sign act_size && n >= get_min_representable_in sign act_size
           then B0 else B1
         else B0 in
       (correct_size, overflow, most_significant one_larger)
    | (_, _, _) ->
       (repeat [BU] act_size, BU, BU)
  end

let add_overflow_bv_bit = arith_op_overflow_bv_bit integerAdd false 1
let adds_overflow_bv_bit = arith_op_overflow_bv_bit integerAdd true 1
let sub_overflow_bv_bit = arith_op_overflow_bv_bit integerMinus false 1
let subs_overflow_bv_bit = arith_op_overflow_bv_bit integerMinus true 1*)

val _ = Hol_datatype `
 shift = LL_shift | RR_shift | RR_shift_arith | LL_rot | RR_rot`;


val _ = Define `
 ((invert_shift:shift -> shift)= 
  (\x .  (case x of
               LL_shift => RR_shift
           | RR_shift => LL_shift
           | RR_shift_arith => LL_shift
           | LL_rot => RR_rot
           | RR_rot => LL_rot
         )))`;


(*val shift_op_bv : forall 'a. Bitvector 'a => shift -> 'a -> integer -> list bitU*)
val _ = Define `
 ((shift_op_bv:'a Bitvector_class -> shift -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a op v n=
   (let v = (dict_Sail2_values_Bitvector_a.bits_of_method v) in
  if n =( 0 : int) then v else
  let (op, n) = (if n >( 0 : int) then (op, n) else (invert_shift op, ~ n)) in
  (case op of
    LL_shift =>
     subrange_list T v n (int_of_num (LENGTH v) -( 1 : int)) ++ repeat [B0] n
  | RR_shift =>
     repeat [B0] n ++ subrange_list T v(( 0 : int)) ((int_of_num (LENGTH v) - n) -( 1 : int))
  | RR_shift_arith =>
     repeat [most_significant 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) v] n ++ subrange_list T v(( 0 : int)) ((int_of_num (LENGTH v) - n) -( 1 : int))
  | LL_rot =>
     subrange_list T v n (int_of_num (LENGTH v) -( 1 : int)) ++ subrange_list T v(( 0 : int)) (n -( 1 : int))
  | RR_rot =>
     subrange_list F v(( 0 : int)) (n -( 1 : int)) ++ subrange_list F v n (int_of_num (LENGTH v) -( 1 : int))
  )))`;


val _ = Define `
 ((shiftl_bv:'a Bitvector_class -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a=  (shift_op_bv 
  dict_Sail2_values_Bitvector_a LL_shift))`;
 (*"<<"*)
val _ = Define `
 ((shiftr_bv:'a Bitvector_class -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a=  (shift_op_bv 
  dict_Sail2_values_Bitvector_a RR_shift))`;
 (*">>"*)
val _ = Define `
 ((arith_shiftr_bv:'a Bitvector_class -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a=  (shift_op_bv 
  dict_Sail2_values_Bitvector_a RR_shift_arith))`;

val _ = Define `
 ((rotl_bv:'a Bitvector_class -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a=  (shift_op_bv 
  dict_Sail2_values_Bitvector_a LL_rot))`;
 (*"<<<"*)
val _ = Define `
 ((rotr_bv:'a Bitvector_class -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a=  (shift_op_bv 
  dict_Sail2_values_Bitvector_a LL_rot))`;
 (*">>>"*)

val _ = Define `
 ((shiftl_mword:'a words$word -> int -> 'a words$word) w n=  (words$word_lsl w (nat_of_int n)))`;

val _ = Define `
 ((shiftr_mword:'a words$word -> int -> 'a words$word) w n=  (words$word_lsr w (nat_of_int n)))`;

val _ = Define `
 ((arith_shiftr_mword:'a words$word -> int -> 'a words$word) w n=  (words$word_asr w (nat_of_int n)))`;

val _ = Define `
 ((rotl_mword:'a words$word -> int -> 'a words$word) w n=  (words$word_rol w (nat_of_int n)))`;

val _ = Define `
 ((rotr_mword:'a words$word -> int -> 'a words$word) w n=  (words$word_ror w (nat_of_int n)))`;


 val _ = Define `
 ((arith_op_no0:(int -> int -> int) -> int -> int ->(int)option) (op : int -> int -> int) l r=
   (if r =( 0 : int)
  then NONE
  else SOME (op l r)))`;


(*val arith_op_bv_no0 : forall 'a 'b. Bitvector 'a, Bitvector 'b =>
  (integer -> integer -> integer) -> bool -> integer -> 'a -> 'a -> maybe 'b*)
val _ = Define `
 ((arith_op_bv_no0:'a Bitvector_class -> 'b Bitvector_class ->(int -> int -> int) -> bool -> int -> 'a -> 'a -> 'b option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b op sign size1 l r=
   (OPTION_BIND (int_of_bv 
  dict_Sail2_values_Bitvector_a sign l) (\ l' . 
  OPTION_BIND (int_of_bv 
  dict_Sail2_values_Bitvector_a sign r) (\ r' . 
  if r' =( 0 : int) then NONE else SOME (
  dict_Sail2_values_Bitvector_b.of_int_method (dict_Sail2_values_Bitvector_a.length_method l * size1) (op l' r'))))))`;


val _ = Define `
 ((mod_bv:'a Bitvector_class -> 'b Bitvector_class -> 'b -> 'b -> 'a option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b=  (arith_op_bv_no0 
  dict_Sail2_values_Bitvector_b dict_Sail2_values_Bitvector_a tmod_int F(( 1 : int))))`;

val _ = Define `
 ((quot_bv:'a Bitvector_class -> 'b Bitvector_class -> 'b -> 'b -> 'a option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b=  (arith_op_bv_no0 
  dict_Sail2_values_Bitvector_b dict_Sail2_values_Bitvector_a tdiv_int F(( 1 : int))))`;

val _ = Define `
 ((quots_bv:'a Bitvector_class -> 'b Bitvector_class -> 'b -> 'b -> 'a option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b=  (arith_op_bv_no0 
  dict_Sail2_values_Bitvector_b dict_Sail2_values_Bitvector_a tdiv_int T(( 1 : int))))`;


val _ = Define `
 ((mod_mword:'a words$word -> 'a words$word -> 'a words$word)=  words$word_mod)`;

val _ = Define `
 ((quot_mword:'a words$word -> 'a words$word -> 'a words$word)=  words$word_div)`;

val _ = Define `
 ((quots_mword:'a words$word -> 'a words$word -> 'a words$word)=  words$word_quot)`;


val _ = Define `
 ((arith_op_bv_int_no0:'a Bitvector_class -> 'b Bitvector_class ->(int -> int -> int) -> bool -> int -> 'a -> int -> 'b option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b op sign size1 l r=
   (arith_op_bv_no0 dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b op sign size1 l (dict_Sail2_values_Bitvector_a.of_int_method (dict_Sail2_values_Bitvector_a.length_method l) r)))`;


val _ = Define `
 ((quot_bv_int:'a Bitvector_class -> 'b Bitvector_class -> 'b -> int -> 'a option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b=  (arith_op_bv_int_no0 
  dict_Sail2_values_Bitvector_b dict_Sail2_values_Bitvector_a tdiv_int F(( 1 : int))))`;

val _ = Define `
 ((mod_bv_int:'a Bitvector_class -> 'b Bitvector_class -> 'b -> int -> 'a option)dict_Sail2_values_Bitvector_a dict_Sail2_values_Bitvector_b=  (arith_op_bv_int_no0 
  dict_Sail2_values_Bitvector_b dict_Sail2_values_Bitvector_a tmod_int F(( 1 : int))))`;


val _ = Define `
 ((mod_mword_int:'a words$word -> int -> 'a words$word) l r=  (words$word_mod l (integer_word$i2w r)))`;

val _ = Define `
 ((quot_mword_int:'a words$word -> int -> 'a words$word) l r=  (words$word_div l (integer_word$i2w r)))`;

val _ = Define `
 ((quots_mword_int:'a words$word -> int -> 'a words$word) l r=  (words$word_quot l (integer_word$i2w r)))`;


val _ = Define `
 ((replicate_bits_bv:'a Bitvector_class -> 'a -> int ->(bitU)list)dict_Sail2_values_Bitvector_a v count1=  (repeat (
  dict_Sail2_values_Bitvector_a.bits_of_method v) count1))`;

val _ = Define `
 ((duplicate_bit_bv:'a BitU_class -> 'a -> int ->(bitU)list)dict_Sail2_values_BitU_a bit len=  (replicate_bits_bv 
  (instance_Sail2_values_Bitvector_list_dict dict_Sail2_values_BitU_a) [bit] len))`;


(*val eq_bv : forall 'a. Bitvector 'a => 'a -> 'a -> bool*)
val _ = Define `
 ((eq_bv:'a Bitvector_class -> 'a -> 'a -> bool)dict_Sail2_values_Bitvector_a l r=  (
  dict_Sail2_values_Bitvector_a.bits_of_method l = dict_Sail2_values_Bitvector_a.bits_of_method r))`;


(*val neq_bv : forall 'a. Bitvector 'a => 'a -> 'a -> bool*)
val _ = Define `
 ((neq_bv:'a Bitvector_class -> 'a -> 'a -> bool)dict_Sail2_values_Bitvector_a l r=  (~ (eq_bv 
  dict_Sail2_values_Bitvector_a l r)))`;


(*val get_slice_int_bv : forall 'a. Bitvector 'a => integer -> integer -> integer -> 'a*)
val _ = Define `
 ((get_slice_int_bv:'a Bitvector_class -> int -> int -> int -> 'a)dict_Sail2_values_Bitvector_a len n lo=
   (let hi = ((lo + len) -( 1 : int)) in
  let bs = (bools_of_int (hi +( 1 : int)) n) in  
  dict_Sail2_values_Bitvector_a.of_bools_method (subrange_list F bs hi lo)))`;


(*val set_slice_int_bv : forall 'a. Bitvector 'a => integer -> integer -> integer -> 'a -> integer*)
val _ = Define `
 ((set_slice_int_bv:'a Bitvector_class -> int -> int -> int -> 'a -> int)dict_Sail2_values_Bitvector_a len n lo v=
   (let hi = ((lo + len) -( 1 : int)) in
  let bs = (bits_of_int (hi +( 1 : int)) n) in
  maybe_failwith (signed_of_bits (update_subrange_list F bs hi lo (
  dict_Sail2_values_Bitvector_a.bits_of_method v)))))`;

val _ = export_theory()

