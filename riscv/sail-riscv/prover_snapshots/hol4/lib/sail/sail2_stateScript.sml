(*Generated by Lem from ../../src/gen_lib/sail2_state.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_valuesTheory sail2_state_monadTheory;

val _ = numLib.prefer_num();



val _ = new_theory "sail2_state"

(*open import Pervasives_extra*)
(*open import Sail2_values*)
(*open import Sail2_state_monad*)
(*open import {isabelle} `Sail2_state_monad_lemmas`*)

(*val iterS_aux : forall 'rv 'a 'e. integer -> (integer -> 'a -> monadS 'rv unit 'e) -> list 'a -> monadS 'rv unit 'e*)
 val iterS_aux_defn = Hol_defn "iterS_aux" `
 ((iterS_aux:int ->(int -> 'a -> 'rv sequential_state ->(((unit),'e)result#'rv sequential_state)set) -> 'a list -> 'rv sequential_state ->(((unit),'e)result#'rv sequential_state)set) i f xs=  ((case xs of
    x :: xs => seqS (f i x) (iterS_aux (i +( 1 : int)) f xs)
  | [] => returnS () 
  )))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn iterS_aux_defn;

(*val iteriS : forall 'rv 'a 'e. (integer -> 'a -> monadS 'rv unit 'e) -> list 'a -> monadS 'rv unit 'e*)
val _ = Define `
 ((iteriS:(int -> 'a ->('rv,(unit),'e)monadS) -> 'a list -> 'rv sequential_state ->(((unit),'e)result#'rv sequential_state)set) f xs=  (iterS_aux(( 0 : int)) f xs))`;


(*val iterS : forall 'rv 'a 'e. ('a -> monadS 'rv unit 'e) -> list 'a -> monadS 'rv unit 'e*)
val _ = Define `
 ((iterS:('a -> 'rv sequential_state ->(((unit),'e)result#'rv sequential_state)set) -> 'a list -> 'rv sequential_state ->(((unit),'e)result#'rv sequential_state)set) f xs=  (iteriS (\i x .  
  (case (i ,x ) of ( _ , x ) => f x )) xs))`;


(*val foreachS : forall 'a 'rv 'vars 'e.
  list 'a -> 'vars -> ('a -> 'vars -> monadS 'rv 'vars 'e) -> monadS 'rv 'vars 'e*)
 val foreachS_defn = Hol_defn "foreachS" `
 ((foreachS:'a list -> 'vars ->('a -> 'vars -> 'rv sequential_state ->(('vars,'e)result#'rv sequential_state)set) -> 'rv sequential_state ->(('vars,'e)result#'rv sequential_state)set) xs vars body=  ((case xs of
    [] => returnS vars
  | x :: xs => bindS
     (body x vars) (\ vars . 
     foreachS xs vars body)
)))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn foreachS_defn;

(*val genlistS : forall 'a 'rv 'e. (nat -> monadS 'rv 'a 'e) -> nat -> monadS 'rv (list 'a) 'e*)
val _ = Define `
 ((genlistS:(num -> 'rv sequential_state ->(('a,'e)result#'rv sequential_state)set) -> num -> 'rv sequential_state ->((('a list),'e)result#'rv sequential_state)set) f n=
   (let indices = (GENLIST (\ n .  n) n) in
  foreachS indices [] (\ n xs .  ( bindS(f n) (\ x .  returnS (xs ++ [x]))))))`;


(*val and_boolS : forall 'rv 'e. monadS 'rv bool 'e -> monadS 'rv bool 'e -> monadS 'rv bool 'e*)
val _ = Define `
 ((and_boolS:('rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) ->('rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) -> 'rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) l r=  (bindS l (\ l .  if l then r else returnS F)))`;


(*val or_boolS : forall 'rv 'e. monadS 'rv bool 'e -> monadS 'rv bool 'e -> monadS 'rv bool 'e*)
val _ = Define `
 ((or_boolS:('rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) ->('rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) -> 'rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) l r=  (bindS l (\ l .  if l then returnS T else r)))`;


(*val bool_of_bitU_fail : forall 'rv 'e. bitU -> monadS 'rv bool 'e*)
val _ = Define `
 ((bool_of_bitU_fail:bitU -> 'rv sequential_state ->(((bool),'e)result#'rv sequential_state)set)= 
  (\x .  (case x of
               B0 => returnS F
           | B1 => returnS T
           | BU => failS "bool_of_bitU"
         )))`;


(*val bool_of_bitU_nondetS : forall 'rv 'e. bitU -> monadS 'rv bool 'e*)
val _ = Define `
 ((bool_of_bitU_nondetS:bitU -> 'rv sequential_state ->(((bool),'e)result#'rv sequential_state)set)= 
  (\x .  (case x of
               B0 => returnS F
           | B1 => returnS T
           | BU => undefined_boolS () 
         )))`;


(*val bools_of_bits_nondetS : forall 'rv 'e. list bitU -> monadS 'rv (list bool) 'e*)
val _ = Define `
 ((bools_of_bits_nondetS:(bitU)list -> 'rv sequential_state ->((((bool)list),'e)result#'rv sequential_state)set) bits=
   (foreachS bits []
    (\ b bools .  bindS
      (bool_of_bitU_nondetS b) (\ b . 
      returnS (bools ++ [b])))))`;


(*val of_bits_nondetS : forall 'rv 'a 'e. Bitvector 'a => list bitU -> monadS 'rv 'a 'e*)
val _ = Define `
 ((of_bits_nondetS:'a Bitvector_class ->(bitU)list ->('rv,'a,'e)monadS)dict_Sail2_values_Bitvector_a bits=  (bindS
  (bools_of_bits_nondetS bits) (\ bs . 
  returnS (dict_Sail2_values_Bitvector_a.of_bools_method bs))))`;


(*val of_bits_failS : forall 'rv 'a 'e. Bitvector 'a => list bitU -> monadS 'rv 'a 'e*)
val _ = Define `
 ((of_bits_failS:'a Bitvector_class ->(bitU)list ->('rv,'a,'e)monadS)dict_Sail2_values_Bitvector_a bits=  (maybe_failS "of_bits" (
  dict_Sail2_values_Bitvector_a.of_bits_method bits)))`;


(*val mword_nondetS : forall 'rv 'a 'e. Size 'a => unit -> monadS 'rv (mword 'a) 'e*)
val _ = Define `
 ((mword_nondetS:unit -> 'rv sequential_state ->((('a words$word),'e)result#'rv sequential_state)set) () =  (bindS
  (bools_of_bits_nondetS (repeat [BU] (int_of_num (dimindex (the_value : 'a itself))))) (\ bs . 
  returnS (bitstring$v2w bs))))`;



(*val whileS : forall 'rv 'vars 'e. 'vars -> ('vars -> monadS 'rv bool 'e) ->
                ('vars -> monadS 'rv 'vars 'e) -> monadS 'rv 'vars 'e*)
 val whileS_defn = Hol_defn "whileS" `
 ((whileS:'vars ->('vars -> 'rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) ->('vars -> 'rv sequential_state ->(('vars,'e)result#'rv sequential_state)set) -> 'rv sequential_state ->(('vars,'e)result#'rv sequential_state)set) vars cond body s=
   (( bindS(cond vars) (\ cond_val s' . 
  if cond_val then
    ( bindS(body vars) (\ vars s'' .  whileS vars cond body s'')) s'
  else returnS vars s')) s))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn whileS_defn;

(*val untilS : forall 'rv 'vars 'e. 'vars -> ('vars -> monadS 'rv bool 'e) ->
                ('vars -> monadS 'rv 'vars 'e) -> monadS 'rv 'vars 'e*)
 val untilS_defn = Hol_defn "untilS" `
 ((untilS:'vars ->('vars -> 'rv sequential_state ->(((bool),'e)result#'rv sequential_state)set) ->('vars -> 'rv sequential_state ->(('vars,'e)result#'rv sequential_state)set) -> 'rv sequential_state ->(('vars,'e)result#'rv sequential_state)set) vars cond body s=
   (( bindS(body vars) (\ vars s' . 
  ( bindS(cond vars) (\ cond_val s'' . 
  if cond_val then returnS vars s'' else untilS vars cond body s'')) s')) s))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn untilS_defn;

(*val choose_boolsS : forall 'rv 'e. nat -> monadS 'rv (list bool) 'e*)
val _ = Define `
 ((choose_boolsS:num -> 'rv sequential_state ->((((bool)list),'e)result#'rv sequential_state)set) n=  (genlistS (\n .  
  (case (n ) of ( _ ) => choose_boolS ()  )) n))`;


(* TODO: Replace by chooseS and prove equivalence to prompt monad version *)
(*val internal_pickS : forall 'rv 'a 'e. list 'a -> monadS 'rv 'a 'e*)
val _ = Define `
 ((internal_pickS:'a list -> 'rv sequential_state ->(('a,'e)result#'rv sequential_state)set) xs=  (bindS
  (
  (* Use sufficiently many nondeterministically chosen bits and convert into an
     index into the list *)choose_boolsS (LENGTH xs)) (\ bs . 
  let idx = ((((nat_of_bools bs):num)) MOD LENGTH xs) in
  (case list_index xs idx of
      SOME x => returnS x
    | NONE => failS "choose internal_pick"
  ))))`;

val _ = export_theory()

