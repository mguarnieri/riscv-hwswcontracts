(*Generated by Lem from ../../src/gen_lib/sail2_string.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasivesTheory lem_listTheory sail2_valuesTheory sail2_operatorsTheory lem_list_extraTheory lem_stringTheory lem_string_extraTheory;

val _ = numLib.prefer_num();



val _ = new_theory "sail2_string"

(*open import Pervasives*)
(*open import List*)
(*open import List_extra*)
(*open import String*)
(*open import String_extra*)

(*open import Sail2_operators*)
(*open import Sail2_values*)

(*val string_sub : string -> ii -> ii -> string*)
val _ = Define `
 ((string_sub:string -> int -> int -> string) str start len=
   (IMPLODE (TAKE (Num (ABS (I len))) (DROP (Num (ABS (I start))) (EXPLODE str)))))`;


(*val string_startswith : string -> string -> bool*)
val _ = Define `
 ((string_startswith:string -> string -> bool) str1 str2=
   (let prefix = (string_sub str1(( 0 : int)) (int_of_num (STRLEN str2))) in
  (prefix = str2)))`;


(*val string_drop : string -> ii -> string*)
val _ = Define `
 ((string_drop:string -> int -> string) str n=
   (IMPLODE (DROP (Num (ABS (I n))) (EXPLODE str))))`;


(*val string_take : string -> ii -> string*)
val _ = Define `
 ((string_take:string -> int -> string) str n=
   (IMPLODE (TAKE (Num (ABS (I n))) (EXPLODE str))))`;


(*val string_length : string -> ii*)
val _ = Define `
 ((string_length:string -> int) s=  (int_of_num (STRLEN s)))`;


val _ = Define `
 ((string_append:string -> string -> string)=  STRCAT)`;


(***********************************************
 * Begin stuff that should be in Lem Num_extra *
 ***********************************************)

(*val maybeIntegerOfString : string -> maybe integer*)
val _ = Define `
 ((maybeIntegerOfString:string ->(int)option) _=  NONE)`;


(***********************************************
 * end stuff that should be in Lem Num_extra   *
 ***********************************************)

 val maybe_int_of_prefix_defn = Hol_defn "maybe_int_of_prefix" `
 ((maybe_int_of_prefix:string ->(int#int)option) s=
   ((case s of
    "" => NONE
  | str =>
     let len = (string_length str) in
     (case maybeIntegerOfString str of
       SOME n => SOME (n, len)
     | NONE => maybe_int_of_prefix (string_sub str(( 0 : int)) (len -( 1 : int)))
     )
  )))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn maybe_int_of_prefix_defn;

val _ = Define `
 ((maybe_int_of_string:string ->(int)option)=  maybeIntegerOfString)`;


(*val n_leading_spaces : string -> ii*)
 val n_leading_spaces_defn = Hol_defn "n_leading_spaces" `
 ((n_leading_spaces:string -> int) s=
   (let len = (string_length s) in
  if len =( 0 : int) then( 0 : int) else
    if len =( 1 : int) then
      (case s of
           " " =>( 1 : int)
         | _ =>( 0 : int)
      )
    else
           (* Isabelle generation for pattern matching on characters
              is currently broken, so use an if-expression *)
           if SUB (s, (( 0 : num))) = #" "
           then( 1 : int) + (n_leading_spaces (string_sub s(( 1 : int)) (len -( 1 : int))))
           else( 0 : int)))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) Defn.save_defn n_leading_spaces_defn;
  (* end *)

val _ = Define `
 ((opt_spc_matches_prefix:string ->(unit#int)option) s=
   (SOME (() , n_leading_spaces s)))`;


val _ = Define `
 ((spc_matches_prefix:string ->(unit#int)option) s=
   (let n = (n_leading_spaces s) in
  (* match n with *)
(* | 0 -> Nothing *)
  if n =( 0 : int) then NONE else
  (* | n -> *) SOME (() , n)))`;

  (* end *)

(* Python:
f = """let hex_bits_{0}_matches_prefix s =
  match maybe_int_of_prefix s with
  | Nothing -> Nothing
  | Just (n, len) ->
    if 0 <= n && n < (2 ** {0}) then
      Just ((of_int {0} n, len))
    else
      Nothing
  end
"""

for i in list(range(1, 34)) + [48, 64]:
  print(f.format(i))
*)
val _ = Define `
 ((hex_bits_1_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 1 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 1 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_2_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 2 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 2 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_3_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 3 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 3 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_4_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 4 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 4 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_5_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 5 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 5 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_6_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 6 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 6 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_7_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 7 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 7 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_8_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 8 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 8 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_9_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 9 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 9 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_10_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 10 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 10 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_11_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 11 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 11 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_12_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 12 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 12 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_13_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 13 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 13 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_14_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 14 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 14 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_15_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 15 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 15 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_16_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 16 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 16 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_17_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 17 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 17 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_18_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 18 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 18 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_19_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 19 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 19 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_20_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 20 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 20 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_21_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 21 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 21 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_22_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 22 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 22 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_23_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 23 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 23 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_24_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 24 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 24 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_25_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 25 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 25 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_26_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 26 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 26 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_27_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 27 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 27 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_28_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 28 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 28 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_29_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 29 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 29 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_30_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 30 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 30 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_31_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 31 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 31 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_32_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 32 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 32 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_33_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 33 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 33 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_48_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 48 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 48 : int)) n, len))
    else
      NONE
  )))`;


val _ = Define `
 ((hex_bits_64_matches_prefix:'a Bitvector_class -> string ->('a#int)option)dict_Sail2_values_Bitvector_a s=
   ((case maybe_int_of_prefix s of
    NONE => NONE
  | SOME (n, len) =>
    if(( 0 : int) <= n) /\ (n < (( 2 : int) **( 64 : num))) then
      SOME ((dict_Sail2_values_Bitvector_a.of_int_method(( 64 : int)) n, len))
    else
      NONE
  )))`;

val _ = export_theory()

