(*Generated by Sail from riscv.*)
Require Import Sail.Base.
Require Import Sail.Real.
Require Import riscv_types.
Require Import mem_metadata.
Require Import riscv_extras.
Import ListNotations.
Open Scope string.
Open Scope bool.
Open Scope Z.


Definition is_none {a : Type} (opt : option a) : bool :=
   match opt with | Some _ => false | None => true end.

Definition is_some {a : Type} (opt : option a) : bool :=
   match opt with | Some _ => true | None => false end.

Definition eq_unit (_ : unit) (_ : unit) : {_bool : bool & ArithFact (_bool)} := build_ex (true).

Definition neq_int (x : Z) (y : Z) : {_bool : bool & ArithFact (Bool.eqb (negb (x =? y)) _bool)} :=
   build_ex (negb (Z.eqb x y)).

Definition neq_bool (x : bool) (y : bool) : bool := negb (Bool.eqb x y).

Definition __id (x : Z) : {_retval : Z & ArithFact (_retval =? x)} := build_ex (x).

Definition fdiv_int (n : Z) (m : Z) : Z :=
   if sumbool_of_bool (andb (Z.ltb n 0) (Z.gtb m 0)) then Z.sub (Z.quot (Z.add n 1) m) 1
   else if sumbool_of_bool (andb (Z.gtb n 0) (Z.ltb m 0)) then Z.sub (Z.quot (Z.sub n 1) m) 1
   else Z.quot n m.

Definition fmod_int (n : Z) (m : Z) : Z := Z.sub n (Z.mul m (fdiv_int n m)).

Definition concat_str_bits {n : Z} (str : string) (x : mword n) : string :=
   String.append str (string_of_bits x).

Definition concat_str_dec (str : string) (x : Z) : string := String.append str (dec_str x).



Definition sail_mask {v0 : Z} (len : Z) (v : mword v0) `{ArithFact ((len >=? 0) && (v0 >=? 0))}
: mword len :=
   if sumbool_of_bool (Z.leb len (length_mword v)) then vector_truncate v len else zero_extend v len.

Definition sail_ones (n : Z) `{ArithFact (n >=? 0)} : mword n := not_vec (zeros n).

Definition slice_mask (n : Z) (i : Z) (l : Z) `{ArithFact (n >=? 0)} : mword n :=
   if sumbool_of_bool (Z.geb l n) then shiftl (sail_ones n) i
   else
     let one : bits n := sail_mask n ('b"1"  : bits 1) in
     shiftl (sub_vec (shiftl one l) one) i.

Definition read_kind_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 11))} : read_kind :=
   let l__297 := arg_ in
   if sumbool_of_bool (Z.eqb l__297 0) then Read_plain
   else if sumbool_of_bool (Z.eqb l__297 1) then Read_reserve
   else if sumbool_of_bool (Z.eqb l__297 2) then Read_acquire
   else if sumbool_of_bool (Z.eqb l__297 3) then Read_exclusive
   else if sumbool_of_bool (Z.eqb l__297 4) then Read_exclusive_acquire
   else if sumbool_of_bool (Z.eqb l__297 5) then Read_stream
   else if sumbool_of_bool (Z.eqb l__297 6) then Read_RISCV_acquire
   else if sumbool_of_bool (Z.eqb l__297 7) then Read_RISCV_strong_acquire
   else if sumbool_of_bool (Z.eqb l__297 8) then Read_RISCV_reserved
   else if sumbool_of_bool (Z.eqb l__297 9) then Read_RISCV_reserved_acquire
   else if sumbool_of_bool (Z.eqb l__297 10) then Read_RISCV_reserved_strong_acquire
   else Read_X86_locked.

Definition num_of_read_kind (arg_ : read_kind) : {e : Z & ArithFact ((0 <=? e) && (e <=? 11))} :=
   build_ex (
      match arg_ with
      | Read_plain => 0
      | Read_reserve => 1
      | Read_acquire => 2
      | Read_exclusive => 3
      | Read_exclusive_acquire => 4
      | Read_stream => 5
      | Read_RISCV_acquire => 6
      | Read_RISCV_strong_acquire => 7
      | Read_RISCV_reserved => 8
      | Read_RISCV_reserved_acquire => 9
      | Read_RISCV_reserved_strong_acquire => 10
      | Read_X86_locked => 11
      end
   ).

Definition write_kind_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 10))} : write_kind :=
   let l__287 := arg_ in
   if sumbool_of_bool (Z.eqb l__287 0) then Write_plain
   else if sumbool_of_bool (Z.eqb l__287 1) then Write_conditional
   else if sumbool_of_bool (Z.eqb l__287 2) then Write_release
   else if sumbool_of_bool (Z.eqb l__287 3) then Write_exclusive
   else if sumbool_of_bool (Z.eqb l__287 4) then Write_exclusive_release
   else if sumbool_of_bool (Z.eqb l__287 5) then Write_RISCV_release
   else if sumbool_of_bool (Z.eqb l__287 6) then Write_RISCV_strong_release
   else if sumbool_of_bool (Z.eqb l__287 7) then Write_RISCV_conditional
   else if sumbool_of_bool (Z.eqb l__287 8) then Write_RISCV_conditional_release
   else if sumbool_of_bool (Z.eqb l__287 9) then Write_RISCV_conditional_strong_release
   else Write_X86_locked.

Definition num_of_write_kind (arg_ : write_kind) : {e : Z & ArithFact ((0 <=? e) && (e <=? 10))} :=
   build_ex (
      match arg_ with
      | Write_plain => 0
      | Write_conditional => 1
      | Write_release => 2
      | Write_exclusive => 3
      | Write_exclusive_release => 4
      | Write_RISCV_release => 5
      | Write_RISCV_strong_release => 6
      | Write_RISCV_conditional => 7
      | Write_RISCV_conditional_release => 8
      | Write_RISCV_conditional_strong_release => 9
      | Write_X86_locked => 10
      end
   ).

Definition a64_barrier_domain_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))}
: a64_barrier_domain :=
   let l__284 := arg_ in
   if sumbool_of_bool (Z.eqb l__284 0) then A64_FullShare
   else if sumbool_of_bool (Z.eqb l__284 1) then A64_InnerShare
   else if sumbool_of_bool (Z.eqb l__284 2) then A64_OuterShare
   else A64_NonShare.

Definition num_of_a64_barrier_domain (arg_ : a64_barrier_domain)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (
      match arg_ with
      | A64_FullShare => 0
      | A64_InnerShare => 1
      | A64_OuterShare => 2
      | A64_NonShare => 3
      end
   ).

Definition a64_barrier_type_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))}
: a64_barrier_type :=
   let l__282 := arg_ in
   if sumbool_of_bool (Z.eqb l__282 0) then A64_barrier_all
   else if sumbool_of_bool (Z.eqb l__282 1) then A64_barrier_LD
   else A64_barrier_ST.

Definition num_of_a64_barrier_type (arg_ : a64_barrier_type)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | A64_barrier_all => 0 | A64_barrier_LD => 1 | A64_barrier_ST => 2 end).

Definition trans_kind_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : trans_kind :=
   let l__280 := arg_ in
   if sumbool_of_bool (Z.eqb l__280 0) then Transaction_start
   else if sumbool_of_bool (Z.eqb l__280 1) then Transaction_commit
   else Transaction_abort.

Definition num_of_trans_kind (arg_ : trans_kind) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (
      match arg_ with
      | Transaction_start => 0
      | Transaction_commit => 1
      | Transaction_abort => 2
      end
   ).

Definition cache_op_kind_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 10))}
: cache_op_kind :=
   let l__270 := arg_ in
   if sumbool_of_bool (Z.eqb l__270 0) then Cache_op_D_IVAC
   else if sumbool_of_bool (Z.eqb l__270 1) then Cache_op_D_ISW
   else if sumbool_of_bool (Z.eqb l__270 2) then Cache_op_D_CSW
   else if sumbool_of_bool (Z.eqb l__270 3) then Cache_op_D_CISW
   else if sumbool_of_bool (Z.eqb l__270 4) then Cache_op_D_ZVA
   else if sumbool_of_bool (Z.eqb l__270 5) then Cache_op_D_CVAC
   else if sumbool_of_bool (Z.eqb l__270 6) then Cache_op_D_CVAU
   else if sumbool_of_bool (Z.eqb l__270 7) then Cache_op_D_CIVAC
   else if sumbool_of_bool (Z.eqb l__270 8) then Cache_op_I_IALLUIS
   else if sumbool_of_bool (Z.eqb l__270 9) then Cache_op_I_IALLU
   else Cache_op_I_IVAU.

Definition num_of_cache_op_kind (arg_ : cache_op_kind)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 10))} :=
   build_ex (
      match arg_ with
      | Cache_op_D_IVAC => 0
      | Cache_op_D_ISW => 1
      | Cache_op_D_CSW => 2
      | Cache_op_D_CISW => 3
      | Cache_op_D_ZVA => 4
      | Cache_op_D_CVAC => 5
      | Cache_op_D_CVAU => 6
      | Cache_op_D_CIVAC => 7
      | Cache_op_I_IALLUIS => 8
      | Cache_op_I_IALLU => 9
      | Cache_op_I_IVAU => 10
      end
   ).

Definition not_bit (b : bitU) : bitU := if eq_bit b B1 then B0 else B1.

Definition neq_vec {n : Z} (x : mword n) (y : mword n) : bool := negb (eq_vec x y).



Definition string_of_bit (b : bitU) : M (string) :=
   (match b with | B0 => returnm "0b0" | B1 => returnm "0b1" | _ => exit tt  : M (string) end)
    : M (string).

Definition get_config_print_instr '(tt : unit) : bool := false.

Definition get_config_print_reg '(tt : unit) : bool := false.

Definition get_config_print_mem '(tt : unit) : bool := false.

Definition get_config_print_platform '(tt : unit) : bool := false.

Definition EXTS {n : Z} (m : Z) (v : mword n) `{ArithFact (m >=? n)} : mword m := sign_extend v m.

Definition EXTZ {n : Z} (m : Z) (v : mword n) `{ArithFact (m >=? n)} : mword m := zero_extend v m.

Definition zeros_implicit (n : Z) `{ArithFact (n >=? 0)} : mword n := zeros n.

Definition ones (n : Z) `{ArithFact (n >=? 0)} : mword n := sail_ones n.

Definition bool_to_bits (x : bool) : mword 1 :=
   if sumbool_of_bool x then 'b"1"  : mword 1 else 'b"0"  : mword 1.

Definition bit_to_bool (b : bitU) : M (bool) :=
   (match b with | B1 => returnm true | B0 => returnm false | _ => exit tt  : M (bool) end)
    : M (bool).

Definition to_bits (l : Z) (n : Z) `{ArithFact (l >=? 0)} : mword l := get_slice_int l n 0.

Definition zopz0zI_s {n : Z} (x : mword n) (y : mword n) `{ArithFact (n >? 0)} : bool :=
   Z.ltb (projT1 (sint x)) (projT1 (sint y)).

Definition zopz0zKzJ_s {n : Z} (x : mword n) (y : mword n) `{ArithFact (n >? 0)} : bool :=
   Z.geb (projT1 (sint x)) (projT1 (sint y)).

Definition zopz0zI_u {n : Z} (x : mword n) (y : mword n) : bool :=
   Z.ltb (projT1 (uint x)) (projT1 (uint y)).

Definition zopz0zKzJ_u {n : Z} (x : mword n) (y : mword n) : bool :=
   Z.geb (projT1 (uint x)) (projT1 (uint y)).

Definition zopz0zIzJ_u {n : Z} (x : mword n) (y : mword n) : bool :=
   Z.leb (projT1 (uint x)) (projT1 (uint y)).

Definition shift_right_arith64 (v : mword 64) (shift : mword 6) : mword 64 :=
   let v128 : bits 128 := EXTS 128 v in
   subrange_vec_dec (shift_bits_right v128 shift) 63 0.

Definition shift_right_arith32 (v : mword 32) (shift : mword 5) : mword 32 :=
   let v64 : bits 64 := EXTS 64 v in
   subrange_vec_dec (shift_bits_right v64 shift) 31 0.

Axiom spc_forwards_matches : forall  (_ : unit) , bool.

Axiom spc_backwards_matches : forall  (_ : string) , bool.

Axiom opt_spc_forwards_matches : forall  (_ : unit) , bool.

Axiom opt_spc_backwards_matches : forall  (_ : string) , bool.

Axiom def_spc_forwards_matches : forall  (_ : unit) , bool.

Axiom def_spc_backwards_matches : forall  (_ : string) , bool.

Axiom hex_bits_forwards : forall {n : Z} (_ : (Z * mword n)) , string.

Axiom hex_bits_backwards : forall {n : Z} (_ : string) , (Z * mword n).

Axiom hex_bits_forwards_matches : forall {n : Z} (_ : (Z * mword n)) , bool.

Axiom hex_bits_backwards_matches : forall  (_ : string) , bool.

Axiom hex_bits_matches_prefix : forall
{n : Z}
(_ : string)
,
option (((Z * mword n) * {n : Z & ArithFact (n >=? 0)})).

Fixpoint _rec_n_leading_spaces (s : string) (_reclimit : Z) (_acc : Acc (Zwf 0) _reclimit)
{struct _acc} : M ({n : Z & ArithFact (n >=? 0)}).
exact (
   assert_exp' (Z.geb _reclimit 0) "recursion limit reached" >>= fun _ =>
   let p0_ := s in
   (if generic_eq p0_ "" then returnm (build_ex 0)
    else
      let p0_ := string_take s 1 in
      (if generic_eq p0_ " " then
         (_rec_n_leading_spaces (string_drop s 1) (Z.sub _reclimit 1) (_limit_reduces _acc)) >>= fun '(existT _ w__0 _ : {n : Z & ArithFact (n >=?
           0)}) =>
         returnm (build_ex (Z.add 1 w__0))
       else returnm (build_ex 0))
       : M ({n : Z & ArithFact (n >=? 0)}))
    : M ({n : Z & ArithFact (n >=? 0)})
).
Defined.


Definition n_leading_spaces (s : string) : M ({n : Z & ArithFact (n >=? 0)}) :=
   (_rec_n_leading_spaces s ((projT1 (string_length s))  : Z) (Zwf_guarded _))
    : M ({n : Z & ArithFact (n >=? 0)}).

Definition spc_forwards '(tt : unit) : string := " ".

Definition spc_backwards (s : string) : unit := tt.

Definition spc_matches_prefix (s : string) : M (option ((unit * {n : Z & ArithFact (n >=? 0)}))) :=
   (n_leading_spaces s) >>= fun '(existT _ n _) =>
   let l__269 := n in
   returnm (if sumbool_of_bool (Z.eqb l__269 0) then None else Some (tt, build_ex n)).

Definition opt_spc_forwards '(tt : unit) : string := "".

Definition opt_spc_backwards (s : string) : unit := tt.

Definition opt_spc_matches_prefix (s : string) : M (option ((unit * {n : Z & ArithFact (n >=? 0)}))) :=
   (n_leading_spaces s) >>= fun '(existT _ w__0 _ : {n : Z & ArithFact (n >=? 0)}) =>
   returnm (Some (tt, build_ex w__0)).

Definition def_spc_forwards '(tt : unit) : string := " ".

Definition def_spc_backwards (s : string) : unit := tt.

Definition def_spc_matches_prefix (s : string) : M (option ((unit * {n : Z & ArithFact (n >=? 0)}))) :=
   (opt_spc_matches_prefix s)  : M (option ((unit * {n : Z & ArithFact (n >=? 0)}))).

Definition hex_bits_1_forwards_matches (bv : mword 1) : bool := true.

Definition hex_bits_1_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_1_matches_prefix s) with
         | Some (g__348, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_1_backwards (s : string) : M (mword 1) :=
   (match (hex_bits_1_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 49:2 - 51:3" >>= fun _ =>
          exit tt)
        : M (mword 1)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 49:2 - 51:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 1).

Definition hex_bits_2_forwards_matches (bv : mword 2) : bool := true.

Definition hex_bits_2_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_2_matches_prefix s) with
         | Some (g__347, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_2_backwards (s : string) : M (mword 2) :=
   (match (hex_bits_2_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 68:2 - 70:3" >>= fun _ =>
          exit tt)
        : M (mword 2)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 68:2 - 70:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 2).

Definition hex_bits_3_forwards_matches (bv : mword 3) : bool := true.

Definition hex_bits_3_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_3_matches_prefix s) with
         | Some (g__346, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_3_backwards (s : string) : M (mword 3) :=
   (match (hex_bits_3_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 87:2 - 89:3" >>= fun _ =>
          exit tt)
        : M (mword 3)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 87:2 - 89:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 3).

Definition hex_bits_4_forwards_matches (bv : mword 4) : bool := true.

Definition hex_bits_4_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_4_matches_prefix s) with
         | Some (g__345, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_4_backwards (s : string) : M (mword 4) :=
   (match (hex_bits_4_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 106:2 - 108:3" >>= fun _ =>
          exit tt)
        : M (mword 4)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 106:2 - 108:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 4).

Definition hex_bits_5_forwards_matches (bv : mword 5) : bool := true.

Definition hex_bits_5_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_5_matches_prefix s) with
         | Some (g__344, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_5_backwards (s : string) : M (mword 5) :=
   (match (hex_bits_5_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 125:2 - 127:3" >>= fun _ =>
          exit tt)
        : M (mword 5)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 125:2 - 127:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 5).

Definition hex_bits_6_forwards_matches (bv : mword 6) : bool := true.

Definition hex_bits_6_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_6_matches_prefix s) with
         | Some (g__343, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_6_backwards (s : string) : M (mword 6) :=
   (match (hex_bits_6_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 144:2 - 146:3" >>= fun _ =>
          exit tt)
        : M (mword 6)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 144:2 - 146:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 6).

Definition hex_bits_7_forwards_matches (bv : mword 7) : bool := true.

Definition hex_bits_7_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_7_matches_prefix s) with
         | Some (g__342, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_7_backwards (s : string) : M (mword 7) :=
   (match (hex_bits_7_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 163:2 - 165:3" >>= fun _ =>
          exit tt)
        : M (mword 7)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 163:2 - 165:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 7).

Definition hex_bits_8_forwards_matches (bv : mword 8) : bool := true.

Definition hex_bits_8_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_8_matches_prefix s) with
         | Some (g__341, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_8_backwards (s : string) : M (mword 8) :=
   (match (hex_bits_8_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 182:2 - 184:3" >>= fun _ =>
          exit tt)
        : M (mword 8)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 182:2 - 184:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 8).

Definition hex_bits_9_forwards_matches (bv : mword 9) : bool := true.

Definition hex_bits_9_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_9_matches_prefix s) with
         | Some (g__340, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_9_backwards (s : string) : M (mword 9) :=
   (match (hex_bits_9_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 201:2 - 203:3" >>= fun _ =>
          exit tt)
        : M (mword 9)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 201:2 - 203:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 9).

Definition hex_bits_10_forwards_matches (bv : mword 10) : bool := true.

Definition hex_bits_10_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_10_matches_prefix s) with
         | Some (g__339, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_10_backwards (s : string) : M (mword 10) :=
   (match (hex_bits_10_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 220:2 - 222:3" >>= fun _ =>
          exit tt)
        : M (mword 10)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 220:2 - 222:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 10).

Definition hex_bits_11_forwards_matches (bv : mword 11) : bool := true.

Definition hex_bits_11_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_11_matches_prefix s) with
         | Some (g__338, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_11_backwards (s : string) : M (mword 11) :=
   (match (hex_bits_11_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 239:2 - 241:3" >>= fun _ =>
          exit tt)
        : M (mword 11)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 239:2 - 241:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 11).

Definition hex_bits_12_forwards_matches (bv : mword 12) : bool := true.

Definition hex_bits_12_matches_prefix (s : string)
: option ((mword 12 * {n : Z & ArithFact (n >=? 0)})) :=
   None.

Definition hex_bits_12_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_12_matches_prefix s) with
         | Some (g__337, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_12_backwards (s : string) : M (mword 12) :=
   (match (hex_bits_12_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 262:2 - 264:3" >>= fun _ =>
          exit tt)
        : M (mword 12)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 262:2 - 264:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 12).

Definition hex_bits_13_forwards_matches (bv : mword 13) : bool := true.

Definition hex_bits_13_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_13_matches_prefix s) with
         | Some (g__336, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_13_backwards (s : string) : M (mword 13) :=
   (match (hex_bits_13_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 281:2 - 283:3" >>= fun _ =>
          exit tt)
        : M (mword 13)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 281:2 - 283:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 13).

Definition hex_bits_14_forwards_matches (bv : mword 14) : bool := true.

Definition hex_bits_14_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_14_matches_prefix s) with
         | Some (g__335, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_14_backwards (s : string) : M (mword 14) :=
   (match (hex_bits_14_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 300:2 - 302:3" >>= fun _ =>
          exit tt)
        : M (mword 14)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 300:2 - 302:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 14).

Definition hex_bits_15_forwards_matches (bv : mword 15) : bool := true.

Definition hex_bits_15_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_15_matches_prefix s) with
         | Some (g__334, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_15_backwards (s : string) : M (mword 15) :=
   (match (hex_bits_15_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 319:2 - 321:3" >>= fun _ =>
          exit tt)
        : M (mword 15)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 319:2 - 321:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 15).

Definition hex_bits_16_forwards_matches (bv : mword 16) : bool := true.

Definition hex_bits_16_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_16_matches_prefix s) with
         | Some (g__333, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_16_backwards (s : string) : M (mword 16) :=
   (match (hex_bits_16_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 338:2 - 340:3" >>= fun _ =>
          exit tt)
        : M (mword 16)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 338:2 - 340:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 16).

Definition hex_bits_17_forwards_matches (bv : mword 17) : bool := true.

Definition hex_bits_17_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_17_matches_prefix s) with
         | Some (g__332, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_17_backwards (s : string) : M (mword 17) :=
   (match (hex_bits_17_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 357:2 - 359:3" >>= fun _ =>
          exit tt)
        : M (mword 17)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 357:2 - 359:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 17).

Definition hex_bits_18_forwards_matches (bv : mword 18) : bool := true.

Definition hex_bits_18_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_18_matches_prefix s) with
         | Some (g__331, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_18_backwards (s : string) : M (mword 18) :=
   (match (hex_bits_18_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 376:2 - 378:3" >>= fun _ =>
          exit tt)
        : M (mword 18)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 376:2 - 378:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 18).

Definition hex_bits_19_forwards_matches (bv : mword 19) : bool := true.

Definition hex_bits_19_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_19_matches_prefix s) with
         | Some (g__330, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_19_backwards (s : string) : M (mword 19) :=
   (match (hex_bits_19_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 395:2 - 397:3" >>= fun _ =>
          exit tt)
        : M (mword 19)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 395:2 - 397:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 19).

Definition hex_bits_20_forwards_matches (bv : mword 20) : bool := true.

Definition hex_bits_20_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_20_matches_prefix s) with
         | Some (g__329, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_20_backwards (s : string) : M (mword 20) :=
   (match (hex_bits_20_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 414:2 - 416:3" >>= fun _ =>
          exit tt)
        : M (mword 20)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 414:2 - 416:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 20).

Definition hex_bits_21_forwards_matches (bv : mword 21) : bool := true.

Definition hex_bits_21_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_21_matches_prefix s) with
         | Some (g__328, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_21_backwards (s : string) : M (mword 21) :=
   (match (hex_bits_21_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 433:2 - 435:3" >>= fun _ =>
          exit tt)
        : M (mword 21)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 433:2 - 435:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 21).

Definition hex_bits_22_forwards_matches (bv : mword 22) : bool := true.

Definition hex_bits_22_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_22_matches_prefix s) with
         | Some (g__327, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_22_backwards (s : string) : M (mword 22) :=
   (match (hex_bits_22_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 452:2 - 454:3" >>= fun _ =>
          exit tt)
        : M (mword 22)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 452:2 - 454:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 22).

Definition hex_bits_23_forwards_matches (bv : mword 23) : bool := true.

Definition hex_bits_23_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_23_matches_prefix s) with
         | Some (g__326, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_23_backwards (s : string) : M (mword 23) :=
   (match (hex_bits_23_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 471:2 - 473:3" >>= fun _ =>
          exit tt)
        : M (mword 23)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 471:2 - 473:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 23).

Definition hex_bits_24_forwards_matches (bv : mword 24) : bool := true.

Definition hex_bits_24_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_24_matches_prefix s) with
         | Some (g__325, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_24_backwards (s : string) : M (mword 24) :=
   (match (hex_bits_24_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 490:2 - 492:3" >>= fun _ =>
          exit tt)
        : M (mword 24)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 490:2 - 492:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 24).

Definition hex_bits_25_forwards_matches (bv : mword 25) : bool := true.

Definition hex_bits_25_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_25_matches_prefix s) with
         | Some (g__324, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_25_backwards (s : string) : M (mword 25) :=
   (match (hex_bits_25_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 509:2 - 511:3" >>= fun _ =>
          exit tt)
        : M (mword 25)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 509:2 - 511:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 25).

Definition hex_bits_26_forwards_matches (bv : mword 26) : bool := true.

Definition hex_bits_26_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_26_matches_prefix s) with
         | Some (g__323, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_26_backwards (s : string) : M (mword 26) :=
   (match (hex_bits_26_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 528:2 - 530:3" >>= fun _ =>
          exit tt)
        : M (mword 26)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 528:2 - 530:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 26).

Definition hex_bits_27_forwards_matches (bv : mword 27) : bool := true.

Definition hex_bits_27_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_27_matches_prefix s) with
         | Some (g__322, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_27_backwards (s : string) : M (mword 27) :=
   (match (hex_bits_27_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 547:2 - 549:3" >>= fun _ =>
          exit tt)
        : M (mword 27)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 547:2 - 549:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 27).

Definition hex_bits_28_forwards_matches (bv : mword 28) : bool := true.

Definition hex_bits_28_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_28_matches_prefix s) with
         | Some (g__321, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_28_backwards (s : string) : M (mword 28) :=
   (match (hex_bits_28_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 566:2 - 568:3" >>= fun _ =>
          exit tt)
        : M (mword 28)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 566:2 - 568:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 28).

Definition hex_bits_29_forwards_matches (bv : mword 29) : bool := true.

Definition hex_bits_29_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_29_matches_prefix s) with
         | Some (g__320, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_29_backwards (s : string) : M (mword 29) :=
   (match (hex_bits_29_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 585:2 - 587:3" >>= fun _ =>
          exit tt)
        : M (mword 29)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 585:2 - 587:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 29).

Definition hex_bits_30_forwards_matches (bv : mword 30) : bool := true.

Definition hex_bits_30_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_30_matches_prefix s) with
         | Some (g__319, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_30_backwards (s : string) : M (mword 30) :=
   (match (hex_bits_30_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 604:2 - 606:3" >>= fun _ =>
          exit tt)
        : M (mword 30)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 604:2 - 606:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 30).

Definition hex_bits_31_forwards_matches (bv : mword 31) : bool := true.

Definition hex_bits_31_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_31_matches_prefix s) with
         | Some (g__318, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_31_backwards (s : string) : M (mword 31) :=
   (match (hex_bits_31_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 623:2 - 625:3" >>= fun _ =>
          exit tt)
        : M (mword 31)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 623:2 - 625:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 31).

Definition hex_bits_32_forwards_matches (bv : mword 32) : bool := true.

Definition hex_bits_32_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_32_matches_prefix s) with
         | Some (g__317, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_32_backwards (s : string) : M (mword 32) :=
   (match (hex_bits_32_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 642:2 - 644:3" >>= fun _ =>
          exit tt)
        : M (mword 32)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 642:2 - 644:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 32).

Definition hex_bits_33_forwards_matches (bv : mword 33) : bool := true.

Definition hex_bits_33_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_33_matches_prefix s) with
         | Some (g__316, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_33_backwards (s : string) : M (mword 33) :=
   (match (hex_bits_33_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 661:2 - 663:3" >>= fun _ =>
          exit tt)
        : M (mword 33)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 661:2 - 663:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 33).

Definition hex_bits_48_forwards_matches (bv : mword 48) : bool := true.

Definition hex_bits_48_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_48_matches_prefix s) with
         | Some (g__315, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_48_backwards (s : string) : M (mword 48) :=
   (match (hex_bits_48_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 680:2 - 682:3" >>= fun _ =>
          exit tt)
        : M (mword 48)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 680:2 - 682:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 48).

Definition hex_bits_64_forwards_matches (bv : mword 64) : bool := true.

Definition hex_bits_64_backwards_matches (s : string) : bool :=
   match s with
   | s =>
      if match (hex_bits_64_matches_prefix s) with
         | Some (g__314, existT _ n _) =>
            if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then true else false
         | _ => false
         end then
        true
      else false
   end.

Definition hex_bits_64_backwards (s : string) : M (mword 64) :=
   (match (hex_bits_64_matches_prefix s) with
    | Some (bv, existT _ n _) =>
       (if sumbool_of_bool (Z.eqb n (projT1 (string_length s))) then returnm bv
        else
          assert_exp' false "Pattern match failure at model/prelude_mapping.sail 699:2 - 701:3" >>= fun _ =>
          exit tt)
        : M (mword 64)
    | _ =>
       assert_exp' false "Pattern match failure at model/prelude_mapping.sail 699:2 - 701:3" >>= fun _ =>
       exit tt
    end)
    : M (mword 64).

Definition default_meta : mem_meta := tt.
Hint Unfold default_meta : sail.
Definition __WriteRAM_Meta (addr : mword 32) (width : Z) (meta : unit) : M (unit) := returnm tt.

Definition __ReadRAM_Meta (addr : mword 32) (width : Z) : M (unit) := returnm tt.



Definition write_ram_ea (wk : write_kind) (addr : mword 32) (width : Z)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (unit) :=
   (write_mem_ea wk 32 addr width)  : M (unit).



Axiom __TraceMemoryWrite : forall {m : Z} (n : Z) (_ : mword m) (_ : mword (8 * n)) , unit.

Axiom __TraceMemoryRead : forall {m : Z} (n : Z) (_ : mword m) (_ : mword (8 * n)) , unit.

Definition init_ext_ptw : ext_ptw := tt.
Hint Unfold init_ext_ptw : sail.
Definition ext_translate_exception (e : unit) : unit := e.

Definition ext_exc_type_to_bits (e : unit) : mword 8 := Ox"18"  : mword 8.

Definition num_of_ext_exc_type (e : unit) : {n : Z & ArithFact ((0 <=? n) && (n <? xlen))} :=
   build_ex (24).

Definition ext_exc_type_to_str (e : unit) : string := "extension-exception".

Definition xlen_val := 32.
Hint Unfold xlen_val : sail.
Definition xlen_max_unsigned := Z.sub (projT1 (pow2 32)) 1.
Hint Unfold xlen_max_unsigned : sail.
Definition xlen_max_signed := Z.sub (projT1 (pow2 (Z.sub 32 1))) 1.
Hint Unfold xlen_max_signed : sail.
Definition xlen_min_signed := Z.sub 0 (projT1 (pow2 (Z.sub 32 1))).
Hint Unfold xlen_min_signed : sail.
Definition regidx_to_regno (b : mword 5) : {n : Z & ArithFact ((0 <=? n) && (n <? 32))} :=
   build_ex (
      let r := projT1 (uint b) in
      r
   ).

Definition creg2reg_idx (creg : mword 3) : mword 5 := concat_vec ('b"01"  : mword 2) creg.

Definition zreg : regidx := 'b"00000"  : mword 5.
Hint Unfold zreg : sail.
Definition ra : regidx := 'b"00001"  : mword 5.
Hint Unfold ra : sail.
Definition sp : regidx := 'b"00010"  : mword 5.
Hint Unfold sp : sail.
Definition Architecture_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : Architecture :=
   let l__267 := arg_ in
   if sumbool_of_bool (Z.eqb l__267 0) then RV32
   else if sumbool_of_bool (Z.eqb l__267 1) then RV64
   else RV128.

Definition num_of_Architecture (arg_ : Architecture) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | RV32 => 0 | RV64 => 1 | RV128 => 2 end).

Definition architecture (a : mword 2) : option Architecture :=
   let b__0 := a in
   if eq_vec b__0 ('b"01"  : mword 2) then Some RV32
   else if eq_vec b__0 ('b"10"  : mword 2) then Some RV64
   else if eq_vec b__0 ('b"11"  : mword 2) then Some RV128
   else None.

Definition arch_to_bits (a : Architecture) : mword 2 :=
   match a with
   | RV32 => 'b"01"  : mword 2
   | RV64 => 'b"10"  : mword 2
   | RV128 => 'b"11"  : mword 2
   end.

Definition Privilege_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : Privilege :=
   let l__265 := arg_ in
   if sumbool_of_bool (Z.eqb l__265 0) then User
   else if sumbool_of_bool (Z.eqb l__265 1) then Supervisor
   else Machine.

Definition num_of_Privilege (arg_ : Privilege) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | User => 0 | Supervisor => 1 | Machine => 2 end).

Definition privLevel_to_bits (p : Privilege) : mword 2 :=
   match p with
   | User => 'b"00"  : mword 2
   | Supervisor => 'b"01"  : mword 2
   | Machine => 'b"11"  : mword 2
   end.

Definition privLevel_of_bits (p : mword 2) : M (Privilege) :=
   let b__0 := p in
   (if eq_vec b__0 ('b"00"  : mword 2) then returnm User
    else if eq_vec b__0 ('b"01"  : mword 2) then returnm Supervisor
    else if eq_vec b__0 ('b"11"  : mword 2) then returnm Machine
    else
      assert_exp' false "Pattern match failure at model/riscv_types.sail 78:2 - 82:3" >>= fun _ =>
      exit tt)
    : M (Privilege).

Definition privLevel_to_str (p : Privilege) : string :=
   match p with | User => "U" | Supervisor => "S" | Machine => "M" end.

Definition Retired_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 1))} : Retired :=
   let l__264 := arg_ in
   if sumbool_of_bool (Z.eqb l__264 0) then RETIRE_SUCCESS
   else RETIRE_FAIL.

Definition num_of_Retired (arg_ : Retired) : {e : Z & ArithFact ((0 <=? e) && (e <=? 1))} :=
   build_ex (match arg_ with | RETIRE_SUCCESS => 0 | RETIRE_FAIL => 1 end).

Definition word_width_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))} : word_width :=
   let l__261 := arg_ in
   if sumbool_of_bool (Z.eqb l__261 0) then BYTE
   else if sumbool_of_bool (Z.eqb l__261 1) then HALF
   else if sumbool_of_bool (Z.eqb l__261 2) then WORD
   else DOUBLE.

Definition num_of_word_width (arg_ : word_width) : {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | BYTE => 0 | HALF => 1 | WORD => 2 | DOUBLE => 3 end).

Definition InterruptType_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 8))}
: InterruptType :=
   let l__253 := arg_ in
   if sumbool_of_bool (Z.eqb l__253 0) then I_U_Software
   else if sumbool_of_bool (Z.eqb l__253 1) then I_S_Software
   else if sumbool_of_bool (Z.eqb l__253 2) then I_M_Software
   else if sumbool_of_bool (Z.eqb l__253 3) then I_U_Timer
   else if sumbool_of_bool (Z.eqb l__253 4) then I_S_Timer
   else if sumbool_of_bool (Z.eqb l__253 5) then I_M_Timer
   else if sumbool_of_bool (Z.eqb l__253 6) then I_U_External
   else if sumbool_of_bool (Z.eqb l__253 7) then I_S_External
   else I_M_External.

Definition num_of_InterruptType (arg_ : InterruptType)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 8))} :=
   build_ex (
      match arg_ with
      | I_U_Software => 0
      | I_S_Software => 1
      | I_M_Software => 2
      | I_U_Timer => 3
      | I_S_Timer => 4
      | I_M_Timer => 5
      | I_U_External => 6
      | I_S_External => 7
      | I_M_External => 8
      end
   ).

Definition interruptType_to_bits (i : InterruptType) : mword 8 :=
   match i with
   | I_U_Software => Ox"00"  : mword 8
   | I_S_Software => Ox"01"  : mword 8
   | I_M_Software => Ox"03"  : mword 8
   | I_U_Timer => Ox"04"  : mword 8
   | I_S_Timer => Ox"05"  : mword 8
   | I_M_Timer => Ox"07"  : mword 8
   | I_U_External => Ox"08"  : mword 8
   | I_S_External => Ox"09"  : mword 8
   | I_M_External => Ox"0B"  : mword 8
   end.

Definition exceptionType_to_bits (e : ExceptionType) : mword 8 :=
   match e with
   | E_Fetch_Addr_Align tt => Ox"00"  : mword 8
   | E_Fetch_Access_Fault tt => Ox"01"  : mword 8
   | E_Illegal_Instr tt => Ox"02"  : mword 8
   | E_Breakpoint tt => Ox"03"  : mword 8
   | E_Load_Addr_Align tt => Ox"04"  : mword 8
   | E_Load_Access_Fault tt => Ox"05"  : mword 8
   | E_SAMO_Addr_Align tt => Ox"06"  : mword 8
   | E_SAMO_Access_Fault tt => Ox"07"  : mword 8
   | E_U_EnvCall tt => Ox"08"  : mword 8
   | E_S_EnvCall tt => Ox"09"  : mword 8
   | E_Reserved_10 tt => Ox"0A"  : mword 8
   | E_M_EnvCall tt => Ox"0B"  : mword 8
   | E_Fetch_Page_Fault tt => Ox"0C"  : mword 8
   | E_Load_Page_Fault tt => Ox"0D"  : mword 8
   | E_Reserved_14 tt => Ox"0E"  : mword 8
   | E_SAMO_Page_Fault tt => Ox"0F"  : mword 8
   | E_Extension e => ext_exc_type_to_bits e
   end.

Definition num_of_ExceptionType (e : ExceptionType) : {n : Z & ArithFact ((0 <=? n) && (n <? xlen))} :=
   build_ex (
      match e with
      | E_Fetch_Addr_Align tt => 0
      | E_Fetch_Access_Fault tt => 1
      | E_Illegal_Instr tt => 2
      | E_Breakpoint tt => 3
      | E_Load_Addr_Align tt => 4
      | E_Load_Access_Fault tt => 5
      | E_SAMO_Addr_Align tt => 6
      | E_SAMO_Access_Fault tt => 7
      | E_U_EnvCall tt => 8
      | E_S_EnvCall tt => 9
      | E_Reserved_10 tt => 10
      | E_M_EnvCall tt => 11
      | E_Fetch_Page_Fault tt => 12
      | E_Load_Page_Fault tt => 13
      | E_Reserved_14 tt => 14
      | E_SAMO_Page_Fault tt => 15
      | E_Extension e => projT1 (num_of_ext_exc_type e)
      end
   ).

Definition exceptionType_to_str (e : ExceptionType) : string :=
   match e with
   | E_Fetch_Addr_Align tt => "misaligned-fetch"
   | E_Fetch_Access_Fault tt => "fetch-access-fault"
   | E_Illegal_Instr tt => "illegal-instruction"
   | E_Breakpoint tt => "breakpoint"
   | E_Load_Addr_Align tt => "misaligned-load"
   | E_Load_Access_Fault tt => "load-access-fault"
   | E_SAMO_Addr_Align tt => "misaliged-store/amo"
   | E_SAMO_Access_Fault tt => "store/amo-access-fault"
   | E_U_EnvCall tt => "u-call"
   | E_S_EnvCall tt => "s-call"
   | E_Reserved_10 tt => "reserved-0"
   | E_M_EnvCall tt => "m-call"
   | E_Fetch_Page_Fault tt => "fetch-page-fault"
   | E_Load_Page_Fault tt => "load-page-fault"
   | E_Reserved_14 tt => "reserved-1"
   | E_SAMO_Page_Fault tt => "store/amo-page-fault"
   | E_Extension e => ext_exc_type_to_str e
   end.

Definition not_implemented {a : Type} (message : string) : M (a) :=
   throw (Error_not_implemented message).

Definition internal_error {a : Type} (s : string) : M (a) :=
   assert_exp' false s >>= fun _ => exit tt.

Definition TrapVectorMode_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))}
: TrapVectorMode :=
   let l__251 := arg_ in
   if sumbool_of_bool (Z.eqb l__251 0) then TV_Direct
   else if sumbool_of_bool (Z.eqb l__251 1) then TV_Vector
   else TV_Reserved.

Definition num_of_TrapVectorMode (arg_ : TrapVectorMode)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | TV_Direct => 0 | TV_Vector => 1 | TV_Reserved => 2 end).

Definition trapVectorMode_of_bits (m : mword 2) : TrapVectorMode :=
   let b__0 := m in
   if eq_vec b__0 ('b"00"  : mword 2) then TV_Direct
   else if eq_vec b__0 ('b"01"  : mword 2) then TV_Vector
   else TV_Reserved.

Definition ExtStatus_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))} : ExtStatus :=
   let l__248 := arg_ in
   if sumbool_of_bool (Z.eqb l__248 0) then Off
   else if sumbool_of_bool (Z.eqb l__248 1) then Initial
   else if sumbool_of_bool (Z.eqb l__248 2) then Clean
   else Dirty.

Definition num_of_ExtStatus (arg_ : ExtStatus) : {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | Off => 0 | Initial => 1 | Clean => 2 | Dirty => 3 end).

Definition extStatus_to_bits (e : ExtStatus) : mword 2 :=
   match e with
   | Off => 'b"00"  : mword 2
   | Initial => 'b"01"  : mword 2
   | Clean => 'b"10"  : mword 2
   | Dirty => 'b"11"  : mword 2
   end.

Definition extStatus_of_bits (e : mword 2) : M (ExtStatus) :=
   let b__0 := e in
   (if eq_vec b__0 ('b"00"  : mword 2) then returnm Off
    else if eq_vec b__0 ('b"01"  : mword 2) then returnm Initial
    else if eq_vec b__0 ('b"10"  : mword 2) then returnm Clean
    else if eq_vec b__0 ('b"11"  : mword 2) then returnm Dirty
    else
      assert_exp' false "Pattern match failure at model/riscv_types.sail 281:2 - 286:3" >>= fun _ =>
      exit tt)
    : M (ExtStatus).

Definition SATPMode_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))} : SATPMode :=
   let l__245 := arg_ in
   if sumbool_of_bool (Z.eqb l__245 0) then Sbare
   else if sumbool_of_bool (Z.eqb l__245 1) then Sv32
   else if sumbool_of_bool (Z.eqb l__245 2) then Sv39
   else Sv48.

Definition num_of_SATPMode (arg_ : SATPMode) : {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | Sbare => 0 | Sv32 => 1 | Sv39 => 2 | Sv48 => 3 end).

Definition satp64Mode_of_bits (a : Architecture) (m : mword 4) : option SATPMode :=
   match (a, m) with
   | (g__313, b__0) =>
      if eq_vec b__0 (Ox"0"  : mword 4) then Some Sbare
      else
        match (g__313, b__0) with
        | (RV32, b__0) =>
           if eq_vec b__0 (Ox"1"  : mword 4) then Some Sv32
           else match (RV32, b__0) with | (_, _) => None end
        | (RV64, b__0) =>
           if eq_vec b__0 (Ox"8"  : mword 4) then Some Sv39
           else if eq_vec b__0 (Ox"9"  : mword 4) then Some Sv48
           else match (RV64, b__0) with | (_, _) => None end
        | (_, _) => None
        end
   end.

Definition uop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 1))} : uop :=
   let l__244 := arg_ in
   if sumbool_of_bool (Z.eqb l__244 0) then RISCV_LUI
   else RISCV_AUIPC.

Definition num_of_uop (arg_ : uop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 1))} :=
   build_ex (match arg_ with | RISCV_LUI => 0 | RISCV_AUIPC => 1 end).

Definition bop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 5))} : bop :=
   let l__239 := arg_ in
   if sumbool_of_bool (Z.eqb l__239 0) then RISCV_BEQ
   else if sumbool_of_bool (Z.eqb l__239 1) then RISCV_BNE
   else if sumbool_of_bool (Z.eqb l__239 2) then RISCV_BLT
   else if sumbool_of_bool (Z.eqb l__239 3) then RISCV_BGE
   else if sumbool_of_bool (Z.eqb l__239 4) then RISCV_BLTU
   else RISCV_BGEU.

Definition num_of_bop (arg_ : bop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 5))} :=
   build_ex (
      match arg_ with
      | RISCV_BEQ => 0
      | RISCV_BNE => 1
      | RISCV_BLT => 2
      | RISCV_BGE => 3
      | RISCV_BLTU => 4
      | RISCV_BGEU => 5
      end
   ).

Definition iop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 5))} : iop :=
   let l__234 := arg_ in
   if sumbool_of_bool (Z.eqb l__234 0) then RISCV_ADDI
   else if sumbool_of_bool (Z.eqb l__234 1) then RISCV_SLTI
   else if sumbool_of_bool (Z.eqb l__234 2) then RISCV_SLTIU
   else if sumbool_of_bool (Z.eqb l__234 3) then RISCV_XORI
   else if sumbool_of_bool (Z.eqb l__234 4) then RISCV_ORI
   else RISCV_ANDI.

Definition num_of_iop (arg_ : iop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 5))} :=
   build_ex (
      match arg_ with
      | RISCV_ADDI => 0
      | RISCV_SLTI => 1
      | RISCV_SLTIU => 2
      | RISCV_XORI => 3
      | RISCV_ORI => 4
      | RISCV_ANDI => 5
      end
   ).

Definition sop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : sop :=
   let l__232 := arg_ in
   if sumbool_of_bool (Z.eqb l__232 0) then RISCV_SLLI
   else if sumbool_of_bool (Z.eqb l__232 1) then RISCV_SRLI
   else RISCV_SRAI.

Definition num_of_sop (arg_ : sop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | RISCV_SLLI => 0 | RISCV_SRLI => 1 | RISCV_SRAI => 2 end).

Definition rop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 9))} : rop :=
   let l__223 := arg_ in
   if sumbool_of_bool (Z.eqb l__223 0) then RISCV_ADD
   else if sumbool_of_bool (Z.eqb l__223 1) then RISCV_SUB
   else if sumbool_of_bool (Z.eqb l__223 2) then RISCV_SLL
   else if sumbool_of_bool (Z.eqb l__223 3) then RISCV_SLT
   else if sumbool_of_bool (Z.eqb l__223 4) then RISCV_SLTU
   else if sumbool_of_bool (Z.eqb l__223 5) then RISCV_XOR
   else if sumbool_of_bool (Z.eqb l__223 6) then RISCV_SRL
   else if sumbool_of_bool (Z.eqb l__223 7) then RISCV_SRA
   else if sumbool_of_bool (Z.eqb l__223 8) then RISCV_OR
   else RISCV_AND.

Definition num_of_rop (arg_ : rop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 9))} :=
   build_ex (
      match arg_ with
      | RISCV_ADD => 0
      | RISCV_SUB => 1
      | RISCV_SLL => 2
      | RISCV_SLT => 3
      | RISCV_SLTU => 4
      | RISCV_XOR => 5
      | RISCV_SRL => 6
      | RISCV_SRA => 7
      | RISCV_OR => 8
      | RISCV_AND => 9
      end
   ).

Definition ropw_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 4))} : ropw :=
   let l__219 := arg_ in
   if sumbool_of_bool (Z.eqb l__219 0) then RISCV_ADDW
   else if sumbool_of_bool (Z.eqb l__219 1) then RISCV_SUBW
   else if sumbool_of_bool (Z.eqb l__219 2) then RISCV_SLLW
   else if sumbool_of_bool (Z.eqb l__219 3) then RISCV_SRLW
   else RISCV_SRAW.

Definition num_of_ropw (arg_ : ropw) : {e : Z & ArithFact ((0 <=? e) && (e <=? 4))} :=
   build_ex (
      match arg_ with
      | RISCV_ADDW => 0
      | RISCV_SUBW => 1
      | RISCV_SLLW => 2
      | RISCV_SRLW => 3
      | RISCV_SRAW => 4
      end
   ).

Definition sopw_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : sopw :=
   let l__217 := arg_ in
   if sumbool_of_bool (Z.eqb l__217 0) then RISCV_SLLIW
   else if sumbool_of_bool (Z.eqb l__217 1) then RISCV_SRLIW
   else RISCV_SRAIW.

Definition num_of_sopw (arg_ : sopw) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | RISCV_SLLIW => 0 | RISCV_SRLIW => 1 | RISCV_SRAIW => 2 end).

Definition amoop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 8))} : amoop :=
   let l__209 := arg_ in
   if sumbool_of_bool (Z.eqb l__209 0) then AMOSWAP
   else if sumbool_of_bool (Z.eqb l__209 1) then AMOADD
   else if sumbool_of_bool (Z.eqb l__209 2) then AMOXOR
   else if sumbool_of_bool (Z.eqb l__209 3) then AMOAND
   else if sumbool_of_bool (Z.eqb l__209 4) then AMOOR
   else if sumbool_of_bool (Z.eqb l__209 5) then AMOMIN
   else if sumbool_of_bool (Z.eqb l__209 6) then AMOMAX
   else if sumbool_of_bool (Z.eqb l__209 7) then AMOMINU
   else AMOMAXU.

Definition num_of_amoop (arg_ : amoop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 8))} :=
   build_ex (
      match arg_ with
      | AMOSWAP => 0
      | AMOADD => 1
      | AMOXOR => 2
      | AMOAND => 3
      | AMOOR => 4
      | AMOMIN => 5
      | AMOMAX => 6
      | AMOMINU => 7
      | AMOMAXU => 8
      end
   ).

Definition csrop_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : csrop :=
   let l__207 := arg_ in
   if sumbool_of_bool (Z.eqb l__207 0) then CSRRW
   else if sumbool_of_bool (Z.eqb l__207 1) then CSRRS
   else CSRRC.

Definition num_of_csrop (arg_ : csrop) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | CSRRW => 0 | CSRRS => 1 | CSRRC => 2 end).

Definition sep_forwards (arg_ : unit) : string :=
   match arg_ with
   | tt =>
      string_append (opt_spc_forwards tt)
        (string_append "," (string_append (def_spc_forwards tt) ""))
   end.

Definition _s0_ (_s1_ : string) : M (option unit) :=
   (match _s1_ with
    | _s2_ =>
       (opt_spc_matches_prefix _s2_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
       (match w__0 with
        | Some (tt, existT _ _s3_ _) =>
           let _s4_ := string_drop _s2_ _s3_ in
           (if string_startswith _s4_ "," then
              (match (string_drop _s4_ (projT1 (string_length ","))) with
               | _s5_ =>
                  (def_spc_matches_prefix _s5_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (tt, existT _ _s6_ _) =>
                              let p0_ := string_drop _s5_ _s6_ in
                              if generic_eq p0_ "" then Some tt
                              else None
                           | _ => None
                           end)
               end)
               : M (option unit)
            else returnm None)
            : M (option unit)
        | _ => returnm None
        end)
        : M (option unit)
    end)
    : M (option unit).

Definition sep_backwards (arg_ : string) : M (unit) :=
   let _s7_ := arg_ in
   (_s0_ _s7_) >>= fun w__0 : option unit =>
   (if match w__0 with | Some tt => true | _ => false end then
      (_s0_ _s7_) >>= fun w__1 : option unit =>
      (match w__1 with | Some tt => returnm tt | _ => exit tt  : M (unit) end)
       : M (unit)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (unit).

Definition sep_forwards_matches (arg_ : unit) : bool := match arg_ with | tt => true end.

Definition _s8_ (_s9_ : string) : M (option unit) :=
   (match _s9_ with
    | _s10_ =>
       (opt_spc_matches_prefix _s10_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
       (match w__0 with
        | Some (tt, existT _ _s11_ _) =>
           let _s12_ := string_drop _s10_ _s11_ in
           (if string_startswith _s12_ "," then
              (match (string_drop _s12_ (projT1 (string_length ","))) with
               | _s13_ =>
                  (def_spc_matches_prefix _s13_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (tt, existT _ _s14_ _) =>
                              let p0_ := string_drop _s13_ _s14_ in
                              if generic_eq p0_ "" then Some tt
                              else None
                           | _ => None
                           end)
               end)
               : M (option unit)
            else returnm None)
            : M (option unit)
        | _ => returnm None
        end)
        : M (option unit)
    end)
    : M (option unit).

Definition sep_backwards_matches (arg_ : string) : M (bool) :=
   let _s15_ := arg_ in
   (_s8_ _s15_) >>= fun w__0 : option unit =>
   (if match w__0 with | Some tt => true | _ => false end then
      (_s8_ _s15_) >>= fun w__1 : option unit =>
      (match w__1 with | Some tt => returnm true | _ => exit tt  : M (bool) end)
       : M (bool)
    else returnm false)
    : M (bool).

Definition _s16_ (_s17_ : string) : M (option string) :=
   (match _s17_ with
    | _s18_ =>
       (opt_spc_matches_prefix _s18_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
       (match w__0 with
        | Some (tt, existT _ _s19_ _) =>
           let _s20_ := string_drop _s18_ _s19_ in
           (if string_startswith _s20_ "," then
              (match (string_drop _s20_ (projT1 (string_length ","))) with
               | _s21_ =>
                  (def_spc_matches_prefix _s21_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (tt, existT _ _s22_ _) =>
                              match (string_drop _s21_ _s22_) with | s_ => Some s_ end
                           | _ => None
                           end)
               end)
               : M (option string)
            else returnm None)
            : M (option string)
        | _ => returnm None
        end)
        : M (option string)
    end)
    : M (option string).

Definition sep_matches_prefix (arg_ : string) : M (option ((unit * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s23_ := arg_ in
   (_s16_ _s23_) >>= fun w__0 : option string =>
   (if match w__0 with | Some s_ => true | _ => false end then
      (_s16_ _s23_) >>= fun w__1 : option string =>
      (match w__1 with
       | Some s_ =>
          returnm (Some
                     (tt, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((unit * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((unit * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((unit * {n : Z & ArithFact (n >=? 0)}))).

Definition bool_bits_forwards (arg_ : bool) : mword 1 :=
   match arg_ with | true => 'b"1"  : mword 1 | false => 'b"0"  : mword 1 end.

Definition bool_bits_backwards (arg_ : mword 1) : M (bool) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"1"  : mword 1) then returnm true
    else if eq_vec b__0 ('b"0"  : mword 1) then returnm false
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition bool_bits_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | true => true | false => true end.

Definition bool_bits_backwards_matches (arg_ : mword 1) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"1"  : mword 1) then true
   else if eq_vec b__0 ('b"0"  : mword 1) then true
   else false.

Definition bool_not_bits_forwards (arg_ : bool) : mword 1 :=
   match arg_ with | true => 'b"0"  : mword 1 | false => 'b"1"  : mword 1 end.

Definition bool_not_bits_backwards (arg_ : mword 1) : M (bool) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"0"  : mword 1) then returnm true
    else if eq_vec b__0 ('b"1"  : mword 1) then returnm false
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition bool_not_bits_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | true => true | false => true end.

Definition bool_not_bits_backwards_matches (arg_ : mword 1) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"0"  : mword 1) then true
   else if eq_vec b__0 ('b"1"  : mword 1) then true
   else false.

Definition size_bits_forwards (arg_ : word_width) : mword 2 :=
   match arg_ with
   | BYTE => 'b"00"  : mword 2
   | HALF => 'b"01"  : mword 2
   | WORD => 'b"10"  : mword 2
   | DOUBLE => 'b"11"  : mword 2
   end.

Definition size_bits_backwards (arg_ : mword 2) : M (word_width) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"00"  : mword 2) then returnm BYTE
    else if eq_vec b__0 ('b"01"  : mword 2) then returnm HALF
    else if eq_vec b__0 ('b"10"  : mword 2) then returnm WORD
    else if eq_vec b__0 ('b"11"  : mword 2) then returnm DOUBLE
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (word_width).

Definition size_bits_forwards_matches (arg_ : word_width) : bool :=
   match arg_ with | BYTE => true | HALF => true | WORD => true | DOUBLE => true end.

Definition size_bits_backwards_matches (arg_ : mword 2) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"00"  : mword 2) then true
   else if eq_vec b__0 ('b"01"  : mword 2) then true
   else if eq_vec b__0 ('b"10"  : mword 2) then true
   else if eq_vec b__0 ('b"11"  : mword 2) then true
   else false.

Definition size_mnemonic_forwards (arg_ : word_width) : string :=
   match arg_ with | BYTE => "b" | HALF => "h" | WORD => "w" | DOUBLE => "d" end.

Definition size_mnemonic_backwards (arg_ : string) : M (word_width) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "b" then returnm BYTE
    else if generic_eq p0_ "h" then returnm HALF
    else if generic_eq p0_ "w" then returnm WORD
    else if generic_eq p0_ "d" then returnm DOUBLE
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (word_width).

Definition size_mnemonic_forwards_matches (arg_ : word_width) : bool :=
   match arg_ with | BYTE => true | HALF => true | WORD => true | DOUBLE => true end.

Definition size_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "b" then true
   else if generic_eq p0_ "h" then true
   else if generic_eq p0_ "w" then true
   else if generic_eq p0_ "d" then true
   else false.

Definition _s36_ (_s37_ : string) : option string :=
   let _s38_ := _s37_ in
   if string_startswith _s38_ "d" then
     match (string_drop _s38_ (projT1 (string_length "d"))) with | s_ => Some s_ end
   else None.

Definition _s32_ (_s33_ : string) : option string :=
   let _s34_ := _s33_ in
   if string_startswith _s34_ "w" then
     match (string_drop _s34_ (projT1 (string_length "w"))) with | s_ => Some s_ end
   else None.

Definition _s28_ (_s29_ : string) : option string :=
   let _s30_ := _s29_ in
   if string_startswith _s30_ "h" then
     match (string_drop _s30_ (projT1 (string_length "h"))) with | s_ => Some s_ end
   else None.

Definition _s24_ (_s25_ : string) : option string :=
   let _s26_ := _s25_ in
   if string_startswith _s26_ "b" then
     match (string_drop _s26_ (projT1 (string_length "b"))) with | s_ => Some s_ end
   else None.

Definition size_mnemonic_matches_prefix (arg_ : string)
: M (option ((word_width * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s27_ := arg_ in
   (if match (_s24_ _s27_) with | Some s_ => true | _ => false end then
      (match (_s24_ _s27_) with
       | Some s_ =>
          returnm (Some
                     (BYTE, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s28_ _s27_) with | Some s_ => true | _ => false end then
      (match (_s28_ _s27_) with
       | Some s_ =>
          returnm (Some
                     (HALF, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s32_ _s27_) with | Some s_ => true | _ => false end then
      (match (_s32_ _s27_) with
       | Some s_ =>
          returnm (Some
                     (WORD, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s36_ _s27_) with | Some s_ => true | _ => false end then
      (match (_s36_ _s27_) with
       | Some s_ =>
          returnm (Some
                     (DOUBLE, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((word_width * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((word_width * {n : Z & ArithFact (n >=? 0)}))).

Definition word_width_bytes (width : word_width)
: {s : Z & ArithFact ((s =? 1) || ((s =? 2) || ((s =? 4) || (s =? 8))))} :=
   build_ex (match width with | BYTE => 1 | HALF => 2 | WORD => 4 | DOUBLE => 8 end).

Definition Data : ext_access_type := tt.
Hint Unfold Data : sail.
Definition default_write_acc : ext_access_type := Data.
Hint Unfold default_write_acc : sail.
Definition accessType_to_str (a : AccessType unit) : string :=
   match a with
   | Read Data => "R"
   | Write Data => "W"
   | ReadWrite Data => "RW"
   | Execute tt => "X"
   end.

Definition zero_reg : regtype := EXTZ 32 (Ox"0"  : mword 4).
Hint Unfold zero_reg : sail.
Definition RegStr (r : mword 32) : string := string_of_bits r.

Definition regval_from_reg (r : mword 32) : mword 32 := r.

Definition regval_into_reg (v : mword 32) : mword 32 := v.

Definition zero_freg : fregtype := EXTZ 32 (Ox"0"  : mword 4).
Hint Unfold zero_freg : sail.
Definition FRegStr (r : mword 32) : string := string_of_bits r.

Definition fregval_from_freg (r : mword 32) : mword 32 := r.

Definition fregval_into_freg (v : mword 32) : mword 32 := v.

Definition rounding_mode_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 5))}
: rounding_mode :=
   let l__202 := arg_ in
   if sumbool_of_bool (Z.eqb l__202 0) then RM_RNE
   else if sumbool_of_bool (Z.eqb l__202 1) then RM_RTZ
   else if sumbool_of_bool (Z.eqb l__202 2) then RM_RDN
   else if sumbool_of_bool (Z.eqb l__202 3) then RM_RUP
   else if sumbool_of_bool (Z.eqb l__202 4) then RM_RMM
   else RM_DYN.

Definition num_of_rounding_mode (arg_ : rounding_mode)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 5))} :=
   build_ex (
      match arg_ with
      | RM_RNE => 0
      | RM_RTZ => 1
      | RM_RDN => 2
      | RM_RUP => 3
      | RM_RMM => 4
      | RM_DYN => 5
      end
   ).

Definition f_madd_op_S_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))} : f_madd_op_S :=
   let l__199 := arg_ in
   if sumbool_of_bool (Z.eqb l__199 0) then FMADD_S
   else if sumbool_of_bool (Z.eqb l__199 1) then FMSUB_S
   else if sumbool_of_bool (Z.eqb l__199 2) then FNMSUB_S
   else FNMADD_S.

Definition num_of_f_madd_op_S (arg_ : f_madd_op_S) : {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | FMADD_S => 0 | FMSUB_S => 1 | FNMSUB_S => 2 | FNMADD_S => 3 end).

Definition f_bin_rm_op_S_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))}
: f_bin_rm_op_S :=
   let l__196 := arg_ in
   if sumbool_of_bool (Z.eqb l__196 0) then FADD_S
   else if sumbool_of_bool (Z.eqb l__196 1) then FSUB_S
   else if sumbool_of_bool (Z.eqb l__196 2) then FMUL_S
   else FDIV_S.

Definition num_of_f_bin_rm_op_S (arg_ : f_bin_rm_op_S)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | FADD_S => 0 | FSUB_S => 1 | FMUL_S => 2 | FDIV_S => 3 end).

Definition f_un_rm_op_S_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 8))} : f_un_rm_op_S :=
   let l__188 := arg_ in
   if sumbool_of_bool (Z.eqb l__188 0) then FSQRT_S
   else if sumbool_of_bool (Z.eqb l__188 1) then FCVT_W_S
   else if sumbool_of_bool (Z.eqb l__188 2) then FCVT_WU_S
   else if sumbool_of_bool (Z.eqb l__188 3) then FCVT_S_W
   else if sumbool_of_bool (Z.eqb l__188 4) then FCVT_S_WU
   else if sumbool_of_bool (Z.eqb l__188 5) then FCVT_L_S
   else if sumbool_of_bool (Z.eqb l__188 6) then FCVT_LU_S
   else if sumbool_of_bool (Z.eqb l__188 7) then FCVT_S_L
   else FCVT_S_LU.

Definition num_of_f_un_rm_op_S (arg_ : f_un_rm_op_S) : {e : Z & ArithFact ((0 <=? e) && (e <=? 8))} :=
   build_ex (
      match arg_ with
      | FSQRT_S => 0
      | FCVT_W_S => 1
      | FCVT_WU_S => 2
      | FCVT_S_W => 3
      | FCVT_S_WU => 4
      | FCVT_L_S => 5
      | FCVT_LU_S => 6
      | FCVT_S_L => 7
      | FCVT_S_LU => 8
      end
   ).

Definition f_un_op_S_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : f_un_op_S :=
   let l__186 := arg_ in
   if sumbool_of_bool (Z.eqb l__186 0) then FCLASS_S
   else if sumbool_of_bool (Z.eqb l__186 1) then FMV_X_W
   else FMV_W_X.

Definition num_of_f_un_op_S (arg_ : f_un_op_S) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | FCLASS_S => 0 | FMV_X_W => 1 | FMV_W_X => 2 end).

Definition f_bin_op_S_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 7))} : f_bin_op_S :=
   let l__179 := arg_ in
   if sumbool_of_bool (Z.eqb l__179 0) then FSGNJ_S
   else if sumbool_of_bool (Z.eqb l__179 1) then FSGNJN_S
   else if sumbool_of_bool (Z.eqb l__179 2) then FSGNJX_S
   else if sumbool_of_bool (Z.eqb l__179 3) then FMIN_S
   else if sumbool_of_bool (Z.eqb l__179 4) then FMAX_S
   else if sumbool_of_bool (Z.eqb l__179 5) then FEQ_S
   else if sumbool_of_bool (Z.eqb l__179 6) then FLT_S
   else FLE_S.

Definition num_of_f_bin_op_S (arg_ : f_bin_op_S) : {e : Z & ArithFact ((0 <=? e) && (e <=? 7))} :=
   build_ex (
      match arg_ with
      | FSGNJ_S => 0
      | FSGNJN_S => 1
      | FSGNJX_S => 2
      | FMIN_S => 3
      | FMAX_S => 4
      | FEQ_S => 5
      | FLT_S => 6
      | FLE_S => 7
      end
   ).

Definition f_madd_op_D_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))} : f_madd_op_D :=
   let l__176 := arg_ in
   if sumbool_of_bool (Z.eqb l__176 0) then FMADD_D
   else if sumbool_of_bool (Z.eqb l__176 1) then FMSUB_D
   else if sumbool_of_bool (Z.eqb l__176 2) then FNMSUB_D
   else FNMADD_D.

Definition num_of_f_madd_op_D (arg_ : f_madd_op_D) : {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | FMADD_D => 0 | FMSUB_D => 1 | FNMSUB_D => 2 | FNMADD_D => 3 end).

Definition f_bin_rm_op_D_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))}
: f_bin_rm_op_D :=
   let l__173 := arg_ in
   if sumbool_of_bool (Z.eqb l__173 0) then FADD_D
   else if sumbool_of_bool (Z.eqb l__173 1) then FSUB_D
   else if sumbool_of_bool (Z.eqb l__173 2) then FMUL_D
   else FDIV_D.

Definition num_of_f_bin_rm_op_D (arg_ : f_bin_rm_op_D)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | FADD_D => 0 | FSUB_D => 1 | FMUL_D => 2 | FDIV_D => 3 end).

Definition f_un_rm_op_D_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 10))}
: f_un_rm_op_D :=
   let l__163 := arg_ in
   if sumbool_of_bool (Z.eqb l__163 0) then FSQRT_D
   else if sumbool_of_bool (Z.eqb l__163 1) then FCVT_W_D
   else if sumbool_of_bool (Z.eqb l__163 2) then FCVT_WU_D
   else if sumbool_of_bool (Z.eqb l__163 3) then FCVT_D_W
   else if sumbool_of_bool (Z.eqb l__163 4) then FCVT_D_WU
   else if sumbool_of_bool (Z.eqb l__163 5) then FCVT_S_D
   else if sumbool_of_bool (Z.eqb l__163 6) then FCVT_D_S
   else if sumbool_of_bool (Z.eqb l__163 7) then FCVT_L_D
   else if sumbool_of_bool (Z.eqb l__163 8) then FCVT_LU_D
   else if sumbool_of_bool (Z.eqb l__163 9) then FCVT_D_L
   else FCVT_D_LU.

Definition num_of_f_un_rm_op_D (arg_ : f_un_rm_op_D) : {e : Z & ArithFact ((0 <=? e) && (e <=? 10))} :=
   build_ex (
      match arg_ with
      | FSQRT_D => 0
      | FCVT_W_D => 1
      | FCVT_WU_D => 2
      | FCVT_D_W => 3
      | FCVT_D_WU => 4
      | FCVT_S_D => 5
      | FCVT_D_S => 6
      | FCVT_L_D => 7
      | FCVT_LU_D => 8
      | FCVT_D_L => 9
      | FCVT_D_LU => 10
      end
   ).

Definition f_bin_op_D_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 7))} : f_bin_op_D :=
   let l__156 := arg_ in
   if sumbool_of_bool (Z.eqb l__156 0) then FSGNJ_D
   else if sumbool_of_bool (Z.eqb l__156 1) then FSGNJN_D
   else if sumbool_of_bool (Z.eqb l__156 2) then FSGNJX_D
   else if sumbool_of_bool (Z.eqb l__156 3) then FMIN_D
   else if sumbool_of_bool (Z.eqb l__156 4) then FMAX_D
   else if sumbool_of_bool (Z.eqb l__156 5) then FEQ_D
   else if sumbool_of_bool (Z.eqb l__156 6) then FLT_D
   else FLE_D.

Definition num_of_f_bin_op_D (arg_ : f_bin_op_D) : {e : Z & ArithFact ((0 <=? e) && (e <=? 7))} :=
   build_ex (
      match arg_ with
      | FSGNJ_D => 0
      | FSGNJN_D => 1
      | FSGNJX_D => 2
      | FMIN_D => 3
      | FMAX_D => 4
      | FEQ_D => 5
      | FLT_D => 6
      | FLE_D => 7
      end
   ).

Definition f_un_op_D_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : f_un_op_D :=
   let l__154 := arg_ in
   if sumbool_of_bool (Z.eqb l__154 0) then FCLASS_D
   else if sumbool_of_bool (Z.eqb l__154 1) then FMV_X_D
   else FMV_D_X.

Definition num_of_f_un_op_D (arg_ : f_un_op_D) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | FCLASS_D => 0 | FMV_X_D => 1 | FMV_D_X => 2 end).

Definition rX (r : Z) `{ArithFact ((0 <=? r) && (r <? 32))} : M (mword 32) :=
   let l__122 := r in
   (if sumbool_of_bool (Z.eqb l__122 0) then returnm zero_reg
    else if sumbool_of_bool (Z.eqb l__122 1) then
      ((read_reg x1_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 2) then
      ((read_reg x2_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 3) then
      ((read_reg x3_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 4) then
      ((read_reg x4_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 5) then
      ((read_reg x5_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 6) then
      ((read_reg x6_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 7) then
      ((read_reg x7_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 8) then
      ((read_reg x8_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 9) then
      ((read_reg x9_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 10) then
      ((read_reg x10_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 11) then
      ((read_reg x11_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 12) then
      ((read_reg x12_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 13) then
      ((read_reg x13_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 14) then
      ((read_reg x14_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 15) then
      ((read_reg x15_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 16) then
      ((read_reg x16_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 17) then
      ((read_reg x17_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 18) then
      ((read_reg x18_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 19) then
      ((read_reg x19_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 20) then
      ((read_reg x20_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 21) then
      ((read_reg x21_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 22) then
      ((read_reg x22_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 23) then
      ((read_reg x23_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 24) then
      ((read_reg x24_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 25) then
      ((read_reg x25_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 26) then
      ((read_reg x26_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 27) then
      ((read_reg x27_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 28) then
      ((read_reg x28_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 29) then
      ((read_reg x29_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 30) then
      ((read_reg x30_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__122 31) then
      ((read_reg x31_ref)  : M (mword 32))
       : M (mword 32)
    else assert_exp' false "invalid register number" >>= fun _ => exit tt) >>= fun v : regtype =>
   returnm (regval_from_reg v).

Definition rvfi_wX (r : Z) (v : mword 32) `{ArithFact ((0 <=? r) && (r <? 32))} : unit := tt.

Definition wX (r : Z) (in_v : mword 32) `{ArithFact ((0 <=? r) && (r <? 32))} : M (unit) :=
   let v := regval_into_reg in_v in
   let l__90 := r in
   (if sumbool_of_bool (Z.eqb l__90 0) then returnm tt
    else if sumbool_of_bool (Z.eqb l__90 1) then write_reg x1_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 2) then write_reg x2_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 3) then write_reg x3_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 4) then write_reg x4_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 5) then write_reg x5_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 6) then write_reg x6_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 7) then write_reg x7_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 8) then write_reg x8_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 9) then write_reg x9_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 10) then write_reg x10_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 11) then write_reg x11_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 12) then write_reg x12_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 13) then write_reg x13_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 14) then write_reg x14_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 15) then write_reg x15_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 16) then write_reg x16_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 17) then write_reg x17_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 18) then write_reg x18_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 19) then write_reg x19_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 20) then write_reg x20_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 21) then write_reg x21_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 22) then write_reg x22_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 23) then write_reg x23_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 24) then write_reg x24_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 25) then write_reg x25_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 26) then write_reg x26_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 27) then write_reg x27_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 28) then write_reg x28_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 29) then write_reg x29_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 30) then write_reg x30_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__90 31) then write_reg x31_ref v  : M (unit)
    else assert_exp' false "invalid register number" >>= fun _ => exit tt) >>
   returnm (if sumbool_of_bool (projT1 (neq_int r 0)) then
              let '_ := (rvfi_wX r in_v)  : unit in
              if get_config_print_reg tt then
                print_endline
                  (String.append "x"
                     (String.append (string_of_int r) (String.append " <- " (RegStr v))))
              else tt
            else tt).

Definition rX_bits (i : mword 5) : M (mword 32) := (rX (projT1 (uint i)))  : M (mword 32).

Definition wX_bits (i : mword 5) (data : mword 32) : M (unit) :=
   (wX (projT1 (uint i)) data)  : M (unit).

Definition reg_name_abi (r : mword 5) : M (string) :=
   let b__0 := r in
   (if eq_vec b__0 ('b"00000"  : mword 5) then returnm "zero"
    else if eq_vec b__0 ('b"00001"  : mword 5) then returnm "ra"
    else if eq_vec b__0 ('b"00010"  : mword 5) then returnm "sp"
    else if eq_vec b__0 ('b"00011"  : mword 5) then returnm "gp"
    else if eq_vec b__0 ('b"00100"  : mword 5) then returnm "tp"
    else if eq_vec b__0 ('b"00101"  : mword 5) then returnm "t0"
    else if eq_vec b__0 ('b"00110"  : mword 5) then returnm "t1"
    else if eq_vec b__0 ('b"00111"  : mword 5) then returnm "t2"
    else if eq_vec b__0 ('b"01000"  : mword 5) then returnm "fp"
    else if eq_vec b__0 ('b"01001"  : mword 5) then returnm "s1"
    else if eq_vec b__0 ('b"01010"  : mword 5) then returnm "a0"
    else if eq_vec b__0 ('b"01011"  : mword 5) then returnm "a1"
    else if eq_vec b__0 ('b"01100"  : mword 5) then returnm "a2"
    else if eq_vec b__0 ('b"01101"  : mword 5) then returnm "a3"
    else if eq_vec b__0 ('b"01110"  : mword 5) then returnm "a4"
    else if eq_vec b__0 ('b"01111"  : mword 5) then returnm "a5"
    else if eq_vec b__0 ('b"10000"  : mword 5) then returnm "a6"
    else if eq_vec b__0 ('b"10001"  : mword 5) then returnm "a7"
    else if eq_vec b__0 ('b"10010"  : mword 5) then returnm "s2"
    else if eq_vec b__0 ('b"10011"  : mword 5) then returnm "s3"
    else if eq_vec b__0 ('b"10100"  : mword 5) then returnm "s4"
    else if eq_vec b__0 ('b"10101"  : mword 5) then returnm "s5"
    else if eq_vec b__0 ('b"10110"  : mword 5) then returnm "s6"
    else if eq_vec b__0 ('b"10111"  : mword 5) then returnm "s7"
    else if eq_vec b__0 ('b"11000"  : mword 5) then returnm "s8"
    else if eq_vec b__0 ('b"11001"  : mword 5) then returnm "s9"
    else if eq_vec b__0 ('b"11010"  : mword 5) then returnm "s10"
    else if eq_vec b__0 ('b"11011"  : mword 5) then returnm "s11"
    else if eq_vec b__0 ('b"11100"  : mword 5) then returnm "t3"
    else if eq_vec b__0 ('b"11101"  : mword 5) then returnm "t4"
    else if eq_vec b__0 ('b"11110"  : mword 5) then returnm "t5"
    else if eq_vec b__0 ('b"11111"  : mword 5) then returnm "t6"
    else
      assert_exp' false "Pattern match failure at model/riscv_regs.sail 155:2 - 188:3" >>= fun _ =>
      exit tt)
    : M (string).

Definition reg_name_forwards (arg_ : mword 5) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"00000"  : mword 5) then returnm "zero"
    else if eq_vec b__0 ('b"00001"  : mword 5) then returnm "ra"
    else if eq_vec b__0 ('b"00010"  : mword 5) then returnm "sp"
    else if eq_vec b__0 ('b"00011"  : mword 5) then returnm "gp"
    else if eq_vec b__0 ('b"00100"  : mword 5) then returnm "tp"
    else if eq_vec b__0 ('b"00101"  : mword 5) then returnm "t0"
    else if eq_vec b__0 ('b"00110"  : mword 5) then returnm "t1"
    else if eq_vec b__0 ('b"00111"  : mword 5) then returnm "t2"
    else if eq_vec b__0 ('b"01000"  : mword 5) then returnm "fp"
    else if eq_vec b__0 ('b"01001"  : mword 5) then returnm "s1"
    else if eq_vec b__0 ('b"01010"  : mword 5) then returnm "a0"
    else if eq_vec b__0 ('b"01011"  : mword 5) then returnm "a1"
    else if eq_vec b__0 ('b"01100"  : mword 5) then returnm "a2"
    else if eq_vec b__0 ('b"01101"  : mword 5) then returnm "a3"
    else if eq_vec b__0 ('b"01110"  : mword 5) then returnm "a4"
    else if eq_vec b__0 ('b"01111"  : mword 5) then returnm "a5"
    else if eq_vec b__0 ('b"10000"  : mword 5) then returnm "a6"
    else if eq_vec b__0 ('b"10001"  : mword 5) then returnm "a7"
    else if eq_vec b__0 ('b"10010"  : mword 5) then returnm "s2"
    else if eq_vec b__0 ('b"10011"  : mword 5) then returnm "s3"
    else if eq_vec b__0 ('b"10100"  : mword 5) then returnm "s4"
    else if eq_vec b__0 ('b"10101"  : mword 5) then returnm "s5"
    else if eq_vec b__0 ('b"10110"  : mword 5) then returnm "s6"
    else if eq_vec b__0 ('b"10111"  : mword 5) then returnm "s7"
    else if eq_vec b__0 ('b"11000"  : mword 5) then returnm "s8"
    else if eq_vec b__0 ('b"11001"  : mword 5) then returnm "s9"
    else if eq_vec b__0 ('b"11010"  : mword 5) then returnm "s10"
    else if eq_vec b__0 ('b"11011"  : mword 5) then returnm "s11"
    else if eq_vec b__0 ('b"11100"  : mword 5) then returnm "t3"
    else if eq_vec b__0 ('b"11101"  : mword 5) then returnm "t4"
    else if eq_vec b__0 ('b"11110"  : mword 5) then returnm "t5"
    else if eq_vec b__0 ('b"11111"  : mword 5) then returnm "t6"
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition reg_name_backwards (arg_ : string) : M (mword 5) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "zero" then returnm ('b"00000"  : mword 5)
    else if generic_eq p0_ "ra" then returnm ('b"00001"  : mword 5)
    else if generic_eq p0_ "sp" then returnm ('b"00010"  : mword 5)
    else if generic_eq p0_ "gp" then returnm ('b"00011"  : mword 5)
    else if generic_eq p0_ "tp" then returnm ('b"00100"  : mword 5)
    else if generic_eq p0_ "t0" then returnm ('b"00101"  : mword 5)
    else if generic_eq p0_ "t1" then returnm ('b"00110"  : mword 5)
    else if generic_eq p0_ "t2" then returnm ('b"00111"  : mword 5)
    else if generic_eq p0_ "fp" then returnm ('b"01000"  : mword 5)
    else if generic_eq p0_ "s1" then returnm ('b"01001"  : mword 5)
    else if generic_eq p0_ "a0" then returnm ('b"01010"  : mword 5)
    else if generic_eq p0_ "a1" then returnm ('b"01011"  : mword 5)
    else if generic_eq p0_ "a2" then returnm ('b"01100"  : mword 5)
    else if generic_eq p0_ "a3" then returnm ('b"01101"  : mword 5)
    else if generic_eq p0_ "a4" then returnm ('b"01110"  : mword 5)
    else if generic_eq p0_ "a5" then returnm ('b"01111"  : mword 5)
    else if generic_eq p0_ "a6" then returnm ('b"10000"  : mword 5)
    else if generic_eq p0_ "a7" then returnm ('b"10001"  : mword 5)
    else if generic_eq p0_ "s2" then returnm ('b"10010"  : mword 5)
    else if generic_eq p0_ "s3" then returnm ('b"10011"  : mword 5)
    else if generic_eq p0_ "s4" then returnm ('b"10100"  : mword 5)
    else if generic_eq p0_ "s5" then returnm ('b"10101"  : mword 5)
    else if generic_eq p0_ "s6" then returnm ('b"10110"  : mword 5)
    else if generic_eq p0_ "s7" then returnm ('b"10111"  : mword 5)
    else if generic_eq p0_ "s8" then returnm ('b"11000"  : mword 5)
    else if generic_eq p0_ "s9" then returnm ('b"11001"  : mword 5)
    else if generic_eq p0_ "s10" then returnm ('b"11010"  : mword 5)
    else if generic_eq p0_ "s11" then returnm ('b"11011"  : mword 5)
    else if generic_eq p0_ "t3" then returnm ('b"11100"  : mword 5)
    else if generic_eq p0_ "t4" then returnm ('b"11101"  : mword 5)
    else if generic_eq p0_ "t5" then returnm ('b"11110"  : mword 5)
    else if generic_eq p0_ "t6" then returnm ('b"11111"  : mword 5)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 5).

Definition reg_name_forwards_matches (arg_ : mword 5) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"00000"  : mword 5) then true
   else if eq_vec b__0 ('b"00001"  : mword 5) then true
   else if eq_vec b__0 ('b"00010"  : mword 5) then true
   else if eq_vec b__0 ('b"00011"  : mword 5) then true
   else if eq_vec b__0 ('b"00100"  : mword 5) then true
   else if eq_vec b__0 ('b"00101"  : mword 5) then true
   else if eq_vec b__0 ('b"00110"  : mword 5) then true
   else if eq_vec b__0 ('b"00111"  : mword 5) then true
   else if eq_vec b__0 ('b"01000"  : mword 5) then true
   else if eq_vec b__0 ('b"01001"  : mword 5) then true
   else if eq_vec b__0 ('b"01010"  : mword 5) then true
   else if eq_vec b__0 ('b"01011"  : mword 5) then true
   else if eq_vec b__0 ('b"01100"  : mword 5) then true
   else if eq_vec b__0 ('b"01101"  : mword 5) then true
   else if eq_vec b__0 ('b"01110"  : mword 5) then true
   else if eq_vec b__0 ('b"01111"  : mword 5) then true
   else if eq_vec b__0 ('b"10000"  : mword 5) then true
   else if eq_vec b__0 ('b"10001"  : mword 5) then true
   else if eq_vec b__0 ('b"10010"  : mword 5) then true
   else if eq_vec b__0 ('b"10011"  : mword 5) then true
   else if eq_vec b__0 ('b"10100"  : mword 5) then true
   else if eq_vec b__0 ('b"10101"  : mword 5) then true
   else if eq_vec b__0 ('b"10110"  : mword 5) then true
   else if eq_vec b__0 ('b"10111"  : mword 5) then true
   else if eq_vec b__0 ('b"11000"  : mword 5) then true
   else if eq_vec b__0 ('b"11001"  : mword 5) then true
   else if eq_vec b__0 ('b"11010"  : mword 5) then true
   else if eq_vec b__0 ('b"11011"  : mword 5) then true
   else if eq_vec b__0 ('b"11100"  : mword 5) then true
   else if eq_vec b__0 ('b"11101"  : mword 5) then true
   else if eq_vec b__0 ('b"11110"  : mword 5) then true
   else if eq_vec b__0 ('b"11111"  : mword 5) then true
   else false.

Definition reg_name_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "zero" then true
   else if generic_eq p0_ "ra" then true
   else if generic_eq p0_ "sp" then true
   else if generic_eq p0_ "gp" then true
   else if generic_eq p0_ "tp" then true
   else if generic_eq p0_ "t0" then true
   else if generic_eq p0_ "t1" then true
   else if generic_eq p0_ "t2" then true
   else if generic_eq p0_ "fp" then true
   else if generic_eq p0_ "s1" then true
   else if generic_eq p0_ "a0" then true
   else if generic_eq p0_ "a1" then true
   else if generic_eq p0_ "a2" then true
   else if generic_eq p0_ "a3" then true
   else if generic_eq p0_ "a4" then true
   else if generic_eq p0_ "a5" then true
   else if generic_eq p0_ "a6" then true
   else if generic_eq p0_ "a7" then true
   else if generic_eq p0_ "s2" then true
   else if generic_eq p0_ "s3" then true
   else if generic_eq p0_ "s4" then true
   else if generic_eq p0_ "s5" then true
   else if generic_eq p0_ "s6" then true
   else if generic_eq p0_ "s7" then true
   else if generic_eq p0_ "s8" then true
   else if generic_eq p0_ "s9" then true
   else if generic_eq p0_ "s10" then true
   else if generic_eq p0_ "s11" then true
   else if generic_eq p0_ "t3" then true
   else if generic_eq p0_ "t4" then true
   else if generic_eq p0_ "t5" then true
   else if generic_eq p0_ "t6" then true
   else false.

Definition _s164_ (_s165_ : string) : option string :=
   let _s166_ := _s165_ in
   if string_startswith _s166_ "t6" then
     match (string_drop _s166_ (projT1 (string_length "t6"))) with | s_ => Some s_ end
   else None.

Definition _s160_ (_s161_ : string) : option string :=
   let _s162_ := _s161_ in
   if string_startswith _s162_ "t5" then
     match (string_drop _s162_ (projT1 (string_length "t5"))) with | s_ => Some s_ end
   else None.

Definition _s156_ (_s157_ : string) : option string :=
   let _s158_ := _s157_ in
   if string_startswith _s158_ "t4" then
     match (string_drop _s158_ (projT1 (string_length "t4"))) with | s_ => Some s_ end
   else None.

Definition _s152_ (_s153_ : string) : option string :=
   let _s154_ := _s153_ in
   if string_startswith _s154_ "t3" then
     match (string_drop _s154_ (projT1 (string_length "t3"))) with | s_ => Some s_ end
   else None.

Definition _s148_ (_s149_ : string) : option string :=
   let _s150_ := _s149_ in
   if string_startswith _s150_ "s11" then
     match (string_drop _s150_ (projT1 (string_length "s11"))) with | s_ => Some s_ end
   else None.

Definition _s144_ (_s145_ : string) : option string :=
   let _s146_ := _s145_ in
   if string_startswith _s146_ "s10" then
     match (string_drop _s146_ (projT1 (string_length "s10"))) with | s_ => Some s_ end
   else None.

Definition _s140_ (_s141_ : string) : option string :=
   let _s142_ := _s141_ in
   if string_startswith _s142_ "s9" then
     match (string_drop _s142_ (projT1 (string_length "s9"))) with | s_ => Some s_ end
   else None.

Definition _s136_ (_s137_ : string) : option string :=
   let _s138_ := _s137_ in
   if string_startswith _s138_ "s8" then
     match (string_drop _s138_ (projT1 (string_length "s8"))) with | s_ => Some s_ end
   else None.

Definition _s132_ (_s133_ : string) : option string :=
   let _s134_ := _s133_ in
   if string_startswith _s134_ "s7" then
     match (string_drop _s134_ (projT1 (string_length "s7"))) with | s_ => Some s_ end
   else None.

Definition _s128_ (_s129_ : string) : option string :=
   let _s130_ := _s129_ in
   if string_startswith _s130_ "s6" then
     match (string_drop _s130_ (projT1 (string_length "s6"))) with | s_ => Some s_ end
   else None.

Definition _s124_ (_s125_ : string) : option string :=
   let _s126_ := _s125_ in
   if string_startswith _s126_ "s5" then
     match (string_drop _s126_ (projT1 (string_length "s5"))) with | s_ => Some s_ end
   else None.

Definition _s120_ (_s121_ : string) : option string :=
   let _s122_ := _s121_ in
   if string_startswith _s122_ "s4" then
     match (string_drop _s122_ (projT1 (string_length "s4"))) with | s_ => Some s_ end
   else None.

Definition _s116_ (_s117_ : string) : option string :=
   let _s118_ := _s117_ in
   if string_startswith _s118_ "s3" then
     match (string_drop _s118_ (projT1 (string_length "s3"))) with | s_ => Some s_ end
   else None.

Definition _s112_ (_s113_ : string) : option string :=
   let _s114_ := _s113_ in
   if string_startswith _s114_ "s2" then
     match (string_drop _s114_ (projT1 (string_length "s2"))) with | s_ => Some s_ end
   else None.

Definition _s108_ (_s109_ : string) : option string :=
   let _s110_ := _s109_ in
   if string_startswith _s110_ "a7" then
     match (string_drop _s110_ (projT1 (string_length "a7"))) with | s_ => Some s_ end
   else None.

Definition _s104_ (_s105_ : string) : option string :=
   let _s106_ := _s105_ in
   if string_startswith _s106_ "a6" then
     match (string_drop _s106_ (projT1 (string_length "a6"))) with | s_ => Some s_ end
   else None.

Definition _s100_ (_s101_ : string) : option string :=
   let _s102_ := _s101_ in
   if string_startswith _s102_ "a5" then
     match (string_drop _s102_ (projT1 (string_length "a5"))) with | s_ => Some s_ end
   else None.

Definition _s96_ (_s97_ : string) : option string :=
   let _s98_ := _s97_ in
   if string_startswith _s98_ "a4" then
     match (string_drop _s98_ (projT1 (string_length "a4"))) with | s_ => Some s_ end
   else None.

Definition _s92_ (_s93_ : string) : option string :=
   let _s94_ := _s93_ in
   if string_startswith _s94_ "a3" then
     match (string_drop _s94_ (projT1 (string_length "a3"))) with | s_ => Some s_ end
   else None.

Definition _s88_ (_s89_ : string) : option string :=
   let _s90_ := _s89_ in
   if string_startswith _s90_ "a2" then
     match (string_drop _s90_ (projT1 (string_length "a2"))) with | s_ => Some s_ end
   else None.

Definition _s84_ (_s85_ : string) : option string :=
   let _s86_ := _s85_ in
   if string_startswith _s86_ "a1" then
     match (string_drop _s86_ (projT1 (string_length "a1"))) with | s_ => Some s_ end
   else None.

Definition _s80_ (_s81_ : string) : option string :=
   let _s82_ := _s81_ in
   if string_startswith _s82_ "a0" then
     match (string_drop _s82_ (projT1 (string_length "a0"))) with | s_ => Some s_ end
   else None.

Definition _s76_ (_s77_ : string) : option string :=
   let _s78_ := _s77_ in
   if string_startswith _s78_ "s1" then
     match (string_drop _s78_ (projT1 (string_length "s1"))) with | s_ => Some s_ end
   else None.

Definition _s72_ (_s73_ : string) : option string :=
   let _s74_ := _s73_ in
   if string_startswith _s74_ "fp" then
     match (string_drop _s74_ (projT1 (string_length "fp"))) with | s_ => Some s_ end
   else None.

Definition _s68_ (_s69_ : string) : option string :=
   let _s70_ := _s69_ in
   if string_startswith _s70_ "t2" then
     match (string_drop _s70_ (projT1 (string_length "t2"))) with | s_ => Some s_ end
   else None.

Definition _s64_ (_s65_ : string) : option string :=
   let _s66_ := _s65_ in
   if string_startswith _s66_ "t1" then
     match (string_drop _s66_ (projT1 (string_length "t1"))) with | s_ => Some s_ end
   else None.

Definition _s60_ (_s61_ : string) : option string :=
   let _s62_ := _s61_ in
   if string_startswith _s62_ "t0" then
     match (string_drop _s62_ (projT1 (string_length "t0"))) with | s_ => Some s_ end
   else None.

Definition _s56_ (_s57_ : string) : option string :=
   let _s58_ := _s57_ in
   if string_startswith _s58_ "tp" then
     match (string_drop _s58_ (projT1 (string_length "tp"))) with | s_ => Some s_ end
   else None.

Definition _s52_ (_s53_ : string) : option string :=
   let _s54_ := _s53_ in
   if string_startswith _s54_ "gp" then
     match (string_drop _s54_ (projT1 (string_length "gp"))) with | s_ => Some s_ end
   else None.

Definition _s48_ (_s49_ : string) : option string :=
   let _s50_ := _s49_ in
   if string_startswith _s50_ "sp" then
     match (string_drop _s50_ (projT1 (string_length "sp"))) with | s_ => Some s_ end
   else None.

Definition _s44_ (_s45_ : string) : option string :=
   let _s46_ := _s45_ in
   if string_startswith _s46_ "ra" then
     match (string_drop _s46_ (projT1 (string_length "ra"))) with | s_ => Some s_ end
   else None.

Definition _s40_ (_s41_ : string) : option string :=
   let _s42_ := _s41_ in
   if string_startswith _s42_ "zero" then
     match (string_drop _s42_ (projT1 (string_length "zero"))) with | s_ => Some s_ end
   else None.

Definition reg_name_matches_prefix (arg_ : string)
: M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s43_ := arg_ in
   (if match (_s40_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s40_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s44_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s44_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s48_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s48_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s52_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s52_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s56_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s56_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s60_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s60_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s64_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s64_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s68_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s68_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"00111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s72_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s72_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s76_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s76_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s80_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s80_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s84_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s84_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s88_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s88_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s92_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s92_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s96_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s96_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s100_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s100_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"01111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s104_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s104_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s108_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s108_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s112_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s112_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s116_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s116_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s120_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s120_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s124_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s124_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s128_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s128_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s132_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s132_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"10111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s136_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s136_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s140_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s140_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s144_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s144_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s148_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s148_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s152_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s152_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s156_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s156_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s160_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s160_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s164_ _s43_) with | Some s_ => true | _ => false end then
      (match (_s164_ _s43_) with
       | Some s_ =>
          returnm (Some
                     ('b"11111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)}))).

Definition creg_name_forwards (arg_ : mword 3) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"000"  : mword 3) then returnm "s0"
    else if eq_vec b__0 ('b"001"  : mword 3) then returnm "s1"
    else if eq_vec b__0 ('b"010"  : mword 3) then returnm "a0"
    else if eq_vec b__0 ('b"011"  : mword 3) then returnm "a1"
    else if eq_vec b__0 ('b"100"  : mword 3) then returnm "a2"
    else if eq_vec b__0 ('b"101"  : mword 3) then returnm "a3"
    else if eq_vec b__0 ('b"110"  : mword 3) then returnm "a4"
    else if eq_vec b__0 ('b"111"  : mword 3) then returnm "a5"
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition creg_name_backwards (arg_ : string) : M (mword 3) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "s0" then returnm ('b"000"  : mword 3)
    else if generic_eq p0_ "s1" then returnm ('b"001"  : mword 3)
    else if generic_eq p0_ "a0" then returnm ('b"010"  : mword 3)
    else if generic_eq p0_ "a1" then returnm ('b"011"  : mword 3)
    else if generic_eq p0_ "a2" then returnm ('b"100"  : mword 3)
    else if generic_eq p0_ "a3" then returnm ('b"101"  : mword 3)
    else if generic_eq p0_ "a4" then returnm ('b"110"  : mword 3)
    else if generic_eq p0_ "a5" then returnm ('b"111"  : mword 3)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 3).

Definition creg_name_forwards_matches (arg_ : mword 3) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"000"  : mword 3) then true
   else if eq_vec b__0 ('b"001"  : mword 3) then true
   else if eq_vec b__0 ('b"010"  : mword 3) then true
   else if eq_vec b__0 ('b"011"  : mword 3) then true
   else if eq_vec b__0 ('b"100"  : mword 3) then true
   else if eq_vec b__0 ('b"101"  : mword 3) then true
   else if eq_vec b__0 ('b"110"  : mword 3) then true
   else if eq_vec b__0 ('b"111"  : mword 3) then true
   else false.

Definition creg_name_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "s0" then true
   else if generic_eq p0_ "s1" then true
   else if generic_eq p0_ "a0" then true
   else if generic_eq p0_ "a1" then true
   else if generic_eq p0_ "a2" then true
   else if generic_eq p0_ "a3" then true
   else if generic_eq p0_ "a4" then true
   else if generic_eq p0_ "a5" then true
   else false.

Definition _s196_ (_s197_ : string) : option string :=
   let _s198_ := _s197_ in
   if string_startswith _s198_ "a5" then
     match (string_drop _s198_ (projT1 (string_length "a5"))) with | s_ => Some s_ end
   else None.

Definition _s192_ (_s193_ : string) : option string :=
   let _s194_ := _s193_ in
   if string_startswith _s194_ "a4" then
     match (string_drop _s194_ (projT1 (string_length "a4"))) with | s_ => Some s_ end
   else None.

Definition _s188_ (_s189_ : string) : option string :=
   let _s190_ := _s189_ in
   if string_startswith _s190_ "a3" then
     match (string_drop _s190_ (projT1 (string_length "a3"))) with | s_ => Some s_ end
   else None.

Definition _s184_ (_s185_ : string) : option string :=
   let _s186_ := _s185_ in
   if string_startswith _s186_ "a2" then
     match (string_drop _s186_ (projT1 (string_length "a2"))) with | s_ => Some s_ end
   else None.

Definition _s180_ (_s181_ : string) : option string :=
   let _s182_ := _s181_ in
   if string_startswith _s182_ "a1" then
     match (string_drop _s182_ (projT1 (string_length "a1"))) with | s_ => Some s_ end
   else None.

Definition _s176_ (_s177_ : string) : option string :=
   let _s178_ := _s177_ in
   if string_startswith _s178_ "a0" then
     match (string_drop _s178_ (projT1 (string_length "a0"))) with | s_ => Some s_ end
   else None.

Definition _s172_ (_s173_ : string) : option string :=
   let _s174_ := _s173_ in
   if string_startswith _s174_ "s1" then
     match (string_drop _s174_ (projT1 (string_length "s1"))) with | s_ => Some s_ end
   else None.

Definition _s168_ (_s169_ : string) : option string :=
   let _s170_ := _s169_ in
   if string_startswith _s170_ "s0" then
     match (string_drop _s170_ (projT1 (string_length "s0"))) with | s_ => Some s_ end
   else None.

Definition creg_name_matches_prefix (arg_ : string)
: M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s171_ := arg_ in
   (if match (_s168_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s168_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"000"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s172_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s172_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"001"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s176_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s176_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"010"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s180_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s180_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"011"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s184_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s184_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"100"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s188_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s188_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"101"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s192_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s192_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"110"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s196_ _s171_) with | Some s_ => true | _ => false end then
      (match (_s196_ _s171_) with
       | Some s_ =>
          returnm (Some
                     ('b"111"
                      : mword 3, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 3 * {n : Z & ArithFact (n >=? 0)}))).

Definition init_base_regs '(tt : unit) : M (unit) :=
   write_reg x1_ref zero_reg >>
   write_reg x2_ref zero_reg >>
   write_reg x3_ref zero_reg >>
   write_reg x4_ref zero_reg >>
   write_reg x5_ref zero_reg >>
   write_reg x6_ref zero_reg >>
   write_reg x7_ref zero_reg >>
   write_reg x8_ref zero_reg >>
   write_reg x9_ref zero_reg >>
   write_reg x10_ref zero_reg >>
   write_reg x11_ref zero_reg >>
   write_reg x12_ref zero_reg >>
   write_reg x13_ref zero_reg >>
   write_reg x14_ref zero_reg >>
   write_reg x15_ref zero_reg >>
   write_reg x16_ref zero_reg >>
   write_reg x17_ref zero_reg >>
   write_reg x18_ref zero_reg >>
   write_reg x19_ref zero_reg >>
   write_reg x20_ref zero_reg >>
   write_reg x21_ref zero_reg >>
   write_reg x22_ref zero_reg >>
   write_reg x23_ref zero_reg >>
   write_reg x24_ref zero_reg >>
   write_reg x25_ref zero_reg >>
   write_reg x26_ref zero_reg >>
   write_reg x27_ref zero_reg >>
   write_reg x28_ref zero_reg >>
   write_reg x29_ref zero_reg >>
   write_reg x30_ref zero_reg >> write_reg x31_ref zero_reg  : M (unit).

Definition get_arch_pc '(tt : unit) : M (mword 32) :=
   ((read_reg PC_ref)  : M (mword 32))  : M (mword 32).

Definition get_next_pc '(tt : unit) : M (mword 32) :=
   ((read_reg nextPC_ref)  : M (mword 32))  : M (mword 32).

Definition set_next_pc (pc : mword 32) : M (unit) := write_reg nextPC_ref pc  : M (unit).

Definition tick_pc '(tt : unit) : M (unit) :=
   ((read_reg nextPC_ref)  : M (mword 32)) >>= fun w__0 : mword 32 =>
   write_reg PC_ref w__0
    : M (unit).

Definition Mk_Misa (v : mword 32) : Misa := {| Misa_Misa_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Misa_bits (v : Misa) : mword 32 := subrange_vec_dec v.(Misa_Misa_chunk_0) 31 0.

Definition _set_Misa_bits (r_ref : register_ref regstate register_value Misa) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_bits (v : Misa) (x : mword 32) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Misa_MXL (v : Misa) : mword 2 := subrange_vec_dec v.(Misa_Misa_chunk_0) 31 30.

Definition _set_Misa_MXL (r_ref : register_ref regstate register_value Misa) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 31 30 (subrange_vec_dec v 1 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_MXL (v : Misa) (x : mword 2) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 31 30 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Misa_Z (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 25 25.

Definition _set_Misa_Z (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 25 25 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Z (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 25 25 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_Y (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 24 24.

Definition _set_Misa_Y (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 24 24 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Y (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 24 24 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_X (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 23 23.

Definition _set_Misa_X (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 23 23 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_X (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 23 23 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_W (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 22 22.

Definition _set_Misa_W (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 22 22 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_W (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 22 22 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_V (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 21 21.

Definition _set_Misa_V (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 21 21 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_V (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 21 21 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_U (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 20 20.

Definition _set_Misa_U (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 20 20 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_U (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 20 20 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_T (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 19 19.

Definition _set_Misa_T (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_T (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_S (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 18 18.

Definition _set_Misa_S (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_S (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_R (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 17 17.

Definition _set_Misa_R (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 17 17 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_R (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 17 17 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_Q (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 16 16.

Definition _set_Misa_Q (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 16 16 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Q (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 16 16 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_P (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 15 15.

Definition _set_Misa_P (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 15 15 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_P (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 15 15 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_O (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 14 14.

Definition _set_Misa_O (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 14 14 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_O (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 14 14 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_N (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 13 13.

Definition _set_Misa_N (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 13 13 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_N (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 13 13 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_M (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 12 12.

Definition _set_Misa_M (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 12 12 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_M (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 12 12 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_L (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 11 11.

Definition _set_Misa_L (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 11 11 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_L (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 11 11 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_K (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 10 10.

Definition _set_Misa_K (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 10 10 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_K (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 10 10 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_J (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 9 9.

Definition _set_Misa_J (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_J (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_I (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 8 8.

Definition _set_Misa_I (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_I (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_H (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 7 7.

Definition _set_Misa_H (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_H (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_G (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 6 6.

Definition _set_Misa_G (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_G (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_F (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 5 5.

Definition _set_Misa_F (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_F (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_E (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 4 4.

Definition _set_Misa_E (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_E (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_D (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 3 3.

Definition _set_Misa_D (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_D (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_C (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 2 2.

Definition _set_Misa_C (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_C (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_B (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 1 1.

Definition _set_Misa_B (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_B (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_A (v : Misa) : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 0 0.

Definition _set_Misa_A (r_ref : register_ref regstate register_value Misa) (v : mword 1) : M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_A (v : Misa) (x : mword 1) : Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition ext_veto_disable_C '(tt : unit) : M (bool) := returnm false.

Definition legalize_misa (m : Misa) (v : mword 32) : M (Misa) :=
   (if sys_enable_writable_misa tt then
      let v := Mk_Misa v in
      (or_boolM
         ((and_boolM (returnm ((eq_vec (_get_Misa_C v) ('b"0"  : mword 1))  : bool))
             ((or_boolM
                 (((read_reg nextPC_ref)  : M (mword 32)) >>= fun w__0 : mword 32 =>
                  returnm ((eq_bit (access_vec_dec w__0 1) B1)  : bool))
                 ((ext_veto_disable_C tt)
                  : M (bool)))
              : M (bool)))
          : M (bool)) (returnm ((negb (sys_enable_rvc tt))  : bool))) >>= fun w__4 : bool =>
      let m := if sumbool_of_bool w__4 then m else _update_Misa_C m (_get_Misa_C v) in
      returnm (if orb (negb (sys_enable_fdext tt))
                    (andb (eq_vec (_get_Misa_D v) ('b"1"  : mword 1))
                       (eq_vec (_get_Misa_F v) ('b"0"  : mword 1))) then
                 m
               else _update_Misa_D (_update_Misa_F m (_get_Misa_F v)) (_get_Misa_D v))
    else returnm m)
    : M (Misa).

Definition haveAtomics '(tt : unit) : M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa => returnm (eq_vec (_get_Misa_A w__0) ('b"1"  : mword 1)).

Definition haveRVC '(tt : unit) : M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa => returnm (eq_vec (_get_Misa_C w__0) ('b"1"  : mword 1)).

Definition haveMulDiv '(tt : unit) : M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa => returnm (eq_vec (_get_Misa_M w__0) ('b"1"  : mword 1)).

Definition haveSupMode '(tt : unit) : M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa => returnm (eq_vec (_get_Misa_S w__0) ('b"1"  : mword 1)).

Definition haveUsrMode '(tt : unit) : M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa => returnm (eq_vec (_get_Misa_U w__0) ('b"1"  : mword 1)).

Definition haveNExt '(tt : unit) : M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa => returnm (eq_vec (_get_Misa_N w__0) ('b"1"  : mword 1)).

Definition Mk_Mstatus (v : mword 32) : Mstatus :=
   {| Mstatus_Mstatus_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Mstatus_bits (v : Mstatus) : mword 32 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 31 0.

Definition _set_Mstatus_bits (r_ref : register_ref regstate register_value Mstatus) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_bits (v : Mstatus) (x : mword 32) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Mstatus_SD (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 31 31.

Definition _set_Mstatus_SD (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 31 31 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SD (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 31 31 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TSR (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 22 22.

Definition _set_Mstatus_TSR (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 22 22 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TSR (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 22 22 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TW (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 21 21.

Definition _set_Mstatus_TW (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 21 21 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TW (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 21 21 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TVM (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 20 20.

Definition _set_Mstatus_TVM (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 20 20 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TVM (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 20 20 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MXR (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 19 19.

Definition _set_Mstatus_MXR (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MXR (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SUM (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 18 18.

Definition _set_Mstatus_SUM (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SUM (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MPRV (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 17 17.

Definition _set_Mstatus_MPRV (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 17 17 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPRV (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 17 17 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_XS (v : Mstatus) : mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 16 15.

Definition _set_Mstatus_XS (r_ref : register_ref regstate register_value Mstatus) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 16 15 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_XS (v : Mstatus) (x : mword 2) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 16 15 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_FS (v : Mstatus) : mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 14 13.

Definition _set_Mstatus_FS (r_ref : register_ref regstate register_value Mstatus) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 14 13 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_FS (v : Mstatus) (x : mword 2) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 14 13 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_MPP (v : Mstatus) : mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 12 11.

Definition _set_Mstatus_MPP (r_ref : register_ref regstate register_value Mstatus) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 12 11 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPP (v : Mstatus) (x : mword 2) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 12 11 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_SPP (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 8 8.

Definition _set_Mstatus_SPP (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SPP (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MPIE (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 7 7.

Definition _set_Mstatus_MPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPIE (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SPIE (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 5 5.

Definition _set_Mstatus_SPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SPIE (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_UPIE (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 4 4.

Definition _set_Mstatus_UPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UPIE (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MIE (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 3 3.

Definition _set_Mstatus_MIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MIE (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SIE (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 1 1.

Definition _set_Mstatus_SIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SIE (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_UIE (v : Mstatus) : mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 0 0.

Definition _set_Mstatus_UIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UIE (v : Mstatus) (x : mword 1) : Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition effectivePrivilege (t : AccessType unit) (m : Mstatus) (priv : Privilege) : M (Privilege) :=
   (if andb (generic_neq t (Execute tt)) (eq_vec (_get_Mstatus_MPRV m) ('b"1"  : mword 1)) then
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      (privLevel_of_bits (_get_Mstatus_MPP w__0))
       : M (Privilege)
    else read_reg cur_privilege_ref  : M (Privilege))
    : M (Privilege).

Definition get_mstatus_SXL (m : Mstatus) : mword 2 := arch_to_bits RV32.

Definition set_mstatus_SXL (m : Mstatus) (a : mword 2) : Mstatus := m.

Definition get_mstatus_UXL (m : Mstatus) : mword 2 := arch_to_bits RV32.

Definition set_mstatus_UXL (m : Mstatus) (a : mword 2) : Mstatus := m.

Definition legalize_mstatus (o : Mstatus) (v : mword 32) : M (Mstatus) :=
   let m : Mstatus := Mk_Mstatus v in
   let m := _update_Mstatus_XS m (extStatus_to_bits Off) in
   (or_boolM
      ((extStatus_of_bits (_get_Mstatus_FS m)) >>= fun w__0 : ExtStatus =>
       returnm ((generic_eq w__0 Dirty)  : bool))
      ((extStatus_of_bits (_get_Mstatus_XS m)) >>= fun w__1 : ExtStatus =>
       returnm ((generic_eq w__1 Dirty)  : bool))) >>= fun dirty =>
   let m := _update_Mstatus_SD m (bool_to_bits dirty) in
   let m := set_mstatus_SXL m (get_mstatus_SXL o) in
   let m := set_mstatus_UXL m (get_mstatus_UXL o) in
   (haveNExt tt) >>= fun w__2 : bool =>
   let m :=
     if sumbool_of_bool (negb w__2) then
       let m := _update_Mstatus_UPIE m ('b"0"  : mword 1) in
       _update_Mstatus_UIE m ('b"0"  : mword 1)
     else m in
   (haveUsrMode tt) >>= fun w__3 : bool =>
   returnm (if sumbool_of_bool (negb w__3) then _update_Mstatus_MPRV m ('b"0"  : mword 1) else m).

Definition cur_Architecture '(tt : unit) : M (Architecture) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (match w__0 with
    | Machine => read_reg misa_ref >>= fun w__1 : Misa => returnm (_get_Misa_MXL w__1)
    | Supervisor => read_reg mstatus_ref >>= fun w__2 : Mstatus => returnm (get_mstatus_SXL w__2)
    | User => read_reg mstatus_ref >>= fun w__3 : Mstatus => returnm (get_mstatus_UXL w__3)
    end) >>= fun a : arch_xlen =>
   (match (architecture a) with
    | Some a => returnm a
    | None => (internal_error "Invalid current architecture")  : M (Architecture)
    end)
    : M (Architecture).

Definition in32BitMode '(tt : unit) : M (bool) :=
   (cur_Architecture tt) >>= fun w__0 : Architecture => returnm (generic_eq w__0 RV32).

Definition haveFExt '(tt : unit) : M (bool) :=
   (and_boolM
      (read_reg misa_ref >>= fun w__0 : Misa =>
       returnm ((eq_vec (_get_Misa_F w__0) ('b"1"  : mword 1))  : bool))
      (read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       returnm ((neq_vec (_get_Mstatus_FS w__1) ('b"00"  : mword 2))  : bool)))
    : M (bool).

Definition haveDExt '(tt : unit) : M (bool) :=
   (and_boolM
      (read_reg misa_ref >>= fun w__0 : Misa =>
       returnm ((eq_vec (_get_Misa_D w__0) ('b"1"  : mword 1))  : bool))
      (read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       returnm ((neq_vec (_get_Mstatus_FS w__1) ('b"00"  : mword 2))  : bool)))
    : M (bool).

Definition Mk_Minterrupts (v : mword 32) : Minterrupts :=
   {| Minterrupts_Minterrupts_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Minterrupts_bits (v : Minterrupts) : mword 32 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 31 0.

Definition _set_Minterrupts_bits
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_bits (v : Minterrupts) (x : mword 32) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Minterrupts_MEI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 11 11.

Definition _set_Minterrupts_MEI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 11 11 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MEI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 11 11 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_SEI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 9 9.

Definition _set_Minterrupts_SEI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_SEI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_UEI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 8 8.

Definition _set_Minterrupts_UEI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_UEI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_MTI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 7 7.

Definition _set_Minterrupts_MTI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MTI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_STI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 5 5.

Definition _set_Minterrupts_STI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_STI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_UTI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 4 4.

Definition _set_Minterrupts_UTI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_UTI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_MSI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 3 3.

Definition _set_Minterrupts_MSI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MSI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_SSI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 1 1.

Definition _set_Minterrupts_SSI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_SSI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_USI (v : Minterrupts) : mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 0 0.

Definition _set_Minterrupts_USI
(r_ref : register_ref regstate register_value Minterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_USI (v : Minterrupts) (x : mword 1) : Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mip (o : Minterrupts) (v : mword 32) : M (Minterrupts) :=
   let v := Mk_Minterrupts v in
   let m := _update_Minterrupts_SEI o (_get_Minterrupts_SEI v) in
   let m := _update_Minterrupts_STI m (_get_Minterrupts_STI v) in
   let m := _update_Minterrupts_SSI m (_get_Minterrupts_SSI v) in
   (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool))) >>= fun w__2 : bool =>
   returnm (if sumbool_of_bool w__2 then
              let m := _update_Minterrupts_UEI m (_get_Minterrupts_UEI v) in
              let m := _update_Minterrupts_UTI m (_get_Minterrupts_UTI v) in
              _update_Minterrupts_USI m (_get_Minterrupts_USI v)
            else m).

Definition legalize_mie (o : Minterrupts) (v : mword 32) : M (Minterrupts) :=
   let v := Mk_Minterrupts v in
   let m := _update_Minterrupts_MEI o (_get_Minterrupts_MEI v) in
   let m := _update_Minterrupts_MTI m (_get_Minterrupts_MTI v) in
   let m := _update_Minterrupts_MSI m (_get_Minterrupts_MSI v) in
   let m := _update_Minterrupts_SEI m (_get_Minterrupts_SEI v) in
   let m := _update_Minterrupts_STI m (_get_Minterrupts_STI v) in
   let m := _update_Minterrupts_SSI m (_get_Minterrupts_SSI v) in
   (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool))) >>= fun w__2 : bool =>
   returnm (if sumbool_of_bool w__2 then
              let m := _update_Minterrupts_UEI m (_get_Minterrupts_UEI v) in
              let m := _update_Minterrupts_UTI m (_get_Minterrupts_UTI v) in
              _update_Minterrupts_USI m (_get_Minterrupts_USI v)
            else m).

Definition legalize_mideleg (o : Minterrupts) (v : mword 32) : Minterrupts :=
   let m := Mk_Minterrupts v in
   let m := _update_Minterrupts_MEI m ('b"0"  : mword 1) in
   let m := _update_Minterrupts_MTI m ('b"0"  : mword 1) in
   _update_Minterrupts_MSI m ('b"0"  : mword 1).

Definition Mk_Medeleg (v : mword 32) : Medeleg :=
   {| Medeleg_Medeleg_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Medeleg_bits (v : Medeleg) : mword 32 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 31 0.

Definition _set_Medeleg_bits (r_ref : register_ref regstate register_value Medeleg) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_bits (v : Medeleg) (x : mword 32) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Medeleg_SAMO_Page_Fault (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 15 15.

Definition _set_Medeleg_SAMO_Page_Fault
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 15 15 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Page_Fault (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 15 15 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Page_Fault (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 13 13.

Definition _set_Medeleg_Load_Page_Fault
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 13 13 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Page_Fault (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 13 13 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Page_Fault (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 12 12.

Definition _set_Medeleg_Fetch_Page_Fault
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 12 12 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Page_Fault (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 12 12 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_MEnvCall (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 10 10.

Definition _set_Medeleg_MEnvCall
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 10 10 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_MEnvCall (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 10 10 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SEnvCall (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 9 9.

Definition _set_Medeleg_SEnvCall
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SEnvCall (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_UEnvCall (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 8 8.

Definition _set_Medeleg_UEnvCall
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_UEnvCall (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SAMO_Access_Fault (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 7 7.

Definition _set_Medeleg_SAMO_Access_Fault
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Access_Fault (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SAMO_Addr_Align (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 6 6.

Definition _set_Medeleg_SAMO_Addr_Align
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Addr_Align (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Access_Fault (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 5 5.

Definition _set_Medeleg_Load_Access_Fault
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Access_Fault (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Addr_Align (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 4 4.

Definition _set_Medeleg_Load_Addr_Align
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Addr_Align (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Breakpoint (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 3 3.

Definition _set_Medeleg_Breakpoint
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Breakpoint (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Illegal_Instr (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 2 2.

Definition _set_Medeleg_Illegal_Instr
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Illegal_Instr (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Access_Fault (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 1 1.

Definition _set_Medeleg_Fetch_Access_Fault
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Access_Fault (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Addr_Align (v : Medeleg) : mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 0 0.

Definition _set_Medeleg_Fetch_Addr_Align
(r_ref : register_ref regstate register_value Medeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Addr_Align (v : Medeleg) (x : mword 1) : Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_medeleg (o : Medeleg) (v : mword 32) : Medeleg :=
   let m := Mk_Medeleg v in
   _update_Medeleg_MEnvCall m ('b"0"  : mword 1).

Definition Mk_Mtvec (v : mword 32) : Mtvec :=
   {| Mtvec_Mtvec_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Mtvec_bits (v : Mtvec) : mword 32 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 31 0.

Definition _set_Mtvec_bits (r_ref : register_ref regstate register_value Mtvec) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_bits (v : Mtvec) (x : mword 32) : Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Mtvec_Base (v : Mtvec) : mword 30 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 31 2.

Definition _set_Mtvec_Base (r_ref : register_ref regstate register_value Mtvec) (v : mword 30)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 31 2 (subrange_vec_dec v 29 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_Base (v : Mtvec) (x : mword 30) : Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 31 2 (subrange_vec_dec x 29 0)) ]}.

Definition _get_Mtvec_Mode (v : Mtvec) : mword 2 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 1 0.

Definition _set_Mtvec_Mode (r_ref : register_ref regstate register_value Mtvec) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 1 0 (subrange_vec_dec v 1 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_Mode (v : Mtvec) (x : mword 2) : Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 1 0 (subrange_vec_dec x 1 0)) ]}.

Definition legalize_tvec (o : Mtvec) (v : mword 32) : Mtvec :=
   let v := Mk_Mtvec v in
   match (trapVectorMode_of_bits (_get_Mtvec_Mode v)) with
   | TV_Direct => v
   | TV_Vector => v
   | _ => _update_Mtvec_Mode v (_get_Mtvec_Mode o)
   end.

Definition Mk_Mcause (v : mword 32) : Mcause :=
   {| Mcause_Mcause_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Mcause_bits (v : Mcause) : mword 32 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 31 0.

Definition _set_Mcause_bits (r_ref : register_ref regstate register_value Mcause) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_bits (v : Mcause) (x : mword 32) : Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Mcause_IsInterrupt (v : Mcause) : mword 1 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 31 31.

Definition _set_Mcause_IsInterrupt
(r_ref : register_ref regstate register_value Mcause) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 31 31 (subrange_vec_dec v 0 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_IsInterrupt (v : Mcause) (x : mword 1) : Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 31 31 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mcause_Cause (v : Mcause) : mword 31 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 30 0.

Definition _set_Mcause_Cause (r_ref : register_ref regstate register_value Mcause) (v : mword 31)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 30 0 (subrange_vec_dec v 30 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_Cause (v : Mcause) (x : mword 31) : Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 30 0 (subrange_vec_dec x 30 0)) ]}.

Definition tvec_addr (m : Mtvec) (c : Mcause) : option (mword 32) :=
   let base : xlenbits := concat_vec (_get_Mtvec_Base m) ('b"00"  : mword 2) in
   match (trapVectorMode_of_bits (_get_Mtvec_Mode m)) with
   | TV_Direct => Some base
   | TV_Vector =>
      if eq_vec (_get_Mcause_IsInterrupt c) ('b"1"  : mword 1) then
        Some (add_vec base (shiftl (EXTZ 32 (_get_Mcause_Cause c)) 2))
      else Some base
   | TV_Reserved => None
   end.

Definition legalize_xepc (v : mword 32) : M (mword 32) :=
   (or_boolM (returnm ((andb (sys_enable_writable_misa tt) (sys_enable_rvc tt))  : bool))
      (read_reg misa_ref >>= fun w__0 : Misa =>
       returnm ((eq_vec (_get_Misa_C w__0) ('b"1"  : mword 1))  : bool))) >>= fun w__1 : bool =>
   returnm (if sumbool_of_bool w__1 then update_vec_dec v 0 B0
            else and_vec v (EXTS 32 ('b"100"  : mword 3))).

Definition pc_alignment_mask '(tt : unit) : M (mword 32) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm (not_vec
              (EXTZ 32
                 (if eq_vec (_get_Misa_C w__0) ('b"1"  : mword 1) then 'b"00"  : mword 2
                  else 'b"10"  : mword 2))).

Definition Mk_Counteren (v : mword 32) : Counteren :=
   {| Counteren_Counteren_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Counteren_bits (v : Counteren) : mword 32 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 0.

Definition _set_Counteren_bits
(r_ref : register_ref regstate register_value Counteren) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_bits (v : Counteren) (x : mword 32) : Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Counteren_HPM (v : Counteren) : mword 29 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 3.

Definition _set_Counteren_HPM
(r_ref : register_ref regstate register_value Counteren) (v : mword 29)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 31 3 (subrange_vec_dec v 28 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_HPM (v : Counteren) (x : mword 29) : Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 3 (subrange_vec_dec x 28 0)) ]}.

Definition _get_Counteren_IR (v : Counteren) : mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 2 2.

Definition _set_Counteren_IR (r_ref : register_ref regstate register_value Counteren) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_IR (v : Counteren) (x : mword 1) : Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counteren_TM (v : Counteren) : mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 1 1.

Definition _set_Counteren_TM (r_ref : register_ref regstate register_value Counteren) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_TM (v : Counteren) (x : mword 1) : Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counteren_CY (v : Counteren) : mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 0 0.

Definition _set_Counteren_CY (r_ref : register_ref regstate register_value Counteren) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_CY (v : Counteren) (x : mword 1) : Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mcounteren (c : Counteren) (v : mword 32) : Counteren :=
   let c := _update_Counteren_IR c (vec_of_bits [access_vec_dec v 2]  : mword 1) in
   let c := _update_Counteren_TM c (vec_of_bits [access_vec_dec v 1]  : mword 1) in
   _update_Counteren_CY c (vec_of_bits [access_vec_dec v 0]  : mword 1).

Definition legalize_scounteren (c : Counteren) (v : mword 32) : Counteren :=
   let c := _update_Counteren_IR c (vec_of_bits [access_vec_dec v 2]  : mword 1) in
   let c := _update_Counteren_TM c (vec_of_bits [access_vec_dec v 1]  : mword 1) in
   _update_Counteren_CY c (vec_of_bits [access_vec_dec v 0]  : mword 1).

Definition Mk_Counterin (v : mword 32) : Counterin :=
   {| Counterin_Counterin_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Counterin_bits (v : Counterin) : mword 32 :=
   subrange_vec_dec v.(Counterin_Counterin_chunk_0) 31 0.

Definition _set_Counterin_bits
(r_ref : register_ref regstate register_value Counterin) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counterin_Counterin_chunk_0 :=
         (update_subrange_vec_dec r.(Counterin_Counterin_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Counterin in
   write_reg r_ref r
    : M (unit).

Definition _update_Counterin_bits (v : Counterin) (x : mword 32) : Counterin :=
   {[ v with
     Counterin_Counterin_chunk_0 :=
       (update_subrange_vec_dec v.(Counterin_Counterin_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Counterin_IR (v : Counterin) : mword 1 :=
   subrange_vec_dec v.(Counterin_Counterin_chunk_0) 2 2.

Definition _set_Counterin_IR (r_ref : register_ref regstate register_value Counterin) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counterin_Counterin_chunk_0 :=
         (update_subrange_vec_dec r.(Counterin_Counterin_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Counterin in
   write_reg r_ref r
    : M (unit).

Definition _update_Counterin_IR (v : Counterin) (x : mword 1) : Counterin :=
   {[ v with
     Counterin_Counterin_chunk_0 :=
       (update_subrange_vec_dec v.(Counterin_Counterin_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counterin_CY (v : Counterin) : mword 1 :=
   subrange_vec_dec v.(Counterin_Counterin_chunk_0) 0 0.

Definition _set_Counterin_CY (r_ref : register_ref regstate register_value Counterin) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Counterin_Counterin_chunk_0 :=
         (update_subrange_vec_dec r.(Counterin_Counterin_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Counterin in
   write_reg r_ref r
    : M (unit).

Definition _update_Counterin_CY (v : Counterin) (x : mword 1) : Counterin :=
   {[ v with
     Counterin_Counterin_chunk_0 :=
       (update_subrange_vec_dec v.(Counterin_Counterin_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mcountinhibit (c : Counterin) (v : mword 32) : Counterin :=
   let c := _update_Counterin_IR c (vec_of_bits [access_vec_dec v 2]  : mword 1) in
   _update_Counterin_CY c (vec_of_bits [access_vec_dec v 0]  : mword 1).

Definition retire_instruction '(tt : unit) : M (unit) :=
   read_reg minstret_written_ref >>= fun w__0 : bool =>
   (if Bool.eqb w__0 true then write_reg minstret_written_ref false  : M (unit)
    else
      ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
      write_reg minstret_ref (add_vec_int w__1 1)
       : M (unit))
    : M (unit).

Definition Mk_Sstatus (v : mword 32) : Sstatus :=
   {| Sstatus_Sstatus_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Sstatus_bits (v : Sstatus) : mword 32 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 31 0.

Definition _set_Sstatus_bits (r_ref : register_ref regstate register_value Sstatus) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_bits (v : Sstatus) (x : mword 32) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Sstatus_SD (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 31 31.

Definition _set_Sstatus_SD (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 31 31 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SD (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 31 31 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_MXR (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 19 19.

Definition _set_Sstatus_MXR (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_MXR (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SUM (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 18 18.

Definition _set_Sstatus_SUM (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SUM (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_XS (v : Sstatus) : mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 16 15.

Definition _set_Sstatus_XS (r_ref : register_ref regstate register_value Sstatus) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 16 15 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_XS (v : Sstatus) (x : mword 2) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 16 15 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_FS (v : Sstatus) : mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 14 13.

Definition _set_Sstatus_FS (r_ref : register_ref regstate register_value Sstatus) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 14 13 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_FS (v : Sstatus) (x : mword 2) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 14 13 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_SPP (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 8 8.

Definition _set_Sstatus_SPP (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SPP (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SPIE (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 5 5.

Definition _set_Sstatus_SPIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SPIE (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UPIE (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 4 4.

Definition _set_Sstatus_UPIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UPIE (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SIE (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 1 1.

Definition _set_Sstatus_SIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SIE (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UIE (v : Sstatus) : mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 0 0.

Definition _set_Sstatus_UIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UIE (v : Sstatus) (x : mword 1) : Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition get_sstatus_UXL (s : Sstatus) : mword 2 :=
   let m := Mk_Mstatus (_get_Sstatus_bits s) in
   get_mstatus_UXL m.

Definition set_sstatus_UXL (s : Sstatus) (a : mword 2) : Sstatus :=
   let m := Mk_Mstatus (_get_Sstatus_bits s) in
   let m := set_mstatus_UXL m a in
   Mk_Sstatus (_get_Mstatus_bits m).

Definition lower_mstatus (m : Mstatus) : Sstatus :=
   let s := Mk_Sstatus (EXTZ 32 ('b"0"  : mword 1)) in
   let s := _update_Sstatus_SD s (_get_Mstatus_SD m) in
   let s := set_sstatus_UXL s (get_mstatus_UXL m) in
   let s := _update_Sstatus_MXR s (_get_Mstatus_MXR m) in
   let s := _update_Sstatus_SUM s (_get_Mstatus_SUM m) in
   let s := _update_Sstatus_XS s (_get_Mstatus_XS m) in
   let s := _update_Sstatus_FS s (_get_Mstatus_FS m) in
   let s := _update_Sstatus_SPP s (_get_Mstatus_SPP m) in
   let s := _update_Sstatus_SPIE s (_get_Mstatus_SPIE m) in
   let s := _update_Sstatus_UPIE s (_get_Mstatus_UPIE m) in
   let s := _update_Sstatus_SIE s (_get_Mstatus_SIE m) in
   _update_Sstatus_UIE s (_get_Mstatus_UIE m).

Definition lift_sstatus (m : Mstatus) (s : Sstatus) : M (Mstatus) :=
   let m := _update_Mstatus_MXR m (_get_Sstatus_MXR s) in
   let m := _update_Mstatus_SUM m (_get_Sstatus_SUM s) in
   let m := _update_Mstatus_XS m (_get_Sstatus_XS s) in
   let m := _update_Mstatus_FS m (_get_Sstatus_FS s) in
   (or_boolM
      ((extStatus_of_bits (_get_Mstatus_FS m)) >>= fun w__0 : ExtStatus =>
       returnm ((generic_eq w__0 Dirty)  : bool))
      ((extStatus_of_bits (_get_Mstatus_XS m)) >>= fun w__1 : ExtStatus =>
       returnm ((generic_eq w__1 Dirty)  : bool))) >>= fun dirty =>
   let m := _update_Mstatus_SD m (bool_to_bits dirty) in
   let m := _update_Mstatus_SPP m (_get_Sstatus_SPP s) in
   let m := _update_Mstatus_SPIE m (_get_Sstatus_SPIE s) in
   let m := _update_Mstatus_UPIE m (_get_Sstatus_UPIE s) in
   let m := _update_Mstatus_SIE m (_get_Sstatus_SIE s) in
   let m := _update_Mstatus_UIE m (_get_Sstatus_UIE s) in
   returnm m.

Definition legalize_sstatus (m : Mstatus) (v : mword 32) : M (Mstatus) :=
   (lift_sstatus m (Mk_Sstatus v))  : M (Mstatus).

Definition Mk_Sedeleg (v : mword 32) : Sedeleg :=
   {| Sedeleg_Sedeleg_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Sedeleg_bits (v : Sedeleg) : mword 32 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 31 0.

Definition _set_Sedeleg_bits (r_ref : register_ref regstate register_value Sedeleg) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_bits (v : Sedeleg) (x : mword 32) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Sedeleg_UEnvCall (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 8 8.

Definition _set_Sedeleg_UEnvCall
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_UEnvCall (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_SAMO_Access_Fault (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 7 7.

Definition _set_Sedeleg_SAMO_Access_Fault
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_SAMO_Access_Fault (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_SAMO_Addr_Align (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 6 6.

Definition _set_Sedeleg_SAMO_Addr_Align
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_SAMO_Addr_Align (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Load_Access_Fault (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 5 5.

Definition _set_Sedeleg_Load_Access_Fault
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Load_Access_Fault (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Load_Addr_Align (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 4 4.

Definition _set_Sedeleg_Load_Addr_Align
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Load_Addr_Align (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Breakpoint (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 3 3.

Definition _set_Sedeleg_Breakpoint
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Breakpoint (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Illegal_Instr (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 2 2.

Definition _set_Sedeleg_Illegal_Instr
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Illegal_Instr (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Fetch_Access_Fault (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 1 1.

Definition _set_Sedeleg_Fetch_Access_Fault
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Fetch_Access_Fault (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Fetch_Addr_Align (v : Sedeleg) : mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 0 0.

Definition _set_Sedeleg_Fetch_Addr_Align
(r_ref : register_ref regstate register_value Sedeleg) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Fetch_Addr_Align (v : Sedeleg) (x : mword 1) : Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_sedeleg (s : Sedeleg) (v : mword 32) : Sedeleg :=
   Mk_Sedeleg (EXTZ 32 (subrange_vec_dec v 8 0)).

Definition Mk_Sinterrupts (v : mword 32) : Sinterrupts :=
   {| Sinterrupts_Sinterrupts_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Sinterrupts_bits (v : Sinterrupts) : mword 32 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 31 0.

Definition _set_Sinterrupts_bits
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_bits (v : Sinterrupts) (x : mword 32) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Sinterrupts_SEI (v : Sinterrupts) : mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 9 9.

Definition _set_Sinterrupts_SEI
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_SEI (v : Sinterrupts) (x : mword 1) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_UEI (v : Sinterrupts) : mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 8 8.

Definition _set_Sinterrupts_UEI
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_UEI (v : Sinterrupts) (x : mword 1) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_STI (v : Sinterrupts) : mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 5 5.

Definition _set_Sinterrupts_STI
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_STI (v : Sinterrupts) (x : mword 1) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_UTI (v : Sinterrupts) : mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 4 4.

Definition _set_Sinterrupts_UTI
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_UTI (v : Sinterrupts) (x : mword 1) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_SSI (v : Sinterrupts) : mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 1 1.

Definition _set_Sinterrupts_SSI
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_SSI (v : Sinterrupts) (x : mword 1) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_USI (v : Sinterrupts) : mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 0 0.

Definition _set_Sinterrupts_USI
(r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_USI (v : Sinterrupts) (x : mword 1) : Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_mip (m : Minterrupts) (d : Minterrupts) : Sinterrupts :=
   let s : Sinterrupts := Mk_Sinterrupts (EXTZ 32 ('b"0"  : mword 1)) in
   let s := _update_Sinterrupts_SEI s (and_vec (_get_Minterrupts_SEI m) (_get_Minterrupts_SEI d)) in
   let s := _update_Sinterrupts_STI s (and_vec (_get_Minterrupts_STI m) (_get_Minterrupts_STI d)) in
   let s := _update_Sinterrupts_SSI s (and_vec (_get_Minterrupts_SSI m) (_get_Minterrupts_SSI d)) in
   let s := _update_Sinterrupts_UEI s (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   let s := _update_Sinterrupts_UTI s (and_vec (_get_Minterrupts_UTI m) (_get_Minterrupts_UTI d)) in
   _update_Sinterrupts_USI s (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition lower_mie (m : Minterrupts) (d : Minterrupts) : Sinterrupts :=
   let s : Sinterrupts := Mk_Sinterrupts (EXTZ 32 ('b"0"  : mword 1)) in
   let s := _update_Sinterrupts_SEI s (and_vec (_get_Minterrupts_SEI m) (_get_Minterrupts_SEI d)) in
   let s := _update_Sinterrupts_STI s (and_vec (_get_Minterrupts_STI m) (_get_Minterrupts_STI d)) in
   let s := _update_Sinterrupts_SSI s (and_vec (_get_Minterrupts_SSI m) (_get_Minterrupts_SSI d)) in
   let s := _update_Sinterrupts_UEI s (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   let s := _update_Sinterrupts_UTI s (and_vec (_get_Minterrupts_UTI m) (_get_Minterrupts_UTI d)) in
   _update_Sinterrupts_USI s (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition lift_sip (o : Minterrupts) (d : Minterrupts) (s : Sinterrupts) : M (Minterrupts) :=
   let m : Minterrupts := o in
   let m := _update_Minterrupts_SSI m (and_vec (_get_Sinterrupts_SSI s) (_get_Minterrupts_SSI d)) in
   (haveNExt tt) >>= fun w__0 : bool =>
   returnm (if sumbool_of_bool w__0 then
              let m :=
                if eq_vec (_get_Minterrupts_UEI d) ('b"1"  : mword 1) then
                  _update_Minterrupts_UEI m (_get_Sinterrupts_UEI s)
                else m in
              if eq_vec (_get_Minterrupts_USI d) ('b"1"  : mword 1) then
                _update_Minterrupts_USI m (_get_Sinterrupts_USI s)
              else m
            else m).

Definition legalize_sip (m : Minterrupts) (d : Minterrupts) (v : mword 32) : M (Minterrupts) :=
   (lift_sip m d (Mk_Sinterrupts v))  : M (Minterrupts).

Definition lift_sie (o : Minterrupts) (d : Minterrupts) (s : Sinterrupts) : M (Minterrupts) :=
   let m : Minterrupts := o in
   let m :=
     if eq_vec (_get_Minterrupts_SEI d) ('b"1"  : mword 1) then
       _update_Minterrupts_SEI m (_get_Sinterrupts_SEI s)
     else m in
   let m :=
     if eq_vec (_get_Minterrupts_STI d) ('b"1"  : mword 1) then
       _update_Minterrupts_STI m (_get_Sinterrupts_STI s)
     else m in
   let m :=
     if eq_vec (_get_Minterrupts_SSI d) ('b"1"  : mword 1) then
       _update_Minterrupts_SSI m (_get_Sinterrupts_SSI s)
     else m in
   (haveNExt tt) >>= fun w__0 : bool =>
   returnm (if sumbool_of_bool w__0 then
              let m :=
                if eq_vec (_get_Minterrupts_UEI d) ('b"1"  : mword 1) then
                  _update_Minterrupts_UEI m (_get_Sinterrupts_UEI s)
                else m in
              let m :=
                if eq_vec (_get_Minterrupts_UTI d) ('b"1"  : mword 1) then
                  _update_Minterrupts_UTI m (_get_Sinterrupts_UTI s)
                else m in
              if eq_vec (_get_Minterrupts_USI d) ('b"1"  : mword 1) then
                _update_Minterrupts_USI m (_get_Sinterrupts_USI s)
              else m
            else m).

Definition legalize_sie (m : Minterrupts) (d : Minterrupts) (v : mword 32) : M (Minterrupts) :=
   (lift_sie m d (Mk_Sinterrupts v))  : M (Minterrupts).

Definition Mk_Satp64 (v : mword 64) : Satp64 :=
   {| Satp64_Satp64_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Satp64_bits (v : Satp64) : mword 64 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 0.

Definition _set_Satp64_bits (r_ref : register_ref regstate register_value Satp64) (v : mword 64)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_bits (v : Satp64) (x : mword 64) : Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Satp64_Mode (v : Satp64) : mword 4 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 60.

Definition _set_Satp64_Mode (r_ref : register_ref regstate register_value Satp64) (v : mword 4)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 63 60 (subrange_vec_dec v 3 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_Mode (v : Satp64) (x : mword 4) : Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 60 (subrange_vec_dec x 3 0)) ]}.

Definition _get_Satp64_Asid (v : Satp64) : mword 16 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 59 44.

Definition _set_Satp64_Asid (r_ref : register_ref regstate register_value Satp64) (v : mword 16)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 59 44 (subrange_vec_dec v 15 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_Asid (v : Satp64) (x : mword 16) : Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 59 44 (subrange_vec_dec x 15 0)) ]}.

Definition _get_Satp64_PPN (v : Satp64) : mword 44 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 43 0.

Definition _set_Satp64_PPN (r_ref : register_ref regstate register_value Satp64) (v : mword 44)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 43 0 (subrange_vec_dec v 43 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_PPN (v : Satp64) (x : mword 44) : Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 43 0 (subrange_vec_dec x 43 0)) ]}.

Definition legalize_satp64 (a : Architecture) (o : mword 64) (v : mword 64) : mword 64 :=
   let s := Mk_Satp64 v in
   match (satp64Mode_of_bits a (_get_Satp64_Mode s)) with
   | None => o
   | Some Sv32 => o
   | Some _ => _get_Satp64_bits s
   end.

Definition Mk_Satp32 (v : mword 32) : Satp32 :=
   {| Satp32_Satp32_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Satp32_bits (v : Satp32) : mword 32 :=
   subrange_vec_dec v.(Satp32_Satp32_chunk_0) 31 0.

Definition _set_Satp32_bits (r_ref : register_ref regstate register_value Satp32) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp32_Satp32_chunk_0 :=
         (update_subrange_vec_dec r.(Satp32_Satp32_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Satp32 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp32_bits (v : Satp32) (x : mword 32) : Satp32 :=
   {[ v with
     Satp32_Satp32_chunk_0 :=
       (update_subrange_vec_dec v.(Satp32_Satp32_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Satp32_Mode (v : Satp32) : mword 1 :=
   subrange_vec_dec v.(Satp32_Satp32_chunk_0) 31 31.

Definition _set_Satp32_Mode (r_ref : register_ref regstate register_value Satp32) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp32_Satp32_chunk_0 :=
         (update_subrange_vec_dec r.(Satp32_Satp32_chunk_0) 31 31 (subrange_vec_dec v 0 0)) ]}
      : Satp32 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp32_Mode (v : Satp32) (x : mword 1) : Satp32 :=
   {[ v with
     Satp32_Satp32_chunk_0 :=
       (update_subrange_vec_dec v.(Satp32_Satp32_chunk_0) 31 31 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Satp32_Asid (v : Satp32) : mword 9 :=
   subrange_vec_dec v.(Satp32_Satp32_chunk_0) 30 22.

Definition _set_Satp32_Asid (r_ref : register_ref regstate register_value Satp32) (v : mword 9)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp32_Satp32_chunk_0 :=
         (update_subrange_vec_dec r.(Satp32_Satp32_chunk_0) 30 22 (subrange_vec_dec v 8 0)) ]}
      : Satp32 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp32_Asid (v : Satp32) (x : mword 9) : Satp32 :=
   {[ v with
     Satp32_Satp32_chunk_0 :=
       (update_subrange_vec_dec v.(Satp32_Satp32_chunk_0) 30 22 (subrange_vec_dec x 8 0)) ]}.

Definition _get_Satp32_PPN (v : Satp32) : mword 22 :=
   subrange_vec_dec v.(Satp32_Satp32_chunk_0) 21 0.

Definition _set_Satp32_PPN (r_ref : register_ref regstate register_value Satp32) (v : mword 22)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Satp32_Satp32_chunk_0 :=
         (update_subrange_vec_dec r.(Satp32_Satp32_chunk_0) 21 0 (subrange_vec_dec v 21 0)) ]}
      : Satp32 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp32_PPN (v : Satp32) (x : mword 22) : Satp32 :=
   {[ v with
     Satp32_Satp32_chunk_0 :=
       (update_subrange_vec_dec v.(Satp32_Satp32_chunk_0) 21 0 (subrange_vec_dec x 21 0)) ]}.

Definition legalize_satp32 (a : Architecture) (o : mword 32) (v : mword 32) : mword 32 := v.

Definition PmpAddrMatchType_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 3))}
: PmpAddrMatchType :=
   let l__87 := arg_ in
   if sumbool_of_bool (Z.eqb l__87 0) then OFF
   else if sumbool_of_bool (Z.eqb l__87 1) then TOR
   else if sumbool_of_bool (Z.eqb l__87 2) then NA4
   else NAPOT.

Definition num_of_PmpAddrMatchType (arg_ : PmpAddrMatchType)
: {e : Z & ArithFact ((0 <=? e) && (e <=? 3))} :=
   build_ex (match arg_ with | OFF => 0 | TOR => 1 | NA4 => 2 | NAPOT => 3 end).

Definition pmpAddrMatchType_of_bits (bs : mword 2) : M (PmpAddrMatchType) :=
   let b__0 := bs in
   (if eq_vec b__0 ('b"00"  : mword 2) then returnm OFF
    else if eq_vec b__0 ('b"01"  : mword 2) then returnm TOR
    else if eq_vec b__0 ('b"10"  : mword 2) then returnm NA4
    else if eq_vec b__0 ('b"11"  : mword 2) then returnm NAPOT
    else
      assert_exp' false "Pattern match failure at model/riscv_pmp_regs.sail 7:2 - 12:3" >>= fun _ =>
      exit tt)
    : M (PmpAddrMatchType).

Definition pmpAddrMatchType_to_bits (bs : PmpAddrMatchType) : mword 2 :=
   match bs with
   | OFF => 'b"00"  : mword 2
   | TOR => 'b"01"  : mword 2
   | NA4 => 'b"10"  : mword 2
   | NAPOT => 'b"11"  : mword 2
   end.

Definition Mk_Pmpcfg_ent (v : mword 8) : Pmpcfg_ent :=
   {| Pmpcfg_ent_Pmpcfg_ent_chunk_0 := (subrange_vec_dec v 7 0) |}.

Definition _get_Pmpcfg_ent_bits (v : Pmpcfg_ent) : mword 8 :=
   subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 7 0.

Definition _set_Pmpcfg_ent_bits
(r_ref : register_ref regstate register_value Pmpcfg_ent) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         (update_subrange_vec_dec r.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : Pmpcfg_ent in
   write_reg r_ref r
    : M (unit).

Definition _update_Pmpcfg_ent_bits (v : Pmpcfg_ent) (x : mword 8) : Pmpcfg_ent :=
   {[ v with
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       (update_subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition _get_Pmpcfg_ent_L (v : Pmpcfg_ent) : mword 1 :=
   subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 7 7.

Definition _set_Pmpcfg_ent_L (r_ref : register_ref regstate register_value Pmpcfg_ent) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         (update_subrange_vec_dec r.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Pmpcfg_ent in
   write_reg r_ref r
    : M (unit).

Definition _update_Pmpcfg_ent_L (v : Pmpcfg_ent) (x : mword 1) : Pmpcfg_ent :=
   {[ v with
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       (update_subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Pmpcfg_ent_A (v : Pmpcfg_ent) : mword 2 :=
   subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 4 3.

Definition _set_Pmpcfg_ent_A (r_ref : register_ref regstate register_value Pmpcfg_ent) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         (update_subrange_vec_dec r.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 4 3 (subrange_vec_dec v 1 0)) ]}
      : Pmpcfg_ent in
   write_reg r_ref r
    : M (unit).

Definition _update_Pmpcfg_ent_A (v : Pmpcfg_ent) (x : mword 2) : Pmpcfg_ent :=
   {[ v with
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       (update_subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 4 3 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Pmpcfg_ent_X (v : Pmpcfg_ent) : mword 1 :=
   subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 2 2.

Definition _set_Pmpcfg_ent_X (r_ref : register_ref regstate register_value Pmpcfg_ent) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         (update_subrange_vec_dec r.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Pmpcfg_ent in
   write_reg r_ref r
    : M (unit).

Definition _update_Pmpcfg_ent_X (v : Pmpcfg_ent) (x : mword 1) : Pmpcfg_ent :=
   {[ v with
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       (update_subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Pmpcfg_ent_W (v : Pmpcfg_ent) : mword 1 :=
   subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 1 1.

Definition _set_Pmpcfg_ent_W (r_ref : register_ref regstate register_value Pmpcfg_ent) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         (update_subrange_vec_dec r.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Pmpcfg_ent in
   write_reg r_ref r
    : M (unit).

Definition _update_Pmpcfg_ent_W (v : Pmpcfg_ent) (x : mword 1) : Pmpcfg_ent :=
   {[ v with
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       (update_subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Pmpcfg_ent_R (v : Pmpcfg_ent) : mword 1 :=
   subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 0 0.

Definition _set_Pmpcfg_ent_R (r_ref : register_ref regstate register_value Pmpcfg_ent) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
         (update_subrange_vec_dec r.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Pmpcfg_ent in
   write_reg r_ref r
    : M (unit).

Definition _update_Pmpcfg_ent_R (v : Pmpcfg_ent) (x : mword 1) : Pmpcfg_ent :=
   {[ v with
     Pmpcfg_ent_Pmpcfg_ent_chunk_0 :=
       (update_subrange_vec_dec v.(Pmpcfg_ent_Pmpcfg_ent_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition pmpReadCfgReg (n : Z) `{ArithFact ((0 <=? n) && (n <? 4))} : M (mword 32) :=
   let l__83 := n in
   (if sumbool_of_bool (Z.eqb l__83 0) then
      read_reg pmp3cfg_ref >>= fun w__0 : Pmpcfg_ent =>
      read_reg pmp2cfg_ref >>= fun w__1 : Pmpcfg_ent =>
      read_reg pmp1cfg_ref >>= fun w__2 : Pmpcfg_ent =>
      read_reg pmp0cfg_ref >>= fun w__3 : Pmpcfg_ent =>
      returnm (concat_vec (_get_Pmpcfg_ent_bits w__0)
                 (concat_vec (_get_Pmpcfg_ent_bits w__1)
                    (concat_vec (_get_Pmpcfg_ent_bits w__2) (_get_Pmpcfg_ent_bits w__3))))
    else if sumbool_of_bool (Z.eqb l__83 1) then
      read_reg pmp7cfg_ref >>= fun w__4 : Pmpcfg_ent =>
      read_reg pmp6cfg_ref >>= fun w__5 : Pmpcfg_ent =>
      read_reg pmp5cfg_ref >>= fun w__6 : Pmpcfg_ent =>
      read_reg pmp4cfg_ref >>= fun w__7 : Pmpcfg_ent =>
      returnm (concat_vec (_get_Pmpcfg_ent_bits w__4)
                 (concat_vec (_get_Pmpcfg_ent_bits w__5)
                    (concat_vec (_get_Pmpcfg_ent_bits w__6) (_get_Pmpcfg_ent_bits w__7))))
    else if sumbool_of_bool (Z.eqb l__83 2) then
      read_reg pmp11cfg_ref >>= fun w__8 : Pmpcfg_ent =>
      read_reg pmp10cfg_ref >>= fun w__9 : Pmpcfg_ent =>
      read_reg pmp9cfg_ref >>= fun w__10 : Pmpcfg_ent =>
      read_reg pmp8cfg_ref >>= fun w__11 : Pmpcfg_ent =>
      returnm (concat_vec (_get_Pmpcfg_ent_bits w__8)
                 (concat_vec (_get_Pmpcfg_ent_bits w__9)
                    (concat_vec (_get_Pmpcfg_ent_bits w__10) (_get_Pmpcfg_ent_bits w__11))))
    else if sumbool_of_bool (Z.eqb l__83 3) then
      read_reg pmp15cfg_ref >>= fun w__12 : Pmpcfg_ent =>
      read_reg pmp14cfg_ref >>= fun w__13 : Pmpcfg_ent =>
      read_reg pmp13cfg_ref >>= fun w__14 : Pmpcfg_ent =>
      read_reg pmp12cfg_ref >>= fun w__15 : Pmpcfg_ent =>
      returnm (concat_vec (_get_Pmpcfg_ent_bits w__12)
                 (concat_vec (_get_Pmpcfg_ent_bits w__13)
                    (concat_vec (_get_Pmpcfg_ent_bits w__14) (_get_Pmpcfg_ent_bits w__15))))
    else
      assert_exp' false "Pattern match failure at model/riscv_pmp_regs.sail 75:2 - 85:8" >>= fun _ =>
      exit tt)
    : M (mword 32).

Definition pmpLocked (cfg : Pmpcfg_ent) : bool := eq_vec (_get_Pmpcfg_ent_L cfg) ('b"1"  : mword 1).

Definition pmpTORLocked (cfg : Pmpcfg_ent) : M (bool) :=
   (and_boolM (returnm ((eq_vec (_get_Pmpcfg_ent_L cfg) ('b"1"  : mword 1))  : bool))
      ((pmpAddrMatchType_of_bits (_get_Pmpcfg_ent_A cfg)) >>= fun w__0 : PmpAddrMatchType =>
       returnm ((generic_eq w__0 TOR)  : bool)))
    : M (bool).

Definition pmpWriteCfg (cfg : Pmpcfg_ent) (v : mword 8) : Pmpcfg_ent :=
   if pmpLocked cfg then cfg else Mk_Pmpcfg_ent (and_vec v (Ox"9F"  : mword 8)).

Definition pmpWriteCfgReg (n : Z) (v : mword 32) `{ArithFact ((0 <=? n) && (n <? 4))} : M (unit) :=
   let l__79 := n in
   (if sumbool_of_bool (Z.eqb l__79 0) then
      read_reg pmp0cfg_ref >>= fun w__0 : Pmpcfg_ent =>
      write_reg pmp0cfg_ref (pmpWriteCfg w__0 (subrange_vec_dec v 7 0)) >>
      read_reg pmp1cfg_ref >>= fun w__1 : Pmpcfg_ent =>
      write_reg pmp1cfg_ref (pmpWriteCfg w__1 (subrange_vec_dec v 15 8)) >>
      read_reg pmp2cfg_ref >>= fun w__2 : Pmpcfg_ent =>
      write_reg pmp2cfg_ref (pmpWriteCfg w__2 (subrange_vec_dec v 23 16)) >>
      read_reg pmp3cfg_ref >>= fun w__3 : Pmpcfg_ent =>
      write_reg pmp3cfg_ref (pmpWriteCfg w__3 (subrange_vec_dec v 31 24))
       : M (unit)
    else if sumbool_of_bool (Z.eqb l__79 1) then
      read_reg pmp4cfg_ref >>= fun w__4 : Pmpcfg_ent =>
      write_reg pmp4cfg_ref (pmpWriteCfg w__4 (subrange_vec_dec v 7 0)) >>
      read_reg pmp5cfg_ref >>= fun w__5 : Pmpcfg_ent =>
      write_reg pmp5cfg_ref (pmpWriteCfg w__5 (subrange_vec_dec v 15 8)) >>
      read_reg pmp6cfg_ref >>= fun w__6 : Pmpcfg_ent =>
      write_reg pmp6cfg_ref (pmpWriteCfg w__6 (subrange_vec_dec v 23 16)) >>
      read_reg pmp7cfg_ref >>= fun w__7 : Pmpcfg_ent =>
      write_reg pmp7cfg_ref (pmpWriteCfg w__7 (subrange_vec_dec v 31 24))
       : M (unit)
    else if sumbool_of_bool (Z.eqb l__79 2) then
      read_reg pmp8cfg_ref >>= fun w__8 : Pmpcfg_ent =>
      write_reg pmp8cfg_ref (pmpWriteCfg w__8 (subrange_vec_dec v 7 0)) >>
      read_reg pmp9cfg_ref >>= fun w__9 : Pmpcfg_ent =>
      write_reg pmp9cfg_ref (pmpWriteCfg w__9 (subrange_vec_dec v 15 8)) >>
      read_reg pmp10cfg_ref >>= fun w__10 : Pmpcfg_ent =>
      write_reg pmp10cfg_ref (pmpWriteCfg w__10 (subrange_vec_dec v 23 16)) >>
      read_reg pmp11cfg_ref >>= fun w__11 : Pmpcfg_ent =>
      write_reg pmp11cfg_ref (pmpWriteCfg w__11 (subrange_vec_dec v 31 24))
       : M (unit)
    else if sumbool_of_bool (Z.eqb l__79 3) then
      read_reg pmp12cfg_ref >>= fun w__12 : Pmpcfg_ent =>
      write_reg pmp12cfg_ref (pmpWriteCfg w__12 (subrange_vec_dec v 7 0)) >>
      read_reg pmp13cfg_ref >>= fun w__13 : Pmpcfg_ent =>
      write_reg pmp13cfg_ref (pmpWriteCfg w__13 (subrange_vec_dec v 15 8)) >>
      read_reg pmp14cfg_ref >>= fun w__14 : Pmpcfg_ent =>
      write_reg pmp14cfg_ref (pmpWriteCfg w__14 (subrange_vec_dec v 23 16)) >>
      read_reg pmp15cfg_ref >>= fun w__15 : Pmpcfg_ent =>
      write_reg pmp15cfg_ref (pmpWriteCfg w__15 (subrange_vec_dec v 31 24))
       : M (unit)
    else
      assert_exp' false "Pattern match failure at model/riscv_pmp_regs.sail 101:2 - 144:8" >>= fun _ =>
      exit tt)
    : M (unit).

Definition pmpWriteAddr (locked : bool) (tor_locked : bool) (reg : mword 32) (v : mword 32)
: mword 32 :=
   if sumbool_of_bool (orb locked tor_locked) then reg else v.

Definition pmpAddrRange (cfg : Pmpcfg_ent) (pmpaddr : mword 32) (prev_pmpaddr : mword 32)
: M (option ((mword 32 * mword 32))) :=
   (pmpAddrMatchType_of_bits (_get_Pmpcfg_ent_A cfg)) >>= fun w__0 : PmpAddrMatchType =>
   returnm (match w__0 with
            | OFF => None
            | TOR => Some (shiftl prev_pmpaddr 2, shiftl pmpaddr 2)
            | NA4 =>
               let lo := shiftl pmpaddr 2 in
               Some (lo, add_vec_int lo 4)
            | NAPOT =>
               let mask := xor_vec pmpaddr (add_vec_int pmpaddr 1) in
               let lo := and_vec pmpaddr (not_vec mask) in
               let len := add_vec_int mask 1 in
               Some (shiftl lo 2, shiftl (add_vec lo len) 2)
            end).

Definition pmpCheckRWX (ent : Pmpcfg_ent) (acc : AccessType unit) : bool :=
   match acc with
   | Read _ => eq_vec (_get_Pmpcfg_ent_R ent) ('b"1"  : mword 1)
   | Write _ => eq_vec (_get_Pmpcfg_ent_W ent) ('b"1"  : mword 1)
   | ReadWrite _ =>
      andb (eq_vec (_get_Pmpcfg_ent_R ent) ('b"1"  : mword 1))
        (eq_vec (_get_Pmpcfg_ent_W ent) ('b"1"  : mword 1))
   | Execute tt => eq_vec (_get_Pmpcfg_ent_X ent) ('b"1"  : mword 1)
   end.

Definition pmpCheckPerms (ent : Pmpcfg_ent) (acc : AccessType unit) (priv : Privilege) : bool :=
   match priv with
   | Machine => if pmpLocked ent then pmpCheckRWX ent acc else true
   | _ => pmpCheckRWX ent acc
   end.

Definition pmpAddrMatch_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : pmpAddrMatch :=
   let l__77 := arg_ in
   if sumbool_of_bool (Z.eqb l__77 0) then PMP_NoMatch
   else if sumbool_of_bool (Z.eqb l__77 1) then PMP_PartialMatch
   else PMP_Match.

Definition num_of_pmpAddrMatch (arg_ : pmpAddrMatch) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | PMP_NoMatch => 0 | PMP_PartialMatch => 1 | PMP_Match => 2 end).

Definition pmpMatchAddr (addr : mword 32) (width : mword 32) (rng : option ((mword 32 * mword 32)))
: pmpAddrMatch :=
   match rng with
   | None => PMP_NoMatch
   | Some (lo, hi) =>
      if zopz0zI_u hi lo then PMP_NoMatch
      else if orb (zopz0zI_u (add_vec addr width) lo) (zopz0zI_u hi addr) then PMP_NoMatch
      else if andb (zopz0zIzJ_u lo addr) (zopz0zIzJ_u (add_vec addr width) hi) then PMP_Match
      else PMP_PartialMatch
   end.

Definition pmpMatch_of_num (arg_ : Z) `{ArithFact ((0 <=? arg_) && (arg_ <=? 2))} : pmpMatch :=
   let l__75 := arg_ in
   if sumbool_of_bool (Z.eqb l__75 0) then PMP_Success
   else if sumbool_of_bool (Z.eqb l__75 1) then PMP_Continue
   else PMP_Fail.

Definition num_of_pmpMatch (arg_ : pmpMatch) : {e : Z & ArithFact ((0 <=? e) && (e <=? 2))} :=
   build_ex (match arg_ with | PMP_Success => 0 | PMP_Continue => 1 | PMP_Fail => 2 end).

Definition pmpMatchEntry
(addr : mword 32) (width : mword 32) (acc : AccessType unit) (priv : Privilege) (ent : Pmpcfg_ent)
(pmpaddr : mword 32) (prev_pmpaddr : mword 32)
: M (pmpMatch) :=
   (pmpAddrRange ent pmpaddr prev_pmpaddr) >>= fun rng =>
   returnm (match (pmpMatchAddr addr width rng) with
            | PMP_NoMatch => PMP_Continue
            | PMP_PartialMatch => PMP_Fail
            | PMP_Match => if pmpCheckPerms ent acc priv then PMP_Success else PMP_Fail
            end).

Definition pmpCheck (addr : mword 32) (width : Z) (acc : AccessType unit) (priv : Privilege)
`{ArithFact (width >? 0)}
: M (option ExceptionType) :=
   let width : xlenbits := to_bits 32 width in
   read_reg pmp0cfg_ref >>= fun w__0 : Pmpcfg_ent =>
   ((read_reg pmpaddr0_ref)  : M (mword 32)) >>= fun w__1 : mword 32 =>
   (pmpMatchEntry addr width acc priv w__0 w__1 (zeros_implicit 32)) >>= fun w__2 : pmpMatch =>
   (match w__2 with
    | PMP_Success => returnm true
    | PMP_Fail => returnm false
    | PMP_Continue =>
       read_reg pmp1cfg_ref >>= fun w__3 : Pmpcfg_ent =>
       ((read_reg pmpaddr1_ref)  : M (mword 32)) >>= fun w__4 : mword 32 =>
       ((read_reg pmpaddr0_ref)  : M (mword 32)) >>= fun w__5 : mword 32 =>
       (pmpMatchEntry addr width acc priv w__3 w__4 w__5) >>= fun w__6 : pmpMatch =>
       (match w__6 with
        | PMP_Success => returnm true
        | PMP_Fail => returnm false
        | PMP_Continue =>
           read_reg pmp2cfg_ref >>= fun w__7 : Pmpcfg_ent =>
           ((read_reg pmpaddr2_ref)  : M (mword 32)) >>= fun w__8 : mword 32 =>
           ((read_reg pmpaddr1_ref)  : M (mword 32)) >>= fun w__9 : mword 32 =>
           (pmpMatchEntry addr width acc priv w__7 w__8 w__9) >>= fun w__10 : pmpMatch =>
           (match w__10 with
            | PMP_Success => returnm true
            | PMP_Fail => returnm false
            | PMP_Continue =>
               read_reg pmp3cfg_ref >>= fun w__11 : Pmpcfg_ent =>
               ((read_reg pmpaddr3_ref)  : M (mword 32)) >>= fun w__12 : mword 32 =>
               ((read_reg pmpaddr2_ref)  : M (mword 32)) >>= fun w__13 : mword 32 =>
               (pmpMatchEntry addr width acc priv w__11 w__12 w__13) >>= fun w__14 : pmpMatch =>
               (match w__14 with
                | PMP_Success => returnm true
                | PMP_Fail => returnm false
                | PMP_Continue =>
                   read_reg pmp4cfg_ref >>= fun w__15 : Pmpcfg_ent =>
                   ((read_reg pmpaddr4_ref)  : M (mword 32)) >>= fun w__16 : mword 32 =>
                   ((read_reg pmpaddr3_ref)  : M (mword 32)) >>= fun w__17 : mword 32 =>
                   (pmpMatchEntry addr width acc priv w__15 w__16 w__17) >>= fun w__18 : pmpMatch =>
                   (match w__18 with
                    | PMP_Success => returnm true
                    | PMP_Fail => returnm false
                    | PMP_Continue =>
                       read_reg pmp5cfg_ref >>= fun w__19 : Pmpcfg_ent =>
                       ((read_reg pmpaddr5_ref)  : M (mword 32)) >>= fun w__20 : mword 32 =>
                       ((read_reg pmpaddr4_ref)  : M (mword 32)) >>= fun w__21 : mword 32 =>
                       (pmpMatchEntry addr width acc priv w__19 w__20 w__21) >>= fun w__22 : pmpMatch =>
                       (match w__22 with
                        | PMP_Success => returnm true
                        | PMP_Fail => returnm false
                        | PMP_Continue =>
                           read_reg pmp6cfg_ref >>= fun w__23 : Pmpcfg_ent =>
                           ((read_reg pmpaddr6_ref)  : M (mword 32)) >>= fun w__24 : mword 32 =>
                           ((read_reg pmpaddr5_ref)  : M (mword 32)) >>= fun w__25 : mword 32 =>
                           (pmpMatchEntry addr width acc priv w__23 w__24 w__25) >>= fun w__26 : pmpMatch =>
                           (match w__26 with
                            | PMP_Success => returnm true
                            | PMP_Fail => returnm false
                            | PMP_Continue =>
                               read_reg pmp7cfg_ref >>= fun w__27 : Pmpcfg_ent =>
                               ((read_reg pmpaddr7_ref)  : M (mword 32)) >>= fun w__28 : mword 32 =>
                               ((read_reg pmpaddr6_ref)  : M (mword 32)) >>= fun w__29 : mword 32 =>
                               (pmpMatchEntry addr width acc priv w__27 w__28 w__29) >>= fun w__30 : pmpMatch =>
                               (match w__30 with
                                | PMP_Success => returnm true
                                | PMP_Fail => returnm false
                                | PMP_Continue =>
                                   read_reg pmp8cfg_ref >>= fun w__31 : Pmpcfg_ent =>
                                   ((read_reg pmpaddr8_ref)  : M (mword 32)) >>= fun w__32 : mword 32 =>
                                   ((read_reg pmpaddr7_ref)  : M (mword 32)) >>= fun w__33 : mword 32 =>
                                   (pmpMatchEntry addr width acc priv w__31 w__32 w__33) >>= fun w__34 : pmpMatch =>
                                   (match w__34 with
                                    | PMP_Success => returnm true
                                    | PMP_Fail => returnm false
                                    | PMP_Continue =>
                                       read_reg pmp9cfg_ref >>= fun w__35 : Pmpcfg_ent =>
                                       ((read_reg pmpaddr9_ref)  : M (mword 32)) >>= fun w__36 : mword 32 =>
                                       ((read_reg pmpaddr8_ref)  : M (mword 32)) >>= fun w__37 : mword 32 =>
                                       (pmpMatchEntry addr width acc priv w__35 w__36 w__37) >>= fun w__38 : pmpMatch =>
                                       (match w__38 with
                                        | PMP_Success => returnm true
                                        | PMP_Fail => returnm false
                                        | PMP_Continue =>
                                           read_reg pmp10cfg_ref >>= fun w__39 : Pmpcfg_ent =>
                                           ((read_reg pmpaddr10_ref)  : M (mword 32)) >>= fun w__40 : mword 32 =>
                                           ((read_reg pmpaddr9_ref)  : M (mword 32)) >>= fun w__41 : mword 32 =>
                                           (pmpMatchEntry addr width acc priv w__39 w__40 w__41) >>= fun w__42 : pmpMatch =>
                                           (match w__42 with
                                            | PMP_Success => returnm true
                                            | PMP_Fail => returnm false
                                            | PMP_Continue =>
                                               read_reg pmp11cfg_ref >>= fun w__43 : Pmpcfg_ent =>
                                               ((read_reg pmpaddr11_ref)  : M (mword 32)) >>= fun w__44 : mword 32 =>
                                               ((read_reg pmpaddr10_ref)  : M (mword 32)) >>= fun w__45 : mword 32 =>
                                               (pmpMatchEntry addr width acc priv w__43 w__44 w__45) >>= fun w__46 : pmpMatch =>
                                               (match w__46 with
                                                | PMP_Success => returnm true
                                                | PMP_Fail => returnm false
                                                | PMP_Continue =>
                                                   read_reg pmp12cfg_ref >>= fun w__47 : Pmpcfg_ent =>
                                                   ((read_reg pmpaddr12_ref)  : M (mword 32)) >>= fun w__48 : mword 32 =>
                                                   ((read_reg pmpaddr11_ref)  : M (mword 32)) >>= fun w__49 : mword 32 =>
                                                   (pmpMatchEntry addr width acc priv w__47 w__48
                                                      w__49) >>= fun w__50 : pmpMatch =>
                                                   (match w__50 with
                                                    | PMP_Success => returnm true
                                                    | PMP_Fail => returnm false
                                                    | PMP_Continue =>
                                                       read_reg pmp13cfg_ref >>= fun w__51 : Pmpcfg_ent =>
                                                       ((read_reg pmpaddr13_ref)  : M (mword 32)) >>= fun w__52 : mword 32 =>
                                                       ((read_reg pmpaddr12_ref)  : M (mword 32)) >>= fun w__53 : mword 32 =>
                                                       (pmpMatchEntry addr width acc priv w__51
                                                          w__52 w__53) >>= fun w__54 : pmpMatch =>
                                                       (match w__54 with
                                                        | PMP_Success => returnm true
                                                        | PMP_Fail => returnm false
                                                        | PMP_Continue =>
                                                           read_reg pmp14cfg_ref >>= fun w__55 : Pmpcfg_ent =>
                                                           ((read_reg pmpaddr14_ref)  : M (mword 32)) >>= fun w__56 : mword 32 =>
                                                           ((read_reg pmpaddr13_ref)  : M (mword 32)) >>= fun w__57 : mword 32 =>
                                                           (pmpMatchEntry addr width acc priv w__55
                                                              w__56 w__57) >>= fun w__58 : pmpMatch =>
                                                           (match w__58 with
                                                            | PMP_Success => returnm true
                                                            | PMP_Fail => returnm false
                                                            | PMP_Continue =>
                                                               read_reg pmp15cfg_ref >>= fun w__59 : Pmpcfg_ent =>
                                                               ((read_reg pmpaddr15_ref)
                                                                 : M (mword 32)) >>= fun w__60 : mword 32 =>
                                                               ((read_reg pmpaddr14_ref)
                                                                 : M (mword 32)) >>= fun w__61 : mword 32 =>
                                                               (pmpMatchEntry addr width acc priv
                                                                  w__59 w__60 w__61) >>= fun w__62 : pmpMatch =>
                                                               returnm (match w__62 with
                                                                        | PMP_Success => true
                                                                        | PMP_Fail => false
                                                                        | PMP_Continue =>
                                                                           match priv with
                                                                           | Machine => true
                                                                           | _ => false
                                                                           end
                                                                        end)
                                                            end)
                                                            : M (bool)
                                                        end)
                                                        : M (bool)
                                                    end)
                                                    : M (bool)
                                                end)
                                                : M (bool)
                                            end)
                                            : M (bool)
                                        end)
                                        : M (bool)
                                    end)
                                    : M (bool)
                                end)
                                : M (bool)
                            end)
                            : M (bool)
                        end)
                        : M (bool)
                    end)
                    : M (bool)
                end)
                : M (bool)
            end)
            : M (bool)
        end)
        : M (bool)
    end) >>= fun check' : bool =>
   returnm (if sumbool_of_bool check' then None
            else
              match acc with
              | Read _ => Some (E_Load_Access_Fault tt)
              | Write _ => Some (E_SAMO_Access_Fault tt)
              | ReadWrite _ => Some (E_SAMO_Access_Fault tt)
              | Execute tt => Some (E_Fetch_Access_Fault tt)
              end).

Definition init_pmp '(tt : unit) : M (unit) :=
   read_reg pmp0cfg_ref >>= fun w__0 : Pmpcfg_ent =>
   write_reg pmp0cfg_ref (_update_Pmpcfg_ent_A w__0 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp1cfg_ref >>= fun w__1 : Pmpcfg_ent =>
   write_reg pmp1cfg_ref (_update_Pmpcfg_ent_A w__1 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp2cfg_ref >>= fun w__2 : Pmpcfg_ent =>
   write_reg pmp2cfg_ref (_update_Pmpcfg_ent_A w__2 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp3cfg_ref >>= fun w__3 : Pmpcfg_ent =>
   write_reg pmp3cfg_ref (_update_Pmpcfg_ent_A w__3 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp4cfg_ref >>= fun w__4 : Pmpcfg_ent =>
   write_reg pmp4cfg_ref (_update_Pmpcfg_ent_A w__4 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp5cfg_ref >>= fun w__5 : Pmpcfg_ent =>
   write_reg pmp5cfg_ref (_update_Pmpcfg_ent_A w__5 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp6cfg_ref >>= fun w__6 : Pmpcfg_ent =>
   write_reg pmp6cfg_ref (_update_Pmpcfg_ent_A w__6 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp7cfg_ref >>= fun w__7 : Pmpcfg_ent =>
   write_reg pmp7cfg_ref (_update_Pmpcfg_ent_A w__7 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp8cfg_ref >>= fun w__8 : Pmpcfg_ent =>
   write_reg pmp8cfg_ref (_update_Pmpcfg_ent_A w__8 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp9cfg_ref >>= fun w__9 : Pmpcfg_ent =>
   write_reg pmp9cfg_ref (_update_Pmpcfg_ent_A w__9 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp10cfg_ref >>= fun w__10 : Pmpcfg_ent =>
   write_reg pmp10cfg_ref (_update_Pmpcfg_ent_A w__10 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp11cfg_ref >>= fun w__11 : Pmpcfg_ent =>
   write_reg pmp11cfg_ref (_update_Pmpcfg_ent_A w__11 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp12cfg_ref >>= fun w__12 : Pmpcfg_ent =>
   write_reg pmp12cfg_ref (_update_Pmpcfg_ent_A w__12 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp13cfg_ref >>= fun w__13 : Pmpcfg_ent =>
   write_reg pmp13cfg_ref (_update_Pmpcfg_ent_A w__13 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp14cfg_ref >>= fun w__14 : Pmpcfg_ent =>
   write_reg pmp14cfg_ref (_update_Pmpcfg_ent_A w__14 (pmpAddrMatchType_to_bits OFF)) >>
   read_reg pmp15cfg_ref >>= fun w__15 : Pmpcfg_ent =>
   write_reg pmp15cfg_ref (_update_Pmpcfg_ent_A w__15 (pmpAddrMatchType_to_bits OFF))
    : M (unit).

Definition ext_init_regs '(tt : unit) : M (unit) := returnm tt.

Definition ext_rvfi_init '(tt : unit) : M (unit) :=
   ((read_reg x1_ref)  : M (mword 32)) >>= fun w__0 : mword 32 => write_reg x1_ref w__0  : M (unit).

Definition ext_check_CSR (csrno : mword 12) (p : Privilege) (isWrite : bool) : bool := true.

Definition ext_check_CSR_fail '(tt : unit) : unit := tt.

Definition ext_fetch_check_pc (start_pc : mword 32) (pc : mword 32) : Ext_FetchAddr_Check unit :=
   Ext_FetchAddr_OK pc.

Definition ext_handle_fetch_check_error (err : unit) : unit := tt.

Definition ext_control_check_addr (pc : mword 32) : Ext_ControlAddr_Check unit :=
   Ext_ControlAddr_OK pc.

Definition ext_control_check_pc (pc : mword 32) : Ext_ControlAddr_Check unit :=
   Ext_ControlAddr_OK pc.

Definition ext_handle_control_check_error (err : unit) : unit := tt.

Definition ext_data_get_addr
(base : mword 5) (offset : mword 32) (acc : AccessType unit) (width : word_width)
: M (Ext_DataAddr_Check unit) :=
   (rX_bits base) >>= fun w__0 : mword 32 =>
   let addr := add_vec w__0 offset in
   returnm (Ext_DataAddr_OK addr).

Definition ext_handle_data_check_error (err : unit) : unit := tt.

Definition Mk_Ustatus (v : mword 32) : Ustatus :=
   {| Ustatus_Ustatus_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Ustatus_bits (v : Ustatus) : mword 32 :=
   subrange_vec_dec v.(Ustatus_Ustatus_chunk_0) 31 0.

Definition _set_Ustatus_bits (r_ref : register_ref regstate register_value Ustatus) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Ustatus_Ustatus_chunk_0 :=
         (update_subrange_vec_dec r.(Ustatus_Ustatus_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Ustatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Ustatus_bits (v : Ustatus) (x : mword 32) : Ustatus :=
   {[ v with
     Ustatus_Ustatus_chunk_0 :=
       (update_subrange_vec_dec v.(Ustatus_Ustatus_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Ustatus_UPIE (v : Ustatus) : mword 1 :=
   subrange_vec_dec v.(Ustatus_Ustatus_chunk_0) 4 4.

Definition _set_Ustatus_UPIE (r_ref : register_ref regstate register_value Ustatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Ustatus_Ustatus_chunk_0 :=
         (update_subrange_vec_dec r.(Ustatus_Ustatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Ustatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Ustatus_UPIE (v : Ustatus) (x : mword 1) : Ustatus :=
   {[ v with
     Ustatus_Ustatus_chunk_0 :=
       (update_subrange_vec_dec v.(Ustatus_Ustatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Ustatus_UIE (v : Ustatus) : mword 1 :=
   subrange_vec_dec v.(Ustatus_Ustatus_chunk_0) 0 0.

Definition _set_Ustatus_UIE (r_ref : register_ref regstate register_value Ustatus) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Ustatus_Ustatus_chunk_0 :=
         (update_subrange_vec_dec r.(Ustatus_Ustatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Ustatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Ustatus_UIE (v : Ustatus) (x : mword 1) : Ustatus :=
   {[ v with
     Ustatus_Ustatus_chunk_0 :=
       (update_subrange_vec_dec v.(Ustatus_Ustatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_sstatus (s : Sstatus) : Ustatus :=
   let u := Mk_Ustatus (EXTZ 32 ('b"0"  : mword 1)) in
   let u := _update_Ustatus_UPIE u (_get_Sstatus_UPIE s) in
   _update_Ustatus_UIE u (_get_Sstatus_UIE s).

Definition lift_ustatus (s : Sstatus) (u : Ustatus) : Sstatus :=
   let s := _update_Sstatus_UPIE s (_get_Ustatus_UPIE u) in
   _update_Sstatus_UIE s (_get_Ustatus_UIE u).

Definition legalize_ustatus (m : Mstatus) (v : mword 32) : M (Mstatus) :=
   let u := Mk_Ustatus v in
   let s := lower_mstatus m in
   let s := lift_ustatus s u in
   lift_sstatus m s.

Definition Mk_Uinterrupts (v : mword 32) : Uinterrupts :=
   {| Uinterrupts_Uinterrupts_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Uinterrupts_bits (v : Uinterrupts) : mword 32 :=
   subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 31 0.

Definition _set_Uinterrupts_bits
(r_ref : register_ref regstate register_value Uinterrupts) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Uinterrupts_Uinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Uinterrupts_Uinterrupts_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Uinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Uinterrupts_bits (v : Uinterrupts) (x : mword 32) : Uinterrupts :=
   {[ v with
     Uinterrupts_Uinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Uinterrupts_UEI (v : Uinterrupts) : mword 1 :=
   subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 8 8.

Definition _set_Uinterrupts_UEI
(r_ref : register_ref regstate register_value Uinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Uinterrupts_Uinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Uinterrupts_Uinterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Uinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Uinterrupts_UEI (v : Uinterrupts) (x : mword 1) : Uinterrupts :=
   {[ v with
     Uinterrupts_Uinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Uinterrupts_UTI (v : Uinterrupts) : mword 1 :=
   subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 4 4.

Definition _set_Uinterrupts_UTI
(r_ref : register_ref regstate register_value Uinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Uinterrupts_Uinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Uinterrupts_Uinterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Uinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Uinterrupts_UTI (v : Uinterrupts) (x : mword 1) : Uinterrupts :=
   {[ v with
     Uinterrupts_Uinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Uinterrupts_USI (v : Uinterrupts) : mword 1 :=
   subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 0 0.

Definition _set_Uinterrupts_USI
(r_ref : register_ref regstate register_value Uinterrupts) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Uinterrupts_Uinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Uinterrupts_Uinterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Uinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Uinterrupts_USI (v : Uinterrupts) (x : mword 1) : Uinterrupts :=
   {[ v with
     Uinterrupts_Uinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Uinterrupts_Uinterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_sip (s : Sinterrupts) (d : Sinterrupts) : Uinterrupts :=
   let u : Uinterrupts := Mk_Uinterrupts (EXTZ 32 ('b"0"  : mword 1)) in
   let u := _update_Uinterrupts_UEI u (and_vec (_get_Sinterrupts_UEI s) (_get_Sinterrupts_UEI d)) in
   let u := _update_Uinterrupts_UTI u (and_vec (_get_Sinterrupts_UTI s) (_get_Sinterrupts_UTI d)) in
   _update_Uinterrupts_USI u (and_vec (_get_Sinterrupts_USI s) (_get_Sinterrupts_USI d)).

Definition lower_sie (s : Sinterrupts) (d : Sinterrupts) : Uinterrupts :=
   let u : Uinterrupts := Mk_Uinterrupts (EXTZ 32 ('b"0"  : mword 1)) in
   let u := _update_Uinterrupts_UEI u (and_vec (_get_Sinterrupts_UEI s) (_get_Sinterrupts_UEI d)) in
   let u := _update_Uinterrupts_UTI u (and_vec (_get_Sinterrupts_UTI s) (_get_Sinterrupts_UTI d)) in
   _update_Uinterrupts_USI u (and_vec (_get_Sinterrupts_USI s) (_get_Sinterrupts_USI d)).

Definition lift_uip (o : Sinterrupts) (d : Sinterrupts) (u : Uinterrupts) : Sinterrupts :=
   let s : Sinterrupts := o in
   if eq_vec (_get_Sinterrupts_USI d) ('b"1"  : mword 1) then
     _update_Sinterrupts_USI s (_get_Uinterrupts_USI u)
   else s.

Definition legalize_uip (s : Sinterrupts) (d : Sinterrupts) (v : mword 32) : Sinterrupts :=
   lift_uip s d (Mk_Uinterrupts v).

Definition lift_uie (o : Sinterrupts) (d : Sinterrupts) (u : Uinterrupts) : Sinterrupts :=
   let s : Sinterrupts := o in
   let s :=
     if eq_vec (_get_Sinterrupts_UEI d) ('b"1"  : mword 1) then
       _update_Sinterrupts_UEI s (_get_Uinterrupts_UEI u)
     else s in
   let s :=
     if eq_vec (_get_Sinterrupts_UTI d) ('b"1"  : mword 1) then
       _update_Sinterrupts_UTI s (_get_Uinterrupts_UTI u)
     else s in
   if eq_vec (_get_Sinterrupts_USI d) ('b"1"  : mword 1) then
     _update_Sinterrupts_USI s (_get_Uinterrupts_USI u)
   else s.

Definition legalize_uie (s : Sinterrupts) (d : Sinterrupts) (v : mword 32) : Sinterrupts :=
   lift_uie s d (Mk_Uinterrupts v).

Definition ext_check_xret_priv (p : Privilege) : bool := true.

Definition ext_fail_xret_priv '(tt : unit) : unit := tt.

Definition handle_trap_extension (p : Privilege) (pc : mword 32) (u : option unit) : unit := tt.

Definition prepare_trap_vector (p : Privilege) (cause : Mcause) : M (mword 32) :=
   (match p with
    | Machine => read_reg mtvec_ref  : M (Mtvec)
    | Supervisor => read_reg stvec_ref  : M (Mtvec)
    | User => read_reg utvec_ref  : M (Mtvec)
    end) >>= fun tvec : Mtvec =>
   (match (tvec_addr tvec cause) with
    | Some epc => returnm epc
    | None => (internal_error "Invalid tvec mode")  : M (mword 32)
    end)
    : M (mword 32).

Definition get_xret_target (p : Privilege) : M (mword 32) :=
   (match p with
    | Machine => ((read_reg mepc_ref)  : M (mword 32))  : M (mword 32)
    | Supervisor => ((read_reg sepc_ref)  : M (mword 32))  : M (mword 32)
    | User => ((read_reg uepc_ref)  : M (mword 32))  : M (mword 32)
    end)
    : M (mword 32).

Definition set_xret_target (p : Privilege) (value : mword 32) : M (mword 32) :=
   (legalize_xepc value) >>= fun target =>
   (match p with
    | Machine => write_reg mepc_ref target  : M (unit)
    | Supervisor => write_reg sepc_ref target  : M (unit)
    | User => write_reg uepc_ref target  : M (unit)
    end) >>
   returnm target.

Definition prepare_xret_target (p : Privilege) : M (mword 32) :=
   (get_xret_target p)  : M (mword 32).

Definition get_mtvec '(tt : unit) : M (mword 32) :=
   read_reg mtvec_ref >>= fun w__0 : Mtvec => returnm (_get_Mtvec_bits w__0).

Definition get_stvec '(tt : unit) : M (mword 32) :=
   read_reg stvec_ref >>= fun w__0 : Mtvec => returnm (_get_Mtvec_bits w__0).

Definition get_utvec '(tt : unit) : M (mword 32) :=
   read_reg utvec_ref >>= fun w__0 : Mtvec => returnm (_get_Mtvec_bits w__0).

Definition set_mtvec (value : mword 32) : M (mword 32) :=
   read_reg mtvec_ref >>= fun w__0 : Mtvec =>
   write_reg mtvec_ref (legalize_tvec w__0 value) >>
   read_reg mtvec_ref >>= fun w__1 : Mtvec => returnm (_get_Mtvec_bits w__1).

Definition set_stvec (value : mword 32) : M (mword 32) :=
   read_reg stvec_ref >>= fun w__0 : Mtvec =>
   write_reg stvec_ref (legalize_tvec w__0 value) >>
   read_reg stvec_ref >>= fun w__1 : Mtvec => returnm (_get_Mtvec_bits w__1).

Definition set_utvec (value : mword 32) : M (mword 32) :=
   read_reg utvec_ref >>= fun w__0 : Mtvec =>
   write_reg utvec_ref (legalize_tvec w__0 value) >>
   read_reg utvec_ref >>= fun w__1 : Mtvec => returnm (_get_Mtvec_bits w__1).

Definition update_softfloat_fflags (flags : mword 5) : M (unit) :=
   write_reg float_fflags_ref (zero_extend flags 64)  : M (unit).

Axiom extern_f32Add : forall  (_ : mword 3) (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Add (rm : mword 3) (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Add rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32Sub : forall  (_ : mword 3) (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Sub (rm : mword 3) (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Sub rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32Mul : forall  (_ : mword 3) (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Mul (rm : mword 3) (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Mul rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32Div : forall  (_ : mword 3) (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Div (rm : mword 3) (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Div rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f64Add : forall  (_ : mword 3) (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Add (rm : mword 3) (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Add rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64Sub : forall  (_ : mword 3) (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Sub (rm : mword 3) (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Sub rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64Mul : forall  (_ : mword 3) (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Mul (rm : mword 3) (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Mul rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64Div : forall  (_ : mword 3) (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Div (rm : mword 3) (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Div rm v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f32MulAdd : forall  (_ : mword 3) (_ : mword 32) (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32MulAdd (rm : mword 3) (v1 : mword 32) (v2 : mword 32) (v3 : mword 32)
: M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32MulAdd rm v1 v2 v3)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f64MulAdd : forall  (_ : mword 3) (_ : mword 64) (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64MulAdd (rm : mword 3) (v1 : mword 64) (v2 : mword 64) (v3 : mword 64)
: M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64MulAdd rm v1 v2 v3)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f32Sqrt : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_f32Sqrt (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Sqrt rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f64Sqrt : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_f64Sqrt (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Sqrt rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f32ToI32 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_f32ToI32 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32ToI32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32ToUi32 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_f32ToUi32 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32ToUi32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_i32ToF32 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_i32ToF32 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_i32ToF32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_ui32ToF32 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_ui32ToF32 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_ui32ToF32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32ToI64 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_f32ToI64 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f32ToI64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f32ToUi64 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_f32ToUi64 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f32ToUi64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_i64ToF32 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_i64ToF32 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_i64ToF32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_ui64ToF32 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_ui64ToF32 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_ui64ToF32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f64ToI32 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_f64ToI32 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f64ToI32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f64ToUi32 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_f64ToUi32 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f64ToUi32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_i32ToF64 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_i32ToF64 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_i32ToF64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_ui32ToF64 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_ui32ToF64 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_ui32ToF64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64ToI64 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_f64ToI64 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64ToI64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64ToUi64 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_f64ToUi64 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64ToUi64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_i64ToF64 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_i64ToF64 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_i64ToF64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_ui64ToF64 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_ui64ToF64 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_ui64ToF64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f32ToF64 : forall  (_ : mword 3) (_ : mword 32) , unit.

Definition riscv_f32ToF64 (rm : mword 3) (v : mword 32) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f32ToF64 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64ToF32 : forall  (_ : mword 3) (_ : mword 64) , unit.

Definition riscv_f64ToF32 (rm : mword 3) (v : mword 64) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f64ToF32 rm v)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32Lt : forall  (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Lt (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Lt v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32Le : forall  (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Le (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Le v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f32Eq : forall  (_ : mword 32) (_ : mword 32) , unit.

Definition riscv_f32Eq (v1 : mword 32) (v2 : mword 32) : M ((mword 5 * mword 32)) :=
   let '_ := (extern_f32Eq v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, subrange_vec_dec w__1 31 0).

Axiom extern_f64Lt : forall  (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Lt (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Lt v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64Le : forall  (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Le (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Le v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Axiom extern_f64Eq : forall  (_ : mword 64) (_ : mword 64) , unit.

Definition riscv_f64Eq (v1 : mword 64) (v2 : mword 64) : M ((mword 5 * mword 64)) :=
   let '_ := (extern_f64Eq v1 v2)  : unit in
   ((read_reg float_fflags_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg float_result_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   returnm (subrange_vec_dec w__0 4 0, w__1).

Definition dirty_fd_context '(tt : unit) : M (unit) :=
   (_set_Mstatus_FS mstatus_ref (extStatus_to_bits Dirty)) >>
   (_set_Mstatus_SD mstatus_ref ('b"1"  : mword 1))
    : M (unit).

Definition rF (r : Z) `{ArithFact ((0 <=? r) && (r <? 32))} : M (mword 32) :=
   let l__43 := r in
   (if sumbool_of_bool (Z.eqb l__43 0) then ((read_reg f0_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 1) then ((read_reg f1_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 2) then ((read_reg f2_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 3) then ((read_reg f3_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 4) then ((read_reg f4_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 5) then ((read_reg f5_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 6) then ((read_reg f6_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 7) then ((read_reg f7_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 8) then ((read_reg f8_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 9) then ((read_reg f9_ref)  : M (mword 32))  : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 10) then
      ((read_reg f10_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 11) then
      ((read_reg f11_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 12) then
      ((read_reg f12_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 13) then
      ((read_reg f13_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 14) then
      ((read_reg f14_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 15) then
      ((read_reg f15_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 16) then
      ((read_reg f16_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 17) then
      ((read_reg f17_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 18) then
      ((read_reg f18_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 19) then
      ((read_reg f19_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 20) then
      ((read_reg f20_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 21) then
      ((read_reg f21_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 22) then
      ((read_reg f22_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 23) then
      ((read_reg f23_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 24) then
      ((read_reg f24_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 25) then
      ((read_reg f25_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 26) then
      ((read_reg f26_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 27) then
      ((read_reg f27_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 28) then
      ((read_reg f28_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 29) then
      ((read_reg f29_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 30) then
      ((read_reg f30_ref)  : M (mword 32))
       : M (mword 32)
    else if sumbool_of_bool (Z.eqb l__43 31) then
      ((read_reg f31_ref)  : M (mword 32))
       : M (mword 32)
    else assert_exp' false "invalid floating point register number" >>= fun _ => exit tt) >>= fun v : fregtype =>
   returnm (fregval_from_freg v).

Definition wF (r : Z) (in_v : mword 32) `{ArithFact ((0 <=? r) && (r <? 32))} : M (unit) :=
   let v := fregval_into_freg in_v in
   let l__11 := r in
   (if sumbool_of_bool (Z.eqb l__11 0) then write_reg f0_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 1) then write_reg f1_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 2) then write_reg f2_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 3) then write_reg f3_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 4) then write_reg f4_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 5) then write_reg f5_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 6) then write_reg f6_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 7) then write_reg f7_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 8) then write_reg f8_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 9) then write_reg f9_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 10) then write_reg f10_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 11) then write_reg f11_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 12) then write_reg f12_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 13) then write_reg f13_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 14) then write_reg f14_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 15) then write_reg f15_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 16) then write_reg f16_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 17) then write_reg f17_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 18) then write_reg f18_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 19) then write_reg f19_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 20) then write_reg f20_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 21) then write_reg f21_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 22) then write_reg f22_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 23) then write_reg f23_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 24) then write_reg f24_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 25) then write_reg f25_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 26) then write_reg f26_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 27) then write_reg f27_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 28) then write_reg f28_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 29) then write_reg f29_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 30) then write_reg f30_ref v  : M (unit)
    else if sumbool_of_bool (Z.eqb l__11 31) then write_reg f31_ref v  : M (unit)
    else assert_exp' false "invalid floating point register number" >>= fun _ => exit tt) >>
   (dirty_fd_context tt) >>
   returnm (if get_config_print_reg tt then
              print_endline
                (String.append "f"
                   (String.append (string_of_int r) (String.append " <- " (FRegStr v))))
            else tt).

Definition rF_bits (i : mword 5) : M (mword 32) := (rF (projT1 (uint i)))  : M (mword 32).

Definition wF_bits (i : mword 5) (data : mword 32) : M (unit) :=
   (wF (projT1 (uint i)) data)  : M (unit).

Definition freg_name_abi_forwards (arg_ : mword 5) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"00000"  : mword 5) then returnm "ft0"
    else if eq_vec b__0 ('b"00001"  : mword 5) then returnm "ft1"
    else if eq_vec b__0 ('b"00010"  : mword 5) then returnm "ft2"
    else if eq_vec b__0 ('b"00011"  : mword 5) then returnm "ft3"
    else if eq_vec b__0 ('b"00100"  : mword 5) then returnm "ft4"
    else if eq_vec b__0 ('b"00101"  : mword 5) then returnm "ft5"
    else if eq_vec b__0 ('b"00110"  : mword 5) then returnm "ft6"
    else if eq_vec b__0 ('b"00111"  : mword 5) then returnm "ft7"
    else if eq_vec b__0 ('b"01000"  : mword 5) then returnm "fs0"
    else if eq_vec b__0 ('b"01001"  : mword 5) then returnm "fs1"
    else if eq_vec b__0 ('b"01010"  : mword 5) then returnm "fa0"
    else if eq_vec b__0 ('b"01011"  : mword 5) then returnm "fa1"
    else if eq_vec b__0 ('b"01100"  : mword 5) then returnm "fa2"
    else if eq_vec b__0 ('b"01101"  : mword 5) then returnm "fa3"
    else if eq_vec b__0 ('b"01110"  : mword 5) then returnm "fa4"
    else if eq_vec b__0 ('b"01111"  : mword 5) then returnm "fa5"
    else if eq_vec b__0 ('b"10000"  : mword 5) then returnm "fa6"
    else if eq_vec b__0 ('b"10001"  : mword 5) then returnm "fa7"
    else if eq_vec b__0 ('b"10010"  : mword 5) then returnm "fs2"
    else if eq_vec b__0 ('b"10011"  : mword 5) then returnm "fs3"
    else if eq_vec b__0 ('b"10100"  : mword 5) then returnm "fs4"
    else if eq_vec b__0 ('b"10101"  : mword 5) then returnm "fs5"
    else if eq_vec b__0 ('b"10110"  : mword 5) then returnm "fs6"
    else if eq_vec b__0 ('b"10111"  : mword 5) then returnm "fs7"
    else if eq_vec b__0 ('b"11000"  : mword 5) then returnm "fs8"
    else if eq_vec b__0 ('b"11001"  : mword 5) then returnm "fs9"
    else if eq_vec b__0 ('b"11010"  : mword 5) then returnm "fs10"
    else if eq_vec b__0 ('b"11011"  : mword 5) then returnm "fs11"
    else if eq_vec b__0 ('b"11100"  : mword 5) then returnm "ft8"
    else if eq_vec b__0 ('b"11101"  : mword 5) then returnm "ft9"
    else if eq_vec b__0 ('b"11110"  : mword 5) then returnm "ft10"
    else if eq_vec b__0 ('b"11111"  : mword 5) then returnm "ft11"
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition freg_name_abi_backwards (arg_ : string) : M (mword 5) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "ft0" then returnm ('b"00000"  : mword 5)
    else if generic_eq p0_ "ft1" then returnm ('b"00001"  : mword 5)
    else if generic_eq p0_ "ft2" then returnm ('b"00010"  : mword 5)
    else if generic_eq p0_ "ft3" then returnm ('b"00011"  : mword 5)
    else if generic_eq p0_ "ft4" then returnm ('b"00100"  : mword 5)
    else if generic_eq p0_ "ft5" then returnm ('b"00101"  : mword 5)
    else if generic_eq p0_ "ft6" then returnm ('b"00110"  : mword 5)
    else if generic_eq p0_ "ft7" then returnm ('b"00111"  : mword 5)
    else if generic_eq p0_ "fs0" then returnm ('b"01000"  : mword 5)
    else if generic_eq p0_ "fs1" then returnm ('b"01001"  : mword 5)
    else if generic_eq p0_ "fa0" then returnm ('b"01010"  : mword 5)
    else if generic_eq p0_ "fa1" then returnm ('b"01011"  : mword 5)
    else if generic_eq p0_ "fa2" then returnm ('b"01100"  : mword 5)
    else if generic_eq p0_ "fa3" then returnm ('b"01101"  : mword 5)
    else if generic_eq p0_ "fa4" then returnm ('b"01110"  : mword 5)
    else if generic_eq p0_ "fa5" then returnm ('b"01111"  : mword 5)
    else if generic_eq p0_ "fa6" then returnm ('b"10000"  : mword 5)
    else if generic_eq p0_ "fa7" then returnm ('b"10001"  : mword 5)
    else if generic_eq p0_ "fs2" then returnm ('b"10010"  : mword 5)
    else if generic_eq p0_ "fs3" then returnm ('b"10011"  : mword 5)
    else if generic_eq p0_ "fs4" then returnm ('b"10100"  : mword 5)
    else if generic_eq p0_ "fs5" then returnm ('b"10101"  : mword 5)
    else if generic_eq p0_ "fs6" then returnm ('b"10110"  : mword 5)
    else if generic_eq p0_ "fs7" then returnm ('b"10111"  : mword 5)
    else if generic_eq p0_ "fs8" then returnm ('b"11000"  : mword 5)
    else if generic_eq p0_ "fs9" then returnm ('b"11001"  : mword 5)
    else if generic_eq p0_ "fs10" then returnm ('b"11010"  : mword 5)
    else if generic_eq p0_ "fs11" then returnm ('b"11011"  : mword 5)
    else if generic_eq p0_ "ft8" then returnm ('b"11100"  : mword 5)
    else if generic_eq p0_ "ft9" then returnm ('b"11101"  : mword 5)
    else if generic_eq p0_ "ft10" then returnm ('b"11110"  : mword 5)
    else if generic_eq p0_ "ft11" then returnm ('b"11111"  : mword 5)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 5).

Definition freg_name_abi_forwards_matches (arg_ : mword 5) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"00000"  : mword 5) then true
   else if eq_vec b__0 ('b"00001"  : mword 5) then true
   else if eq_vec b__0 ('b"00010"  : mword 5) then true
   else if eq_vec b__0 ('b"00011"  : mword 5) then true
   else if eq_vec b__0 ('b"00100"  : mword 5) then true
   else if eq_vec b__0 ('b"00101"  : mword 5) then true
   else if eq_vec b__0 ('b"00110"  : mword 5) then true
   else if eq_vec b__0 ('b"00111"  : mword 5) then true
   else if eq_vec b__0 ('b"01000"  : mword 5) then true
   else if eq_vec b__0 ('b"01001"  : mword 5) then true
   else if eq_vec b__0 ('b"01010"  : mword 5) then true
   else if eq_vec b__0 ('b"01011"  : mword 5) then true
   else if eq_vec b__0 ('b"01100"  : mword 5) then true
   else if eq_vec b__0 ('b"01101"  : mword 5) then true
   else if eq_vec b__0 ('b"01110"  : mword 5) then true
   else if eq_vec b__0 ('b"01111"  : mword 5) then true
   else if eq_vec b__0 ('b"10000"  : mword 5) then true
   else if eq_vec b__0 ('b"10001"  : mword 5) then true
   else if eq_vec b__0 ('b"10010"  : mword 5) then true
   else if eq_vec b__0 ('b"10011"  : mword 5) then true
   else if eq_vec b__0 ('b"10100"  : mword 5) then true
   else if eq_vec b__0 ('b"10101"  : mword 5) then true
   else if eq_vec b__0 ('b"10110"  : mword 5) then true
   else if eq_vec b__0 ('b"10111"  : mword 5) then true
   else if eq_vec b__0 ('b"11000"  : mword 5) then true
   else if eq_vec b__0 ('b"11001"  : mword 5) then true
   else if eq_vec b__0 ('b"11010"  : mword 5) then true
   else if eq_vec b__0 ('b"11011"  : mword 5) then true
   else if eq_vec b__0 ('b"11100"  : mword 5) then true
   else if eq_vec b__0 ('b"11101"  : mword 5) then true
   else if eq_vec b__0 ('b"11110"  : mword 5) then true
   else if eq_vec b__0 ('b"11111"  : mword 5) then true
   else false.

Definition freg_name_abi_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "ft0" then true
   else if generic_eq p0_ "ft1" then true
   else if generic_eq p0_ "ft2" then true
   else if generic_eq p0_ "ft3" then true
   else if generic_eq p0_ "ft4" then true
   else if generic_eq p0_ "ft5" then true
   else if generic_eq p0_ "ft6" then true
   else if generic_eq p0_ "ft7" then true
   else if generic_eq p0_ "fs0" then true
   else if generic_eq p0_ "fs1" then true
   else if generic_eq p0_ "fa0" then true
   else if generic_eq p0_ "fa1" then true
   else if generic_eq p0_ "fa2" then true
   else if generic_eq p0_ "fa3" then true
   else if generic_eq p0_ "fa4" then true
   else if generic_eq p0_ "fa5" then true
   else if generic_eq p0_ "fa6" then true
   else if generic_eq p0_ "fa7" then true
   else if generic_eq p0_ "fs2" then true
   else if generic_eq p0_ "fs3" then true
   else if generic_eq p0_ "fs4" then true
   else if generic_eq p0_ "fs5" then true
   else if generic_eq p0_ "fs6" then true
   else if generic_eq p0_ "fs7" then true
   else if generic_eq p0_ "fs8" then true
   else if generic_eq p0_ "fs9" then true
   else if generic_eq p0_ "fs10" then true
   else if generic_eq p0_ "fs11" then true
   else if generic_eq p0_ "ft8" then true
   else if generic_eq p0_ "ft9" then true
   else if generic_eq p0_ "ft10" then true
   else if generic_eq p0_ "ft11" then true
   else false.

Definition _s324_ (_s325_ : string) : option string :=
   let _s326_ := _s325_ in
   if string_startswith _s326_ "ft11" then
     match (string_drop _s326_ (projT1 (string_length "ft11"))) with | s_ => Some s_ end
   else None.

Definition _s320_ (_s321_ : string) : option string :=
   let _s322_ := _s321_ in
   if string_startswith _s322_ "ft10" then
     match (string_drop _s322_ (projT1 (string_length "ft10"))) with | s_ => Some s_ end
   else None.

Definition _s316_ (_s317_ : string) : option string :=
   let _s318_ := _s317_ in
   if string_startswith _s318_ "ft9" then
     match (string_drop _s318_ (projT1 (string_length "ft9"))) with | s_ => Some s_ end
   else None.

Definition _s312_ (_s313_ : string) : option string :=
   let _s314_ := _s313_ in
   if string_startswith _s314_ "ft8" then
     match (string_drop _s314_ (projT1 (string_length "ft8"))) with | s_ => Some s_ end
   else None.

Definition _s308_ (_s309_ : string) : option string :=
   let _s310_ := _s309_ in
   if string_startswith _s310_ "fs11" then
     match (string_drop _s310_ (projT1 (string_length "fs11"))) with | s_ => Some s_ end
   else None.

Definition _s304_ (_s305_ : string) : option string :=
   let _s306_ := _s305_ in
   if string_startswith _s306_ "fs10" then
     match (string_drop _s306_ (projT1 (string_length "fs10"))) with | s_ => Some s_ end
   else None.

Definition _s300_ (_s301_ : string) : option string :=
   let _s302_ := _s301_ in
   if string_startswith _s302_ "fs9" then
     match (string_drop _s302_ (projT1 (string_length "fs9"))) with | s_ => Some s_ end
   else None.

Definition _s296_ (_s297_ : string) : option string :=
   let _s298_ := _s297_ in
   if string_startswith _s298_ "fs8" then
     match (string_drop _s298_ (projT1 (string_length "fs8"))) with | s_ => Some s_ end
   else None.

Definition _s292_ (_s293_ : string) : option string :=
   let _s294_ := _s293_ in
   if string_startswith _s294_ "fs7" then
     match (string_drop _s294_ (projT1 (string_length "fs7"))) with | s_ => Some s_ end
   else None.

Definition _s288_ (_s289_ : string) : option string :=
   let _s290_ := _s289_ in
   if string_startswith _s290_ "fs6" then
     match (string_drop _s290_ (projT1 (string_length "fs6"))) with | s_ => Some s_ end
   else None.

Definition _s284_ (_s285_ : string) : option string :=
   let _s286_ := _s285_ in
   if string_startswith _s286_ "fs5" then
     match (string_drop _s286_ (projT1 (string_length "fs5"))) with | s_ => Some s_ end
   else None.

Definition _s280_ (_s281_ : string) : option string :=
   let _s282_ := _s281_ in
   if string_startswith _s282_ "fs4" then
     match (string_drop _s282_ (projT1 (string_length "fs4"))) with | s_ => Some s_ end
   else None.

Definition _s276_ (_s277_ : string) : option string :=
   let _s278_ := _s277_ in
   if string_startswith _s278_ "fs3" then
     match (string_drop _s278_ (projT1 (string_length "fs3"))) with | s_ => Some s_ end
   else None.

Definition _s272_ (_s273_ : string) : option string :=
   let _s274_ := _s273_ in
   if string_startswith _s274_ "fs2" then
     match (string_drop _s274_ (projT1 (string_length "fs2"))) with | s_ => Some s_ end
   else None.

Definition _s268_ (_s269_ : string) : option string :=
   let _s270_ := _s269_ in
   if string_startswith _s270_ "fa7" then
     match (string_drop _s270_ (projT1 (string_length "fa7"))) with | s_ => Some s_ end
   else None.

Definition _s264_ (_s265_ : string) : option string :=
   let _s266_ := _s265_ in
   if string_startswith _s266_ "fa6" then
     match (string_drop _s266_ (projT1 (string_length "fa6"))) with | s_ => Some s_ end
   else None.

Definition _s260_ (_s261_ : string) : option string :=
   let _s262_ := _s261_ in
   if string_startswith _s262_ "fa5" then
     match (string_drop _s262_ (projT1 (string_length "fa5"))) with | s_ => Some s_ end
   else None.

Definition _s256_ (_s257_ : string) : option string :=
   let _s258_ := _s257_ in
   if string_startswith _s258_ "fa4" then
     match (string_drop _s258_ (projT1 (string_length "fa4"))) with | s_ => Some s_ end
   else None.

Definition _s252_ (_s253_ : string) : option string :=
   let _s254_ := _s253_ in
   if string_startswith _s254_ "fa3" then
     match (string_drop _s254_ (projT1 (string_length "fa3"))) with | s_ => Some s_ end
   else None.

Definition _s248_ (_s249_ : string) : option string :=
   let _s250_ := _s249_ in
   if string_startswith _s250_ "fa2" then
     match (string_drop _s250_ (projT1 (string_length "fa2"))) with | s_ => Some s_ end
   else None.

Definition _s244_ (_s245_ : string) : option string :=
   let _s246_ := _s245_ in
   if string_startswith _s246_ "fa1" then
     match (string_drop _s246_ (projT1 (string_length "fa1"))) with | s_ => Some s_ end
   else None.

Definition _s240_ (_s241_ : string) : option string :=
   let _s242_ := _s241_ in
   if string_startswith _s242_ "fa0" then
     match (string_drop _s242_ (projT1 (string_length "fa0"))) with | s_ => Some s_ end
   else None.

Definition _s236_ (_s237_ : string) : option string :=
   let _s238_ := _s237_ in
   if string_startswith _s238_ "fs1" then
     match (string_drop _s238_ (projT1 (string_length "fs1"))) with | s_ => Some s_ end
   else None.

Definition _s232_ (_s233_ : string) : option string :=
   let _s234_ := _s233_ in
   if string_startswith _s234_ "fs0" then
     match (string_drop _s234_ (projT1 (string_length "fs0"))) with | s_ => Some s_ end
   else None.

Definition _s228_ (_s229_ : string) : option string :=
   let _s230_ := _s229_ in
   if string_startswith _s230_ "ft7" then
     match (string_drop _s230_ (projT1 (string_length "ft7"))) with | s_ => Some s_ end
   else None.

Definition _s224_ (_s225_ : string) : option string :=
   let _s226_ := _s225_ in
   if string_startswith _s226_ "ft6" then
     match (string_drop _s226_ (projT1 (string_length "ft6"))) with | s_ => Some s_ end
   else None.

Definition _s220_ (_s221_ : string) : option string :=
   let _s222_ := _s221_ in
   if string_startswith _s222_ "ft5" then
     match (string_drop _s222_ (projT1 (string_length "ft5"))) with | s_ => Some s_ end
   else None.

Definition _s216_ (_s217_ : string) : option string :=
   let _s218_ := _s217_ in
   if string_startswith _s218_ "ft4" then
     match (string_drop _s218_ (projT1 (string_length "ft4"))) with | s_ => Some s_ end
   else None.

Definition _s212_ (_s213_ : string) : option string :=
   let _s214_ := _s213_ in
   if string_startswith _s214_ "ft3" then
     match (string_drop _s214_ (projT1 (string_length "ft3"))) with | s_ => Some s_ end
   else None.

Definition _s208_ (_s209_ : string) : option string :=
   let _s210_ := _s209_ in
   if string_startswith _s210_ "ft2" then
     match (string_drop _s210_ (projT1 (string_length "ft2"))) with | s_ => Some s_ end
   else None.

Definition _s204_ (_s205_ : string) : option string :=
   let _s206_ := _s205_ in
   if string_startswith _s206_ "ft1" then
     match (string_drop _s206_ (projT1 (string_length "ft1"))) with | s_ => Some s_ end
   else None.

Definition _s200_ (_s201_ : string) : option string :=
   let _s202_ := _s201_ in
   if string_startswith _s202_ "ft0" then
     match (string_drop _s202_ (projT1 (string_length "ft0"))) with | s_ => Some s_ end
   else None.

Definition freg_name_abi_matches_prefix (arg_ : string)
: M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s203_ := arg_ in
   (if match (_s200_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s200_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s204_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s204_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s208_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s208_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s212_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s212_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s216_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s216_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s220_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s220_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s224_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s224_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s228_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s228_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"00111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s232_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s232_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s236_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s236_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s240_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s240_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s244_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s244_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s248_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s248_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s252_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s252_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s256_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s256_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s260_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s260_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"01111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s264_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s264_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s268_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s268_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s272_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s272_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s276_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s276_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s280_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s280_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s284_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s284_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s288_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s288_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s292_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s292_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"10111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s296_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s296_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s300_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s300_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s304_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s304_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s308_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s308_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s312_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s312_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s316_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s316_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s320_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s320_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s324_ _s203_) with | Some s_ => true | _ => false end then
      (match (_s324_ _s203_) with
       | Some s_ =>
          returnm (Some
                     ('b"11111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)}))).

Definition freg_name_forwards (arg_ : mword 5) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"00000"  : mword 5) then returnm "ft0"
    else if eq_vec b__0 ('b"00001"  : mword 5) then returnm "ft1"
    else if eq_vec b__0 ('b"00010"  : mword 5) then returnm "ft2"
    else if eq_vec b__0 ('b"00011"  : mword 5) then returnm "ft3"
    else if eq_vec b__0 ('b"00100"  : mword 5) then returnm "ft4"
    else if eq_vec b__0 ('b"00101"  : mword 5) then returnm "ft5"
    else if eq_vec b__0 ('b"00110"  : mword 5) then returnm "ft6"
    else if eq_vec b__0 ('b"00111"  : mword 5) then returnm "ft7"
    else if eq_vec b__0 ('b"01000"  : mword 5) then returnm "fs0"
    else if eq_vec b__0 ('b"01001"  : mword 5) then returnm "fs1"
    else if eq_vec b__0 ('b"01010"  : mword 5) then returnm "fa0"
    else if eq_vec b__0 ('b"01011"  : mword 5) then returnm "fa1"
    else if eq_vec b__0 ('b"01100"  : mword 5) then returnm "fa2"
    else if eq_vec b__0 ('b"01101"  : mword 5) then returnm "fa3"
    else if eq_vec b__0 ('b"01110"  : mword 5) then returnm "fa4"
    else if eq_vec b__0 ('b"01111"  : mword 5) then returnm "fa5"
    else if eq_vec b__0 ('b"10000"  : mword 5) then returnm "fa6"
    else if eq_vec b__0 ('b"10001"  : mword 5) then returnm "fa7"
    else if eq_vec b__0 ('b"10010"  : mword 5) then returnm "fs2"
    else if eq_vec b__0 ('b"10011"  : mword 5) then returnm "fs3"
    else if eq_vec b__0 ('b"10100"  : mword 5) then returnm "fs4"
    else if eq_vec b__0 ('b"10101"  : mword 5) then returnm "fs5"
    else if eq_vec b__0 ('b"10110"  : mword 5) then returnm "fs6"
    else if eq_vec b__0 ('b"10111"  : mword 5) then returnm "fs7"
    else if eq_vec b__0 ('b"11000"  : mword 5) then returnm "fs8"
    else if eq_vec b__0 ('b"11001"  : mword 5) then returnm "fs9"
    else if eq_vec b__0 ('b"11010"  : mword 5) then returnm "fs10"
    else if eq_vec b__0 ('b"11011"  : mword 5) then returnm "fs11"
    else if eq_vec b__0 ('b"11100"  : mword 5) then returnm "ft8"
    else if eq_vec b__0 ('b"11101"  : mword 5) then returnm "ft9"
    else if eq_vec b__0 ('b"11110"  : mword 5) then returnm "ft10"
    else if eq_vec b__0 ('b"11111"  : mword 5) then returnm "ft11"
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition freg_name_backwards (arg_ : string) : M (mword 5) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "ft0" then returnm ('b"00000"  : mword 5)
    else if generic_eq p0_ "ft1" then returnm ('b"00001"  : mword 5)
    else if generic_eq p0_ "ft2" then returnm ('b"00010"  : mword 5)
    else if generic_eq p0_ "ft3" then returnm ('b"00011"  : mword 5)
    else if generic_eq p0_ "ft4" then returnm ('b"00100"  : mword 5)
    else if generic_eq p0_ "ft5" then returnm ('b"00101"  : mword 5)
    else if generic_eq p0_ "ft6" then returnm ('b"00110"  : mword 5)
    else if generic_eq p0_ "ft7" then returnm ('b"00111"  : mword 5)
    else if generic_eq p0_ "fs0" then returnm ('b"01000"  : mword 5)
    else if generic_eq p0_ "fs1" then returnm ('b"01001"  : mword 5)
    else if generic_eq p0_ "fa0" then returnm ('b"01010"  : mword 5)
    else if generic_eq p0_ "fa1" then returnm ('b"01011"  : mword 5)
    else if generic_eq p0_ "fa2" then returnm ('b"01100"  : mword 5)
    else if generic_eq p0_ "fa3" then returnm ('b"01101"  : mword 5)
    else if generic_eq p0_ "fa4" then returnm ('b"01110"  : mword 5)
    else if generic_eq p0_ "fa5" then returnm ('b"01111"  : mword 5)
    else if generic_eq p0_ "fa6" then returnm ('b"10000"  : mword 5)
    else if generic_eq p0_ "fa7" then returnm ('b"10001"  : mword 5)
    else if generic_eq p0_ "fs2" then returnm ('b"10010"  : mword 5)
    else if generic_eq p0_ "fs3" then returnm ('b"10011"  : mword 5)
    else if generic_eq p0_ "fs4" then returnm ('b"10100"  : mword 5)
    else if generic_eq p0_ "fs5" then returnm ('b"10101"  : mword 5)
    else if generic_eq p0_ "fs6" then returnm ('b"10110"  : mword 5)
    else if generic_eq p0_ "fs7" then returnm ('b"10111"  : mword 5)
    else if generic_eq p0_ "fs8" then returnm ('b"11000"  : mword 5)
    else if generic_eq p0_ "fs9" then returnm ('b"11001"  : mword 5)
    else if generic_eq p0_ "fs10" then returnm ('b"11010"  : mword 5)
    else if generic_eq p0_ "fs11" then returnm ('b"11011"  : mword 5)
    else if generic_eq p0_ "ft8" then returnm ('b"11100"  : mword 5)
    else if generic_eq p0_ "ft9" then returnm ('b"11101"  : mword 5)
    else if generic_eq p0_ "ft10" then returnm ('b"11110"  : mword 5)
    else if generic_eq p0_ "ft11" then returnm ('b"11111"  : mword 5)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 5).

Definition freg_name_forwards_matches (arg_ : mword 5) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"00000"  : mword 5) then true
   else if eq_vec b__0 ('b"00001"  : mword 5) then true
   else if eq_vec b__0 ('b"00010"  : mword 5) then true
   else if eq_vec b__0 ('b"00011"  : mword 5) then true
   else if eq_vec b__0 ('b"00100"  : mword 5) then true
   else if eq_vec b__0 ('b"00101"  : mword 5) then true
   else if eq_vec b__0 ('b"00110"  : mword 5) then true
   else if eq_vec b__0 ('b"00111"  : mword 5) then true
   else if eq_vec b__0 ('b"01000"  : mword 5) then true
   else if eq_vec b__0 ('b"01001"  : mword 5) then true
   else if eq_vec b__0 ('b"01010"  : mword 5) then true
   else if eq_vec b__0 ('b"01011"  : mword 5) then true
   else if eq_vec b__0 ('b"01100"  : mword 5) then true
   else if eq_vec b__0 ('b"01101"  : mword 5) then true
   else if eq_vec b__0 ('b"01110"  : mword 5) then true
   else if eq_vec b__0 ('b"01111"  : mword 5) then true
   else if eq_vec b__0 ('b"10000"  : mword 5) then true
   else if eq_vec b__0 ('b"10001"  : mword 5) then true
   else if eq_vec b__0 ('b"10010"  : mword 5) then true
   else if eq_vec b__0 ('b"10011"  : mword 5) then true
   else if eq_vec b__0 ('b"10100"  : mword 5) then true
   else if eq_vec b__0 ('b"10101"  : mword 5) then true
   else if eq_vec b__0 ('b"10110"  : mword 5) then true
   else if eq_vec b__0 ('b"10111"  : mword 5) then true
   else if eq_vec b__0 ('b"11000"  : mword 5) then true
   else if eq_vec b__0 ('b"11001"  : mword 5) then true
   else if eq_vec b__0 ('b"11010"  : mword 5) then true
   else if eq_vec b__0 ('b"11011"  : mword 5) then true
   else if eq_vec b__0 ('b"11100"  : mword 5) then true
   else if eq_vec b__0 ('b"11101"  : mword 5) then true
   else if eq_vec b__0 ('b"11110"  : mword 5) then true
   else if eq_vec b__0 ('b"11111"  : mword 5) then true
   else false.

Definition freg_name_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "ft0" then true
   else if generic_eq p0_ "ft1" then true
   else if generic_eq p0_ "ft2" then true
   else if generic_eq p0_ "ft3" then true
   else if generic_eq p0_ "ft4" then true
   else if generic_eq p0_ "ft5" then true
   else if generic_eq p0_ "ft6" then true
   else if generic_eq p0_ "ft7" then true
   else if generic_eq p0_ "fs0" then true
   else if generic_eq p0_ "fs1" then true
   else if generic_eq p0_ "fa0" then true
   else if generic_eq p0_ "fa1" then true
   else if generic_eq p0_ "fa2" then true
   else if generic_eq p0_ "fa3" then true
   else if generic_eq p0_ "fa4" then true
   else if generic_eq p0_ "fa5" then true
   else if generic_eq p0_ "fa6" then true
   else if generic_eq p0_ "fa7" then true
   else if generic_eq p0_ "fs2" then true
   else if generic_eq p0_ "fs3" then true
   else if generic_eq p0_ "fs4" then true
   else if generic_eq p0_ "fs5" then true
   else if generic_eq p0_ "fs6" then true
   else if generic_eq p0_ "fs7" then true
   else if generic_eq p0_ "fs8" then true
   else if generic_eq p0_ "fs9" then true
   else if generic_eq p0_ "fs10" then true
   else if generic_eq p0_ "fs11" then true
   else if generic_eq p0_ "ft8" then true
   else if generic_eq p0_ "ft9" then true
   else if generic_eq p0_ "ft10" then true
   else if generic_eq p0_ "ft11" then true
   else false.

Definition _s452_ (_s453_ : string) : option string :=
   let _s454_ := _s453_ in
   if string_startswith _s454_ "ft11" then
     match (string_drop _s454_ (projT1 (string_length "ft11"))) with | s_ => Some s_ end
   else None.

Definition _s448_ (_s449_ : string) : option string :=
   let _s450_ := _s449_ in
   if string_startswith _s450_ "ft10" then
     match (string_drop _s450_ (projT1 (string_length "ft10"))) with | s_ => Some s_ end
   else None.

Definition _s444_ (_s445_ : string) : option string :=
   let _s446_ := _s445_ in
   if string_startswith _s446_ "ft9" then
     match (string_drop _s446_ (projT1 (string_length "ft9"))) with | s_ => Some s_ end
   else None.

Definition _s440_ (_s441_ : string) : option string :=
   let _s442_ := _s441_ in
   if string_startswith _s442_ "ft8" then
     match (string_drop _s442_ (projT1 (string_length "ft8"))) with | s_ => Some s_ end
   else None.

Definition _s436_ (_s437_ : string) : option string :=
   let _s438_ := _s437_ in
   if string_startswith _s438_ "fs11" then
     match (string_drop _s438_ (projT1 (string_length "fs11"))) with | s_ => Some s_ end
   else None.

Definition _s432_ (_s433_ : string) : option string :=
   let _s434_ := _s433_ in
   if string_startswith _s434_ "fs10" then
     match (string_drop _s434_ (projT1 (string_length "fs10"))) with | s_ => Some s_ end
   else None.

Definition _s428_ (_s429_ : string) : option string :=
   let _s430_ := _s429_ in
   if string_startswith _s430_ "fs9" then
     match (string_drop _s430_ (projT1 (string_length "fs9"))) with | s_ => Some s_ end
   else None.

Definition _s424_ (_s425_ : string) : option string :=
   let _s426_ := _s425_ in
   if string_startswith _s426_ "fs8" then
     match (string_drop _s426_ (projT1 (string_length "fs8"))) with | s_ => Some s_ end
   else None.

Definition _s420_ (_s421_ : string) : option string :=
   let _s422_ := _s421_ in
   if string_startswith _s422_ "fs7" then
     match (string_drop _s422_ (projT1 (string_length "fs7"))) with | s_ => Some s_ end
   else None.

Definition _s416_ (_s417_ : string) : option string :=
   let _s418_ := _s417_ in
   if string_startswith _s418_ "fs6" then
     match (string_drop _s418_ (projT1 (string_length "fs6"))) with | s_ => Some s_ end
   else None.

Definition _s412_ (_s413_ : string) : option string :=
   let _s414_ := _s413_ in
   if string_startswith _s414_ "fs5" then
     match (string_drop _s414_ (projT1 (string_length "fs5"))) with | s_ => Some s_ end
   else None.

Definition _s408_ (_s409_ : string) : option string :=
   let _s410_ := _s409_ in
   if string_startswith _s410_ "fs4" then
     match (string_drop _s410_ (projT1 (string_length "fs4"))) with | s_ => Some s_ end
   else None.

Definition _s404_ (_s405_ : string) : option string :=
   let _s406_ := _s405_ in
   if string_startswith _s406_ "fs3" then
     match (string_drop _s406_ (projT1 (string_length "fs3"))) with | s_ => Some s_ end
   else None.

Definition _s400_ (_s401_ : string) : option string :=
   let _s402_ := _s401_ in
   if string_startswith _s402_ "fs2" then
     match (string_drop _s402_ (projT1 (string_length "fs2"))) with | s_ => Some s_ end
   else None.

Definition _s396_ (_s397_ : string) : option string :=
   let _s398_ := _s397_ in
   if string_startswith _s398_ "fa7" then
     match (string_drop _s398_ (projT1 (string_length "fa7"))) with | s_ => Some s_ end
   else None.

Definition _s392_ (_s393_ : string) : option string :=
   let _s394_ := _s393_ in
   if string_startswith _s394_ "fa6" then
     match (string_drop _s394_ (projT1 (string_length "fa6"))) with | s_ => Some s_ end
   else None.

Definition _s388_ (_s389_ : string) : option string :=
   let _s390_ := _s389_ in
   if string_startswith _s390_ "fa5" then
     match (string_drop _s390_ (projT1 (string_length "fa5"))) with | s_ => Some s_ end
   else None.

Definition _s384_ (_s385_ : string) : option string :=
   let _s386_ := _s385_ in
   if string_startswith _s386_ "fa4" then
     match (string_drop _s386_ (projT1 (string_length "fa4"))) with | s_ => Some s_ end
   else None.

Definition _s380_ (_s381_ : string) : option string :=
   let _s382_ := _s381_ in
   if string_startswith _s382_ "fa3" then
     match (string_drop _s382_ (projT1 (string_length "fa3"))) with | s_ => Some s_ end
   else None.

Definition _s376_ (_s377_ : string) : option string :=
   let _s378_ := _s377_ in
   if string_startswith _s378_ "fa2" then
     match (string_drop _s378_ (projT1 (string_length "fa2"))) with | s_ => Some s_ end
   else None.

Definition _s372_ (_s373_ : string) : option string :=
   let _s374_ := _s373_ in
   if string_startswith _s374_ "fa1" then
     match (string_drop _s374_ (projT1 (string_length "fa1"))) with | s_ => Some s_ end
   else None.

Definition _s368_ (_s369_ : string) : option string :=
   let _s370_ := _s369_ in
   if string_startswith _s370_ "fa0" then
     match (string_drop _s370_ (projT1 (string_length "fa0"))) with | s_ => Some s_ end
   else None.

Definition _s364_ (_s365_ : string) : option string :=
   let _s366_ := _s365_ in
   if string_startswith _s366_ "fs1" then
     match (string_drop _s366_ (projT1 (string_length "fs1"))) with | s_ => Some s_ end
   else None.

Definition _s360_ (_s361_ : string) : option string :=
   let _s362_ := _s361_ in
   if string_startswith _s362_ "fs0" then
     match (string_drop _s362_ (projT1 (string_length "fs0"))) with | s_ => Some s_ end
   else None.

Definition _s356_ (_s357_ : string) : option string :=
   let _s358_ := _s357_ in
   if string_startswith _s358_ "ft7" then
     match (string_drop _s358_ (projT1 (string_length "ft7"))) with | s_ => Some s_ end
   else None.

Definition _s352_ (_s353_ : string) : option string :=
   let _s354_ := _s353_ in
   if string_startswith _s354_ "ft6" then
     match (string_drop _s354_ (projT1 (string_length "ft6"))) with | s_ => Some s_ end
   else None.

Definition _s348_ (_s349_ : string) : option string :=
   let _s350_ := _s349_ in
   if string_startswith _s350_ "ft5" then
     match (string_drop _s350_ (projT1 (string_length "ft5"))) with | s_ => Some s_ end
   else None.

Definition _s344_ (_s345_ : string) : option string :=
   let _s346_ := _s345_ in
   if string_startswith _s346_ "ft4" then
     match (string_drop _s346_ (projT1 (string_length "ft4"))) with | s_ => Some s_ end
   else None.

Definition _s340_ (_s341_ : string) : option string :=
   let _s342_ := _s341_ in
   if string_startswith _s342_ "ft3" then
     match (string_drop _s342_ (projT1 (string_length "ft3"))) with | s_ => Some s_ end
   else None.

Definition _s336_ (_s337_ : string) : option string :=
   let _s338_ := _s337_ in
   if string_startswith _s338_ "ft2" then
     match (string_drop _s338_ (projT1 (string_length "ft2"))) with | s_ => Some s_ end
   else None.

Definition _s332_ (_s333_ : string) : option string :=
   let _s334_ := _s333_ in
   if string_startswith _s334_ "ft1" then
     match (string_drop _s334_ (projT1 (string_length "ft1"))) with | s_ => Some s_ end
   else None.

Definition _s328_ (_s329_ : string) : option string :=
   let _s330_ := _s329_ in
   if string_startswith _s330_ "ft0" then
     match (string_drop _s330_ (projT1 (string_length "ft0"))) with | s_ => Some s_ end
   else None.

Definition freg_name_matches_prefix (arg_ : string)
: M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s331_ := arg_ in
   (if match (_s328_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s328_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s332_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s332_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s336_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s336_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s340_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s340_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s344_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s344_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s348_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s348_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s352_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s352_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s356_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s356_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"00111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s360_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s360_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s364_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s364_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s368_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s368_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s372_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s372_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s376_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s376_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s380_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s380_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s384_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s384_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s388_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s388_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"01111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s392_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s392_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s396_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s396_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s400_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s400_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s404_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s404_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s408_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s408_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s412_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s412_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s416_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s416_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s420_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s420_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"10111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s424_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s424_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11000"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s428_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s428_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11001"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s432_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s432_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11010"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s436_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s436_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11011"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s440_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s440_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11100"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s444_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s444_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11101"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s448_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s448_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11110"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s452_ _s331_) with | Some s_ => true | _ => false end then
      (match (_s452_ _s331_) with
       | Some s_ =>
          returnm (Some
                     ('b"11111"
                      : mword 5, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 5 * {n : Z & ArithFact (n >=? 0)}))).

Definition init_fdext_regs '(tt : unit) : M (unit) :=
   write_reg f0_ref zero_freg >>
   write_reg f1_ref zero_freg >>
   write_reg f2_ref zero_freg >>
   write_reg f3_ref zero_freg >>
   write_reg f4_ref zero_freg >>
   write_reg f5_ref zero_freg >>
   write_reg f6_ref zero_freg >>
   write_reg f7_ref zero_freg >>
   write_reg f8_ref zero_freg >>
   write_reg f9_ref zero_freg >>
   write_reg f10_ref zero_freg >>
   write_reg f11_ref zero_freg >>
   write_reg f12_ref zero_freg >>
   write_reg f13_ref zero_freg >>
   write_reg f14_ref zero_freg >>
   write_reg f15_ref zero_freg >>
   write_reg f16_ref zero_freg >>
   write_reg f17_ref zero_freg >>
   write_reg f18_ref zero_freg >>
   write_reg f19_ref zero_freg >>
   write_reg f20_ref zero_freg >>
   write_reg f21_ref zero_freg >>
   write_reg f22_ref zero_freg >>
   write_reg f23_ref zero_freg >>
   write_reg f24_ref zero_freg >>
   write_reg f25_ref zero_freg >>
   write_reg f26_ref zero_freg >>
   write_reg f27_ref zero_freg >>
   write_reg f28_ref zero_freg >>
   write_reg f29_ref zero_freg >>
   write_reg f30_ref zero_freg >> write_reg f31_ref zero_freg  : M (unit).

Definition Mk_Fcsr (v : mword 32) : Fcsr := {| Fcsr_Fcsr_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Fcsr_bits (v : Fcsr) : mword 32 := subrange_vec_dec v.(Fcsr_Fcsr_chunk_0) 31 0.

Definition _set_Fcsr_bits (r_ref : register_ref regstate register_value Fcsr) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Fcsr_Fcsr_chunk_0 :=
         (update_subrange_vec_dec r.(Fcsr_Fcsr_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Fcsr in
   write_reg r_ref r
    : M (unit).

Definition _update_Fcsr_bits (v : Fcsr) (x : mword 32) : Fcsr :=
   {[ v with
     Fcsr_Fcsr_chunk_0 :=
       (update_subrange_vec_dec v.(Fcsr_Fcsr_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Fcsr_FRM (v : Fcsr) : mword 3 := subrange_vec_dec v.(Fcsr_Fcsr_chunk_0) 7 5.

Definition _set_Fcsr_FRM (r_ref : register_ref regstate register_value Fcsr) (v : mword 3)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Fcsr_Fcsr_chunk_0 :=
         (update_subrange_vec_dec r.(Fcsr_Fcsr_chunk_0) 7 5 (subrange_vec_dec v 2 0)) ]}
      : Fcsr in
   write_reg r_ref r
    : M (unit).

Definition _update_Fcsr_FRM (v : Fcsr) (x : mword 3) : Fcsr :=
   {[ v with
     Fcsr_Fcsr_chunk_0 :=
       (update_subrange_vec_dec v.(Fcsr_Fcsr_chunk_0) 7 5 (subrange_vec_dec x 2 0)) ]}.

Definition _get_Fcsr_FFLAGS (v : Fcsr) : mword 5 := subrange_vec_dec v.(Fcsr_Fcsr_chunk_0) 4 0.

Definition _set_Fcsr_FFLAGS (r_ref : register_ref regstate register_value Fcsr) (v : mword 5)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       Fcsr_Fcsr_chunk_0 :=
         (update_subrange_vec_dec r.(Fcsr_Fcsr_chunk_0) 4 0 (subrange_vec_dec v 4 0)) ]}
      : Fcsr in
   write_reg r_ref r
    : M (unit).

Definition _update_Fcsr_FFLAGS (v : Fcsr) (x : mword 5) : Fcsr :=
   {[ v with
     Fcsr_Fcsr_chunk_0 :=
       (update_subrange_vec_dec v.(Fcsr_Fcsr_chunk_0) 4 0 (subrange_vec_dec x 4 0)) ]}.

Definition ext_write_fcsr (frm : mword 3) (fflags : mword 5) : M (unit) :=
   (_set_Fcsr_FRM fcsr_ref frm) >>
   (_set_Fcsr_FFLAGS fcsr_ref fflags) >>
   (update_softfloat_fflags fflags) >> (dirty_fd_context tt)  : M (unit).

Definition write_fflags (fflags : mword 5) : M (unit) :=
   read_reg fcsr_ref >>= fun w__0 : Fcsr =>
   (if neq_vec (_get_Fcsr_FFLAGS w__0) fflags then (dirty_fd_context tt)  : M (unit)
    else returnm tt) >>
   (_set_Fcsr_FFLAGS fcsr_ref fflags)
    : M (unit).

Definition accrue_fflags (flags : mword 5) : M (unit) :=
   read_reg fcsr_ref >>= fun w__0 : Fcsr =>
   let f := or_vec (_get_Fcsr_FFLAGS w__0) flags in
   read_reg fcsr_ref >>= fun w__1 : Fcsr =>
   (if neq_vec (_get_Fcsr_FFLAGS w__1) f then
      (_set_Fcsr_FFLAGS fcsr_ref f) >>
      (update_softfloat_fflags f) >> (dirty_fd_context tt)  : M (unit)
    else returnm tt)
    : M (unit).

Definition csr_name_map_forwards (arg_ : mword 12) : string :=
   let b__0 := arg_ in
   if eq_vec b__0 (Ox"000"  : mword 12) then "ustatus"
   else if eq_vec b__0 (Ox"004"  : mword 12) then "uie"
   else if eq_vec b__0 (Ox"005"  : mword 12) then "utvec"
   else if eq_vec b__0 (Ox"040"  : mword 12) then "uscratch"
   else if eq_vec b__0 (Ox"041"  : mword 12) then "uepc"
   else if eq_vec b__0 (Ox"042"  : mword 12) then "ucause"
   else if eq_vec b__0 (Ox"043"  : mword 12) then "utval"
   else if eq_vec b__0 (Ox"044"  : mword 12) then "uip"
   else if eq_vec b__0 (Ox"001"  : mword 12) then "fflags"
   else if eq_vec b__0 (Ox"002"  : mword 12) then "frm"
   else if eq_vec b__0 (Ox"003"  : mword 12) then "fcsr"
   else if eq_vec b__0 (Ox"C00"  : mword 12) then "cycle"
   else if eq_vec b__0 (Ox"C01"  : mword 12) then "time"
   else if eq_vec b__0 (Ox"C02"  : mword 12) then "instret"
   else if eq_vec b__0 (Ox"C80"  : mword 12) then "cycleh"
   else if eq_vec b__0 (Ox"C81"  : mword 12) then "timeh"
   else if eq_vec b__0 (Ox"C82"  : mword 12) then "instreth"
   else if eq_vec b__0 (Ox"100"  : mword 12) then "sstatus"
   else if eq_vec b__0 (Ox"102"  : mword 12) then "sedeleg"
   else if eq_vec b__0 (Ox"103"  : mword 12) then "sideleg"
   else if eq_vec b__0 (Ox"104"  : mword 12) then "sie"
   else if eq_vec b__0 (Ox"105"  : mword 12) then "stvec"
   else if eq_vec b__0 (Ox"106"  : mword 12) then "scounteren"
   else if eq_vec b__0 (Ox"140"  : mword 12) then "sscratch"
   else if eq_vec b__0 (Ox"141"  : mword 12) then "sepc"
   else if eq_vec b__0 (Ox"142"  : mword 12) then "scause"
   else if eq_vec b__0 (Ox"143"  : mword 12) then "stval"
   else if eq_vec b__0 (Ox"144"  : mword 12) then "sip"
   else if eq_vec b__0 (Ox"180"  : mword 12) then "satp"
   else if eq_vec b__0 (Ox"F11"  : mword 12) then "mvendorid"
   else if eq_vec b__0 (Ox"F12"  : mword 12) then "marchid"
   else if eq_vec b__0 (Ox"F13"  : mword 12) then "mimpid"
   else if eq_vec b__0 (Ox"F14"  : mword 12) then "mhartid"
   else if eq_vec b__0 (Ox"300"  : mword 12) then "mstatus"
   else if eq_vec b__0 (Ox"301"  : mword 12) then "misa"
   else if eq_vec b__0 (Ox"302"  : mword 12) then "medeleg"
   else if eq_vec b__0 (Ox"303"  : mword 12) then "mideleg"
   else if eq_vec b__0 (Ox"304"  : mword 12) then "mie"
   else if eq_vec b__0 (Ox"305"  : mword 12) then "mtvec"
   else if eq_vec b__0 (Ox"306"  : mword 12) then "mcounteren"
   else if eq_vec b__0 (Ox"340"  : mword 12) then "mscratch"
   else if eq_vec b__0 (Ox"341"  : mword 12) then "mepc"
   else if eq_vec b__0 (Ox"342"  : mword 12) then "mcause"
   else if eq_vec b__0 (Ox"343"  : mword 12) then "mtval"
   else if eq_vec b__0 (Ox"344"  : mword 12) then "mip"
   else if eq_vec b__0 (Ox"3A0"  : mword 12) then "pmpcfg0"
   else if eq_vec b__0 (Ox"3A1"  : mword 12) then "pmpcfg1"
   else if eq_vec b__0 (Ox"3A2"  : mword 12) then "pmpcfg2"
   else if eq_vec b__0 (Ox"3A3"  : mword 12) then "pmpcfg3"
   else if eq_vec b__0 (Ox"3B0"  : mword 12) then "pmpaddr0"
   else if eq_vec b__0 (Ox"3B1"  : mword 12) then "pmpaddr1"
   else if eq_vec b__0 (Ox"3B2"  : mword 12) then "pmpaddr2"
   else if eq_vec b__0 (Ox"3B3"  : mword 12) then "pmpaddr3"
   else if eq_vec b__0 (Ox"3B4"  : mword 12) then "pmpaddr4"
   else if eq_vec b__0 (Ox"3B5"  : mword 12) then "pmpaddr5"
   else if eq_vec b__0 (Ox"3B6"  : mword 12) then "pmpaddr6"
   else if eq_vec b__0 (Ox"3B7"  : mword 12) then "pmpaddr7"
   else if eq_vec b__0 (Ox"3B8"  : mword 12) then "pmpaddr8"
   else if eq_vec b__0 (Ox"3B9"  : mword 12) then "pmpaddr9"
   else if eq_vec b__0 (Ox"3BA"  : mword 12) then "pmpaddr10"
   else if eq_vec b__0 (Ox"3BB"  : mword 12) then "pmpaddr11"
   else if eq_vec b__0 (Ox"3BC"  : mword 12) then "pmpaddr12"
   else if eq_vec b__0 (Ox"3BD"  : mword 12) then "pmpaddr13"
   else if eq_vec b__0 (Ox"3BE"  : mword 12) then "pmpaddr14"
   else if eq_vec b__0 (Ox"3BF"  : mword 12) then "pmpaddr15"
   else if eq_vec b__0 (Ox"B00"  : mword 12) then "mcycle"
   else if eq_vec b__0 (Ox"B02"  : mword 12) then "minstret"
   else if eq_vec b__0 (Ox"B80"  : mword 12) then "mcycleh"
   else if eq_vec b__0 (Ox"B82"  : mword 12) then "minstreth"
   else if eq_vec b__0 (Ox"7A0"  : mword 12) then "tselect"
   else if eq_vec b__0 (Ox"7A1"  : mword 12) then "tdata1"
   else if eq_vec b__0 (Ox"7A2"  : mword 12) then "tdata2"
   else if eq_vec b__0 (Ox"7A3"  : mword 12) then "tdata3"
   else decimal_string_of_bits b__0.

Definition csr_name_map_backwards (arg_ : string) : M (mword 12) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "ustatus" then returnm (Ox"000"  : mword 12)
    else if generic_eq p0_ "uie" then returnm (Ox"004"  : mword 12)
    else if generic_eq p0_ "utvec" then returnm (Ox"005"  : mword 12)
    else if generic_eq p0_ "uscratch" then returnm (Ox"040"  : mword 12)
    else if generic_eq p0_ "uepc" then returnm (Ox"041"  : mword 12)
    else if generic_eq p0_ "ucause" then returnm (Ox"042"  : mword 12)
    else if generic_eq p0_ "utval" then returnm (Ox"043"  : mword 12)
    else if generic_eq p0_ "uip" then returnm (Ox"044"  : mword 12)
    else if generic_eq p0_ "fflags" then returnm (Ox"001"  : mword 12)
    else if generic_eq p0_ "frm" then returnm (Ox"002"  : mword 12)
    else if generic_eq p0_ "fcsr" then returnm (Ox"003"  : mword 12)
    else if generic_eq p0_ "cycle" then returnm (Ox"C00"  : mword 12)
    else if generic_eq p0_ "time" then returnm (Ox"C01"  : mword 12)
    else if generic_eq p0_ "instret" then returnm (Ox"C02"  : mword 12)
    else if generic_eq p0_ "cycleh" then returnm (Ox"C80"  : mword 12)
    else if generic_eq p0_ "timeh" then returnm (Ox"C81"  : mword 12)
    else if generic_eq p0_ "instreth" then returnm (Ox"C82"  : mword 12)
    else if generic_eq p0_ "sstatus" then returnm (Ox"100"  : mword 12)
    else if generic_eq p0_ "sedeleg" then returnm (Ox"102"  : mword 12)
    else if generic_eq p0_ "sideleg" then returnm (Ox"103"  : mword 12)
    else if generic_eq p0_ "sie" then returnm (Ox"104"  : mword 12)
    else if generic_eq p0_ "stvec" then returnm (Ox"105"  : mword 12)
    else if generic_eq p0_ "scounteren" then returnm (Ox"106"  : mword 12)
    else if generic_eq p0_ "sscratch" then returnm (Ox"140"  : mword 12)
    else if generic_eq p0_ "sepc" then returnm (Ox"141"  : mword 12)
    else if generic_eq p0_ "scause" then returnm (Ox"142"  : mword 12)
    else if generic_eq p0_ "stval" then returnm (Ox"143"  : mword 12)
    else if generic_eq p0_ "sip" then returnm (Ox"144"  : mword 12)
    else if generic_eq p0_ "satp" then returnm (Ox"180"  : mword 12)
    else if generic_eq p0_ "mvendorid" then returnm (Ox"F11"  : mword 12)
    else if generic_eq p0_ "marchid" then returnm (Ox"F12"  : mword 12)
    else if generic_eq p0_ "mimpid" then returnm (Ox"F13"  : mword 12)
    else if generic_eq p0_ "mhartid" then returnm (Ox"F14"  : mword 12)
    else if generic_eq p0_ "mstatus" then returnm (Ox"300"  : mword 12)
    else if generic_eq p0_ "misa" then returnm (Ox"301"  : mword 12)
    else if generic_eq p0_ "medeleg" then returnm (Ox"302"  : mword 12)
    else if generic_eq p0_ "mideleg" then returnm (Ox"303"  : mword 12)
    else if generic_eq p0_ "mie" then returnm (Ox"304"  : mword 12)
    else if generic_eq p0_ "mtvec" then returnm (Ox"305"  : mword 12)
    else if generic_eq p0_ "mcounteren" then returnm (Ox"306"  : mword 12)
    else if generic_eq p0_ "mscratch" then returnm (Ox"340"  : mword 12)
    else if generic_eq p0_ "mepc" then returnm (Ox"341"  : mword 12)
    else if generic_eq p0_ "mcause" then returnm (Ox"342"  : mword 12)
    else if generic_eq p0_ "mtval" then returnm (Ox"343"  : mword 12)
    else if generic_eq p0_ "mip" then returnm (Ox"344"  : mword 12)
    else if generic_eq p0_ "pmpcfg0" then returnm (Ox"3A0"  : mword 12)
    else if generic_eq p0_ "pmpcfg1" then returnm (Ox"3A1"  : mword 12)
    else if generic_eq p0_ "pmpcfg2" then returnm (Ox"3A2"  : mword 12)
    else if generic_eq p0_ "pmpcfg3" then returnm (Ox"3A3"  : mword 12)
    else if generic_eq p0_ "pmpaddr0" then returnm (Ox"3B0"  : mword 12)
    else if generic_eq p0_ "pmpaddr1" then returnm (Ox"3B1"  : mword 12)
    else if generic_eq p0_ "pmpaddr2" then returnm (Ox"3B2"  : mword 12)
    else if generic_eq p0_ "pmpaddr3" then returnm (Ox"3B3"  : mword 12)
    else if generic_eq p0_ "pmpaddr4" then returnm (Ox"3B4"  : mword 12)
    else if generic_eq p0_ "pmpaddr5" then returnm (Ox"3B5"  : mword 12)
    else if generic_eq p0_ "pmpaddr6" then returnm (Ox"3B6"  : mword 12)
    else if generic_eq p0_ "pmpaddr7" then returnm (Ox"3B7"  : mword 12)
    else if generic_eq p0_ "pmpaddr8" then returnm (Ox"3B8"  : mword 12)
    else if generic_eq p0_ "pmpaddr9" then returnm (Ox"3B9"  : mword 12)
    else if generic_eq p0_ "pmpaddr10" then returnm (Ox"3BA"  : mword 12)
    else if generic_eq p0_ "pmpaddr11" then returnm (Ox"3BB"  : mword 12)
    else if generic_eq p0_ "pmpaddr12" then returnm (Ox"3BC"  : mword 12)
    else if generic_eq p0_ "pmpaddr13" then returnm (Ox"3BD"  : mword 12)
    else if generic_eq p0_ "pmpaddr14" then returnm (Ox"3BE"  : mword 12)
    else if generic_eq p0_ "pmpaddr15" then returnm (Ox"3BF"  : mword 12)
    else if generic_eq p0_ "mcycle" then returnm (Ox"B00"  : mword 12)
    else if generic_eq p0_ "minstret" then returnm (Ox"B02"  : mword 12)
    else if generic_eq p0_ "mcycleh" then returnm (Ox"B80"  : mword 12)
    else if generic_eq p0_ "minstreth" then returnm (Ox"B82"  : mword 12)
    else if generic_eq p0_ "tselect" then returnm (Ox"7A0"  : mword 12)
    else if generic_eq p0_ "tdata1" then returnm (Ox"7A1"  : mword 12)
    else if generic_eq p0_ "tdata2" then returnm (Ox"7A2"  : mword 12)
    else if generic_eq p0_ "tdata3" then returnm (Ox"7A3"  : mword 12)
    else
      (and_boolM (returnm ((hex_bits_12_backwards_matches p0_)  : bool))
         ((if hex_bits_12_backwards_matches p0_ then
             (hex_bits_12_backwards p0_) >>= fun reg => returnm (true  : bool)
           else returnm false)
          : M (bool))) >>= fun w__1 : bool =>
      (if sumbool_of_bool w__1 then hex_bits_12_backwards p0_
       else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
       : M (mword 12))
    : M (mword 12).

Definition csr_name_map_forwards_matches (arg_ : mword 12) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 (Ox"000"  : mword 12) then true
   else if eq_vec b__0 (Ox"004"  : mword 12) then true
   else if eq_vec b__0 (Ox"005"  : mword 12) then true
   else if eq_vec b__0 (Ox"040"  : mword 12) then true
   else if eq_vec b__0 (Ox"041"  : mword 12) then true
   else if eq_vec b__0 (Ox"042"  : mword 12) then true
   else if eq_vec b__0 (Ox"043"  : mword 12) then true
   else if eq_vec b__0 (Ox"044"  : mword 12) then true
   else if eq_vec b__0 (Ox"001"  : mword 12) then true
   else if eq_vec b__0 (Ox"002"  : mword 12) then true
   else if eq_vec b__0 (Ox"003"  : mword 12) then true
   else if eq_vec b__0 (Ox"C00"  : mword 12) then true
   else if eq_vec b__0 (Ox"C01"  : mword 12) then true
   else if eq_vec b__0 (Ox"C02"  : mword 12) then true
   else if eq_vec b__0 (Ox"C80"  : mword 12) then true
   else if eq_vec b__0 (Ox"C81"  : mword 12) then true
   else if eq_vec b__0 (Ox"C82"  : mword 12) then true
   else if eq_vec b__0 (Ox"100"  : mword 12) then true
   else if eq_vec b__0 (Ox"102"  : mword 12) then true
   else if eq_vec b__0 (Ox"103"  : mword 12) then true
   else if eq_vec b__0 (Ox"104"  : mword 12) then true
   else if eq_vec b__0 (Ox"105"  : mword 12) then true
   else if eq_vec b__0 (Ox"106"  : mword 12) then true
   else if eq_vec b__0 (Ox"140"  : mword 12) then true
   else if eq_vec b__0 (Ox"141"  : mword 12) then true
   else if eq_vec b__0 (Ox"142"  : mword 12) then true
   else if eq_vec b__0 (Ox"143"  : mword 12) then true
   else if eq_vec b__0 (Ox"144"  : mword 12) then true
   else if eq_vec b__0 (Ox"180"  : mword 12) then true
   else if eq_vec b__0 (Ox"F11"  : mword 12) then true
   else if eq_vec b__0 (Ox"F12"  : mword 12) then true
   else if eq_vec b__0 (Ox"F13"  : mword 12) then true
   else if eq_vec b__0 (Ox"F14"  : mword 12) then true
   else if eq_vec b__0 (Ox"300"  : mword 12) then true
   else if eq_vec b__0 (Ox"301"  : mword 12) then true
   else if eq_vec b__0 (Ox"302"  : mword 12) then true
   else if eq_vec b__0 (Ox"303"  : mword 12) then true
   else if eq_vec b__0 (Ox"304"  : mword 12) then true
   else if eq_vec b__0 (Ox"305"  : mword 12) then true
   else if eq_vec b__0 (Ox"306"  : mword 12) then true
   else if eq_vec b__0 (Ox"340"  : mword 12) then true
   else if eq_vec b__0 (Ox"341"  : mword 12) then true
   else if eq_vec b__0 (Ox"342"  : mword 12) then true
   else if eq_vec b__0 (Ox"343"  : mword 12) then true
   else if eq_vec b__0 (Ox"344"  : mword 12) then true
   else if eq_vec b__0 (Ox"3A0"  : mword 12) then true
   else if eq_vec b__0 (Ox"3A1"  : mword 12) then true
   else if eq_vec b__0 (Ox"3A2"  : mword 12) then true
   else if eq_vec b__0 (Ox"3A3"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B0"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B1"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B2"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B3"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B4"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B5"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B6"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B7"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B8"  : mword 12) then true
   else if eq_vec b__0 (Ox"3B9"  : mword 12) then true
   else if eq_vec b__0 (Ox"3BA"  : mword 12) then true
   else if eq_vec b__0 (Ox"3BB"  : mword 12) then true
   else if eq_vec b__0 (Ox"3BC"  : mword 12) then true
   else if eq_vec b__0 (Ox"3BD"  : mword 12) then true
   else if eq_vec b__0 (Ox"3BE"  : mword 12) then true
   else if eq_vec b__0 (Ox"3BF"  : mword 12) then true
   else if eq_vec b__0 (Ox"B00"  : mword 12) then true
   else if eq_vec b__0 (Ox"B02"  : mword 12) then true
   else if eq_vec b__0 (Ox"B80"  : mword 12) then true
   else if eq_vec b__0 (Ox"B82"  : mword 12) then true
   else if eq_vec b__0 (Ox"7A0"  : mword 12) then true
   else if eq_vec b__0 (Ox"7A1"  : mword 12) then true
   else if eq_vec b__0 (Ox"7A2"  : mword 12) then true
   else if eq_vec b__0 (Ox"7A3"  : mword 12) then true
   else true.

Definition csr_name_map_backwards_matches (arg_ : string) : M (bool) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "ustatus" then returnm true
    else if generic_eq p0_ "uie" then returnm true
    else if generic_eq p0_ "utvec" then returnm true
    else if generic_eq p0_ "uscratch" then returnm true
    else if generic_eq p0_ "uepc" then returnm true
    else if generic_eq p0_ "ucause" then returnm true
    else if generic_eq p0_ "utval" then returnm true
    else if generic_eq p0_ "uip" then returnm true
    else if generic_eq p0_ "fflags" then returnm true
    else if generic_eq p0_ "frm" then returnm true
    else if generic_eq p0_ "fcsr" then returnm true
    else if generic_eq p0_ "cycle" then returnm true
    else if generic_eq p0_ "time" then returnm true
    else if generic_eq p0_ "instret" then returnm true
    else if generic_eq p0_ "cycleh" then returnm true
    else if generic_eq p0_ "timeh" then returnm true
    else if generic_eq p0_ "instreth" then returnm true
    else if generic_eq p0_ "sstatus" then returnm true
    else if generic_eq p0_ "sedeleg" then returnm true
    else if generic_eq p0_ "sideleg" then returnm true
    else if generic_eq p0_ "sie" then returnm true
    else if generic_eq p0_ "stvec" then returnm true
    else if generic_eq p0_ "scounteren" then returnm true
    else if generic_eq p0_ "sscratch" then returnm true
    else if generic_eq p0_ "sepc" then returnm true
    else if generic_eq p0_ "scause" then returnm true
    else if generic_eq p0_ "stval" then returnm true
    else if generic_eq p0_ "sip" then returnm true
    else if generic_eq p0_ "satp" then returnm true
    else if generic_eq p0_ "mvendorid" then returnm true
    else if generic_eq p0_ "marchid" then returnm true
    else if generic_eq p0_ "mimpid" then returnm true
    else if generic_eq p0_ "mhartid" then returnm true
    else if generic_eq p0_ "mstatus" then returnm true
    else if generic_eq p0_ "misa" then returnm true
    else if generic_eq p0_ "medeleg" then returnm true
    else if generic_eq p0_ "mideleg" then returnm true
    else if generic_eq p0_ "mie" then returnm true
    else if generic_eq p0_ "mtvec" then returnm true
    else if generic_eq p0_ "mcounteren" then returnm true
    else if generic_eq p0_ "mscratch" then returnm true
    else if generic_eq p0_ "mepc" then returnm true
    else if generic_eq p0_ "mcause" then returnm true
    else if generic_eq p0_ "mtval" then returnm true
    else if generic_eq p0_ "mip" then returnm true
    else if generic_eq p0_ "pmpcfg0" then returnm true
    else if generic_eq p0_ "pmpcfg1" then returnm true
    else if generic_eq p0_ "pmpcfg2" then returnm true
    else if generic_eq p0_ "pmpcfg3" then returnm true
    else if generic_eq p0_ "pmpaddr0" then returnm true
    else if generic_eq p0_ "pmpaddr1" then returnm true
    else if generic_eq p0_ "pmpaddr2" then returnm true
    else if generic_eq p0_ "pmpaddr3" then returnm true
    else if generic_eq p0_ "pmpaddr4" then returnm true
    else if generic_eq p0_ "pmpaddr5" then returnm true
    else if generic_eq p0_ "pmpaddr6" then returnm true
    else if generic_eq p0_ "pmpaddr7" then returnm true
    else if generic_eq p0_ "pmpaddr8" then returnm true
    else if generic_eq p0_ "pmpaddr9" then returnm true
    else if generic_eq p0_ "pmpaddr10" then returnm true
    else if generic_eq p0_ "pmpaddr11" then returnm true
    else if generic_eq p0_ "pmpaddr12" then returnm true
    else if generic_eq p0_ "pmpaddr13" then returnm true
    else if generic_eq p0_ "pmpaddr14" then returnm true
    else if generic_eq p0_ "pmpaddr15" then returnm true
    else if generic_eq p0_ "mcycle" then returnm true
    else if generic_eq p0_ "minstret" then returnm true
    else if generic_eq p0_ "mcycleh" then returnm true
    else if generic_eq p0_ "minstreth" then returnm true
    else if generic_eq p0_ "tselect" then returnm true
    else if generic_eq p0_ "tdata1" then returnm true
    else if generic_eq p0_ "tdata2" then returnm true
    else if generic_eq p0_ "tdata3" then returnm true
    else
      (and_boolM (returnm ((hex_bits_12_backwards_matches p0_)  : bool))
         ((if hex_bits_12_backwards_matches p0_ then
             (hex_bits_12_backwards p0_) >>= fun reg => returnm (true  : bool)
           else returnm false)
          : M (bool))) >>= fun w__1 : bool =>
      if sumbool_of_bool w__1 then (hex_bits_12_backwards p0_) >>= fun reg => returnm true
      else returnm false)
    : M (bool).

Definition _s748_ (_s749_ : string) : option ((mword 12 * string)) :=
   match _s749_ with
   | _s750_ =>
      match (hex_bits_12_matches_prefix _s750_) with
      | Some (reg, existT _ _s751_ _) =>
         match (string_drop _s750_ _s751_) with | s_ => Some (reg, s_) end
      | _ => None
      end
   end.

Definition _s744_ (_s745_ : string) : option string :=
   let _s746_ := _s745_ in
   if string_startswith _s746_ "tdata3" then
     match (string_drop _s746_ (projT1 (string_length "tdata3"))) with | s_ => Some s_ end
   else None.

Definition _s740_ (_s741_ : string) : option string :=
   let _s742_ := _s741_ in
   if string_startswith _s742_ "tdata2" then
     match (string_drop _s742_ (projT1 (string_length "tdata2"))) with | s_ => Some s_ end
   else None.

Definition _s736_ (_s737_ : string) : option string :=
   let _s738_ := _s737_ in
   if string_startswith _s738_ "tdata1" then
     match (string_drop _s738_ (projT1 (string_length "tdata1"))) with | s_ => Some s_ end
   else None.

Definition _s732_ (_s733_ : string) : option string :=
   let _s734_ := _s733_ in
   if string_startswith _s734_ "tselect" then
     match (string_drop _s734_ (projT1 (string_length "tselect"))) with | s_ => Some s_ end
   else None.

Definition _s728_ (_s729_ : string) : option string :=
   let _s730_ := _s729_ in
   if string_startswith _s730_ "minstreth" then
     match (string_drop _s730_ (projT1 (string_length "minstreth"))) with | s_ => Some s_ end
   else None.

Definition _s724_ (_s725_ : string) : option string :=
   let _s726_ := _s725_ in
   if string_startswith _s726_ "mcycleh" then
     match (string_drop _s726_ (projT1 (string_length "mcycleh"))) with | s_ => Some s_ end
   else None.

Definition _s720_ (_s721_ : string) : option string :=
   let _s722_ := _s721_ in
   if string_startswith _s722_ "minstret" then
     match (string_drop _s722_ (projT1 (string_length "minstret"))) with | s_ => Some s_ end
   else None.

Definition _s716_ (_s717_ : string) : option string :=
   let _s718_ := _s717_ in
   if string_startswith _s718_ "mcycle" then
     match (string_drop _s718_ (projT1 (string_length "mcycle"))) with | s_ => Some s_ end
   else None.

Definition _s712_ (_s713_ : string) : option string :=
   let _s714_ := _s713_ in
   if string_startswith _s714_ "pmpaddr15" then
     match (string_drop _s714_ (projT1 (string_length "pmpaddr15"))) with | s_ => Some s_ end
   else None.

Definition _s708_ (_s709_ : string) : option string :=
   let _s710_ := _s709_ in
   if string_startswith _s710_ "pmpaddr14" then
     match (string_drop _s710_ (projT1 (string_length "pmpaddr14"))) with | s_ => Some s_ end
   else None.

Definition _s704_ (_s705_ : string) : option string :=
   let _s706_ := _s705_ in
   if string_startswith _s706_ "pmpaddr13" then
     match (string_drop _s706_ (projT1 (string_length "pmpaddr13"))) with | s_ => Some s_ end
   else None.

Definition _s700_ (_s701_ : string) : option string :=
   let _s702_ := _s701_ in
   if string_startswith _s702_ "pmpaddr12" then
     match (string_drop _s702_ (projT1 (string_length "pmpaddr12"))) with | s_ => Some s_ end
   else None.

Definition _s696_ (_s697_ : string) : option string :=
   let _s698_ := _s697_ in
   if string_startswith _s698_ "pmpaddr11" then
     match (string_drop _s698_ (projT1 (string_length "pmpaddr11"))) with | s_ => Some s_ end
   else None.

Definition _s692_ (_s693_ : string) : option string :=
   let _s694_ := _s693_ in
   if string_startswith _s694_ "pmpaddr10" then
     match (string_drop _s694_ (projT1 (string_length "pmpaddr10"))) with | s_ => Some s_ end
   else None.

Definition _s688_ (_s689_ : string) : option string :=
   let _s690_ := _s689_ in
   if string_startswith _s690_ "pmpaddr9" then
     match (string_drop _s690_ (projT1 (string_length "pmpaddr9"))) with | s_ => Some s_ end
   else None.

Definition _s684_ (_s685_ : string) : option string :=
   let _s686_ := _s685_ in
   if string_startswith _s686_ "pmpaddr8" then
     match (string_drop _s686_ (projT1 (string_length "pmpaddr8"))) with | s_ => Some s_ end
   else None.

Definition _s680_ (_s681_ : string) : option string :=
   let _s682_ := _s681_ in
   if string_startswith _s682_ "pmpaddr7" then
     match (string_drop _s682_ (projT1 (string_length "pmpaddr7"))) with | s_ => Some s_ end
   else None.

Definition _s676_ (_s677_ : string) : option string :=
   let _s678_ := _s677_ in
   if string_startswith _s678_ "pmpaddr6" then
     match (string_drop _s678_ (projT1 (string_length "pmpaddr6"))) with | s_ => Some s_ end
   else None.

Definition _s672_ (_s673_ : string) : option string :=
   let _s674_ := _s673_ in
   if string_startswith _s674_ "pmpaddr5" then
     match (string_drop _s674_ (projT1 (string_length "pmpaddr5"))) with | s_ => Some s_ end
   else None.

Definition _s668_ (_s669_ : string) : option string :=
   let _s670_ := _s669_ in
   if string_startswith _s670_ "pmpaddr4" then
     match (string_drop _s670_ (projT1 (string_length "pmpaddr4"))) with | s_ => Some s_ end
   else None.

Definition _s664_ (_s665_ : string) : option string :=
   let _s666_ := _s665_ in
   if string_startswith _s666_ "pmpaddr3" then
     match (string_drop _s666_ (projT1 (string_length "pmpaddr3"))) with | s_ => Some s_ end
   else None.

Definition _s660_ (_s661_ : string) : option string :=
   let _s662_ := _s661_ in
   if string_startswith _s662_ "pmpaddr2" then
     match (string_drop _s662_ (projT1 (string_length "pmpaddr2"))) with | s_ => Some s_ end
   else None.

Definition _s656_ (_s657_ : string) : option string :=
   let _s658_ := _s657_ in
   if string_startswith _s658_ "pmpaddr1" then
     match (string_drop _s658_ (projT1 (string_length "pmpaddr1"))) with | s_ => Some s_ end
   else None.

Definition _s652_ (_s653_ : string) : option string :=
   let _s654_ := _s653_ in
   if string_startswith _s654_ "pmpaddr0" then
     match (string_drop _s654_ (projT1 (string_length "pmpaddr0"))) with | s_ => Some s_ end
   else None.

Definition _s648_ (_s649_ : string) : option string :=
   let _s650_ := _s649_ in
   if string_startswith _s650_ "pmpcfg3" then
     match (string_drop _s650_ (projT1 (string_length "pmpcfg3"))) with | s_ => Some s_ end
   else None.

Definition _s644_ (_s645_ : string) : option string :=
   let _s646_ := _s645_ in
   if string_startswith _s646_ "pmpcfg2" then
     match (string_drop _s646_ (projT1 (string_length "pmpcfg2"))) with | s_ => Some s_ end
   else None.

Definition _s640_ (_s641_ : string) : option string :=
   let _s642_ := _s641_ in
   if string_startswith _s642_ "pmpcfg1" then
     match (string_drop _s642_ (projT1 (string_length "pmpcfg1"))) with | s_ => Some s_ end
   else None.

Definition _s636_ (_s637_ : string) : option string :=
   let _s638_ := _s637_ in
   if string_startswith _s638_ "pmpcfg0" then
     match (string_drop _s638_ (projT1 (string_length "pmpcfg0"))) with | s_ => Some s_ end
   else None.

Definition _s632_ (_s633_ : string) : option string :=
   let _s634_ := _s633_ in
   if string_startswith _s634_ "mip" then
     match (string_drop _s634_ (projT1 (string_length "mip"))) with | s_ => Some s_ end
   else None.

Definition _s628_ (_s629_ : string) : option string :=
   let _s630_ := _s629_ in
   if string_startswith _s630_ "mtval" then
     match (string_drop _s630_ (projT1 (string_length "mtval"))) with | s_ => Some s_ end
   else None.

Definition _s624_ (_s625_ : string) : option string :=
   let _s626_ := _s625_ in
   if string_startswith _s626_ "mcause" then
     match (string_drop _s626_ (projT1 (string_length "mcause"))) with | s_ => Some s_ end
   else None.

Definition _s620_ (_s621_ : string) : option string :=
   let _s622_ := _s621_ in
   if string_startswith _s622_ "mepc" then
     match (string_drop _s622_ (projT1 (string_length "mepc"))) with | s_ => Some s_ end
   else None.

Definition _s616_ (_s617_ : string) : option string :=
   let _s618_ := _s617_ in
   if string_startswith _s618_ "mscratch" then
     match (string_drop _s618_ (projT1 (string_length "mscratch"))) with | s_ => Some s_ end
   else None.

Definition _s612_ (_s613_ : string) : option string :=
   let _s614_ := _s613_ in
   if string_startswith _s614_ "mcounteren" then
     match (string_drop _s614_ (projT1 (string_length "mcounteren"))) with | s_ => Some s_ end
   else None.

Definition _s608_ (_s609_ : string) : option string :=
   let _s610_ := _s609_ in
   if string_startswith _s610_ "mtvec" then
     match (string_drop _s610_ (projT1 (string_length "mtvec"))) with | s_ => Some s_ end
   else None.

Definition _s604_ (_s605_ : string) : option string :=
   let _s606_ := _s605_ in
   if string_startswith _s606_ "mie" then
     match (string_drop _s606_ (projT1 (string_length "mie"))) with | s_ => Some s_ end
   else None.

Definition _s600_ (_s601_ : string) : option string :=
   let _s602_ := _s601_ in
   if string_startswith _s602_ "mideleg" then
     match (string_drop _s602_ (projT1 (string_length "mideleg"))) with | s_ => Some s_ end
   else None.

Definition _s596_ (_s597_ : string) : option string :=
   let _s598_ := _s597_ in
   if string_startswith _s598_ "medeleg" then
     match (string_drop _s598_ (projT1 (string_length "medeleg"))) with | s_ => Some s_ end
   else None.

Definition _s592_ (_s593_ : string) : option string :=
   let _s594_ := _s593_ in
   if string_startswith _s594_ "misa" then
     match (string_drop _s594_ (projT1 (string_length "misa"))) with | s_ => Some s_ end
   else None.

Definition _s588_ (_s589_ : string) : option string :=
   let _s590_ := _s589_ in
   if string_startswith _s590_ "mstatus" then
     match (string_drop _s590_ (projT1 (string_length "mstatus"))) with | s_ => Some s_ end
   else None.

Definition _s584_ (_s585_ : string) : option string :=
   let _s586_ := _s585_ in
   if string_startswith _s586_ "mhartid" then
     match (string_drop _s586_ (projT1 (string_length "mhartid"))) with | s_ => Some s_ end
   else None.

Definition _s580_ (_s581_ : string) : option string :=
   let _s582_ := _s581_ in
   if string_startswith _s582_ "mimpid" then
     match (string_drop _s582_ (projT1 (string_length "mimpid"))) with | s_ => Some s_ end
   else None.

Definition _s576_ (_s577_ : string) : option string :=
   let _s578_ := _s577_ in
   if string_startswith _s578_ "marchid" then
     match (string_drop _s578_ (projT1 (string_length "marchid"))) with | s_ => Some s_ end
   else None.

Definition _s572_ (_s573_ : string) : option string :=
   let _s574_ := _s573_ in
   if string_startswith _s574_ "mvendorid" then
     match (string_drop _s574_ (projT1 (string_length "mvendorid"))) with | s_ => Some s_ end
   else None.

Definition _s568_ (_s569_ : string) : option string :=
   let _s570_ := _s569_ in
   if string_startswith _s570_ "satp" then
     match (string_drop _s570_ (projT1 (string_length "satp"))) with | s_ => Some s_ end
   else None.

Definition _s564_ (_s565_ : string) : option string :=
   let _s566_ := _s565_ in
   if string_startswith _s566_ "sip" then
     match (string_drop _s566_ (projT1 (string_length "sip"))) with | s_ => Some s_ end
   else None.

Definition _s560_ (_s561_ : string) : option string :=
   let _s562_ := _s561_ in
   if string_startswith _s562_ "stval" then
     match (string_drop _s562_ (projT1 (string_length "stval"))) with | s_ => Some s_ end
   else None.

Definition _s556_ (_s557_ : string) : option string :=
   let _s558_ := _s557_ in
   if string_startswith _s558_ "scause" then
     match (string_drop _s558_ (projT1 (string_length "scause"))) with | s_ => Some s_ end
   else None.

Definition _s552_ (_s553_ : string) : option string :=
   let _s554_ := _s553_ in
   if string_startswith _s554_ "sepc" then
     match (string_drop _s554_ (projT1 (string_length "sepc"))) with | s_ => Some s_ end
   else None.

Definition _s548_ (_s549_ : string) : option string :=
   let _s550_ := _s549_ in
   if string_startswith _s550_ "sscratch" then
     match (string_drop _s550_ (projT1 (string_length "sscratch"))) with | s_ => Some s_ end
   else None.

Definition _s544_ (_s545_ : string) : option string :=
   let _s546_ := _s545_ in
   if string_startswith _s546_ "scounteren" then
     match (string_drop _s546_ (projT1 (string_length "scounteren"))) with | s_ => Some s_ end
   else None.

Definition _s540_ (_s541_ : string) : option string :=
   let _s542_ := _s541_ in
   if string_startswith _s542_ "stvec" then
     match (string_drop _s542_ (projT1 (string_length "stvec"))) with | s_ => Some s_ end
   else None.

Definition _s536_ (_s537_ : string) : option string :=
   let _s538_ := _s537_ in
   if string_startswith _s538_ "sie" then
     match (string_drop _s538_ (projT1 (string_length "sie"))) with | s_ => Some s_ end
   else None.

Definition _s532_ (_s533_ : string) : option string :=
   let _s534_ := _s533_ in
   if string_startswith _s534_ "sideleg" then
     match (string_drop _s534_ (projT1 (string_length "sideleg"))) with | s_ => Some s_ end
   else None.

Definition _s528_ (_s529_ : string) : option string :=
   let _s530_ := _s529_ in
   if string_startswith _s530_ "sedeleg" then
     match (string_drop _s530_ (projT1 (string_length "sedeleg"))) with | s_ => Some s_ end
   else None.

Definition _s524_ (_s525_ : string) : option string :=
   let _s526_ := _s525_ in
   if string_startswith _s526_ "sstatus" then
     match (string_drop _s526_ (projT1 (string_length "sstatus"))) with | s_ => Some s_ end
   else None.

Definition _s520_ (_s521_ : string) : option string :=
   let _s522_ := _s521_ in
   if string_startswith _s522_ "instreth" then
     match (string_drop _s522_ (projT1 (string_length "instreth"))) with | s_ => Some s_ end
   else None.

Definition _s516_ (_s517_ : string) : option string :=
   let _s518_ := _s517_ in
   if string_startswith _s518_ "timeh" then
     match (string_drop _s518_ (projT1 (string_length "timeh"))) with | s_ => Some s_ end
   else None.

Definition _s512_ (_s513_ : string) : option string :=
   let _s514_ := _s513_ in
   if string_startswith _s514_ "cycleh" then
     match (string_drop _s514_ (projT1 (string_length "cycleh"))) with | s_ => Some s_ end
   else None.

Definition _s508_ (_s509_ : string) : option string :=
   let _s510_ := _s509_ in
   if string_startswith _s510_ "instret" then
     match (string_drop _s510_ (projT1 (string_length "instret"))) with | s_ => Some s_ end
   else None.

Definition _s504_ (_s505_ : string) : option string :=
   let _s506_ := _s505_ in
   if string_startswith _s506_ "time" then
     match (string_drop _s506_ (projT1 (string_length "time"))) with | s_ => Some s_ end
   else None.

Definition _s500_ (_s501_ : string) : option string :=
   let _s502_ := _s501_ in
   if string_startswith _s502_ "cycle" then
     match (string_drop _s502_ (projT1 (string_length "cycle"))) with | s_ => Some s_ end
   else None.

Definition _s496_ (_s497_ : string) : option string :=
   let _s498_ := _s497_ in
   if string_startswith _s498_ "fcsr" then
     match (string_drop _s498_ (projT1 (string_length "fcsr"))) with | s_ => Some s_ end
   else None.

Definition _s492_ (_s493_ : string) : option string :=
   let _s494_ := _s493_ in
   if string_startswith _s494_ "frm" then
     match (string_drop _s494_ (projT1 (string_length "frm"))) with | s_ => Some s_ end
   else None.

Definition _s488_ (_s489_ : string) : option string :=
   let _s490_ := _s489_ in
   if string_startswith _s490_ "fflags" then
     match (string_drop _s490_ (projT1 (string_length "fflags"))) with | s_ => Some s_ end
   else None.

Definition _s484_ (_s485_ : string) : option string :=
   let _s486_ := _s485_ in
   if string_startswith _s486_ "uip" then
     match (string_drop _s486_ (projT1 (string_length "uip"))) with | s_ => Some s_ end
   else None.

Definition _s480_ (_s481_ : string) : option string :=
   let _s482_ := _s481_ in
   if string_startswith _s482_ "utval" then
     match (string_drop _s482_ (projT1 (string_length "utval"))) with | s_ => Some s_ end
   else None.

Definition _s476_ (_s477_ : string) : option string :=
   let _s478_ := _s477_ in
   if string_startswith _s478_ "ucause" then
     match (string_drop _s478_ (projT1 (string_length "ucause"))) with | s_ => Some s_ end
   else None.

Definition _s472_ (_s473_ : string) : option string :=
   let _s474_ := _s473_ in
   if string_startswith _s474_ "uepc" then
     match (string_drop _s474_ (projT1 (string_length "uepc"))) with | s_ => Some s_ end
   else None.

Definition _s468_ (_s469_ : string) : option string :=
   let _s470_ := _s469_ in
   if string_startswith _s470_ "uscratch" then
     match (string_drop _s470_ (projT1 (string_length "uscratch"))) with | s_ => Some s_ end
   else None.

Definition _s464_ (_s465_ : string) : option string :=
   let _s466_ := _s465_ in
   if string_startswith _s466_ "utvec" then
     match (string_drop _s466_ (projT1 (string_length "utvec"))) with | s_ => Some s_ end
   else None.

Definition _s460_ (_s461_ : string) : option string :=
   let _s462_ := _s461_ in
   if string_startswith _s462_ "uie" then
     match (string_drop _s462_ (projT1 (string_length "uie"))) with | s_ => Some s_ end
   else None.

Definition _s456_ (_s457_ : string) : option string :=
   let _s458_ := _s457_ in
   if string_startswith _s458_ "ustatus" then
     match (string_drop _s458_ (projT1 (string_length "ustatus"))) with | s_ => Some s_ end
   else None.

Definition csr_name_map_matches_prefix (arg_ : string)
: M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s459_ := arg_ in
   (if match (_s456_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s456_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"000"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s460_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s460_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"004"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s464_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s464_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"005"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s468_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s468_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"040"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s472_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s472_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"041"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s476_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s476_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"042"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s480_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s480_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"043"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s484_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s484_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"044"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s488_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s488_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"001"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s492_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s492_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"002"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s496_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s496_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"003"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s500_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s500_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"C00"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s504_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s504_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"C01"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s508_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s508_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"C02"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s512_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s512_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"C80"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s516_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s516_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"C81"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s520_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s520_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"C82"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s524_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s524_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"100"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s528_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s528_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"102"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s532_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s532_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"103"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s536_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s536_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"104"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s540_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s540_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"105"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s544_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s544_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"106"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s548_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s548_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"140"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s552_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s552_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"141"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s556_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s556_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"142"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s560_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s560_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"143"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s564_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s564_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"144"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s568_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s568_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"180"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s572_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s572_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"F11"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s576_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s576_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"F12"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s580_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s580_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"F13"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s584_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s584_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"F14"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s588_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s588_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"300"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s592_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s592_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"301"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s596_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s596_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"302"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s600_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s600_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"303"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s604_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s604_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"304"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s608_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s608_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"305"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s612_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s612_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"306"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s616_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s616_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"340"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s620_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s620_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"341"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s624_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s624_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"342"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s628_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s628_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"343"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s632_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s632_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"344"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s636_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s636_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3A0"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s640_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s640_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3A1"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s644_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s644_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3A2"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s648_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s648_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3A3"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s652_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s652_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B0"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s656_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s656_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B1"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s660_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s660_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B2"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s664_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s664_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B3"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s668_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s668_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B4"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s672_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s672_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B5"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s676_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s676_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B6"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s680_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s680_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B7"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s684_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s684_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B8"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s688_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s688_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3B9"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s692_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s692_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3BA"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s696_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s696_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3BB"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s700_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s700_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3BC"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s704_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s704_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3BD"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s708_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s708_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3BE"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s712_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s712_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"3BF"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s716_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s716_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"B00"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s720_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s720_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"B02"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s724_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s724_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"B80"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s728_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s728_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"B82"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s732_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s732_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"7A0"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s736_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s736_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"7A1"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s740_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s740_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"7A2"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s744_ _s459_) with | Some s_ => true | _ => false end then
      (match (_s744_ _s459_) with
       | Some s_ =>
          returnm (Some
                     (Ox"7A3"
                      : mword 12, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s748_ _s459_) with | Some (reg, s_) => true | _ => false end then
      (match (_s748_ _s459_) with
       | Some (reg, s_) =>
          returnm (Some
                     (reg, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 12 * {n : Z & ArithFact (n >=? 0)}))).

Definition csr_name (csr : mword 12) : string := csr_name_map_forwards csr.

Definition ext_is_CSR_defined (b__0 : mword 12) (g__312 : Privilege) : M (bool) :=
   (if eq_vec b__0 (Ox"000"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"004"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"005"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"040"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"041"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"042"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"043"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"044"  : mword 12) then
      (and_boolM ((haveUsrMode tt)  : M (bool)) ((haveNExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"001"  : mword 12) then
      (or_boolM ((haveFExt tt)  : M (bool)) ((haveDExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"002"  : mword 12) then
      (or_boolM ((haveFExt tt)  : M (bool)) ((haveDExt tt)  : M (bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"003"  : mword 12) then
      (or_boolM ((haveFExt tt)  : M (bool)) ((haveDExt tt)  : M (bool)))
       : M (bool)
    else returnm false)
    : M (bool).

Definition ext_read_CSR (b__0 : mword 12) : M (option (mword 32)) :=
   (if eq_vec b__0 (Ox"000"  : mword 12) then
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      returnm (Some (_get_Ustatus_bits (lower_sstatus (lower_mstatus w__0))))
    else if eq_vec b__0 (Ox"004"  : mword 12) then
      read_reg mie_ref >>= fun w__1 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__2 : Minterrupts =>
      read_reg sideleg_ref >>= fun w__3 : Sinterrupts =>
      returnm (Some (_get_Uinterrupts_bits (lower_sie (lower_mie w__1 w__2) w__3)))
    else if eq_vec b__0 (Ox"005"  : mword 12) then
      (get_utvec tt) >>= fun w__4 : mword 32 => returnm (Some w__4)
    else if eq_vec b__0 (Ox"040"  : mword 12) then
      ((read_reg uscratch_ref)  : M (mword 32)) >>= fun w__5 : mword 32 => returnm (Some w__5)
    else if eq_vec b__0 (Ox"041"  : mword 12) then
      (get_xret_target User) >>= fun w__6 : mword 32 =>
      (pc_alignment_mask tt) >>= fun w__7 : mword 32 => returnm (Some (and_vec w__6 w__7))
    else if eq_vec b__0 (Ox"042"  : mword 12) then
      read_reg ucause_ref >>= fun w__8 : Mcause => returnm (Some (_get_Mcause_bits w__8))
    else if eq_vec b__0 (Ox"043"  : mword 12) then
      ((read_reg utval_ref)  : M (mword 32)) >>= fun w__9 : mword 32 => returnm (Some w__9)
    else if eq_vec b__0 (Ox"044"  : mword 12) then
      read_reg mip_ref >>= fun w__10 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__11 : Minterrupts =>
      read_reg sideleg_ref >>= fun w__12 : Sinterrupts =>
      returnm (Some (_get_Uinterrupts_bits (lower_sip (lower_mip w__10 w__11) w__12)))
    else if eq_vec b__0 (Ox"001"  : mword 12) then
      read_reg fcsr_ref >>= fun w__13 : Fcsr => returnm (Some (EXTZ 32 (_get_Fcsr_FFLAGS w__13)))
    else if eq_vec b__0 (Ox"002"  : mword 12) then
      read_reg fcsr_ref >>= fun w__14 : Fcsr => returnm (Some (EXTZ 32 (_get_Fcsr_FRM w__14)))
    else if eq_vec b__0 (Ox"003"  : mword 12) then
      read_reg fcsr_ref >>= fun w__15 : Fcsr => returnm (Some (EXTZ 32 (_get_Fcsr_bits w__15)))
    else returnm None)
    : M (option (mword 32)).

Definition ext_write_CSR (b__0 : mword 12) (value : mword 32) : M (option (mword 32)) :=
   (if eq_vec b__0 (Ox"000"  : mword 12) then
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      (legalize_ustatus w__0 value) >>= fun w__1 : Mstatus =>
      write_reg mstatus_ref w__1 >>
      read_reg mstatus_ref >>= fun w__2 : Mstatus => returnm (Some (_get_Mstatus_bits w__2))
    else if eq_vec b__0 (Ox"004"  : mword 12) then
      read_reg mie_ref >>= fun w__3 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__4 : Minterrupts =>
      read_reg sideleg_ref >>= fun w__5 : Sinterrupts =>
      let sie := legalize_uie (lower_mie w__3 w__4) w__5 value in
      read_reg mie_ref >>= fun w__6 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__7 : Minterrupts =>
      (lift_sie w__6 w__7 sie) >>= fun w__8 : Minterrupts =>
      write_reg mie_ref w__8 >>
      read_reg mie_ref >>= fun w__9 : Minterrupts => returnm (Some (_get_Minterrupts_bits w__9))
    else if eq_vec b__0 (Ox"005"  : mword 12) then
      (set_utvec value) >>= fun w__10 : mword 32 => returnm (Some w__10)
    else if eq_vec b__0 (Ox"040"  : mword 12) then
      write_reg uscratch_ref value >>
      ((read_reg uscratch_ref)  : M (mword 32)) >>= fun w__11 : mword 32 => returnm (Some w__11)
    else if eq_vec b__0 (Ox"041"  : mword 12) then
      (set_xret_target User value) >>= fun w__12 : mword 32 => returnm (Some w__12)
    else if eq_vec b__0 (Ox"042"  : mword 12) then
      (_set_Mcause_bits ucause_ref value) >>
      read_reg ucause_ref >>= fun w__13 : Mcause => returnm (Some (_get_Mcause_bits w__13))
    else if eq_vec b__0 (Ox"043"  : mword 12) then
      write_reg utval_ref value >>
      ((read_reg utval_ref)  : M (mword 32)) >>= fun w__14 : mword 32 => returnm (Some w__14)
    else if eq_vec b__0 (Ox"044"  : mword 12) then
      read_reg mip_ref >>= fun w__15 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__16 : Minterrupts =>
      read_reg sideleg_ref >>= fun w__17 : Sinterrupts =>
      let sip := legalize_uip (lower_mip w__15 w__16) w__17 value in
      read_reg mip_ref >>= fun w__18 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__19 : Minterrupts =>
      (lift_sip w__18 w__19 sip) >>= fun w__20 : Minterrupts =>
      write_reg mip_ref w__20 >>
      read_reg mip_ref >>= fun w__21 : Minterrupts => returnm (Some (_get_Minterrupts_bits w__21))
    else if eq_vec b__0 (Ox"001"  : mword 12) then
      read_reg fcsr_ref >>= fun w__22 : Fcsr =>
      (ext_write_fcsr (_get_Fcsr_FRM w__22) (subrange_vec_dec value 4 0)) >>
      read_reg fcsr_ref >>= fun w__23 : Fcsr => returnm (Some (EXTZ 32 (_get_Fcsr_FFLAGS w__23)))
    else if eq_vec b__0 (Ox"002"  : mword 12) then
      read_reg fcsr_ref >>= fun w__24 : Fcsr =>
      (ext_write_fcsr (subrange_vec_dec value 2 0) (_get_Fcsr_FFLAGS w__24)) >>
      read_reg fcsr_ref >>= fun w__25 : Fcsr => returnm (Some (EXTZ 32 (_get_Fcsr_FRM w__25)))
    else if eq_vec b__0 (Ox"003"  : mword 12) then
      (ext_write_fcsr (subrange_vec_dec value 7 5) (subrange_vec_dec value 4 0)) >>
      read_reg fcsr_ref >>= fun w__26 : Fcsr => returnm (Some (EXTZ 32 (_get_Fcsr_bits w__26)))
    else returnm None)
    : M (option (mword 32)).

Definition csrAccess (csr : mword 12) : mword 2 := subrange_vec_dec csr 11 10.

Definition csrPriv (csr : mword 12) : mword 2 := subrange_vec_dec csr 9 8.

Definition is_CSR_defined (csr : mword 12) (p : Privilege) : M (bool) :=
   let b__0 := csr in
   (if eq_vec b__0 (Ox"F11"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"F12"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"F13"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"F14"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"300"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"301"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"302"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"303"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"304"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"305"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"306"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"340"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"341"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"342"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"343"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"344"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3A0"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3A1"  : mword 12) then
      returnm (andb (generic_eq p Machine) (Z.eqb 32 32))
    else if eq_vec b__0 (Ox"3A2"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3A3"  : mword 12) then
      returnm (andb (generic_eq p Machine) (Z.eqb 32 32))
    else if eq_vec b__0 (Ox"3B0"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B1"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B2"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B3"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B4"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B5"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B6"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B7"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B8"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3B9"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3BA"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3BB"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3BC"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3BD"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3BE"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"3BF"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"B00"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"B02"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"B80"  : mword 12) then
      returnm (andb (generic_eq p Machine) (Z.eqb 32 32))
    else if eq_vec b__0 (Ox"B82"  : mword 12) then
      returnm (andb (generic_eq p Machine) (Z.eqb 32 32))
    else if eq_vec b__0 (Ox"7A0"  : mword 12) then returnm (generic_eq p Machine)
    else if eq_vec b__0 (Ox"100"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"102"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"103"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"104"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"105"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"106"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"140"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"141"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"142"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"143"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"144"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"180"  : mword 12) then
      (and_boolM ((haveSupMode tt)  : M (bool))
         (returnm ((orb (generic_eq p Machine) (generic_eq p Supervisor))  : bool)))
       : M (bool)
    else if eq_vec b__0 (Ox"C00"  : mword 12) then returnm (generic_eq p User)
    else if eq_vec b__0 (Ox"C01"  : mword 12) then returnm (generic_eq p User)
    else if eq_vec b__0 (Ox"C02"  : mword 12) then returnm (generic_eq p User)
    else if eq_vec b__0 (Ox"C80"  : mword 12) then returnm (andb (generic_eq p User) (Z.eqb 32 32))
    else if eq_vec b__0 (Ox"C81"  : mword 12) then returnm (andb (generic_eq p User) (Z.eqb 32 32))
    else if eq_vec b__0 (Ox"C82"  : mword 12) then returnm (andb (generic_eq p User) (Z.eqb 32 32))
    else (ext_is_CSR_defined csr p)  : M (bool))
    : M (bool).

Definition check_CSR_access (csrrw : mword 2) (csrpr : mword 2) (p : Privilege) (isWrite : bool)
: bool :=
   andb (negb (andb (Bool.eqb isWrite true) (eq_vec csrrw ('b"11"  : mword 2))))
     (zopz0zKzJ_u (privLevel_to_bits p) csrpr).

Definition check_TVM_SATP (csr : mword 12) (p : Privilege) : M (bool) :=
   (and_boolM (returnm ((eq_vec csr (Ox"180"  : mword 12))  : bool))
      ((and_boolM (returnm ((generic_eq p Supervisor)  : bool))
          (read_reg mstatus_ref >>= fun w__0 : Mstatus =>
           returnm ((eq_vec (_get_Mstatus_TVM w__0) ('b"1"  : mword 1))  : bool)))
       : M (bool))) >>= fun w__2 : bool =>
   returnm (negb w__2).

Definition check_Counteren (csr : mword 12) (p : Privilege) : M (bool) :=
   (match (csr, p) with
    | (b__0, Supervisor) =>
       (if eq_vec b__0 (Ox"C00"  : mword 12) then
          read_reg mcounteren_ref >>= fun w__0 : Counteren =>
          returnm (eq_vec (_get_Counteren_CY w__0) ('b"1"  : mword 1))
        else if eq_vec b__0 (Ox"C01"  : mword 12) then
          read_reg mcounteren_ref >>= fun w__1 : Counteren =>
          returnm (eq_vec (_get_Counteren_TM w__1) ('b"1"  : mword 1))
        else if eq_vec b__0 (Ox"C02"  : mword 12) then
          read_reg mcounteren_ref >>= fun w__2 : Counteren =>
          returnm (eq_vec (_get_Counteren_IR w__2) ('b"1"  : mword 1))
        else
          returnm (match (b__0, Supervisor) with
                   | (_, _) =>
                      if andb (zopz0zIzJ_u (Ox"C03"  : mword 12) csr)
                           (zopz0zIzJ_u csr (Ox"C1F"  : mword 12)) then
                        false
                      else true
                   end))
        : M (bool)
    | (b__3, User) =>
       (if eq_vec b__3 (Ox"C00"  : mword 12) then
          (and_boolM
             (read_reg mcounteren_ref >>= fun w__6 : Counteren =>
              returnm ((eq_vec (_get_Counteren_CY w__6) ('b"1"  : mword 1))  : bool))
             ((or_boolM ((haveSupMode tt) >>= fun w__7 : bool => returnm ((negb w__7)  : bool))
                 (read_reg scounteren_ref >>= fun w__8 : Counteren =>
                  returnm ((eq_vec (_get_Counteren_CY w__8) ('b"1"  : mword 1))  : bool)))
              : M (bool)))
           : M (bool)
        else if eq_vec b__3 (Ox"C01"  : mword 12) then
          (and_boolM
             (read_reg mcounteren_ref >>= fun w__11 : Counteren =>
              returnm ((eq_vec (_get_Counteren_TM w__11) ('b"1"  : mword 1))  : bool))
             ((or_boolM ((haveSupMode tt) >>= fun w__12 : bool => returnm ((negb w__12)  : bool))
                 (read_reg scounteren_ref >>= fun w__13 : Counteren =>
                  returnm ((eq_vec (_get_Counteren_TM w__13) ('b"1"  : mword 1))  : bool)))
              : M (bool)))
           : M (bool)
        else if eq_vec b__3 (Ox"C02"  : mword 12) then
          (and_boolM
             (read_reg mcounteren_ref >>= fun w__16 : Counteren =>
              returnm ((eq_vec (_get_Counteren_IR w__16) ('b"1"  : mword 1))  : bool))
             ((or_boolM ((haveSupMode tt) >>= fun w__17 : bool => returnm ((negb w__17)  : bool))
                 (read_reg scounteren_ref >>= fun w__18 : Counteren =>
                  returnm ((eq_vec (_get_Counteren_IR w__18) ('b"1"  : mword 1))  : bool)))
              : M (bool)))
           : M (bool)
        else
          returnm (match (b__3, User) with
                   | (_, _) =>
                      if andb (zopz0zIzJ_u (Ox"C03"  : mword 12) csr)
                           (zopz0zIzJ_u csr (Ox"C1F"  : mword 12)) then
                        false
                      else true
                   end))
        : M (bool)
    | (_, _) =>
       returnm (if andb (zopz0zIzJ_u (Ox"C03"  : mword 12) csr)
                     (zopz0zIzJ_u csr (Ox"C1F"  : mword 12)) then
                  false
                else true)
    end)
    : M (bool).

Definition check_CSR (csr : mword 12) (p : Privilege) (isWrite : bool) : M (bool) :=
   (and_boolM ((is_CSR_defined csr p)  : M (bool))
      ((and_boolM (returnm ((check_CSR_access (csrAccess csr) (csrPriv csr) p isWrite)  : bool))
          ((and_boolM ((check_TVM_SATP csr p)  : M (bool)) ((check_Counteren csr p)  : M (bool)))
           : M (bool)))
       : M (bool)))
    : M (bool).

Axiom speculate_conditional : forall  (_ : unit) , M (bool).

Axiom load_reservation : forall  (_ : mword 32) , unit.

Axiom match_reservation : forall  (_ : mword 32) , bool.

Axiom cancel_reservation : forall  (_ : unit) , unit.

Definition exception_delegatee (e : ExceptionType) (p : Privilege) : M (Privilege) :=
   let idx := projT1 (num_of_ExceptionType e) in
   read_reg medeleg_ref >>= fun w__0 : Medeleg =>
   (bit_to_bool (access_vec_dec (_get_Medeleg_bits w__0) idx)) >>= fun super =>
   (haveSupMode tt) >>= fun w__1 : bool =>
   (if sumbool_of_bool w__1 then
      and_boolMP
        ((returnm (build_ex super)) : M ({_bool : bool & ArithFact (Bool.eqb super _bool)}))
        (build_trivial_ex
        ((and_boolM ((haveNExt tt)  : M (bool))
            (read_reg sedeleg_ref >>= fun w__3 : Sedeleg =>
             (bit_to_bool (access_vec_dec (_get_Sedeleg_bits w__3) idx))
              : M (bool)))
         : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (super && simp_0) _bool = true)})
    else
      and_boolMP
        ((returnm (build_ex super)) : M ({_bool : bool & ArithFact (Bool.eqb super _bool)}))
        (build_trivial_ex
        ((haveNExt tt)
         : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (super && simp_0) _bool = true)})) >>= fun '(existT _ user _) =>
   (and_boolMP (build_trivial_ex ((haveUsrMode tt)  : M (bool)))
      ((returnm (build_ex user)) : M ({_bool : bool & ArithFact (Bool.eqb user _bool)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (user &&
     simp_0) _bool = true)})) >>= fun '(existT _ w__10 _) =>
   (if sumbool_of_bool w__10 then returnm User
    else
      (and_boolMP (build_trivial_ex ((haveSupMode tt)  : M (bool)))
         ((returnm (build_ex super)) : M ({_bool : bool & ArithFact (Bool.eqb super _bool)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (super &&
        simp_0) _bool = true)})) >>= fun '(existT _ w__12 _) =>
      returnm (if sumbool_of_bool w__12 then Supervisor else Machine)) >>= fun deleg =>
   returnm (if zopz0zI_u (privLevel_to_bits deleg) (privLevel_to_bits p) then p else deleg).

Definition findPendingInterrupt (ip : mword 32) : option InterruptType :=
   let ip := Mk_Minterrupts ip in
   if eq_vec (_get_Minterrupts_MEI ip) ('b"1"  : mword 1) then Some I_M_External
   else if eq_vec (_get_Minterrupts_MSI ip) ('b"1"  : mword 1) then Some I_M_Software
   else if eq_vec (_get_Minterrupts_MTI ip) ('b"1"  : mword 1) then Some I_M_Timer
   else if eq_vec (_get_Minterrupts_SEI ip) ('b"1"  : mword 1) then Some I_S_External
   else if eq_vec (_get_Minterrupts_SSI ip) ('b"1"  : mword 1) then Some I_S_Software
   else if eq_vec (_get_Minterrupts_STI ip) ('b"1"  : mword 1) then Some I_S_Timer
   else if eq_vec (_get_Minterrupts_UEI ip) ('b"1"  : mword 1) then Some I_U_External
   else if eq_vec (_get_Minterrupts_USI ip) ('b"1"  : mword 1) then Some I_U_Software
   else if eq_vec (_get_Minterrupts_UTI ip) ('b"1"  : mword 1) then Some I_U_Timer
   else None.

Definition processPending
(xip : Minterrupts) (xie : Minterrupts) (xideleg : mword 32) (priv_enabled : bool)
: interrupt_set :=
   let effective_pend :=
     and_vec (_get_Minterrupts_bits xip) (and_vec (_get_Minterrupts_bits xie) (not_vec xideleg)) in
   let effective_delg := and_vec (_get_Minterrupts_bits xip) xideleg in
   if sumbool_of_bool (andb priv_enabled (neq_vec effective_pend (EXTZ 32 ('b"0"  : mword 1)))) then
     Ints_Pending effective_pend
   else if neq_vec effective_delg (EXTZ 32 ('b"0"  : mword 1)) then Ints_Delegated effective_delg
   else Ints_Empty tt.

Definition getPendingSet (priv : Privilege) : M (option ((mword 32 * Privilege))) :=
   (haveUsrMode tt) >>= fun w__0 : bool =>
   assert_exp' w__0 "no user mode: M/U or M/S/U system required" >>= fun _ =>
   read_reg mip_ref >>= fun w__1 : Minterrupts =>
   read_reg mie_ref >>= fun w__2 : Minterrupts =>
   let effective_pending := and_vec (_get_Minterrupts_bits w__1) (_get_Minterrupts_bits w__2) in
   (if eq_vec effective_pending (EXTZ 32 ('b"0"  : mword 1)) then returnm None
    else
      (or_boolM (returnm ((generic_neq priv Machine)  : bool))
         ((and_boolM (returnm ((generic_eq priv Machine)  : bool))
             (read_reg mstatus_ref >>= fun w__3 : Mstatus =>
              returnm ((eq_vec (_get_Mstatus_MIE w__3) ('b"1"  : mword 1))  : bool)))
          : M (bool))) >>= fun mIE =>
      (and_boolM ((haveSupMode tt)  : M (bool))
         ((or_boolM (returnm ((generic_eq priv User)  : bool))
             ((and_boolM (returnm ((generic_eq priv Supervisor)  : bool))
                 (read_reg mstatus_ref >>= fun w__6 : Mstatus =>
                  returnm ((eq_vec (_get_Mstatus_SIE w__6) ('b"1"  : mword 1))  : bool)))
              : M (bool)))
          : M (bool))) >>= fun sIE =>
      (and_boolM ((haveNExt tt)  : M (bool))
         ((and_boolM (returnm ((generic_eq priv User)  : bool))
             (read_reg mstatus_ref >>= fun w__10 : Mstatus =>
              returnm ((eq_vec (_get_Mstatus_UIE w__10) ('b"1"  : mword 1))  : bool)))
          : M (bool))) >>= fun uIE =>
      read_reg mip_ref >>= fun w__12 : Minterrupts =>
      read_reg mie_ref >>= fun w__13 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__14 : Minterrupts =>
      (match (processPending w__12 w__13 (_get_Minterrupts_bits w__14) mIE) with
       | Ints_Empty tt => returnm None
       | Ints_Pending p =>
          let r := (p, Machine) in
          returnm (Some r)
       | Ints_Delegated d =>
          (haveSupMode tt) >>= fun w__15 : bool =>
          (if sumbool_of_bool (negb w__15) then
             returnm (if sumbool_of_bool uIE then
                        let r := (d, User) in
                        Some r
                      else None)
           else
             read_reg mie_ref >>= fun w__16 : Minterrupts =>
             read_reg sideleg_ref >>= fun w__17 : Sinterrupts =>
             returnm (match (processPending (Mk_Minterrupts d) w__16 (_get_Sinterrupts_bits w__17)
                               sIE) with
                      | Ints_Empty tt => None
                      | Ints_Pending p =>
                         let r := (p, Supervisor) in
                         Some r
                      | Ints_Delegated d =>
                         if sumbool_of_bool uIE then
                           let r := (d, User) in
                           Some r
                         else None
                      end))
           : M (option ((mword 32 * Privilege)))
       end)
       : M (option ((mword 32 * Privilege))))
    : M (option ((mword 32 * Privilege))).

Definition dispatchInterrupt (priv : Privilege) : M (option ((InterruptType * Privilege))) :=
   (or_boolM ((haveUsrMode tt) >>= fun w__0 : bool => returnm ((negb w__0)  : bool))
      ((and_boolM ((haveSupMode tt) >>= fun w__1 : bool => returnm ((negb w__1)  : bool))
          ((haveNExt tt) >>= fun w__2 : bool => returnm ((negb w__2)  : bool)))
       : M (bool))) >>= fun w__4 : bool =>
   (if sumbool_of_bool w__4 then
      assert_exp (generic_eq priv Machine) "invalid current privilege" >>
      read_reg mip_ref >>= fun w__5 : Minterrupts =>
      read_reg mie_ref >>= fun w__6 : Minterrupts =>
      let enabled_pending := and_vec (_get_Minterrupts_bits w__5) (_get_Minterrupts_bits w__6) in
      returnm (match (findPendingInterrupt enabled_pending) with
               | Some i =>
                  let r := (i, Machine) in
                  Some r
               | None => None
               end)
    else
      (getPendingSet priv) >>= fun w__7 : option ((mword 32 * Privilege)) =>
      returnm (match w__7 with
               | None => None
               | Some (ip, p) =>
                  match (findPendingInterrupt ip) with
                  | None => None
                  | Some i =>
                     let r := (i, p) in
                     Some r
                  end
               end))
    : M (option ((InterruptType * Privilege))).

Definition tval (excinfo : option (mword 32)) : mword 32 :=
   match excinfo with | Some e => e | None => EXTZ 32 ('b"0"  : mword 1) end.

Definition rvfi_trap '(tt : unit) : unit := tt.

Definition trap_handler
(del_priv : Privilege) (intr : bool) (c : mword 8) (pc : mword 32) (info : option (mword 32))
(ext : option unit)
: M (mword 32) :=
   let '_ := (rvfi_trap tt)  : unit in
   let '_ :=
     (if get_config_print_platform tt then
        print_endline
          (String.append "handling "
             (String.append (if sumbool_of_bool intr then "int#" else "exc#")
                (String.append (string_of_bits c)
                   (String.append " at priv "
                      (String.append (privLevel_to_str del_priv)
                         (String.append " with tval " (string_of_bits (tval info))))))))
      else tt)
      : unit in
   let '_ := (cancel_reservation tt)  : unit in
   (match del_priv with
    | Machine =>
       (_set_Mcause_IsInterrupt mcause_ref (bool_to_bits intr)) >>
       (_set_Mcause_Cause mcause_ref (EXTZ 31 c)) >>
       read_reg mstatus_ref >>= fun w__0 : Mstatus =>
       (_set_Mstatus_MPIE mstatus_ref (_get_Mstatus_MIE w__0)) >>
       (_set_Mstatus_MIE mstatus_ref ('b"0"  : mword 1)) >>
       read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
       (_set_Mstatus_MPP mstatus_ref (privLevel_to_bits w__1)) >>
       write_reg mtval_ref (tval info) >>
       write_reg mepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       let '_ := (handle_trap_extension del_priv pc ext)  : unit in
       (if get_config_print_reg tt then
          read_reg mstatus_ref >>= fun w__2 : Mstatus =>
          returnm (print_endline
                     (String.append "CSR mstatus <- " (string_of_bits (_get_Mstatus_bits w__2))))
        else returnm tt) >>
       read_reg mcause_ref >>= fun w__3 : Mcause =>
       (prepare_trap_vector del_priv w__3)
        : M (mword 32)
    | Supervisor =>
       (haveSupMode tt) >>= fun w__5 : bool =>
       assert_exp' w__5 "no supervisor mode present for delegation" >>= fun _ =>
       (_set_Mcause_IsInterrupt scause_ref (bool_to_bits intr)) >>
       (_set_Mcause_Cause scause_ref (EXTZ 31 c)) >>
       read_reg mstatus_ref >>= fun w__6 : Mstatus =>
       (_set_Mstatus_SPIE mstatus_ref (_get_Mstatus_SIE w__6)) >>
       (_set_Mstatus_SIE mstatus_ref ('b"0"  : mword 1)) >>
       read_reg cur_privilege_ref >>= fun w__7 : Privilege =>
       (match w__7 with
        | User => returnm ('b"0"  : mword 1)
        | Supervisor => returnm ('b"1"  : mword 1)
        | Machine => (internal_error "invalid privilege for s-mode trap")  : M (mword 1)
        end) >>= fun w__9 : mword 1 =>
       (_set_Mstatus_SPP mstatus_ref w__9) >>
       write_reg stval_ref (tval info) >>
       write_reg sepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       let '_ := (handle_trap_extension del_priv pc ext)  : unit in
       (if get_config_print_reg tt then
          read_reg mstatus_ref >>= fun w__10 : Mstatus =>
          returnm (print_endline
                     (String.append "CSR mstatus <- " (string_of_bits (_get_Mstatus_bits w__10))))
        else returnm tt) >>
       read_reg scause_ref >>= fun w__11 : Mcause =>
       (prepare_trap_vector del_priv w__11)
        : M (mword 32)
    | User =>
       (haveUsrMode tt) >>= fun w__13 : bool =>
       assert_exp' w__13 "no user mode present for delegation" >>= fun _ =>
       (_set_Mcause_IsInterrupt ucause_ref (bool_to_bits intr)) >>
       (_set_Mcause_Cause ucause_ref (EXTZ 31 c)) >>
       read_reg mstatus_ref >>= fun w__14 : Mstatus =>
       (_set_Mstatus_UPIE mstatus_ref (_get_Mstatus_UIE w__14)) >>
       (_set_Mstatus_UIE mstatus_ref ('b"0"  : mword 1)) >>
       write_reg utval_ref (tval info) >>
       write_reg uepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       let '_ := (handle_trap_extension del_priv pc ext)  : unit in
       (if get_config_print_reg tt then
          read_reg mstatus_ref >>= fun w__15 : Mstatus =>
          returnm (print_endline
                     (String.append "CSR mstatus <- " (string_of_bits (_get_Mstatus_bits w__15))))
        else returnm tt) >>
       read_reg ucause_ref >>= fun w__16 : Mcause =>
       (prepare_trap_vector del_priv w__16)
        : M (mword 32)
    end)
    : M (mword 32).

Definition exception_handler (cur_priv : Privilege) (ctl : ctl_result) (pc : mword 32)
: M (mword 32) :=
   (match (cur_priv, ctl) with
    | (_, CTL_TRAP e) =>
       (exception_delegatee e.(sync_exception_trap) cur_priv) >>= fun del_priv =>
       let '_ :=
         (if get_config_print_platform tt then
            print_endline
              (String.append "trapping from "
                 (String.append (privLevel_to_str cur_priv)
                    (String.append " to "
                       (String.append (privLevel_to_str del_priv)
                          (String.append " to handle "
                             (exceptionType_to_str e.(sync_exception_trap)))))))
          else tt)
          : unit in
       (trap_handler del_priv false (exceptionType_to_bits e.(sync_exception_trap)) pc
          e.(sync_exception_excinfo) e.(sync_exception_ext))
        : M (mword 32)
    | (_, CTL_MRET tt) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       (_set_Mstatus_MIE mstatus_ref (_get_Mstatus_MPIE w__1)) >>
       (_set_Mstatus_MPIE mstatus_ref ('b"1"  : mword 1)) >>
       read_reg mstatus_ref >>= fun w__2 : Mstatus =>
       (privLevel_of_bits (_get_Mstatus_MPP w__2)) >>= fun w__3 : Privilege =>
       write_reg cur_privilege_ref w__3 >>
       (haveUsrMode tt) >>= fun w__4 : bool =>
       (_set_Mstatus_MPP mstatus_ref
          (privLevel_to_bits (if sumbool_of_bool w__4 then User else Machine))) >>
       read_reg cur_privilege_ref >>= fun w__5 : Privilege =>
       (if generic_neq w__5 Machine then
          (_set_Mstatus_MPRV mstatus_ref ('b"0"  : mword 1))
           : M (unit)
        else returnm tt) >>
       (if get_config_print_reg tt then
          read_reg mstatus_ref >>= fun w__6 : Mstatus =>
          returnm (print_endline
                     (String.append "CSR mstatus <- " (string_of_bits (_get_Mstatus_bits w__6))))
        else returnm tt) >>
       (if get_config_print_platform tt then
          read_reg cur_privilege_ref >>= fun w__7 : Privilege =>
          returnm (print_endline
                     (String.append "ret-ing from "
                        (String.append (privLevel_to_str prev_priv)
                           (String.append " to " (privLevel_to_str w__7)))))
        else returnm tt) >>
       let '_ := (cancel_reservation tt)  : unit in
       (prepare_xret_target Machine) >>= fun w__8 : mword 32 =>
       (pc_alignment_mask tt) >>= fun w__9 : mword 32 => returnm (and_vec w__8 w__9)
    | (_, CTL_SRET tt) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__10 : Mstatus =>
       (_set_Mstatus_SIE mstatus_ref (_get_Mstatus_SPIE w__10)) >>
       (_set_Mstatus_SPIE mstatus_ref ('b"1"  : mword 1)) >>
       read_reg mstatus_ref >>= fun w__11 : Mstatus =>
       write_reg
         cur_privilege_ref
         (if eq_vec (_get_Mstatus_SPP w__11) ('b"1"  : mword 1) then Supervisor
          else User) >>
       (_set_Mstatus_SPP mstatus_ref ('b"0"  : mword 1)) >>
       read_reg cur_privilege_ref >>= fun w__12 : Privilege =>
       (if generic_neq w__12 Machine then
          (_set_Mstatus_MPRV mstatus_ref ('b"0"  : mword 1))
           : M (unit)
        else returnm tt) >>
       (if get_config_print_reg tt then
          read_reg mstatus_ref >>= fun w__13 : Mstatus =>
          returnm (print_endline
                     (String.append "CSR mstatus <- " (string_of_bits (_get_Mstatus_bits w__13))))
        else returnm tt) >>
       (if get_config_print_platform tt then
          read_reg cur_privilege_ref >>= fun w__14 : Privilege =>
          returnm (print_endline
                     (String.append "ret-ing from "
                        (String.append (privLevel_to_str prev_priv)
                           (String.append " to " (privLevel_to_str w__14)))))
        else returnm tt) >>
       let '_ := (cancel_reservation tt)  : unit in
       (prepare_xret_target Supervisor) >>= fun w__15 : mword 32 =>
       (pc_alignment_mask tt) >>= fun w__16 : mword 32 => returnm (and_vec w__15 w__16)
    | (_, CTL_URET tt) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__17 : Mstatus =>
       (_set_Mstatus_UIE mstatus_ref (_get_Mstatus_UPIE w__17)) >>
       (_set_Mstatus_UPIE mstatus_ref ('b"1"  : mword 1)) >>
       write_reg cur_privilege_ref User >>
       (if get_config_print_reg tt then
          read_reg mstatus_ref >>= fun w__18 : Mstatus =>
          returnm (print_endline
                     (String.append "CSR mstatus <- " (string_of_bits (_get_Mstatus_bits w__18))))
        else returnm tt) >>
       (if get_config_print_platform tt then
          read_reg cur_privilege_ref >>= fun w__19 : Privilege =>
          returnm (print_endline
                     (String.append "ret-ing from "
                        (String.append (privLevel_to_str prev_priv)
                           (String.append " to " (privLevel_to_str w__19)))))
        else returnm tt) >>
       let '_ := (cancel_reservation tt)  : unit in
       (prepare_xret_target User) >>= fun w__20 : mword 32 =>
       (pc_alignment_mask tt) >>= fun w__21 : mword 32 => returnm (and_vec w__20 w__21)
    end)
    : M (mword 32).

Definition handle_mem_exception (addr : mword 32) (e : ExceptionType) : M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := e; 
        sync_exception_excinfo := (Some addr); 
        sync_exception_ext := None |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__1 : mword 32 =>
   (exception_handler w__0 (CTL_TRAP t) w__1) >>= fun w__2 : mword 32 =>
   (set_next_pc w__2)
    : M (unit).

Definition handle_exception (e : ExceptionType) : M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := e; 
        sync_exception_excinfo := None; 
        sync_exception_ext := None |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__1 : mword 32 =>
   (exception_handler w__0 (CTL_TRAP t) w__1) >>= fun w__2 : mword 32 =>
   (set_next_pc w__2)
    : M (unit).

Definition handle_interrupt (i : InterruptType) (del_priv : Privilege) : M (unit) :=
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__0 : mword 32 =>
   (trap_handler del_priv true (interruptType_to_bits i) w__0 None None) >>= fun w__1 : mword 32 =>
   (set_next_pc w__1)
    : M (unit).

Definition init_sys '(tt : unit) : M (unit) :=
   write_reg cur_privilege_ref Machine >>
   write_reg mhartid_ref (EXTZ 32 ('b"0"  : mword 1)) >>
   (_set_Misa_MXL misa_ref (arch_to_bits RV32)) >>
   (_set_Misa_A misa_ref ('b"1"  : mword 1)) >>
   (_set_Misa_C misa_ref (bool_to_bits (sys_enable_rvc tt))) >>
   (_set_Misa_I misa_ref ('b"1"  : mword 1)) >>
   (_set_Misa_M misa_ref ('b"1"  : mword 1)) >>
   (_set_Misa_U misa_ref ('b"1"  : mword 1)) >>
   (_set_Misa_S misa_ref ('b"1"  : mword 1)) >>
   (_set_Misa_F misa_ref (bool_to_bits (sys_enable_fdext tt))) >>
   (_set_Misa_D misa_ref ('b"0"  : mword 1)) >>
   read_reg mstatus_ref >>= fun w__0 : Mstatus =>
   read_reg misa_ref >>= fun w__1 : Misa =>
   write_reg mstatus_ref (set_mstatus_SXL w__0 (_get_Misa_MXL w__1)) >>
   read_reg mstatus_ref >>= fun w__2 : Mstatus =>
   read_reg misa_ref >>= fun w__3 : Misa =>
   write_reg mstatus_ref (set_mstatus_UXL w__2 (_get_Misa_MXL w__3)) >>
   (_set_Mstatus_SD mstatus_ref ('b"0"  : mword 1)) >>
   (_set_Minterrupts_bits mip_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   (_set_Minterrupts_bits mie_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   (_set_Minterrupts_bits mideleg_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   (_set_Medeleg_bits medeleg_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   (_set_Mtvec_bits mtvec_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   (_set_Mcause_bits mcause_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   write_reg mepc_ref (EXTZ 32 ('b"0"  : mword 1)) >>
   write_reg mtval_ref (EXTZ 32 ('b"0"  : mword 1)) >>
   write_reg mscratch_ref (EXTZ 32 ('b"0"  : mword 1)) >>
   write_reg mcycle_ref (EXTZ 64 ('b"0"  : mword 1)) >>
   write_reg mtime_ref (EXTZ 64 ('b"0"  : mword 1)) >>
   (_set_Counteren_bits mcounteren_ref (EXTZ 32 ('b"0"  : mword 1))) >>
   write_reg minstret_ref (EXTZ 64 ('b"0"  : mword 1)) >>
   write_reg minstret_written_ref false >>
   (init_pmp tt) >>
   (if get_config_print_reg tt then
      read_reg mstatus_ref >>= fun w__4 : Mstatus =>
      returnm (print_endline
                 (String.append "CSR mstatus <- "
                    (String.append (string_of_bits (_get_Mstatus_bits w__4))
                       (String.append " (input: "
                          (String.append (string_of_bits ((EXTZ 32 ('b"0"  : mword 1))  : xlenbits))
                             ")")))))
    else returnm tt)
    : M (unit).

Definition MemoryOpResult_add_meta {t : Type} (r : MemoryOpResult t) (m : unit)
: MemoryOpResult ((t * unit)) :=
   match r with | MemValue v => MemValue (v, m) | MemException e => MemException e end.

Definition MemoryOpResult_drop_meta {t : Type} (r : MemoryOpResult ((t * unit))) : MemoryOpResult t :=
   match r with | MemValue (v, m) => MemValue v | MemException e => MemException e end.

Axiom elf_tohost : forall  (_ : unit) , Z.

Axiom elf_entry : forall  (_ : unit) , Z.

Axiom plat_ram_base : forall  (_ : unit) , mword 32.

Axiom plat_ram_size : forall  (_ : unit) , mword 32.

Axiom plat_enable_pmp : forall  (_ : unit) , bool.

Axiom plat_enable_dirty_update : forall  (_ : unit) , bool.

Axiom plat_enable_misaligned_access : forall  (_ : unit) , bool.

Axiom plat_mtval_has_illegal_inst_bits : forall  (_ : unit) , bool.

Axiom plat_rom_base : forall  (_ : unit) , mword 32.

Axiom plat_rom_size : forall  (_ : unit) , mword 32.

Axiom plat_clint_base : forall  (_ : unit) , mword 32.

Axiom plat_clint_size : forall  (_ : unit) , mword 32.

Definition plat_htif_tohost '(tt : unit) : mword 32 := to_bits 32 (elf_tohost tt).

Definition phys_mem_segments '(tt : unit) : list ((mword 32 * mword 32)) :=
   (plat_rom_base tt, plat_rom_size tt) :: (plat_ram_base tt, plat_ram_size tt) :: [].

Definition within_phys_mem (addr : mword 32) (width : Z) `{ArithFact (width <=? 16)} : bool :=
   let addr_int := projT1 (uint addr) in
   let ram_base_int := projT1 (uint (plat_ram_base tt)) in
   let rom_base_int := projT1 (uint (plat_rom_base tt)) in
   let ram_size_int := projT1 (uint (plat_ram_size tt)) in
   let rom_size_int := projT1 (uint (plat_rom_size tt)) in
   if sumbool_of_bool
     (andb (Z.leb ram_base_int addr_int)
        (Z.leb (Z.add addr_int (projT1 (__id width))) (Z.add ram_base_int ram_size_int))) then
     true
   else if sumbool_of_bool
     (andb (Z.leb rom_base_int addr_int)
        (Z.leb (Z.add addr_int (projT1 (__id width))) (Z.add rom_base_int rom_size_int))) then
     true
   else
     let '_ :=
       (print_endline
          (String.append "within_phys_mem: "
             (String.append (string_of_bits addr) " not within phys-mem:")))
        : unit in
     let '_ :=
       (print_endline (String.append "  plat_rom_base: " (string_of_bits (plat_rom_base tt))))
        : unit in
     let '_ :=
       (print_endline (String.append "  plat_rom_size: " (string_of_bits (plat_rom_size tt))))
        : unit in
     let '_ :=
       (print_endline (String.append "  plat_ram_base: " (string_of_bits (plat_ram_base tt))))
        : unit in
     let '_ :=
       (print_endline (String.append "  plat_ram_size: " (string_of_bits (plat_ram_size tt))))
        : unit in
     false.

Definition within_clint (addr : mword 32) (width : Z) `{ArithFact ((0 <? width) && (width <=? 16))}
: bool :=
   let addr_int := projT1 (uint addr) in
   let clint_base_int := projT1 (uint (plat_clint_base tt)) in
   let clint_size_int := projT1 (uint (plat_clint_size tt)) in
   andb (Z.leb clint_base_int addr_int)
     (Z.leb (Z.add addr_int (projT1 (__id width))) (Z.add clint_base_int clint_size_int)).

Definition within_htif_writable (addr : mword 32) (width : Z)
`{ArithFact ((0 <? width) && (width <=? 16))}
: bool :=
   orb (eq_vec (plat_htif_tohost tt) addr)
     (andb (eq_vec (add_vec_int (plat_htif_tohost tt) 4) addr) (Z.eqb width 4)).

Definition within_htif_readable (addr : mword 32) (width : Z)
`{ArithFact ((0 <? width) && (width <=? 16))}
: bool :=
   orb (eq_vec (plat_htif_tohost tt) addr)
     (andb (eq_vec (add_vec_int (plat_htif_tohost tt) 4) addr) (Z.eqb width 4)).

Axiom plat_insns_per_tick : forall  (_ : unit) , Z.

Definition MSIP_BASE : xlenbits := EXTZ 32 (Ox"00000"  : mword 20).
Hint Unfold MSIP_BASE : sail.
Definition MTIMECMP_BASE : xlenbits := EXTZ 32 (Ox"04000"  : mword 20).
Hint Unfold MTIMECMP_BASE : sail.
Definition MTIMECMP_BASE_HI : xlenbits := EXTZ 32 (Ox"04004"  : mword 20).
Hint Unfold MTIMECMP_BASE_HI : sail.
Definition MTIME_BASE : xlenbits := EXTZ 32 (Ox"0BFF8"  : mword 20).
Hint Unfold MTIME_BASE : sail.
Definition MTIME_BASE_HI : xlenbits := EXTZ 32 (Ox"0BFFC"  : mword 20).
Hint Unfold MTIME_BASE_HI : sail.
Definition clint_load (t : AccessType unit) (addr : mword 32) (width : Z) `{ArithFact (width >? 0)}
: M (MemoryOpResult (mword (8 * width))) :=
   let addr := sub_vec addr (plat_clint_base tt) in
   (if sumbool_of_bool
      (andb (eq_vec addr MSIP_BASE)
         (orb (Z.eqb (projT1 (__id width)) 8) (Z.eqb (projT1 (__id width)) 4))) then
      (if get_config_print_platform tt then
         read_reg mip_ref >>= fun w__0 : Minterrupts =>
         returnm (print_endline
                    (String.append "clint["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits (_get_Minterrupts_MSI w__0))))))
       else returnm tt) >>
      read_reg mip_ref >>= fun w__1 : Minterrupts =>
      returnm (MemValue (zero_extend (_get_Minterrupts_MSI w__1) (Z.mul 8 (projT1 (__id width)))))
    else if sumbool_of_bool (andb (eq_vec addr MTIMECMP_BASE) (Z.eqb (projT1 (__id width)) 4)) then
      (if get_config_print_platform tt then
         ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
         returnm (print_endline
                    (String.append "clint<4>["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits (subrange_vec_dec w__2 31 0))))))
       else returnm tt) >>
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__3 : mword 64 =>
      returnm (MemValue (zero_extend (subrange_vec_dec w__3 31 0) _))
    else if sumbool_of_bool (andb (eq_vec addr MTIMECMP_BASE) (Z.eqb (projT1 (__id width)) 8)) then
      (if get_config_print_platform tt then
         ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__4 : mword 64 =>
         returnm (print_endline
                    (String.append "clint<8>["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits w__4)))))
       else returnm tt) >>
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__5 : mword 64 =>
      returnm (MemValue (zero_extend w__5 _))
    else if sumbool_of_bool
      (andb (eq_vec addr MTIMECMP_BASE_HI) (Z.eqb (projT1 (__id width)) 4)) then
      (if get_config_print_platform tt then
         ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__6 : mword 64 =>
         returnm (print_endline
                    (String.append "clint-hi<4>["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits (subrange_vec_dec w__6 63 32))))))
       else returnm tt) >>
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__7 : mword 64 =>
      returnm (MemValue (zero_extend (subrange_vec_dec w__7 63 32) _))
    else if sumbool_of_bool (andb (eq_vec addr MTIME_BASE) (Z.eqb (projT1 (__id width)) 4)) then
      (if get_config_print_platform tt then
         ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__8 : mword 64 =>
         returnm (print_endline
                    (String.append "clint["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits w__8)))))
       else returnm tt) >>
      ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__9 : mword 64 =>
      returnm (MemValue (zero_extend (subrange_vec_dec w__9 31 0) _))
    else if sumbool_of_bool (andb (eq_vec addr MTIME_BASE) (Z.eqb (projT1 (__id width)) 8)) then
      (if get_config_print_platform tt then
         ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__10 : mword 64 =>
         returnm (print_endline
                    (String.append "clint["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits w__10)))))
       else returnm tt) >>
      ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__11 : mword 64 =>
      returnm (MemValue (zero_extend w__11 _))
    else if sumbool_of_bool (andb (eq_vec addr MTIME_BASE_HI) (Z.eqb (projT1 (__id width)) 4)) then
      (if get_config_print_platform tt then
         ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__12 : mword 64 =>
         returnm (print_endline
                    (String.append "clint["
                       (String.append (string_of_bits addr)
                          (String.append "] -> " (string_of_bits w__12)))))
       else returnm tt) >>
      ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__13 : mword 64 =>
      returnm (MemValue (zero_extend (subrange_vec_dec w__13 63 32) _))
    else
      let '_ :=
        (if get_config_print_platform tt then
           print_endline
             (String.append "clint[" (String.append (string_of_bits addr) "] -> <not-mapped>"))
         else tt)
         : unit in
      returnm (match t with
               | Execute tt => MemException (E_Fetch_Access_Fault tt)
               | Read Data => MemException (E_Load_Access_Fault tt)
               | _ => MemException (E_SAMO_Access_Fault tt)
               end))
    : M (MemoryOpResult (mword (8 * width))).

Definition clint_dispatch '(tt : unit) : M (unit) :=
   (if get_config_print_platform tt then
      ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
      returnm (print_endline (String.append "clint::tick mtime <- " (string_of_bits w__0)))
    else returnm tt) >>
   (_set_Minterrupts_MTI mip_ref ('b"0"  : mword 1)) >>
   ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
   (if zopz0zIzJ_u w__1 w__2 then
      (if get_config_print_platform tt then
         ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__3 : mword 64 =>
         returnm (print_endline
                    (String.append " clint timer pending at mtime " (string_of_bits w__3)))
       else returnm tt) >>
      (_set_Minterrupts_MTI mip_ref ('b"1"  : mword 1))
       : M (unit)
    else returnm tt)
    : M (unit).

Definition clint_store (addr : mword 32) (width : Z) (data : mword (8 * width))
`{ArithFact (width >? 0)}
: M (MemoryOpResult bool) :=
   let addr := sub_vec addr (plat_clint_base tt) in
   (if sumbool_of_bool
      (andb (eq_vec addr MSIP_BASE)
         (orb (Z.eqb (projT1 (__id width)) 8) (Z.eqb (projT1 (__id width)) 4))) then
      (if get_config_print_platform tt then
         (string_of_bit (access_vec_dec data 0)) >>= fun w__0 : string =>
         returnm (print_endline
                    (String.append "clint["
                       (String.append (string_of_bits addr)
                          (String.append "] <- "
                             (String.append (string_of_bits data)
                                (String.append " (mip.MSI <- " (String.append w__0 ")")))))))
       else returnm tt) >>
      (_set_Minterrupts_MSI mip_ref (vec_of_bits [access_vec_dec data 0]  : mword 1)) >>
      (clint_dispatch tt) >> returnm (MemValue true)
    else if sumbool_of_bool (andb (eq_vec addr MTIMECMP_BASE) (Z.eqb (projT1 (__id width)) 8)) then
      let '_ :=
        (if get_config_print_platform tt then
           print_endline
             (String.append "clint<8>["
                (String.append (string_of_bits addr)
                   (String.append "] <- " (String.append (string_of_bits data) " (mtimecmp)"))))
         else tt)
         : unit in
      write_reg mtimecmp_ref (zero_extend data 64) >> (clint_dispatch tt) >> returnm (MemValue true)
    else if sumbool_of_bool (andb (eq_vec addr MTIMECMP_BASE) (Z.eqb (projT1 (__id width)) 4)) then
      let '_ :=
        (if get_config_print_platform tt then
           print_endline
             (String.append "clint<4>["
                (String.append (string_of_bits addr)
                   (String.append "] <- " (String.append (string_of_bits data) " (mtimecmp)"))))
         else tt)
         : unit in
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
      write_reg mtimecmp_ref (update_subrange_vec_dec w__1 31 0 (zero_extend data 32)) >>
      (clint_dispatch tt) >> returnm (MemValue true)
    else if sumbool_of_bool
      (andb (eq_vec addr MTIMECMP_BASE_HI) (Z.eqb (projT1 (__id width)) 4)) then
      let '_ :=
        (if get_config_print_platform tt then
           print_endline
             (String.append "clint<4>["
                (String.append (string_of_bits addr)
                   (String.append "] <- " (String.append (string_of_bits data) " (mtimecmp)"))))
         else tt)
         : unit in
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
      write_reg mtimecmp_ref (update_subrange_vec_dec w__2 63 32 (zero_extend data 32)) >>
      (clint_dispatch tt) >> returnm (MemValue true)
    else
      let '_ :=
        (if get_config_print_platform tt then
           print_endline
             (String.append "clint["
                (String.append (string_of_bits addr)
                   (String.append "] <- " (String.append (string_of_bits data) " (<unmapped>)"))))
         else tt)
         : unit in
      returnm (MemException (E_SAMO_Access_Fault tt)))
    : M (MemoryOpResult bool).

Definition tick_clock '(tt : unit) : M (unit) :=
   read_reg mcountinhibit_ref >>= fun w__0 : Counterin =>
   (if eq_vec (_get_Counterin_CY w__0) ('b"0"  : mword 1) then
      ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
      write_reg mcycle_ref (add_vec_int w__1 1)
       : M (unit)
    else returnm tt) >>
   ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
   write_reg mtime_ref (add_vec_int w__2 1) >> (clint_dispatch tt)  : M (unit).

Axiom plat_term_write : forall  (_ : mword 8) , unit.

Axiom plat_term_read : forall  (_ : unit) , mword 8.

Definition Mk_htif_cmd (v : mword 64) : htif_cmd :=
   {| htif_cmd_htif_cmd_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_htif_cmd_bits (v : htif_cmd) : mword 64 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 0.

Definition _set_htif_cmd_bits (r_ref : register_ref regstate register_value htif_cmd) (v : mword 64)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_bits (v : htif_cmd) (x : mword 64) : htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_htif_cmd_device (v : htif_cmd) : mword 8 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 56.

Definition _set_htif_cmd_device
(r_ref : register_ref regstate register_value htif_cmd) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 63 56 (subrange_vec_dec v 7 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_device (v : htif_cmd) (x : mword 8) : htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 56 (subrange_vec_dec x 7 0)) ]}.

Definition _get_htif_cmd_cmd (v : htif_cmd) : mword 8 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 55 48.

Definition _set_htif_cmd_cmd (r_ref : register_ref regstate register_value htif_cmd) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 55 48 (subrange_vec_dec v 7 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_cmd (v : htif_cmd) (x : mword 8) : htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 55 48 (subrange_vec_dec x 7 0)) ]}.

Definition _get_htif_cmd_payload (v : htif_cmd) : mword 48 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 47 0.

Definition _set_htif_cmd_payload
(r_ref : register_ref regstate register_value htif_cmd) (v : mword 48)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 47 0 (subrange_vec_dec v 47 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_payload (v : htif_cmd) (x : mword 48) : htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 47 0 (subrange_vec_dec x 47 0)) ]}.

Definition htif_load (t : AccessType unit) (paddr : mword 32) (width : Z) `{ArithFact (width >? 0)}
: M (MemoryOpResult (mword (8 * width))) :=
   (if get_config_print_platform tt then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
      returnm (print_endline
                 (String.append "htif["
                    (String.append (string_of_bits paddr)
                       (String.append "] -> " (string_of_bits w__0)))))
    else returnm tt) >>
   (if sumbool_of_bool (andb (Z.eqb width 8) (eq_vec paddr (plat_htif_tohost tt))) then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
      returnm (MemValue (zero_extend w__1 _))
    else if sumbool_of_bool (andb (Z.eqb width 4) (eq_vec paddr (plat_htif_tohost tt))) then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
      returnm (MemValue (zero_extend (subrange_vec_dec w__2 31 0) _))
    else if sumbool_of_bool
      (andb (Z.eqb width 4) (eq_vec paddr (add_vec_int (plat_htif_tohost tt) 4))) then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__3 : mword 64 =>
      returnm (MemValue (zero_extend (subrange_vec_dec w__3 63 32) _))
    else
      returnm (match t with
               | Execute tt => MemException (E_Fetch_Access_Fault tt)
               | Read Data => MemException (E_Load_Access_Fault tt)
               | _ => MemException (E_SAMO_Access_Fault tt)
               end))
    : M (MemoryOpResult (mword (8 * width))).

Definition htif_store (paddr : mword 32) (width : Z) (data : mword (8 * width))
`{ArithFact ((0 <? width) && (width <=? 8))}
: M (MemoryOpResult bool) :=
   let '_ :=
     (if get_config_print_platform tt then
        print_endline
          (String.append "htif["
             (String.append (string_of_bits paddr) (String.append "] <- " (string_of_bits data))))
      else tt)
      : unit in
   (if sumbool_of_bool (Z.eqb width 8) then write_reg htif_tohost_ref (EXTZ 64 data)  : M (unit)
    else if sumbool_of_bool (andb (Z.eqb width 4) (eq_vec paddr (plat_htif_tohost tt))) then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
      write_reg htif_tohost_ref (update_subrange_vec_dec w__0 31 0 (autocast (autocast data)))
       : M (unit)
    else if sumbool_of_bool
      (andb (Z.eqb width 4) (eq_vec paddr (add_vec_int (plat_htif_tohost tt) 4))) then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
      write_reg htif_tohost_ref (update_subrange_vec_dec w__1 63 32 (autocast (autocast data)))
       : M (unit)
    else write_reg htif_tohost_ref (EXTZ 64 data)  : M (unit)) >>
   ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
   let cmd := Mk_htif_cmd w__2 in
   let b__0 := _get_htif_cmd_device cmd in
   (if eq_vec b__0 (Ox"00"  : mword 8) then
      let '_ :=
        (if get_config_print_platform tt then
           print_endline
             (String.append "htif-syscall-proxy cmd: " (string_of_bits (_get_htif_cmd_payload cmd)))
         else tt)
         : unit in
      (if eq_bit (access_vec_dec (_get_htif_cmd_payload cmd) 0) B1 then
         write_reg htif_done_ref true >>
         write_reg htif_exit_code_ref (shiftr (zero_extend (_get_htif_cmd_payload cmd) 64) 1)
          : M (unit)
       else returnm tt)
       : M (unit)
    else
      returnm (if eq_vec b__0 (Ox"01"  : mword 8) then
                 let '_ :=
                   (if get_config_print_platform tt then
                      print_endline
                        (String.append "htif-term cmd: "
                           (string_of_bits (_get_htif_cmd_payload cmd)))
                    else tt)
                    : unit in
                 let b__2 := _get_htif_cmd_cmd cmd in
                 if eq_vec b__2 (Ox"00"  : mword 8) then tt
                 else if eq_vec b__2 (Ox"01"  : mword 8) then
                   plat_term_write (subrange_vec_dec (_get_htif_cmd_payload cmd) 7 0)
                 else print_endline (String.append "Unknown term cmd: " (string_of_bits b__2))
               else print_endline (String.append "htif-???? cmd: " (string_of_bits data)))) >>
   returnm (MemValue true).

Definition htif_tick '(tt : unit) : M (unit) :=
   (if get_config_print_platform tt then
      ((read_reg htif_tohost_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
      returnm (print_endline (String.append "htif::tick " (string_of_bits w__0)))
    else returnm tt) >>
   write_reg htif_tohost_ref (EXTZ 64 ('b"0"  : mword 1))
    : M (unit).

Definition within_mmio_readable (addr : mword 32) (width : Z)
`{ArithFact ((0 <? width) && (width <=? 16))}
: bool :=
   orb (within_clint addr width)
     (andb (within_htif_readable addr width) (Z.leb 1 (projT1 (__id width)))).

Definition within_mmio_writable (addr : mword 32) (width : Z)
`{ArithFact ((0 <? width) && (width <=? 16))}
: bool :=
   orb (within_clint addr width)
     (andb (within_htif_writable addr width) (Z.leb (projT1 (__id width)) 8)).

Definition mmio_read (t : AccessType unit) (paddr : mword 32) (width : Z)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult (mword (8 * width))) :=
   (if within_clint paddr width then
      (clint_load t paddr width)
       : M (MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool
      (andb (within_htif_readable paddr width) (Z.leb 1 (projT1 (__id width)))) then
      (htif_load t paddr width)
       : M (MemoryOpResult (mword (8 * width)))
    else
      returnm (match t with
               | Execute tt => MemException (E_Fetch_Access_Fault tt)
               | Read Data => MemException (E_Load_Access_Fault tt)
               | _ => MemException (E_SAMO_Access_Fault tt)
               end))
    : M (MemoryOpResult (mword (8 * width))).

Definition mmio_write (paddr : mword 32) (width : Z) (data : mword (8 * width))
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult bool) :=
   (if within_clint paddr width then (clint_store paddr width data)  : M (MemoryOpResult bool)
    else if sumbool_of_bool
      (andb (within_htif_writable paddr width) (Z.leb (projT1 (__id width)) 8)) then
      (htif_store paddr width data)
       : M (MemoryOpResult bool)
    else returnm (MemException (E_SAMO_Access_Fault tt)))
    : M (MemoryOpResult bool).

Definition init_platform '(tt : unit) : M (unit) :=
   write_reg htif_tohost_ref (EXTZ 64 ('b"0"  : mword 1)) >>
   write_reg htif_done_ref false >>
   write_reg htif_exit_code_ref (EXTZ 64 ('b"0"  : mword 1))
    : M (unit).

Definition tick_platform '(tt : unit) : M (unit) := (htif_tick tt)  : M (unit).

Definition handle_illegal '(tt : unit) : M (unit) :=
   (if plat_mtval_has_illegal_inst_bits tt then
      ((read_reg instbits_ref)  : M (mword 32)) >>= fun w__0 : mword 32 => returnm (Some w__0)
    else returnm None) >>= fun info =>
   let t : sync_exception :=
     {| sync_exception_trap := (E_Illegal_Instr tt); 
        sync_exception_excinfo := info; 
        sync_exception_ext := None |} in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__2 : mword 32 =>
   (exception_handler w__1 (CTL_TRAP t) w__2) >>= fun w__3 : mword 32 =>
   (set_next_pc w__3)
    : M (unit).

Definition platform_wfi '(tt : unit) : M (unit) :=
   let '_ := (cancel_reservation tt)  : unit in
   ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__1 : mword 64 =>
   (if zopz0zI_u w__0 w__1 then
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__2 : mword 64 =>
      write_reg mtime_ref w__2 >>
      ((read_reg mtimecmp_ref)  : M (mword 64)) >>= fun w__3 : mword 64 =>
      write_reg mcycle_ref w__3
       : M (unit)
    else returnm tt)
    : M (unit).

Definition is_aligned_addr (addr : mword 32) (width : Z) : bool :=
   Z.eqb (projT1 (emod_with_eq (projT1 (uint addr)) width)) 0.

Definition read_kind_of_flags (aq : bool) (rl : bool) (res : bool) : option read_kind :=
   match (aq, rl, res) with
   | (false, false, false) => Some Read_plain
   | (true, false, false) => Some Read_RISCV_acquire
   | (true, true, false) => Some Read_RISCV_strong_acquire
   | (false, false, true) => Some Read_RISCV_reserved
   | (true, false, true) => Some Read_RISCV_reserved_acquire
   | (true, true, true) => Some Read_RISCV_reserved_strong_acquire
   | (false, true, false) => None
   | (false, true, true) => None
   end.

Definition phys_mem_read
(t : AccessType unit) (paddr : mword 32) (width : Z) (aq : bool) (rl : bool) (res : bool)
(meta : bool) `{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult ((mword (8 * width) * unit))) :=
   (match (read_kind_of_flags aq rl res) with
    | Some rk =>
       (read_ram rk paddr width meta) >>= fun w__0 : (mword (8 * width) * unit) =>
       returnm (Some w__0)
    | None => returnm None
    end) >>= fun w__1 : option ((mword (8 * width) * unit)) =>
   let result := w__1  : option ((bits (8 * width) * mem_meta)) in
   returnm (match (t, result) with
            | (Execute tt, None) => MemException (E_Fetch_Access_Fault tt)
            | (Read Data, None) => MemException (E_Load_Access_Fault tt)
            | (_, None) => MemException (E_SAMO_Access_Fault tt)
            | (_, Some (v, m)) =>
               let '_ :=
                 (if get_config_print_mem tt then
                    print_endline
                      (String.append "mem["
                         (String.append (accessType_to_str t)
                            (String.append ","
                               (String.append (string_of_bits paddr)
                                  (String.append "] -> " (string_of_bits v))))))
                  else tt)
                  : unit in
               MemValue (v, m)
            end).

Definition checked_mem_read
(t : AccessType unit) (paddr : mword 32) (width : Z) (aq : bool) (rl : bool) (res : bool)
(meta : bool) `{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult ((mword (8 * width) * unit))) :=
   (if within_mmio_readable paddr width then
      (mmio_read t paddr width) >>= fun w__0 : MemoryOpResult (mword (8 * width)) =>
      returnm (MemoryOpResult_add_meta w__0 default_meta)
    else if within_phys_mem paddr width then
      (phys_mem_read t paddr width aq rl res meta)
       : M (MemoryOpResult ((mword (8 * width) * unit)))
    else
      returnm (match t with
               | Execute tt => MemException (E_Fetch_Access_Fault tt)
               | Read Data => MemException (E_Load_Access_Fault tt)
               | _ => MemException (E_SAMO_Access_Fault tt)
               end))
    : M (MemoryOpResult ((mword (8 * width) * unit))).

Definition pmp_mem_read
(t : AccessType unit) (paddr : mword 32) (width : Z) (aq : bool) (rl : bool) (res : bool)
(meta : bool) `{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult ((mword (8 * width) * unit))) :=
   (if negb (plat_enable_pmp tt) then
      (checked_mem_read t paddr width aq rl res meta)
       : M (MemoryOpResult ((mword (8 * width) * unit)))
    else
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      read_reg cur_privilege_ref >>= fun w__2 : Privilege =>
      (effectivePrivilege t w__1 w__2) >>= fun w__3 : Privilege =>
      (pmpCheck paddr width t w__3) >>= fun w__4 : option ExceptionType =>
      (match w__4 with
       | None =>
          (checked_mem_read t paddr width aq rl res meta)
           : M (MemoryOpResult ((mword (8 * width) * unit)))
       | Some e => returnm (MemException e)
       end)
       : M (MemoryOpResult ((mword (8 * width) * unit))))
    : M (MemoryOpResult ((mword (8 * width) * unit))).

Definition rvfi_read (addr : mword 32) (width : Z) (value : MemoryOpResult (mword (8 * width)))
`{ArithFact (width >? 0)}
: unit :=
   tt.

Definition mem_read_meta
(typ : AccessType unit) (paddr : mword 32) (width : Z) (aq : bool) (rl : bool) (res : bool)
(meta : bool) `{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult ((mword (8 * width) * unit))) :=
   (if sumbool_of_bool (andb (orb aq res) (negb (is_aligned_addr paddr width))) then
      returnm (MemException (E_Load_Addr_Align tt))
    else
      (match (aq, rl, res) with
       | (false, true, false) => throw (Error_not_implemented "load.rl")
       | (false, true, true) => throw (Error_not_implemented "lr.rl")
       | (_, _, _) =>
          (pmp_mem_read typ paddr width aq rl res meta)
           : M (MemoryOpResult ((mword (8 * width) * unit)))
       end)
       : M (MemoryOpResult ((mword (8 * width) * unit)))) >>= fun result : MemoryOpResult ((bits (8 * width) * mem_meta)) =>
   let '_ := (rvfi_read paddr width (MemoryOpResult_drop_meta result))  : unit in
   returnm result.

Definition mem_read
(typ : AccessType unit) (paddr : mword 32) (width : Z) (aq : bool) (rl : bool) (res : bool)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult (mword (8 * width))) :=
   (mem_read_meta typ paddr width aq rl res false) >>= fun w__0 : MemoryOpResult ((mword (8 * width) * unit)) =>
   returnm (MemoryOpResult_drop_meta w__0).

Definition mem_write_ea (addr : mword 32) (width : Z) (aq : bool) (rl : bool) (con : bool)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult unit) :=
   (if sumbool_of_bool (andb (orb rl con) (negb (is_aligned_addr addr width))) then
      returnm (MemException (E_SAMO_Addr_Align tt))
    else
      (match (aq, rl, con) with
       | (false, false, false) => (write_ram_ea Write_plain addr width) >> returnm (MemValue tt)
       | (false, true, false) =>
          (write_ram_ea Write_RISCV_release addr width) >> returnm (MemValue tt)
       | (false, false, true) =>
          (write_ram_ea Write_RISCV_conditional addr width) >> returnm (MemValue tt)
       | (false, true, true) =>
          (write_ram_ea Write_RISCV_conditional_release addr width) >> returnm (MemValue tt)
       | (true, false, false) => throw (Error_not_implemented "store.aq")
       | (true, true, false) =>
          (write_ram_ea Write_RISCV_strong_release addr width) >> returnm (MemValue tt)
       | (true, false, true) => throw (Error_not_implemented "sc.aq")
       | (true, true, true) =>
          (write_ram_ea Write_RISCV_conditional_strong_release addr width) >> returnm (MemValue tt)
       end)
       : M (MemoryOpResult unit))
    : M (MemoryOpResult unit).

Definition rvfi_write (addr : mword 32) (width : Z) (value : mword (8 * width))
`{ArithFact (width >? 0)}
: unit :=
   tt.

Definition phys_mem_write
(wk : write_kind) (paddr : mword 32) (width : Z) (data : mword (8 * width)) (meta : unit)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult bool) :=
   let '_ := (rvfi_write paddr width data)  : unit in
   (write_ram wk paddr width data meta) >>= fun w__0 : bool =>
   let result := MemValue w__0 in
   let '_ :=
     (if get_config_print_mem tt then
        print_endline
          (String.append "mem["
             (String.append (string_of_bits paddr) (String.append "] <- " (string_of_bits data))))
      else tt)
      : unit in
   returnm result.

Definition checked_mem_write
(wk : write_kind) (paddr : mword 32) (width : Z) (data : mword (8 * width)) (meta : unit)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult bool) :=
   (if within_mmio_writable paddr width then
      (mmio_write paddr width data)
       : M (MemoryOpResult bool)
    else if within_phys_mem paddr width then
      (phys_mem_write wk paddr width data meta)
       : M (MemoryOpResult bool)
    else returnm (MemException (E_SAMO_Access_Fault tt)))
    : M (MemoryOpResult bool).

Definition pmp_mem_write
(wk : write_kind) (paddr : mword 32) (width : Z) (data : mword (8 * width)) (ext_acc : unit)
(meta : unit) `{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult bool) :=
   (if negb (plat_enable_pmp tt) then
      (checked_mem_write wk paddr width data meta)
       : M (MemoryOpResult bool)
    else
      let typ : AccessType ext_access_type := Write ext_acc in
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      read_reg cur_privilege_ref >>= fun w__2 : Privilege =>
      (effectivePrivilege typ w__1 w__2) >>= fun w__3 : Privilege =>
      (pmpCheck paddr width typ w__3) >>= fun w__4 : option ExceptionType =>
      (match w__4 with
       | None => (checked_mem_write wk paddr width data meta)  : M (MemoryOpResult bool)
       | Some e => returnm (MemException e)
       end)
       : M (MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition mem_write_value_meta
(paddr : mword 32) (width : Z) (value : mword (8 * width)) (ext_acc : unit) (meta : unit)
(aq : bool) (rl : bool) (con : bool) `{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult bool) :=
   let '_ := (rvfi_write paddr width value)  : unit in
   (if sumbool_of_bool (andb (orb rl con) (negb (is_aligned_addr paddr width))) then
      returnm (MemException (E_SAMO_Addr_Align tt))
    else
      (match (aq, rl, con) with
       | (false, false, false) =>
          (pmp_mem_write Write_plain paddr width value ext_acc meta)  : M (MemoryOpResult bool)
       | (false, true, false) =>
          (pmp_mem_write Write_RISCV_release paddr width value ext_acc meta)
           : M (MemoryOpResult bool)
       | (false, false, true) =>
          (pmp_mem_write Write_RISCV_conditional paddr width value ext_acc meta)
           : M (MemoryOpResult bool)
       | (false, true, true) =>
          (pmp_mem_write Write_RISCV_conditional_release paddr width value ext_acc meta)
           : M (MemoryOpResult bool)
       | (true, true, false) =>
          (pmp_mem_write Write_RISCV_strong_release paddr width value ext_acc meta)
           : M (MemoryOpResult bool)
       | (true, true, true) =>
          (pmp_mem_write Write_RISCV_conditional_strong_release paddr width value ext_acc meta)
           : M (MemoryOpResult bool)
       | (true, false, false) => throw (Error_not_implemented "store.aq")
       | (true, false, true) => throw (Error_not_implemented "sc.aq")
       end)
       : M (MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition mem_write_value
(paddr : mword 32) (width : Z) (value : mword (8 * width)) (aq : bool) (rl : bool) (con : bool)
`{ArithFact ((0 <? width) && (width <=? 16))}
: M (MemoryOpResult bool) :=
   (mem_write_value_meta paddr width value default_write_acc default_meta aq rl con)
    : M (MemoryOpResult bool).

Definition Mk_PTE_Bits (v : mword 8) : PTE_Bits :=
   {| PTE_Bits_PTE_Bits_chunk_0 := (subrange_vec_dec v 7 0) |}.

Definition _get_PTE_Bits_bits (v : PTE_Bits) : mword 8 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 0.

Definition _set_PTE_Bits_bits (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_bits (v : PTE_Bits) (x : mword 8) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition _get_PTE_Bits_D (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 7.

Definition _set_PTE_Bits_D (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_D (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_A (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 6 6.

Definition _set_PTE_Bits_A (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_A (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_G (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 5 5.

Definition _set_PTE_Bits_G (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_G (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_U (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 4 4.

Definition _set_PTE_Bits_U (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_U (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_X (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 3 3.

Definition _set_PTE_Bits_X (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_X (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_W (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 2 2.

Definition _set_PTE_Bits_W (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_W (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_R (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 1 1.

Definition _set_PTE_Bits_R (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_R (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_V (v : PTE_Bits) : mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 0 0.

Definition _set_PTE_Bits_V (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_V (v : PTE_Bits) (x : mword 1) : PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition isPTEPtr (p : mword 8) (ext : mword 10) : bool :=
   let a := Mk_PTE_Bits p in
   andb (eq_vec (_get_PTE_Bits_R a) ('b"0"  : mword 1))
     (andb (eq_vec (_get_PTE_Bits_W a) ('b"0"  : mword 1))
        (eq_vec (_get_PTE_Bits_X a) ('b"0"  : mword 1))).

Definition isInvalidPTE (p : mword 8) (ext : mword 10) : bool :=
   let a := Mk_PTE_Bits p in
   orb (eq_vec (_get_PTE_Bits_V a) ('b"0"  : mword 1))
     (andb (eq_vec (_get_PTE_Bits_W a) ('b"1"  : mword 1))
        (eq_vec (_get_PTE_Bits_R a) ('b"0"  : mword 1))).

Definition to_pte_check (b : bool) : PTE_Check :=
   if sumbool_of_bool b then PTE_Check_Success tt else PTE_Check_Failure tt.

Definition checkPTEPermission
(ac : AccessType unit) (priv : Privilege) (mxr : bool) (do_sum : bool) (p : PTE_Bits)
(ext : mword 10) (ext_ptw : unit)
: M (PTE_Check) :=
   (match (ac, priv) with
    | (Read Data, User) =>
       returnm (to_pte_check
                  (andb (eq_vec (_get_PTE_Bits_U p) ('b"1"  : mword 1))
                     (orb (eq_vec (_get_PTE_Bits_R p) ('b"1"  : mword 1))
                        (andb (eq_vec (_get_PTE_Bits_X p) ('b"1"  : mword 1)) mxr))))
    | (Write Data, User) =>
       returnm (to_pte_check
                  (andb (eq_vec (_get_PTE_Bits_U p) ('b"1"  : mword 1))
                     (eq_vec (_get_PTE_Bits_W p) ('b"1"  : mword 1))))
    | (ReadWrite Data, User) =>
       returnm (to_pte_check
                  (andb (eq_vec (_get_PTE_Bits_U p) ('b"1"  : mword 1))
                     (andb (eq_vec (_get_PTE_Bits_W p) ('b"1"  : mword 1))
                        (orb (eq_vec (_get_PTE_Bits_R p) ('b"1"  : mword 1))
                           (andb (eq_vec (_get_PTE_Bits_X p) ('b"1"  : mword 1)) mxr)))))
    | (Execute tt, User) =>
       returnm (to_pte_check
                  (andb (eq_vec (_get_PTE_Bits_U p) ('b"1"  : mword 1))
                     (eq_vec (_get_PTE_Bits_X p) ('b"1"  : mword 1))))
    | (Read Data, Supervisor) =>
       returnm (to_pte_check
                  (andb (orb (eq_vec (_get_PTE_Bits_U p) ('b"0"  : mword 1)) do_sum)
                     (orb (eq_vec (_get_PTE_Bits_R p) ('b"1"  : mword 1))
                        (andb (eq_vec (_get_PTE_Bits_X p) ('b"1"  : mword 1)) mxr))))
    | (Write Data, Supervisor) =>
       returnm (to_pte_check
                  (andb (orb (eq_vec (_get_PTE_Bits_U p) ('b"0"  : mword 1)) do_sum)
                     (eq_vec (_get_PTE_Bits_W p) ('b"1"  : mword 1))))
    | (ReadWrite Data, Supervisor) =>
       returnm (to_pte_check
                  (andb (orb (eq_vec (_get_PTE_Bits_U p) ('b"0"  : mword 1)) do_sum)
                     (andb (eq_vec (_get_PTE_Bits_W p) ('b"1"  : mword 1))
                        (orb (eq_vec (_get_PTE_Bits_R p) ('b"1"  : mword 1))
                           (andb (eq_vec (_get_PTE_Bits_X p) ('b"1"  : mword 1)) mxr)))))
    | (Execute tt, Supervisor) =>
       returnm (to_pte_check
                  (andb (eq_vec (_get_PTE_Bits_U p) ('b"0"  : mword 1))
                     (eq_vec (_get_PTE_Bits_X p) ('b"1"  : mword 1))))
    | (_, Machine) => (internal_error "m-mode mem perm check")  : M (PTE_Check)
    end)
    : M (PTE_Check).

Definition update_PTE_Bits (p : PTE_Bits) (a : AccessType unit) (ext : mword 10)
: option ((PTE_Bits * mword 10)) :=
   let update_d :=
     andb (orb (generic_eq a (Write Data)) (generic_eq a (ReadWrite Data)))
       (eq_vec (_get_PTE_Bits_D p) ('b"0"  : mword 1)) in
   let update_a := eq_vec (_get_PTE_Bits_A p) ('b"0"  : mword 1) in
   if sumbool_of_bool (orb update_d update_a) then
     let np := _update_PTE_Bits_A p ('b"1"  : mword 1) in
     let np := if sumbool_of_bool update_d then _update_PTE_Bits_D np ('b"1"  : mword 1) else np in
     Some (np, ext)
   else None.

Definition ptw_error_to_str (e : PTW_Error) : string :=
   match e with
   | PTW_Invalid_Addr tt => "invalid-source-addr"
   | PTW_Access tt => "mem-access-error"
   | PTW_Invalid_PTE tt => "invalid-pte"
   | PTW_No_Permission tt => "no-permission"
   | PTW_Misaligned tt => "misaligned-superpage"
   | PTW_PTE_Update tt => "pte-update-needed"
   | PTW_Ext_Error e => "extension-error"
   end.

Definition translationException (a : AccessType unit) (f : PTW_Error) : ExceptionType :=
   match (a, f) with
   | (_, PTW_Ext_Error e) => E_Extension (ext_translate_exception e)
   | (ReadWrite Data, PTW_Access tt) => E_SAMO_Access_Fault tt
   | (ReadWrite Data, _) => E_SAMO_Page_Fault tt
   | (Read Data, PTW_Access tt) => E_Load_Access_Fault tt
   | (Read Data, _) => E_Load_Page_Fault tt
   | (Write Data, PTW_Access tt) => E_SAMO_Access_Fault tt
   | (Write Data, _) => E_SAMO_Page_Fault tt
   | (Execute tt, PTW_Access tt) => E_Fetch_Access_Fault tt
   | (Execute tt, _) => E_Fetch_Page_Fault tt
   end.

Definition PAGESIZE_BITS := 12.
Hint Unfold PAGESIZE_BITS : sail.
Definition curAsid32 (satp : mword 32) : mword 9 :=
   let s := Mk_Satp32 satp in
   _get_Satp32_Asid s.

Definition curPTB32 (satp : mword 32) : mword 34 :=
   let s : Satp32 := Mk_Satp32 satp in
   shiftl (EXTZ 34 (_get_Satp32_PPN s)) PAGESIZE_BITS.

Definition SV32_LEVEL_BITS := 10.
Hint Unfold SV32_LEVEL_BITS : sail.
Definition SV32_LEVELS := 2.
Hint Unfold SV32_LEVELS : sail.
Definition PTE32_LOG_SIZE := 2.
Hint Unfold PTE32_LOG_SIZE : sail.
Definition PTE32_SIZE := 4.
Hint Unfold PTE32_SIZE : sail.
Definition Mk_SV32_Vaddr (v : mword 32) : SV32_Vaddr :=
   {| SV32_Vaddr_SV32_Vaddr_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_SV32_Vaddr_bits (v : SV32_Vaddr) : mword 32 :=
   subrange_vec_dec v.(SV32_Vaddr_SV32_Vaddr_chunk_0) 31 0.

Definition _set_SV32_Vaddr_bits
(r_ref : register_ref regstate register_value SV32_Vaddr) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_Vaddr_SV32_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_Vaddr_SV32_Vaddr_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : SV32_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_Vaddr_bits (v : SV32_Vaddr) (x : mword 32) : SV32_Vaddr :=
   {[ v with
     SV32_Vaddr_SV32_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_Vaddr_SV32_Vaddr_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_SV32_Vaddr_VPNi (v : SV32_Vaddr) : mword 20 :=
   subrange_vec_dec v.(SV32_Vaddr_SV32_Vaddr_chunk_0) 31 12.

Definition _set_SV32_Vaddr_VPNi
(r_ref : register_ref regstate register_value SV32_Vaddr) (v : mword 20)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_Vaddr_SV32_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_Vaddr_SV32_Vaddr_chunk_0) 31 12 (subrange_vec_dec v 19 0)) ]}
      : SV32_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_Vaddr_VPNi (v : SV32_Vaddr) (x : mword 20) : SV32_Vaddr :=
   {[ v with
     SV32_Vaddr_SV32_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_Vaddr_SV32_Vaddr_chunk_0) 31 12 (subrange_vec_dec x 19 0)) ]}.

Definition _get_SV32_Vaddr_PgOfs (v : SV32_Vaddr) : mword 12 :=
   subrange_vec_dec v.(SV32_Vaddr_SV32_Vaddr_chunk_0) 11 0.

Definition _set_SV32_Vaddr_PgOfs
(r_ref : register_ref regstate register_value SV32_Vaddr) (v : mword 12)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_Vaddr_SV32_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_Vaddr_SV32_Vaddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV32_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_Vaddr_PgOfs (v : SV32_Vaddr) (x : mword 12) : SV32_Vaddr :=
   {[ v with
     SV32_Vaddr_SV32_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_Vaddr_SV32_Vaddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV32_Paddr (v : mword 34) : SV32_Paddr :=
   {| SV32_Paddr_SV32_Paddr_chunk_0 := (subrange_vec_dec v 33 0) |}.

Definition _get_SV32_Paddr_bits (v : SV32_Paddr) : mword 34 :=
   subrange_vec_dec v.(SV32_Paddr_SV32_Paddr_chunk_0) 33 0.

Definition _set_SV32_Paddr_bits
(r_ref : register_ref regstate register_value SV32_Paddr) (v : mword 34)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_Paddr_SV32_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_Paddr_SV32_Paddr_chunk_0) 33 0 (subrange_vec_dec v 33 0)) ]}
      : SV32_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_Paddr_bits (v : SV32_Paddr) (x : mword 34) : SV32_Paddr :=
   {[ v with
     SV32_Paddr_SV32_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_Paddr_SV32_Paddr_chunk_0) 33 0 (subrange_vec_dec x 33 0)) ]}.

Definition _get_SV32_Paddr_PPNi (v : SV32_Paddr) : mword 22 :=
   subrange_vec_dec v.(SV32_Paddr_SV32_Paddr_chunk_0) 33 12.

Definition _set_SV32_Paddr_PPNi
(r_ref : register_ref regstate register_value SV32_Paddr) (v : mword 22)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_Paddr_SV32_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_Paddr_SV32_Paddr_chunk_0) 33 12 (subrange_vec_dec v 21 0)) ]}
      : SV32_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_Paddr_PPNi (v : SV32_Paddr) (x : mword 22) : SV32_Paddr :=
   {[ v with
     SV32_Paddr_SV32_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_Paddr_SV32_Paddr_chunk_0) 33 12 (subrange_vec_dec x 21 0)) ]}.

Definition _get_SV32_Paddr_PgOfs (v : SV32_Paddr) : mword 12 :=
   subrange_vec_dec v.(SV32_Paddr_SV32_Paddr_chunk_0) 11 0.

Definition _set_SV32_Paddr_PgOfs
(r_ref : register_ref regstate register_value SV32_Paddr) (v : mword 12)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_Paddr_SV32_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_Paddr_SV32_Paddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV32_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_Paddr_PgOfs (v : SV32_Paddr) (x : mword 12) : SV32_Paddr :=
   {[ v with
     SV32_Paddr_SV32_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_Paddr_SV32_Paddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV32_PTE (v : mword 32) : SV32_PTE :=
   {| SV32_PTE_SV32_PTE_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_SV32_PTE_bits (v : SV32_PTE) : mword 32 :=
   subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 31 0.

Definition _set_SV32_PTE_bits (r_ref : register_ref regstate register_value SV32_PTE) (v : mword 32)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_PTE_SV32_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_PTE_SV32_PTE_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : SV32_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_PTE_bits (v : SV32_PTE) (x : mword 32) : SV32_PTE :=
   {[ v with
     SV32_PTE_SV32_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_SV32_PTE_PPNi (v : SV32_PTE) : mword 22 :=
   subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 31 10.

Definition _set_SV32_PTE_PPNi (r_ref : register_ref regstate register_value SV32_PTE) (v : mword 22)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_PTE_SV32_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_PTE_SV32_PTE_chunk_0) 31 10 (subrange_vec_dec v 21 0)) ]}
      : SV32_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_PTE_PPNi (v : SV32_PTE) (x : mword 22) : SV32_PTE :=
   {[ v with
     SV32_PTE_SV32_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 31 10 (subrange_vec_dec x 21 0)) ]}.

Definition _get_SV32_PTE_RSW (v : SV32_PTE) : mword 2 :=
   subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 9 8.

Definition _set_SV32_PTE_RSW (r_ref : register_ref regstate register_value SV32_PTE) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_PTE_SV32_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_PTE_SV32_PTE_chunk_0) 9 8 (subrange_vec_dec v 1 0)) ]}
      : SV32_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_PTE_RSW (v : SV32_PTE) (x : mword 2) : SV32_PTE :=
   {[ v with
     SV32_PTE_SV32_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 9 8 (subrange_vec_dec x 1 0)) ]}.

Definition _get_SV32_PTE_BITS (v : SV32_PTE) : mword 8 :=
   subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 7 0.

Definition _set_SV32_PTE_BITS (r_ref : register_ref regstate register_value SV32_PTE) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV32_PTE_SV32_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV32_PTE_SV32_PTE_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : SV32_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV32_PTE_BITS (v : SV32_PTE) (x : mword 8) : SV32_PTE :=
   {[ v with
     SV32_PTE_SV32_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV32_PTE_SV32_PTE_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition curAsid64 (satp : mword 64) : mword 16 :=
   let s := Mk_Satp64 satp in
   _get_Satp64_Asid s.

Definition curPTB64 (satp : mword 64) : mword 56 :=
   let s := Mk_Satp64 satp in
   shiftl (EXTZ 56 (_get_Satp64_PPN s)) PAGESIZE_BITS.

Definition SV39_LEVEL_BITS := 9.
Hint Unfold SV39_LEVEL_BITS : sail.
Definition SV39_LEVELS := 3.
Hint Unfold SV39_LEVELS : sail.
Definition PTE39_LOG_SIZE := 3.
Hint Unfold PTE39_LOG_SIZE : sail.
Definition PTE39_SIZE := 8.
Hint Unfold PTE39_SIZE : sail.
Definition Mk_SV39_Vaddr (v : mword 39) : SV39_Vaddr :=
   {| SV39_Vaddr_SV39_Vaddr_chunk_0 := (subrange_vec_dec v 38 0) |}.

Definition _get_SV39_Vaddr_bits (v : SV39_Vaddr) : mword 39 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0.

Definition _set_SV39_Vaddr_bits
(r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 39)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0 (subrange_vec_dec v 38 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_bits (v : SV39_Vaddr) (x : mword 39) : SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0 (subrange_vec_dec x 38 0)) ]}.

Definition _get_SV39_Vaddr_VPNi (v : SV39_Vaddr) : mword 27 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12.

Definition _set_SV39_Vaddr_VPNi
(r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 27)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12 (subrange_vec_dec v 26 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_VPNi (v : SV39_Vaddr) (x : mword 27) : SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12 (subrange_vec_dec x 26 0)) ]}.

Definition _get_SV39_Vaddr_PgOfs (v : SV39_Vaddr) : mword 12 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0.

Definition _set_SV39_Vaddr_PgOfs
(r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 12)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_PgOfs (v : SV39_Vaddr) (x : mword 12) : SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV39_Paddr (v : mword 56) : SV39_Paddr :=
   {| SV39_Paddr_SV39_Paddr_chunk_0 := (subrange_vec_dec v 55 0) |}.

Definition _get_SV39_Paddr_bits (v : SV39_Paddr) : mword 56 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0.

Definition _set_SV39_Paddr_bits
(r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 56)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0 (subrange_vec_dec v 55 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_bits (v : SV39_Paddr) (x : mword 56) : SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0 (subrange_vec_dec x 55 0)) ]}.

Definition _get_SV39_Paddr_PPNi (v : SV39_Paddr) : mword 44 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12.

Definition _set_SV39_Paddr_PPNi
(r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 44)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12 (subrange_vec_dec v 43 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_PPNi (v : SV39_Paddr) (x : mword 44) : SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV39_Paddr_PgOfs (v : SV39_Paddr) : mword 12 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0.

Definition _set_SV39_Paddr_PgOfs
(r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 12)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_PgOfs (v : SV39_Paddr) (x : mword 12) : SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV39_PTE (v : mword 64) : SV39_PTE :=
   {| SV39_PTE_SV39_PTE_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_SV39_PTE_bits (v : SV39_PTE) : mword 64 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 0.

Definition _set_SV39_PTE_bits (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 64)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_bits (v : SV39_PTE) (x : mword 64) : SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_SV39_PTE_Ext (v : SV39_PTE) : mword 10 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 54.

Definition _set_SV39_PTE_Ext (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 10)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 63 54 (subrange_vec_dec v 9 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_Ext (v : SV39_PTE) (x : mword 10) : SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 54 (subrange_vec_dec x 9 0)) ]}.

Definition _get_SV39_PTE_PPNi (v : SV39_PTE) : mword 44 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 53 10.

Definition _set_SV39_PTE_PPNi (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 44)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 53 10 (subrange_vec_dec v 43 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_PPNi (v : SV39_PTE) (x : mword 44) : SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 53 10 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV39_PTE_RSW (v : SV39_PTE) : mword 2 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 9 8.

Definition _set_SV39_PTE_RSW (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 9 8 (subrange_vec_dec v 1 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_RSW (v : SV39_PTE) (x : mword 2) : SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 9 8 (subrange_vec_dec x 1 0)) ]}.

Definition _get_SV39_PTE_BITS (v : SV39_PTE) : mword 8 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 7 0.

Definition _set_SV39_PTE_BITS (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_BITS (v : SV39_PTE) (x : mword 8) : SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition SV48_LEVEL_BITS := 9.
Hint Unfold SV48_LEVEL_BITS : sail.
Definition SV48_LEVELS := 4.
Hint Unfold SV48_LEVELS : sail.
Definition PTE48_LOG_SIZE := 3.
Hint Unfold PTE48_LOG_SIZE : sail.
Definition PTE48_SIZE := 8.
Hint Unfold PTE48_SIZE : sail.
Definition Mk_SV48_Vaddr (v : mword 48) : SV48_Vaddr :=
   {| SV48_Vaddr_SV48_Vaddr_chunk_0 := (subrange_vec_dec v 47 0) |}.

Definition _get_SV48_Vaddr_bits (v : SV48_Vaddr) : mword 48 :=
   subrange_vec_dec v.(SV48_Vaddr_SV48_Vaddr_chunk_0) 47 0.

Definition _set_SV48_Vaddr_bits
(r_ref : register_ref regstate register_value SV48_Vaddr) (v : mword 48)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_Vaddr_SV48_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_Vaddr_SV48_Vaddr_chunk_0) 47 0 (subrange_vec_dec v 47 0)) ]}
      : SV48_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_Vaddr_bits (v : SV48_Vaddr) (x : mword 48) : SV48_Vaddr :=
   {[ v with
     SV48_Vaddr_SV48_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_Vaddr_SV48_Vaddr_chunk_0) 47 0 (subrange_vec_dec x 47 0)) ]}.

Definition _get_SV48_Vaddr_VPNi (v : SV48_Vaddr) : mword 27 :=
   subrange_vec_dec v.(SV48_Vaddr_SV48_Vaddr_chunk_0) 38 12.

Definition _set_SV48_Vaddr_VPNi
(r_ref : register_ref regstate register_value SV48_Vaddr) (v : mword 27)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_Vaddr_SV48_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_Vaddr_SV48_Vaddr_chunk_0) 38 12 (subrange_vec_dec v 26 0)) ]}
      : SV48_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_Vaddr_VPNi (v : SV48_Vaddr) (x : mword 27) : SV48_Vaddr :=
   {[ v with
     SV48_Vaddr_SV48_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_Vaddr_SV48_Vaddr_chunk_0) 38 12 (subrange_vec_dec x 26 0)) ]}.

Definition _get_SV48_Vaddr_PgOfs (v : SV48_Vaddr) : mword 12 :=
   subrange_vec_dec v.(SV48_Vaddr_SV48_Vaddr_chunk_0) 11 0.

Definition _set_SV48_Vaddr_PgOfs
(r_ref : register_ref regstate register_value SV48_Vaddr) (v : mword 12)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_Vaddr_SV48_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_Vaddr_SV48_Vaddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV48_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_Vaddr_PgOfs (v : SV48_Vaddr) (x : mword 12) : SV48_Vaddr :=
   {[ v with
     SV48_Vaddr_SV48_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_Vaddr_SV48_Vaddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV48_Paddr (v : mword 56) : SV48_Paddr :=
   {| SV48_Paddr_SV48_Paddr_chunk_0 := (subrange_vec_dec v 55 0) |}.

Definition _get_SV48_Paddr_bits (v : SV48_Paddr) : mword 56 :=
   subrange_vec_dec v.(SV48_Paddr_SV48_Paddr_chunk_0) 55 0.

Definition _set_SV48_Paddr_bits
(r_ref : register_ref regstate register_value SV48_Paddr) (v : mword 56)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_Paddr_SV48_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_Paddr_SV48_Paddr_chunk_0) 55 0 (subrange_vec_dec v 55 0)) ]}
      : SV48_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_Paddr_bits (v : SV48_Paddr) (x : mword 56) : SV48_Paddr :=
   {[ v with
     SV48_Paddr_SV48_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_Paddr_SV48_Paddr_chunk_0) 55 0 (subrange_vec_dec x 55 0)) ]}.

Definition _get_SV48_Paddr_PPNi (v : SV48_Paddr) : mword 44 :=
   subrange_vec_dec v.(SV48_Paddr_SV48_Paddr_chunk_0) 55 12.

Definition _set_SV48_Paddr_PPNi
(r_ref : register_ref regstate register_value SV48_Paddr) (v : mword 44)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_Paddr_SV48_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_Paddr_SV48_Paddr_chunk_0) 55 12 (subrange_vec_dec v 43 0)) ]}
      : SV48_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_Paddr_PPNi (v : SV48_Paddr) (x : mword 44) : SV48_Paddr :=
   {[ v with
     SV48_Paddr_SV48_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_Paddr_SV48_Paddr_chunk_0) 55 12 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV48_Paddr_PgOfs (v : SV48_Paddr) : mword 12 :=
   subrange_vec_dec v.(SV48_Paddr_SV48_Paddr_chunk_0) 11 0.

Definition _set_SV48_Paddr_PgOfs
(r_ref : register_ref regstate register_value SV48_Paddr) (v : mword 12)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_Paddr_SV48_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_Paddr_SV48_Paddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV48_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_Paddr_PgOfs (v : SV48_Paddr) (x : mword 12) : SV48_Paddr :=
   {[ v with
     SV48_Paddr_SV48_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_Paddr_SV48_Paddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV48_PTE (v : mword 64) : SV48_PTE :=
   {| SV48_PTE_SV48_PTE_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_SV48_PTE_bits (v : SV48_PTE) : mword 64 :=
   subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 63 0.

Definition _set_SV48_PTE_bits (r_ref : register_ref regstate register_value SV48_PTE) (v : mword 64)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_PTE_SV48_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_PTE_SV48_PTE_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : SV48_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_PTE_bits (v : SV48_PTE) (x : mword 64) : SV48_PTE :=
   {[ v with
     SV48_PTE_SV48_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_SV48_PTE_Ext (v : SV48_PTE) : mword 10 :=
   subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 63 54.

Definition _set_SV48_PTE_Ext (r_ref : register_ref regstate register_value SV48_PTE) (v : mword 10)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_PTE_SV48_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_PTE_SV48_PTE_chunk_0) 63 54 (subrange_vec_dec v 9 0)) ]}
      : SV48_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_PTE_Ext (v : SV48_PTE) (x : mword 10) : SV48_PTE :=
   {[ v with
     SV48_PTE_SV48_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 63 54 (subrange_vec_dec x 9 0)) ]}.

Definition _get_SV48_PTE_PPNi (v : SV48_PTE) : mword 44 :=
   subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 53 10.

Definition _set_SV48_PTE_PPNi (r_ref : register_ref regstate register_value SV48_PTE) (v : mword 44)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_PTE_SV48_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_PTE_SV48_PTE_chunk_0) 53 10 (subrange_vec_dec v 43 0)) ]}
      : SV48_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_PTE_PPNi (v : SV48_PTE) (x : mword 44) : SV48_PTE :=
   {[ v with
     SV48_PTE_SV48_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 53 10 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV48_PTE_RSW (v : SV48_PTE) : mword 2 :=
   subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 9 8.

Definition _set_SV48_PTE_RSW (r_ref : register_ref regstate register_value SV48_PTE) (v : mword 2)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_PTE_SV48_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_PTE_SV48_PTE_chunk_0) 9 8 (subrange_vec_dec v 1 0)) ]}
      : SV48_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_PTE_RSW (v : SV48_PTE) (x : mword 2) : SV48_PTE :=
   {[ v with
     SV48_PTE_SV48_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 9 8 (subrange_vec_dec x 1 0)) ]}.

Definition _get_SV48_PTE_BITS (v : SV48_PTE) : mword 8 :=
   subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 7 0.

Definition _set_SV48_PTE_BITS (r_ref : register_ref regstate register_value SV48_PTE) (v : mword 8)
: M (unit) :=
   (reg_deref r_ref) >>= fun r =>
   let r :=
     {[ r with
       SV48_PTE_SV48_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV48_PTE_SV48_PTE_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : SV48_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV48_PTE_BITS (v : SV48_PTE) (x : mword 8) : SV48_PTE :=
   {[ v with
     SV48_PTE_SV48_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV48_PTE_SV48_PTE_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition make_TLB_Entry {asidlen : Z} {valen : Z} {palen : Z} {ptelen : Z}
(asid : mword asidlen) (global : bool) (vAddr : mword valen) (pAddr : mword palen)
(pte : mword ptelen) (level : Z) (pteAddr : mword palen) (levelBitSize : Z)
`{ArithFact (valen >? 0)} `{ArithFact (0 <=? level)} `{ArithFact (0 <=? levelBitSize)}
: M (TLB_Entry asidlen valen palen ptelen) :=
   let shift := Z.add PAGESIZE_BITS (Z.mul level levelBitSize) in
   let vAddrMask : bits valen :=
     sub_vec_int
       (shiftl (xor_vec vAddr (xor_vec vAddr (EXTZ (length_mword vAddr) ('b"1"  : mword 1)))) shift)
       1 in
   let vMatchMask : bits valen := not_vec vAddrMask in
   ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__0 : mword 64 =>
   returnm ({| TLB_Entry_asid := asid; 
               TLB_Entry_global := global; 
               TLB_Entry_pte := pte; 
               TLB_Entry_pteAddr := pteAddr; 
               TLB_Entry_vAddrMask := vAddrMask; 
               TLB_Entry_vMatchMask := vMatchMask; 
               TLB_Entry_vAddr := (and_vec vAddr vMatchMask); 
               TLB_Entry_pAddr := (shiftl (shiftr pAddr shift) shift); 
               TLB_Entry_age := w__0 |}).

Definition match_TLB_Entry {asidlen : Z} {valen : Z} {palen : Z} {ptelen : Z}
(ent : TLB_Entry asidlen valen palen ptelen) (asid : mword asidlen) (vaddr : mword valen)
: bool :=
   andb (orb ent.(TLB_Entry_global) (eq_vec ent.(TLB_Entry_asid) asid))
     (eq_vec ent.(TLB_Entry_vAddr) (and_vec ent.(TLB_Entry_vMatchMask) vaddr)).

Definition flush_TLB_Entry {asidlen : Z} {valen : Z} {palen : Z} {ptelen : Z}
(e : TLB_Entry asidlen valen palen ptelen) (asid : option (mword asidlen))
(addr : option (mword valen))
: bool :=
   match (asid, addr) with
   | (None, None) => true
   | (None, Some a) => eq_vec e.(TLB_Entry_vAddr) (and_vec e.(TLB_Entry_vMatchMask) a)
   | (Some i, None) => andb (eq_vec e.(TLB_Entry_asid) i) (negb e.(TLB_Entry_global))
   | (Some i, Some a) =>
      andb (eq_vec e.(TLB_Entry_asid) i)
        (andb (eq_vec e.(TLB_Entry_vAddr) (and_vec a e.(TLB_Entry_vMatchMask)))
           (negb e.(TLB_Entry_global)))
   end.

Definition to_phys_addr (a : mword 34) : mword 32 := subrange_vec_dec a 31 0.

Fixpoint _rec_walk32
(vaddr : mword 32) (ac : AccessType unit) (priv : Privilege) (mxr : bool) (do_sum : bool)
(ptb : mword 34) (level : Z) (global : bool) (ext_ptw : unit) (_reclimit : Z)
`{ArithFact (0 <=? level)} (_acc : Acc (Zwf 0) _reclimit)
{struct _acc} : M (PTW_Result (mword 34) SV32_PTE).
exact (
   assert_exp' (Z.geb _reclimit 0) "recursion limit reached" >>= fun _ =>
   let va := Mk_SV32_Vaddr vaddr in
   let pt_ofs : paddr32 :=
     shiftl
       (EXTZ 34
          (subrange_vec_dec (shiftr (_get_SV32_Vaddr_VPNi va) (Z.mul level SV32_LEVEL_BITS))
             (Z.sub SV32_LEVEL_BITS 1) 0)) PTE32_LOG_SIZE in
   let pte_addr := add_vec ptb pt_ofs in
   (mem_read ac (to_phys_addr pte_addr) 4 false false false) >>= fun w__0 : MemoryOpResult (mword (8 * 4)) =>
   (match w__0 with
    | MemException _ => returnm (PTW_Failure (PTW_Access tt, ext_ptw))
    | MemValue v =>
       let pte := Mk_SV32_PTE v in
       let pbits := _get_SV32_PTE_BITS pte in
       let ext_pte : extPte := zeros_implicit 10 in
       let pattr := Mk_PTE_Bits pbits in
       let is_global := orb global (eq_vec (_get_PTE_Bits_G pattr) ('b"1"  : mword 1)) in
       (if isInvalidPTE pbits ext_pte then returnm (PTW_Failure (PTW_Invalid_PTE tt, ext_ptw))
        else if isPTEPtr pbits ext_pte then
          (if sumbool_of_bool (Z.gtb level 0) then
             (_rec_walk32 vaddr ac priv mxr do_sum
                (shiftl (EXTZ 34 (_get_SV32_PTE_PPNi pte)) PAGESIZE_BITS) (Z.sub level 1) is_global
                ext_ptw (Z.sub _reclimit 1) _ (_limit_reduces _acc))
              : M (PTW_Result (mword 34) SV32_PTE)
           else returnm (PTW_Failure (PTW_Invalid_PTE tt, ext_ptw)))
           : M (PTW_Result (mword 34) SV32_PTE)
        else
          (checkPTEPermission ac priv mxr do_sum pattr ext_pte ext_ptw) >>= fun w__3 : PTE_Check =>
          returnm (match w__3 with
                   | PTE_Check_Failure ext_ptw => PTW_Failure (PTW_No_Permission tt, ext_ptw)
                   | PTE_Check_Success ext_ptw =>
                      if sumbool_of_bool (Z.gtb level 0) then
                        let mask :=
                          sub_vec_int
                            (shiftl
                               (xor_vec (_get_SV32_PTE_PPNi pte)
                                  (xor_vec (_get_SV32_PTE_PPNi pte) (EXTZ 22 ('b"1"  : mword 1))))
                               (Z.mul level SV32_LEVEL_BITS)) 1 in
                        if neq_vec (and_vec (_get_SV32_PTE_PPNi pte) mask)
                             (EXTZ 22 ('b"0"  : mword 1)) then
                          PTW_Failure (PTW_Misaligned tt, ext_ptw)
                        else
                          let ppn :=
                            or_vec (_get_SV32_PTE_PPNi pte)
                              (and_vec (EXTZ 22 (_get_SV32_Vaddr_VPNi va)) mask) in
                          PTW_Success
                            (concat_vec ppn (_get_SV32_Vaddr_PgOfs va), pte, pte_addr, build_ex
                            level, is_global, ext_ptw)
                      else
                        PTW_Success
                          (concat_vec (_get_SV32_PTE_PPNi pte) (_get_SV32_Vaddr_PgOfs va), pte, pte_addr, build_ex
                          level, is_global, ext_ptw)
                   end))
        : M (PTW_Result (mword 34) SV32_PTE)
    end)
    : M (PTW_Result (mword 34) SV32_PTE)
).
Defined.


Definition walk32
(_arg0 : mword 32) (_arg1 : AccessType unit) (_arg2 : Privilege) (_arg3 : bool) (_arg4 : bool)
(_arg5 : mword 34) (level : Z) (_arg7 : bool) (_arg8 : unit) `{ArithFact (0 <=? level)}
: M (PTW_Result (mword 34) SV32_PTE) :=
   (_rec_walk32 _arg0 _arg1 _arg2 _arg3 _arg4 _arg5 level _arg7 _arg8 (level  : Z) (Zwf_guarded _))
    : M (PTW_Result (mword 34) SV32_PTE).

Definition lookup_TLB32 (asid : mword 9) (vaddr : mword 32)
: M (option (({n : Z & ArithFact (n >=? 0)} * TLB_Entry 9 32 34 32))) :=
   read_reg tlb32_ref >>= fun w__0 : option (TLB_Entry 9 32 34 32) =>
   returnm (match w__0 with
            | None => None
            | Some e => if match_TLB_Entry e asid vaddr then Some (build_ex 0, e) else None
            end).

Definition add_to_TLB32
(asid : mword 9) (vAddr : mword 32) (pAddr : mword 34) (pte : SV32_PTE) (pteAddr : mword 34)
(level : Z) (global : bool) `{ArithFact (0 <=? level)}
: M (unit) :=
   (make_TLB_Entry asid global vAddr pAddr (_get_SV32_PTE_bits pte) level pteAddr SV32_LEVEL_BITS) >>= fun ent : TLB32_Entry =>
   write_reg tlb32_ref (Some ent)
    : M (unit).

Definition write_TLB32 (idx : Z) (ent : TLB_Entry 9 32 34 32) `{ArithFact (0 <=? idx)} : M (unit) :=
   write_reg tlb32_ref (Some ent)  : M (unit).

Definition flush_TLB32 (asid : option (mword 9)) (addr : option (mword 32)) : M (unit) :=
   read_reg tlb32_ref >>= fun w__0 : option (TLB_Entry 9 32 34 32) =>
   (match w__0 with
    | None => returnm tt
    | Some e =>
       (if flush_TLB_Entry e asid addr then write_reg tlb32_ref None  : M (unit)
        else returnm tt)
        : M (unit)
    end)
    : M (unit).

Definition translate32
(asid : mword 9) (ptb : mword 34) (vAddr : mword 32) (ac : AccessType unit) (priv : Privilege)
(mxr : bool) (do_sum : bool) (level : Z) (ext_ptw : unit) `{ArithFact (0 <=? level)}
: M (TR_Result (mword 34) PTW_Error) :=
   (lookup_TLB32 asid vAddr) >>= fun w__0 : option (({n : Z & ArithFact (n >=? 0)} * TLB_Entry 9 32 34 32)) =>
   (match w__0 with
    | Some (existT _ idx _, ent) =>
       let pte := Mk_SV32_PTE ent.(TLB_Entry_pte) in
       let ext_pte : extPte := zeros_implicit 10 in
       let pteBits := Mk_PTE_Bits (_get_SV32_PTE_BITS pte) in
       (checkPTEPermission ac priv mxr do_sum pteBits ext_pte ext_ptw) >>= fun w__1 : PTE_Check =>
       (match w__1 with
        | PTE_Check_Failure ext_ptw => returnm (TR_Failure (PTW_No_Permission tt, ext_ptw))
        | PTE_Check_Success ext_ptw =>
           (match (update_PTE_Bits pteBits ac ext_pte) with
            | None =>
               returnm (TR_Address
                          (or_vec ent.(TLB_Entry_pAddr)
                             (EXTZ 34 (and_vec vAddr ent.(TLB_Entry_vAddrMask))), ext_ptw))
            | Some (pbits, ext) =>
               (if negb (plat_enable_dirty_update tt) then
                  returnm (TR_Failure (PTW_PTE_Update tt, ext_ptw))
                else
                  let n_pte := _update_SV32_PTE_BITS pte (_get_PTE_Bits_bits pbits) in
                  let n_ent : TLB32_Entry := ent in
                  let n_ent :=
                    {[ n_ent with TLB_Entry_pte := (_get_SV32_PTE_bits n_pte) ]}
                     : TLB_Entry 9 32 34 32 in
                  (write_TLB32 idx n_ent) >>
                  (mem_write_value (to_phys_addr (EXTZ 34 ent.(TLB_Entry_pteAddr))) 4
                     (_get_SV32_PTE_bits n_pte) false false false) >>= fun w__2 : MemoryOpResult bool =>
                  (match w__2 with
                   | MemValue _ => returnm tt
                   | MemException e =>
                      (internal_error "invalid physical address in TLB")  : M (unit)
                   end) >>
                  returnm (TR_Address
                             (or_vec ent.(TLB_Entry_pAddr)
                                (EXTZ 34 (and_vec vAddr ent.(TLB_Entry_vAddrMask))), ext_ptw)))
                : M (TR_Result (mword 34) PTW_Error)
            end)
            : M (TR_Result (mword 34) PTW_Error)
        end)
        : M (TR_Result (mword 34) PTW_Error)
    | None =>
       (walk32 vAddr ac priv mxr do_sum ptb level false ext_ptw) >>= fun w__6 : PTW_Result (mword 34) SV32_PTE =>
       (match w__6 with
        | PTW_Failure (f, ext_ptw) => returnm (TR_Failure (f, ext_ptw))
        | PTW_Success (pAddr, pte, pteAddr, existT _ level _, global, ext_ptw) =>
           (match (update_PTE_Bits (Mk_PTE_Bits (_get_SV32_PTE_BITS pte)) ac (zeros_implicit 10)) with
            | None =>
               (add_to_TLB32 asid vAddr pAddr pte pteAddr level global) >>
               returnm (TR_Address (pAddr, ext_ptw))
            | Some (pbits, ext) =>
               (if negb (plat_enable_dirty_update tt) then
                  returnm (TR_Failure (PTW_PTE_Update tt, ext_ptw))
                else
                  let w_pte : SV32_PTE := _update_SV32_PTE_BITS pte (_get_PTE_Bits_bits pbits) in
                  (mem_write_value (to_phys_addr pteAddr) 4 (_get_SV32_PTE_bits w_pte) false false
                     false) >>= fun w__7 : MemoryOpResult bool =>
                  (match w__7 with
                   | MemValue _ =>
                      (add_to_TLB32 asid vAddr pAddr w_pte pteAddr level global) >>
                      returnm (TR_Address (pAddr, ext_ptw))
                   | MemException e => returnm (TR_Failure (PTW_Access tt, ext_ptw))
                   end)
                   : M (TR_Result (mword 34) PTW_Error))
                : M (TR_Result (mword 34) PTW_Error)
            end)
            : M (TR_Result (mword 34) PTW_Error)
        end)
        : M (TR_Result (mword 34) PTW_Error)
    end)
    : M (TR_Result (mword 34) PTW_Error).

Definition init_vmem_sv32 '(tt : unit) : M (unit) := write_reg tlb32_ref None  : M (unit).

Definition legalize_satp (a : Architecture) (o : mword 32) (v : mword 32) : mword 32 :=
   legalize_satp32 a o v.

Definition translationMode (priv : Privilege) : M (SATPMode) :=
   (if generic_eq priv Machine then returnm Sbare
    else
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      let arch := architecture (get_mstatus_SXL w__0) in
      (match arch with
       | Some RV32 =>
          ((read_reg satp_ref)  : M (mword 32)) >>= fun w__1 : mword 32 =>
          let s := Mk_Satp32 (subrange_vec_dec w__1 31 0) in
          returnm (if eq_vec (_get_Satp32_Mode s) ('b"0"  : mword 1) then Sbare else Sv32)
       | _ => (internal_error "unsupported address translation arch")  : M (SATPMode)
       end)
       : M (SATPMode))
    : M (SATPMode).

Definition translateAddr (vAddr : mword 32) (ac : AccessType unit)
: M (TR_Result (mword 32) ExceptionType) :=
   read_reg mstatus_ref >>= fun w__0 : Mstatus =>
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   (effectivePrivilege ac w__0 w__1) >>= fun effPriv : Privilege =>
   read_reg mstatus_ref >>= fun w__2 : Mstatus =>
   let mxr : bool := eq_vec (_get_Mstatus_MXR w__2) ('b"1"  : mword 1) in
   read_reg mstatus_ref >>= fun w__3 : Mstatus =>
   let do_sum : bool := eq_vec (_get_Mstatus_SUM w__3) ('b"1"  : mword 1) in
   (translationMode effPriv) >>= fun mode : SATPMode =>
   ((read_reg satp_ref)  : M (mword 32)) >>= fun w__4 : mword 32 =>
   let asid := curAsid32 w__4 in
   ((read_reg satp_ref)  : M (mword 32)) >>= fun w__5 : mword 32 =>
   let ptb := curPTB32 w__5 in
   let ext_ptw : ext_ptw := init_ext_ptw in
   (match mode with
    | Sbare => returnm (TR_Address (vAddr, ext_ptw))
    | Sv32 =>
       (translate32 asid ptb vAddr ac effPriv mxr do_sum (Z.sub SV32_LEVELS 1) ext_ptw) >>= fun w__6 : TR_Result (mword 34) PTW_Error =>
       returnm (match w__6 with
                | TR_Address (pa, ext_ptw) => TR_Address (to_phys_addr pa, ext_ptw)
                | TR_Failure (f, ext_ptw) => TR_Failure (translationException ac f, ext_ptw)
                end)
    | _ =>
       (internal_error "unsupported address translation scheme")
        : M (TR_Result (mword 32) ExceptionType)
    end)
    : M (TR_Result (mword 32) ExceptionType).

Definition flush_TLB (asid_xlen : option (mword 32)) (addr_xlen : option (mword 32)) : M (unit) :=
   let asid : option asid32 :=
     match asid_xlen with | None => None | Some a => Some (subrange_vec_dec a 8 0) end in
   (flush_TLB32 asid addr_xlen)
    : M (unit).

Definition init_vmem '(tt : unit) : M (unit) := (init_vmem_sv32 tt)  : M (unit).

Definition encdec_uop_forwards (arg_ : uop) : mword 7 :=
   match arg_ with | RISCV_LUI => 'b"0110111"  : mword 7 | RISCV_AUIPC => 'b"0010111"  : mword 7 end.

Definition encdec_uop_backwards (arg_ : mword 7) : M (uop) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"0110111"  : mword 7) then returnm RISCV_LUI
    else if eq_vec b__0 ('b"0010111"  : mword 7) then returnm RISCV_AUIPC
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (uop).

Definition encdec_uop_forwards_matches (arg_ : uop) : bool :=
   match arg_ with | RISCV_LUI => true | RISCV_AUIPC => true end.

Definition encdec_uop_backwards_matches (arg_ : mword 7) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"0110111"  : mword 7) then true
   else if eq_vec b__0 ('b"0010111"  : mword 7) then true
   else false.

Definition utype_mnemonic_forwards (arg_ : uop) : string :=
   match arg_ with | RISCV_LUI => "lui" | RISCV_AUIPC => "auipc" end.

Definition utype_mnemonic_backwards (arg_ : string) : M (uop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "lui" then returnm RISCV_LUI
    else if generic_eq p0_ "auipc" then returnm RISCV_AUIPC
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (uop).

Definition utype_mnemonic_forwards_matches (arg_ : uop) : bool :=
   match arg_ with | RISCV_LUI => true | RISCV_AUIPC => true end.

Definition utype_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "lui" then true
   else if generic_eq p0_ "auipc" then true
   else false.

Definition _s757_ (_s758_ : string) : option string :=
   let _s759_ := _s758_ in
   if string_startswith _s759_ "auipc" then
     match (string_drop _s759_ (projT1 (string_length "auipc"))) with | s_ => Some s_ end
   else None.

Definition _s753_ (_s754_ : string) : option string :=
   let _s755_ := _s754_ in
   if string_startswith _s755_ "lui" then
     match (string_drop _s755_ (projT1 (string_length "lui"))) with | s_ => Some s_ end
   else None.

Definition utype_mnemonic_matches_prefix (arg_ : string)
: M (option ((uop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s756_ := arg_ in
   (if match (_s753_ _s756_) with | Some s_ => true | _ => false end then
      (match (_s753_ _s756_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_LUI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((uop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((uop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s757_ _s756_) with | Some s_ => true | _ => false end then
      (match (_s757_ _s756_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_AUIPC, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((uop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((uop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((uop * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_bop_forwards (arg_ : bop) : mword 3 :=
   match arg_ with
   | RISCV_BEQ => 'b"000"  : mword 3
   | RISCV_BNE => 'b"001"  : mword 3
   | RISCV_BLT => 'b"100"  : mword 3
   | RISCV_BGE => 'b"101"  : mword 3
   | RISCV_BLTU => 'b"110"  : mword 3
   | RISCV_BGEU => 'b"111"  : mword 3
   end.

Definition encdec_bop_backwards (arg_ : mword 3) : M (bop) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"000"  : mword 3) then returnm RISCV_BEQ
    else if eq_vec b__0 ('b"001"  : mword 3) then returnm RISCV_BNE
    else if eq_vec b__0 ('b"100"  : mword 3) then returnm RISCV_BLT
    else if eq_vec b__0 ('b"101"  : mword 3) then returnm RISCV_BGE
    else if eq_vec b__0 ('b"110"  : mword 3) then returnm RISCV_BLTU
    else if eq_vec b__0 ('b"111"  : mword 3) then returnm RISCV_BGEU
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bop).

Definition encdec_bop_forwards_matches (arg_ : bop) : bool :=
   match arg_ with
   | RISCV_BEQ => true
   | RISCV_BNE => true
   | RISCV_BLT => true
   | RISCV_BGE => true
   | RISCV_BLTU => true
   | RISCV_BGEU => true
   end.

Definition encdec_bop_backwards_matches (arg_ : mword 3) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"000"  : mword 3) then true
   else if eq_vec b__0 ('b"001"  : mword 3) then true
   else if eq_vec b__0 ('b"100"  : mword 3) then true
   else if eq_vec b__0 ('b"101"  : mword 3) then true
   else if eq_vec b__0 ('b"110"  : mword 3) then true
   else if eq_vec b__0 ('b"111"  : mword 3) then true
   else false.

Definition btype_mnemonic_forwards (arg_ : bop) : string :=
   match arg_ with
   | RISCV_BEQ => "beq"
   | RISCV_BNE => "bne"
   | RISCV_BLT => "blt"
   | RISCV_BGE => "bge"
   | RISCV_BLTU => "bltu"
   | RISCV_BGEU => "bgeu"
   end.

Definition btype_mnemonic_backwards (arg_ : string) : M (bop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "beq" then returnm RISCV_BEQ
    else if generic_eq p0_ "bne" then returnm RISCV_BNE
    else if generic_eq p0_ "blt" then returnm RISCV_BLT
    else if generic_eq p0_ "bge" then returnm RISCV_BGE
    else if generic_eq p0_ "bltu" then returnm RISCV_BLTU
    else if generic_eq p0_ "bgeu" then returnm RISCV_BGEU
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bop).

Definition btype_mnemonic_forwards_matches (arg_ : bop) : bool :=
   match arg_ with
   | RISCV_BEQ => true
   | RISCV_BNE => true
   | RISCV_BLT => true
   | RISCV_BGE => true
   | RISCV_BLTU => true
   | RISCV_BGEU => true
   end.

Definition btype_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "beq" then true
   else if generic_eq p0_ "bne" then true
   else if generic_eq p0_ "blt" then true
   else if generic_eq p0_ "bge" then true
   else if generic_eq p0_ "bltu" then true
   else if generic_eq p0_ "bgeu" then true
   else false.

Definition _s781_ (_s782_ : string) : option string :=
   let _s783_ := _s782_ in
   if string_startswith _s783_ "bgeu" then
     match (string_drop _s783_ (projT1 (string_length "bgeu"))) with | s_ => Some s_ end
   else None.

Definition _s777_ (_s778_ : string) : option string :=
   let _s779_ := _s778_ in
   if string_startswith _s779_ "bltu" then
     match (string_drop _s779_ (projT1 (string_length "bltu"))) with | s_ => Some s_ end
   else None.

Definition _s773_ (_s774_ : string) : option string :=
   let _s775_ := _s774_ in
   if string_startswith _s775_ "bge" then
     match (string_drop _s775_ (projT1 (string_length "bge"))) with | s_ => Some s_ end
   else None.

Definition _s769_ (_s770_ : string) : option string :=
   let _s771_ := _s770_ in
   if string_startswith _s771_ "blt" then
     match (string_drop _s771_ (projT1 (string_length "blt"))) with | s_ => Some s_ end
   else None.

Definition _s765_ (_s766_ : string) : option string :=
   let _s767_ := _s766_ in
   if string_startswith _s767_ "bne" then
     match (string_drop _s767_ (projT1 (string_length "bne"))) with | s_ => Some s_ end
   else None.

Definition _s761_ (_s762_ : string) : option string :=
   let _s763_ := _s762_ in
   if string_startswith _s763_ "beq" then
     match (string_drop _s763_ (projT1 (string_length "beq"))) with | s_ => Some s_ end
   else None.

Definition btype_mnemonic_matches_prefix (arg_ : string)
: M (option ((bop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s764_ := arg_ in
   (if match (_s761_ _s764_) with | Some s_ => true | _ => false end then
      (match (_s761_ _s764_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_BEQ, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s765_ _s764_) with | Some s_ => true | _ => false end then
      (match (_s765_ _s764_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_BNE, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s769_ _s764_) with | Some s_ => true | _ => false end then
      (match (_s769_ _s764_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_BLT, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s773_ _s764_) with | Some s_ => true | _ => false end then
      (match (_s773_ _s764_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_BGE, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s777_ _s764_) with | Some s_ => true | _ => false end then
      (match (_s777_ _s764_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_BLTU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s781_ _s764_) with | Some s_ => true | _ => false end then
      (match (_s781_ _s764_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_BGEU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((bop * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_iop_forwards (arg_ : iop) : mword 3 :=
   match arg_ with
   | RISCV_ADDI => 'b"000"  : mword 3
   | RISCV_SLTI => 'b"010"  : mword 3
   | RISCV_SLTIU => 'b"011"  : mword 3
   | RISCV_ANDI => 'b"111"  : mword 3
   | RISCV_ORI => 'b"110"  : mword 3
   | RISCV_XORI => 'b"100"  : mword 3
   end.

Definition encdec_iop_backwards (arg_ : mword 3) : M (iop) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"000"  : mword 3) then returnm RISCV_ADDI
    else if eq_vec b__0 ('b"010"  : mword 3) then returnm RISCV_SLTI
    else if eq_vec b__0 ('b"011"  : mword 3) then returnm RISCV_SLTIU
    else if eq_vec b__0 ('b"111"  : mword 3) then returnm RISCV_ANDI
    else if eq_vec b__0 ('b"110"  : mword 3) then returnm RISCV_ORI
    else if eq_vec b__0 ('b"100"  : mword 3) then returnm RISCV_XORI
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (iop).

Definition encdec_iop_forwards_matches (arg_ : iop) : bool :=
   match arg_ with
   | RISCV_ADDI => true
   | RISCV_SLTI => true
   | RISCV_SLTIU => true
   | RISCV_ANDI => true
   | RISCV_ORI => true
   | RISCV_XORI => true
   end.

Definition encdec_iop_backwards_matches (arg_ : mword 3) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"000"  : mword 3) then true
   else if eq_vec b__0 ('b"010"  : mword 3) then true
   else if eq_vec b__0 ('b"011"  : mword 3) then true
   else if eq_vec b__0 ('b"111"  : mword 3) then true
   else if eq_vec b__0 ('b"110"  : mword 3) then true
   else if eq_vec b__0 ('b"100"  : mword 3) then true
   else false.

Definition itype_mnemonic_forwards (arg_ : iop) : string :=
   match arg_ with
   | RISCV_ADDI => "addi"
   | RISCV_SLTI => "slti"
   | RISCV_SLTIU => "sltiu"
   | RISCV_XORI => "xori"
   | RISCV_ORI => "ori"
   | RISCV_ANDI => "andi"
   end.

Definition itype_mnemonic_backwards (arg_ : string) : M (iop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "addi" then returnm RISCV_ADDI
    else if generic_eq p0_ "slti" then returnm RISCV_SLTI
    else if generic_eq p0_ "sltiu" then returnm RISCV_SLTIU
    else if generic_eq p0_ "xori" then returnm RISCV_XORI
    else if generic_eq p0_ "ori" then returnm RISCV_ORI
    else if generic_eq p0_ "andi" then returnm RISCV_ANDI
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (iop).

Definition itype_mnemonic_forwards_matches (arg_ : iop) : bool :=
   match arg_ with
   | RISCV_ADDI => true
   | RISCV_SLTI => true
   | RISCV_SLTIU => true
   | RISCV_XORI => true
   | RISCV_ORI => true
   | RISCV_ANDI => true
   end.

Definition itype_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "addi" then true
   else if generic_eq p0_ "slti" then true
   else if generic_eq p0_ "sltiu" then true
   else if generic_eq p0_ "xori" then true
   else if generic_eq p0_ "ori" then true
   else if generic_eq p0_ "andi" then true
   else false.

Definition _s805_ (_s806_ : string) : option string :=
   let _s807_ := _s806_ in
   if string_startswith _s807_ "andi" then
     match (string_drop _s807_ (projT1 (string_length "andi"))) with | s_ => Some s_ end
   else None.

Definition _s801_ (_s802_ : string) : option string :=
   let _s803_ := _s802_ in
   if string_startswith _s803_ "ori" then
     match (string_drop _s803_ (projT1 (string_length "ori"))) with | s_ => Some s_ end
   else None.

Definition _s797_ (_s798_ : string) : option string :=
   let _s799_ := _s798_ in
   if string_startswith _s799_ "xori" then
     match (string_drop _s799_ (projT1 (string_length "xori"))) with | s_ => Some s_ end
   else None.

Definition _s793_ (_s794_ : string) : option string :=
   let _s795_ := _s794_ in
   if string_startswith _s795_ "sltiu" then
     match (string_drop _s795_ (projT1 (string_length "sltiu"))) with | s_ => Some s_ end
   else None.

Definition _s789_ (_s790_ : string) : option string :=
   let _s791_ := _s790_ in
   if string_startswith _s791_ "slti" then
     match (string_drop _s791_ (projT1 (string_length "slti"))) with | s_ => Some s_ end
   else None.

Definition _s785_ (_s786_ : string) : option string :=
   let _s787_ := _s786_ in
   if string_startswith _s787_ "addi" then
     match (string_drop _s787_ (projT1 (string_length "addi"))) with | s_ => Some s_ end
   else None.

Definition itype_mnemonic_matches_prefix (arg_ : string)
: M (option ((iop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s788_ := arg_ in
   (if match (_s785_ _s788_) with | Some s_ => true | _ => false end then
      (match (_s785_ _s788_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_ADDI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s789_ _s788_) with | Some s_ => true | _ => false end then
      (match (_s789_ _s788_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLTI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s793_ _s788_) with | Some s_ => true | _ => false end then
      (match (_s793_ _s788_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLTIU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s797_ _s788_) with | Some s_ => true | _ => false end then
      (match (_s797_ _s788_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_XORI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s801_ _s788_) with | Some s_ => true | _ => false end then
      (match (_s801_ _s788_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_ORI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s805_ _s788_) with | Some s_ => true | _ => false end then
      (match (_s805_ _s788_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_ANDI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((iop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((iop * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_sop_forwards (arg_ : sop) : mword 3 :=
   match arg_ with
   | RISCV_SLLI => 'b"001"  : mword 3
   | RISCV_SRLI => 'b"101"  : mword 3
   | RISCV_SRAI => 'b"101"  : mword 3
   end.

Definition encdec_sop_backwards (arg_ : mword 3) : M (sop) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"001"  : mword 3) then returnm RISCV_SLLI
    else if eq_vec b__0 ('b"101"  : mword 3) then returnm RISCV_SRLI
    else if eq_vec b__0 ('b"101"  : mword 3) then returnm RISCV_SRAI
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (sop).

Definition encdec_sop_forwards_matches (arg_ : sop) : bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition encdec_sop_backwards_matches (arg_ : mword 3) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"001"  : mword 3) then true
   else if eq_vec b__0 ('b"101"  : mword 3) then true
   else if eq_vec b__0 ('b"101"  : mword 3) then true
   else false.

Definition shiftiop_mnemonic_forwards (arg_ : sop) : string :=
   match arg_ with | RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" end.

Definition shiftiop_mnemonic_backwards (arg_ : string) : M (sop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "slli" then returnm RISCV_SLLI
    else if generic_eq p0_ "srli" then returnm RISCV_SRLI
    else if generic_eq p0_ "srai" then returnm RISCV_SRAI
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (sop).

Definition shiftiop_mnemonic_forwards_matches (arg_ : sop) : bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition shiftiop_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "slli" then true
   else if generic_eq p0_ "srli" then true
   else if generic_eq p0_ "srai" then true
   else false.

Definition _s817_ (_s818_ : string) : option string :=
   let _s819_ := _s818_ in
   if string_startswith _s819_ "srai" then
     match (string_drop _s819_ (projT1 (string_length "srai"))) with | s_ => Some s_ end
   else None.

Definition _s813_ (_s814_ : string) : option string :=
   let _s815_ := _s814_ in
   if string_startswith _s815_ "srli" then
     match (string_drop _s815_ (projT1 (string_length "srli"))) with | s_ => Some s_ end
   else None.

Definition _s809_ (_s810_ : string) : option string :=
   let _s811_ := _s810_ in
   if string_startswith _s811_ "slli" then
     match (string_drop _s811_ (projT1 (string_length "slli"))) with | s_ => Some s_ end
   else None.

Definition shiftiop_mnemonic_matches_prefix (arg_ : string)
: M (option ((sop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s812_ := arg_ in
   (if match (_s809_ _s812_) with | Some s_ => true | _ => false end then
      (match (_s809_ _s812_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLLI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s813_ _s812_) with | Some s_ => true | _ => false end then
      (match (_s813_ _s812_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRLI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s817_ _s812_) with | Some s_ => true | _ => false end then
      (match (_s817_ _s812_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRAI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((sop * {n : Z & ArithFact (n >=? 0)}))).

Definition rtype_mnemonic_forwards (arg_ : rop) : string :=
   match arg_ with
   | RISCV_ADD => "add"
   | RISCV_SLT => "slt"
   | RISCV_SLTU => "sltu"
   | RISCV_AND => "and"
   | RISCV_OR => "or"
   | RISCV_XOR => "xor"
   | RISCV_SLL => "sll"
   | RISCV_SRL => "srl"
   | RISCV_SUB => "sub"
   | RISCV_SRA => "sra"
   end.

Definition rtype_mnemonic_backwards (arg_ : string) : M (rop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "add" then returnm RISCV_ADD
    else if generic_eq p0_ "slt" then returnm RISCV_SLT
    else if generic_eq p0_ "sltu" then returnm RISCV_SLTU
    else if generic_eq p0_ "and" then returnm RISCV_AND
    else if generic_eq p0_ "or" then returnm RISCV_OR
    else if generic_eq p0_ "xor" then returnm RISCV_XOR
    else if generic_eq p0_ "sll" then returnm RISCV_SLL
    else if generic_eq p0_ "srl" then returnm RISCV_SRL
    else if generic_eq p0_ "sub" then returnm RISCV_SUB
    else if generic_eq p0_ "sra" then returnm RISCV_SRA
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (rop).

Definition rtype_mnemonic_forwards_matches (arg_ : rop) : bool :=
   match arg_ with
   | RISCV_ADD => true
   | RISCV_SLT => true
   | RISCV_SLTU => true
   | RISCV_AND => true
   | RISCV_OR => true
   | RISCV_XOR => true
   | RISCV_SLL => true
   | RISCV_SRL => true
   | RISCV_SUB => true
   | RISCV_SRA => true
   end.

Definition rtype_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "add" then true
   else if generic_eq p0_ "slt" then true
   else if generic_eq p0_ "sltu" then true
   else if generic_eq p0_ "and" then true
   else if generic_eq p0_ "or" then true
   else if generic_eq p0_ "xor" then true
   else if generic_eq p0_ "sll" then true
   else if generic_eq p0_ "srl" then true
   else if generic_eq p0_ "sub" then true
   else if generic_eq p0_ "sra" then true
   else false.

Definition _s857_ (_s858_ : string) : option string :=
   let _s859_ := _s858_ in
   if string_startswith _s859_ "sra" then
     match (string_drop _s859_ (projT1 (string_length "sra"))) with | s_ => Some s_ end
   else None.

Definition _s853_ (_s854_ : string) : option string :=
   let _s855_ := _s854_ in
   if string_startswith _s855_ "sub" then
     match (string_drop _s855_ (projT1 (string_length "sub"))) with | s_ => Some s_ end
   else None.

Definition _s849_ (_s850_ : string) : option string :=
   let _s851_ := _s850_ in
   if string_startswith _s851_ "srl" then
     match (string_drop _s851_ (projT1 (string_length "srl"))) with | s_ => Some s_ end
   else None.

Definition _s845_ (_s846_ : string) : option string :=
   let _s847_ := _s846_ in
   if string_startswith _s847_ "sll" then
     match (string_drop _s847_ (projT1 (string_length "sll"))) with | s_ => Some s_ end
   else None.

Definition _s841_ (_s842_ : string) : option string :=
   let _s843_ := _s842_ in
   if string_startswith _s843_ "xor" then
     match (string_drop _s843_ (projT1 (string_length "xor"))) with | s_ => Some s_ end
   else None.

Definition _s837_ (_s838_ : string) : option string :=
   let _s839_ := _s838_ in
   if string_startswith _s839_ "or" then
     match (string_drop _s839_ (projT1 (string_length "or"))) with | s_ => Some s_ end
   else None.

Definition _s833_ (_s834_ : string) : option string :=
   let _s835_ := _s834_ in
   if string_startswith _s835_ "and" then
     match (string_drop _s835_ (projT1 (string_length "and"))) with | s_ => Some s_ end
   else None.

Definition _s829_ (_s830_ : string) : option string :=
   let _s831_ := _s830_ in
   if string_startswith _s831_ "sltu" then
     match (string_drop _s831_ (projT1 (string_length "sltu"))) with | s_ => Some s_ end
   else None.

Definition _s825_ (_s826_ : string) : option string :=
   let _s827_ := _s826_ in
   if string_startswith _s827_ "slt" then
     match (string_drop _s827_ (projT1 (string_length "slt"))) with | s_ => Some s_ end
   else None.

Definition _s821_ (_s822_ : string) : option string :=
   let _s823_ := _s822_ in
   if string_startswith _s823_ "add" then
     match (string_drop _s823_ (projT1 (string_length "add"))) with | s_ => Some s_ end
   else None.

Definition rtype_mnemonic_matches_prefix (arg_ : string)
: M (option ((rop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s824_ := arg_ in
   (if match (_s821_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s821_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_ADD, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s825_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s825_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLT, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s829_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s829_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLTU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s833_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s833_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_AND, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s837_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s837_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_OR, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s841_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s841_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_XOR, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s845_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s845_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLL, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s849_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s849_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRL, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s853_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s853_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SUB, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s857_ _s824_) with | Some s_ => true | _ => false end then
      (match (_s857_ _s824_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRA, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((rop * {n : Z & ArithFact (n >=? 0)}))).

Definition extend_value {n : Z} (is_unsigned : bool) (value : MemoryOpResult (mword (8 * n)))
`{ArithFact ((0 <? n) && (n <=? 4))}
: MemoryOpResult (mword 32) :=
   match value with
   | MemValue v =>
      MemValue (if sumbool_of_bool is_unsigned then EXTZ 32 v else (EXTS 32 v)  : xlenbits)
   | MemException e => MemException e
   end.

Definition process_load {n : Z}
(rd : mword 5) (vaddr : mword 32) (value : MemoryOpResult (mword (8 * n))) (is_unsigned : bool)
`{ArithFact ((0 <? n) && (n <=? 4))}
: M (Retired) :=
   (match (extend_value is_unsigned value) with
    | MemValue result => (wX_bits rd result) >> returnm RETIRE_SUCCESS
    | MemException e => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
    end)
    : M (Retired).

Definition check_misaligned (vaddr : mword 32) (width : word_width) : bool :=
   if plat_enable_misaligned_access tt then false
   else
     match width with
     | BYTE => false
     | HALF => eq_bit (access_vec_dec vaddr 0) B1
     | WORD => orb (eq_bit (access_vec_dec vaddr 0) B1) (eq_bit (access_vec_dec vaddr 1) B1)
     | DOUBLE =>
        orb (eq_bit (access_vec_dec vaddr 0) B1)
          (orb (eq_bit (access_vec_dec vaddr 1) B1) (eq_bit (access_vec_dec vaddr 2) B1))
     end.

Definition maybe_aq_forwards (arg_ : bool) : string :=
   match arg_ with | true => ".aq" | false => "" end.

Definition maybe_aq_backwards (arg_ : string) : M (bool) :=
   let p0_ := arg_ in
   (if generic_eq p0_ ".aq" then returnm true
    else if generic_eq p0_ "" then returnm false
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition maybe_aq_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_aq_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ ".aq" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s865_ (_s866_ : string) : option string :=
   let _s867_ := _s866_ in
   if string_startswith _s867_ "" then
     match (string_drop _s867_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s861_ (_s862_ : string) : option string :=
   let _s863_ := _s862_ in
   if string_startswith _s863_ ".aq" then
     match (string_drop _s863_ (projT1 (string_length ".aq"))) with | s_ => Some s_ end
   else None.

Definition maybe_aq_matches_prefix (arg_ : string)
: M (option ((bool * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s864_ := arg_ in
   (if match (_s861_ _s864_) with | Some s_ => true | _ => false end then
      (match (_s861_ _s864_) with
       | Some s_ =>
          returnm (Some
                     (true, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s865_ _s864_) with | Some s_ => true | _ => false end then
      (match (_s865_ _s864_) with
       | Some s_ =>
          returnm (Some
                     (false, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((bool * {n : Z & ArithFact (n >=? 0)}))).

Definition maybe_rl_forwards (arg_ : bool) : string :=
   match arg_ with | true => ".rl" | false => "" end.

Definition maybe_rl_backwards (arg_ : string) : M (bool) :=
   let p0_ := arg_ in
   (if generic_eq p0_ ".rl" then returnm true
    else if generic_eq p0_ "" then returnm false
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition maybe_rl_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_rl_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ ".rl" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s873_ (_s874_ : string) : option string :=
   let _s875_ := _s874_ in
   if string_startswith _s875_ "" then
     match (string_drop _s875_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s869_ (_s870_ : string) : option string :=
   let _s871_ := _s870_ in
   if string_startswith _s871_ ".rl" then
     match (string_drop _s871_ (projT1 (string_length ".rl"))) with | s_ => Some s_ end
   else None.

Definition maybe_rl_matches_prefix (arg_ : string)
: M (option ((bool * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s872_ := arg_ in
   (if match (_s869_ _s872_) with | Some s_ => true | _ => false end then
      (match (_s869_ _s872_) with
       | Some s_ =>
          returnm (Some
                     (true, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s873_ _s872_) with | Some s_ => true | _ => false end then
      (match (_s873_ _s872_) with
       | Some s_ =>
          returnm (Some
                     (false, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((bool * {n : Z & ArithFact (n >=? 0)}))).

Definition maybe_u_forwards (arg_ : bool) : string :=
   match arg_ with | true => "u" | false => "" end.

Definition maybe_u_backwards (arg_ : string) : M (bool) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "u" then returnm true
    else if generic_eq p0_ "" then returnm false
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition maybe_u_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_u_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "u" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s881_ (_s882_ : string) : option string :=
   let _s883_ := _s882_ in
   if string_startswith _s883_ "" then
     match (string_drop _s883_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s877_ (_s878_ : string) : option string :=
   let _s879_ := _s878_ in
   if string_startswith _s879_ "u" then
     match (string_drop _s879_ (projT1 (string_length "u"))) with | s_ => Some s_ end
   else None.

Definition maybe_u_matches_prefix (arg_ : string)
: M (option ((bool * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s880_ := arg_ in
   (if match (_s877_ _s880_) with | Some s_ => true | _ => false end then
      (match (_s877_ _s880_) with
       | Some s_ =>
          returnm (Some
                     (true, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s881_ _s880_) with | Some s_ => true | _ => false end then
      (match (_s881_ _s880_) with
       | Some s_ =>
          returnm (Some
                     (false, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((bool * {n : Z & ArithFact (n >=? 0)}))).

Definition shiftw_mnemonic_forwards (arg_ : sop) : string :=
   match arg_ with | RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" end.

Definition shiftw_mnemonic_backwards (arg_ : string) : M (sop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "slli" then returnm RISCV_SLLI
    else if generic_eq p0_ "srli" then returnm RISCV_SRLI
    else if generic_eq p0_ "srai" then returnm RISCV_SRAI
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (sop).

Definition shiftw_mnemonic_forwards_matches (arg_ : sop) : bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition shiftw_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "slli" then true
   else if generic_eq p0_ "srli" then true
   else if generic_eq p0_ "srai" then true
   else false.

Definition _s893_ (_s894_ : string) : option string :=
   let _s895_ := _s894_ in
   if string_startswith _s895_ "srai" then
     match (string_drop _s895_ (projT1 (string_length "srai"))) with | s_ => Some s_ end
   else None.

Definition _s889_ (_s890_ : string) : option string :=
   let _s891_ := _s890_ in
   if string_startswith _s891_ "srli" then
     match (string_drop _s891_ (projT1 (string_length "srli"))) with | s_ => Some s_ end
   else None.

Definition _s885_ (_s886_ : string) : option string :=
   let _s887_ := _s886_ in
   if string_startswith _s887_ "slli" then
     match (string_drop _s887_ (projT1 (string_length "slli"))) with | s_ => Some s_ end
   else None.

Definition shiftw_mnemonic_matches_prefix (arg_ : string)
: M (option ((sop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s888_ := arg_ in
   (if match (_s885_ _s888_) with | Some s_ => true | _ => false end then
      (match (_s885_ _s888_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLLI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s889_ _s888_) with | Some s_ => true | _ => false end then
      (match (_s889_ _s888_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRLI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s893_ _s888_) with | Some s_ => true | _ => false end then
      (match (_s893_ _s888_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRAI, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((sop * {n : Z & ArithFact (n >=? 0)}))).

Definition rtypew_mnemonic_forwards (arg_ : ropw) : string :=
   match arg_ with
   | RISCV_ADDW => "addw"
   | RISCV_SUBW => "subw"
   | RISCV_SLLW => "sllw"
   | RISCV_SRLW => "srlw"
   | RISCV_SRAW => "sraw"
   end.

Definition rtypew_mnemonic_backwards (arg_ : string) : M (ropw) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "addw" then returnm RISCV_ADDW
    else if generic_eq p0_ "subw" then returnm RISCV_SUBW
    else if generic_eq p0_ "sllw" then returnm RISCV_SLLW
    else if generic_eq p0_ "srlw" then returnm RISCV_SRLW
    else if generic_eq p0_ "sraw" then returnm RISCV_SRAW
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (ropw).

Definition rtypew_mnemonic_forwards_matches (arg_ : ropw) : bool :=
   match arg_ with
   | RISCV_ADDW => true
   | RISCV_SUBW => true
   | RISCV_SLLW => true
   | RISCV_SRLW => true
   | RISCV_SRAW => true
   end.

Definition rtypew_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "addw" then true
   else if generic_eq p0_ "subw" then true
   else if generic_eq p0_ "sllw" then true
   else if generic_eq p0_ "srlw" then true
   else if generic_eq p0_ "sraw" then true
   else false.

Definition _s913_ (_s914_ : string) : option string :=
   let _s915_ := _s914_ in
   if string_startswith _s915_ "sraw" then
     match (string_drop _s915_ (projT1 (string_length "sraw"))) with | s_ => Some s_ end
   else None.

Definition _s909_ (_s910_ : string) : option string :=
   let _s911_ := _s910_ in
   if string_startswith _s911_ "srlw" then
     match (string_drop _s911_ (projT1 (string_length "srlw"))) with | s_ => Some s_ end
   else None.

Definition _s905_ (_s906_ : string) : option string :=
   let _s907_ := _s906_ in
   if string_startswith _s907_ "sllw" then
     match (string_drop _s907_ (projT1 (string_length "sllw"))) with | s_ => Some s_ end
   else None.

Definition _s901_ (_s902_ : string) : option string :=
   let _s903_ := _s902_ in
   if string_startswith _s903_ "subw" then
     match (string_drop _s903_ (projT1 (string_length "subw"))) with | s_ => Some s_ end
   else None.

Definition _s897_ (_s898_ : string) : option string :=
   let _s899_ := _s898_ in
   if string_startswith _s899_ "addw" then
     match (string_drop _s899_ (projT1 (string_length "addw"))) with | s_ => Some s_ end
   else None.

Definition rtypew_mnemonic_matches_prefix (arg_ : string)
: M (option ((ropw * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s900_ := arg_ in
   (if match (_s897_ _s900_) with | Some s_ => true | _ => false end then
      (match (_s897_ _s900_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_ADDW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s901_ _s900_) with | Some s_ => true | _ => false end then
      (match (_s901_ _s900_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SUBW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s905_ _s900_) with | Some s_ => true | _ => false end then
      (match (_s905_ _s900_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLLW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s909_ _s900_) with | Some s_ => true | _ => false end then
      (match (_s909_ _s900_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRLW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s913_ _s900_) with | Some s_ => true | _ => false end then
      (match (_s913_ _s900_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRAW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((ropw * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((ropw * {n : Z & ArithFact (n >=? 0)}))).

Definition shiftiwop_mnemonic_forwards (arg_ : sopw) : string :=
   match arg_ with | RISCV_SLLIW => "slliw" | RISCV_SRLIW => "srliw" | RISCV_SRAIW => "sraiw" end.

Definition shiftiwop_mnemonic_backwards (arg_ : string) : M (sopw) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "slliw" then returnm RISCV_SLLIW
    else if generic_eq p0_ "srliw" then returnm RISCV_SRLIW
    else if generic_eq p0_ "sraiw" then returnm RISCV_SRAIW
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (sopw).

Definition shiftiwop_mnemonic_forwards_matches (arg_ : sopw) : bool :=
   match arg_ with | RISCV_SLLIW => true | RISCV_SRLIW => true | RISCV_SRAIW => true end.

Definition shiftiwop_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "slliw" then true
   else if generic_eq p0_ "srliw" then true
   else if generic_eq p0_ "sraiw" then true
   else false.

Definition _s925_ (_s926_ : string) : option string :=
   let _s927_ := _s926_ in
   if string_startswith _s927_ "sraiw" then
     match (string_drop _s927_ (projT1 (string_length "sraiw"))) with | s_ => Some s_ end
   else None.

Definition _s921_ (_s922_ : string) : option string :=
   let _s923_ := _s922_ in
   if string_startswith _s923_ "srliw" then
     match (string_drop _s923_ (projT1 (string_length "srliw"))) with | s_ => Some s_ end
   else None.

Definition _s917_ (_s918_ : string) : option string :=
   let _s919_ := _s918_ in
   if string_startswith _s919_ "slliw" then
     match (string_drop _s919_ (projT1 (string_length "slliw"))) with | s_ => Some s_ end
   else None.

Definition shiftiwop_mnemonic_matches_prefix (arg_ : string)
: M (option ((sopw * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s920_ := arg_ in
   (if match (_s917_ _s920_) with | Some s_ => true | _ => false end then
      (match (_s917_ _s920_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SLLIW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sopw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sopw * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s921_ _s920_) with | Some s_ => true | _ => false end then
      (match (_s921_ _s920_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRLIW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sopw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sopw * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s925_ _s920_) with | Some s_ => true | _ => false end then
      (match (_s925_ _s920_) with
       | Some s_ =>
          returnm (Some
                     (RISCV_SRAIW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((sopw * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((sopw * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((sopw * {n : Z & ArithFact (n >=? 0)}))).

Definition bit_maybe_r_forwards (arg_ : mword 1) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"1"  : mword 1) then returnm "r"
    else if eq_vec b__0 ('b"0"  : mword 1) then returnm ""
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition bit_maybe_r_backwards (arg_ : string) : M (mword 1) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "r" then returnm ('b"1"  : mword 1)
    else if generic_eq p0_ "" then returnm ('b"0"  : mword 1)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 1).

Definition bit_maybe_r_forwards_matches (arg_ : mword 1) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"1"  : mword 1) then true
   else if eq_vec b__0 ('b"0"  : mword 1) then true
   else false.

Definition bit_maybe_r_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "r" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s933_ (_s934_ : string) : option string :=
   let _s935_ := _s934_ in
   if string_startswith _s935_ "" then
     match (string_drop _s935_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s929_ (_s930_ : string) : option string :=
   let _s931_ := _s930_ in
   if string_startswith _s931_ "r" then
     match (string_drop _s931_ (projT1 (string_length "r"))) with | s_ => Some s_ end
   else None.

Definition bit_maybe_r_matches_prefix (arg_ : string)
: M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s932_ := arg_ in
   (if match (_s929_ _s932_) with | Some s_ => true | _ => false end then
      (match (_s929_ _s932_) with
       | Some s_ =>
          returnm (Some
                     ('b"1"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s933_ _s932_) with | Some s_ => true | _ => false end then
      (match (_s933_ _s932_) with
       | Some s_ =>
          returnm (Some
                     ('b"0"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))).

Definition bit_maybe_w_forwards (arg_ : mword 1) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"1"  : mword 1) then returnm "w"
    else if eq_vec b__0 ('b"0"  : mword 1) then returnm ""
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition bit_maybe_w_backwards (arg_ : string) : M (mword 1) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "w" then returnm ('b"1"  : mword 1)
    else if generic_eq p0_ "" then returnm ('b"0"  : mword 1)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 1).

Definition bit_maybe_w_forwards_matches (arg_ : mword 1) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"1"  : mword 1) then true
   else if eq_vec b__0 ('b"0"  : mword 1) then true
   else false.

Definition bit_maybe_w_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "w" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s941_ (_s942_ : string) : option string :=
   let _s943_ := _s942_ in
   if string_startswith _s943_ "" then
     match (string_drop _s943_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s937_ (_s938_ : string) : option string :=
   let _s939_ := _s938_ in
   if string_startswith _s939_ "w" then
     match (string_drop _s939_ (projT1 (string_length "w"))) with | s_ => Some s_ end
   else None.

Definition bit_maybe_w_matches_prefix (arg_ : string)
: M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s940_ := arg_ in
   (if match (_s937_ _s940_) with | Some s_ => true | _ => false end then
      (match (_s937_ _s940_) with
       | Some s_ =>
          returnm (Some
                     ('b"1"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s941_ _s940_) with | Some s_ => true | _ => false end then
      (match (_s941_ _s940_) with
       | Some s_ =>
          returnm (Some
                     ('b"0"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))).

Definition bit_maybe_i_forwards (arg_ : mword 1) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"1"  : mword 1) then returnm "i"
    else if eq_vec b__0 ('b"0"  : mword 1) then returnm ""
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition bit_maybe_i_backwards (arg_ : string) : M (mword 1) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "i" then returnm ('b"1"  : mword 1)
    else if generic_eq p0_ "" then returnm ('b"0"  : mword 1)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 1).

Definition bit_maybe_i_forwards_matches (arg_ : mword 1) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"1"  : mword 1) then true
   else if eq_vec b__0 ('b"0"  : mword 1) then true
   else false.

Definition bit_maybe_i_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "i" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s949_ (_s950_ : string) : option string :=
   let _s951_ := _s950_ in
   if string_startswith _s951_ "" then
     match (string_drop _s951_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s945_ (_s946_ : string) : option string :=
   let _s947_ := _s946_ in
   if string_startswith _s947_ "i" then
     match (string_drop _s947_ (projT1 (string_length "i"))) with | s_ => Some s_ end
   else None.

Definition bit_maybe_i_matches_prefix (arg_ : string)
: M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s948_ := arg_ in
   (if match (_s945_ _s948_) with | Some s_ => true | _ => false end then
      (match (_s945_ _s948_) with
       | Some s_ =>
          returnm (Some
                     ('b"1"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s949_ _s948_) with | Some s_ => true | _ => false end then
      (match (_s949_ _s948_) with
       | Some s_ =>
          returnm (Some
                     ('b"0"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))).

Definition bit_maybe_o_forwards (arg_ : mword 1) : M (string) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"1"  : mword 1) then returnm "o"
    else if eq_vec b__0 ('b"0"  : mword 1) then returnm ""
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (string).

Definition bit_maybe_o_backwards (arg_ : string) : M (mword 1) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "o" then returnm ('b"1"  : mword 1)
    else if generic_eq p0_ "" then returnm ('b"0"  : mword 1)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 1).

Definition bit_maybe_o_forwards_matches (arg_ : mword 1) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"1"  : mword 1) then true
   else if eq_vec b__0 ('b"0"  : mword 1) then true
   else false.

Definition bit_maybe_o_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "o" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s957_ (_s958_ : string) : option string :=
   let _s959_ := _s958_ in
   if string_startswith _s959_ "" then
     match (string_drop _s959_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s953_ (_s954_ : string) : option string :=
   let _s955_ := _s954_ in
   if string_startswith _s955_ "o" then
     match (string_drop _s955_ (projT1 (string_length "o"))) with | s_ => Some s_ end
   else None.

Definition bit_maybe_o_matches_prefix (arg_ : string)
: M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s956_ := arg_ in
   (if match (_s953_ _s956_) with | Some s_ => true | _ => false end then
      (match (_s953_ _s956_) with
       | Some s_ =>
          returnm (Some
                     ('b"1"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s957_ _s956_) with | Some s_ => true | _ => false end then
      (match (_s957_ _s956_) with
       | Some s_ =>
          returnm (Some
                     ('b"0"
                      : mword 1, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 1 * {n : Z & ArithFact (n >=? 0)}))).

Definition fence_bits_forwards (arg_ : mword 4) : M (string) :=
   (match arg_ with
    | v__0 =>
       let i : bits 1 := subrange_vec_dec v__0 3 3 in
       let w : bits 1 := subrange_vec_dec v__0 0 0 in
       let r : bits 1 := subrange_vec_dec v__0 1 1 in
       let o : bits 1 := subrange_vec_dec v__0 2 2 in
       let i : bits 1 := subrange_vec_dec v__0 3 3 in
       (bit_maybe_i_forwards i) >>= fun w__0 : string =>
       (bit_maybe_o_forwards o) >>= fun w__1 : string =>
       (bit_maybe_r_forwards r) >>= fun w__2 : string =>
       (bit_maybe_w_forwards w) >>= fun w__3 : string =>
       returnm (string_append w__0 (string_append w__1 (string_append w__2 (string_append w__3 ""))))
    end)
    : M (string).

Definition _s961_ (_s962_ : string) : M (option ((mword 1 * mword 1 * mword 1 * mword 1))) :=
   (match _s962_ with
    | _s963_ =>
       (bit_maybe_i_matches_prefix _s963_) >>= fun w__0 : option ((mword 1 * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (i, existT _ _s964_ _) =>
           (match (string_drop _s963_ _s964_) with
            | _s965_ =>
               (bit_maybe_o_matches_prefix _s965_) >>= fun w__1 : option ((mword 1 * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (o, existT _ _s966_ _) =>
                   (match (string_drop _s965_ _s966_) with
                    | _s967_ =>
                       (bit_maybe_r_matches_prefix _s967_) >>= fun w__2 : option ((mword 1 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (r, existT _ _s968_ _) =>
                           (match (string_drop _s967_ _s968_) with
                            | _s969_ =>
                               (bit_maybe_w_matches_prefix _s969_) >>= fun w__3 : option ((mword 1 * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               returnm (match w__3 with
                                        | Some (w, existT _ _s970_ _) =>
                                           let p0_ := string_drop _s969_ _s970_ in
                                           if generic_eq p0_ "" then Some (i, o, r, w)
                                           else None
                                        | _ => None
                                        end)
                            end)
                            : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
                        | _ => returnm None
                        end)
                        : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
                    end)
                    : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
                | _ => returnm None
                end)
                : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
            end)
            : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
        | _ => returnm None
        end)
        : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
    end)
    : M (option ((mword 1 * mword 1 * mword 1 * mword 1))).

Definition fence_bits_backwards (arg_ : string) : M (mword 4) :=
   let _s971_ := arg_ in
   (_s961_ _s971_) >>= fun w__0 : option ((mword 1 * mword 1 * mword 1 * mword 1)) =>
   (if match w__0 with | Some (i, o, r, w) => true | _ => false end then
      (_s961_ _s971_) >>= fun w__1 : option ((mword 1 * mword 1 * mword 1 * mword 1)) =>
      (match w__1 with
       | Some (i, o, r, w) =>
          returnm (concat_vec (i  : bits 1)
                     (concat_vec (o  : bits 1) (concat_vec (r  : bits 1) (w  : bits 1))))
       | _ => exit tt  : M (mword 4)
       end)
       : M (mword 4)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (mword 4).

Definition fence_bits_forwards_matches (arg_ : mword 4) : bool :=
   match arg_ with | v__1 => true end.

Definition _s972_ (_s973_ : string) : M (option ((mword 1 * mword 1 * mword 1 * mword 1))) :=
   (match _s973_ with
    | _s974_ =>
       (bit_maybe_i_matches_prefix _s974_) >>= fun w__0 : option ((mword 1 * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (i, existT _ _s975_ _) =>
           (match (string_drop _s974_ _s975_) with
            | _s976_ =>
               (bit_maybe_o_matches_prefix _s976_) >>= fun w__1 : option ((mword 1 * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (o, existT _ _s977_ _) =>
                   (match (string_drop _s976_ _s977_) with
                    | _s978_ =>
                       (bit_maybe_r_matches_prefix _s978_) >>= fun w__2 : option ((mword 1 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (r, existT _ _s979_ _) =>
                           (match (string_drop _s978_ _s979_) with
                            | _s980_ =>
                               (bit_maybe_w_matches_prefix _s980_) >>= fun w__3 : option ((mword 1 * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               returnm (match w__3 with
                                        | Some (w, existT _ _s981_ _) =>
                                           let p0_ := string_drop _s980_ _s981_ in
                                           if generic_eq p0_ "" then Some (i, o, r, w)
                                           else None
                                        | _ => None
                                        end)
                            end)
                            : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
                        | _ => returnm None
                        end)
                        : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
                    end)
                    : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
                | _ => returnm None
                end)
                : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
            end)
            : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
        | _ => returnm None
        end)
        : M (option ((mword 1 * mword 1 * mword 1 * mword 1)))
    end)
    : M (option ((mword 1 * mword 1 * mword 1 * mword 1))).

Definition fence_bits_backwards_matches (arg_ : string) : M (bool) :=
   let _s982_ := arg_ in
   (_s972_ _s982_) >>= fun w__0 : option ((mword 1 * mword 1 * mword 1 * mword 1)) =>
   (if match w__0 with | Some (i, o, r, w) => true | _ => false end then
      (_s972_ _s982_) >>= fun w__1 : option ((mword 1 * mword 1 * mword 1 * mword 1)) =>
      (match w__1 with | Some (i, o, r, w) => returnm true | _ => exit tt  : M (bool) end)
       : M (bool)
    else returnm false)
    : M (bool).

Definition _s983_ (_s984_ : string) : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string))) :=
   (match _s984_ with
    | _s985_ =>
       (bit_maybe_i_matches_prefix _s985_) >>= fun w__0 : option ((mword 1 * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (i, existT _ _s986_ _) =>
           (match (string_drop _s985_ _s986_) with
            | _s987_ =>
               (bit_maybe_o_matches_prefix _s987_) >>= fun w__1 : option ((mword 1 * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (o, existT _ _s988_ _) =>
                   (match (string_drop _s987_ _s988_) with
                    | _s989_ =>
                       (bit_maybe_r_matches_prefix _s989_) >>= fun w__2 : option ((mword 1 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (r, existT _ _s990_ _) =>
                           (match (string_drop _s989_ _s990_) with
                            | _s991_ =>
                               (bit_maybe_w_matches_prefix _s991_) >>= fun w__3 : option ((mword 1 * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               returnm (match w__3 with
                                        | Some (w, existT _ _s992_ _) =>
                                           match (string_drop _s991_ _s992_) with
                                           | s_ => Some (i, o, r, w, s_)
                                           end
                                        | _ => None
                                        end)
                            end)
                            : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string)))
                    end)
                    : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string)))
                | _ => returnm None
                end)
                : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string)))
            end)
            : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string)))
        | _ => returnm None
        end)
        : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string)))
    end)
    : M (option ((mword 1 * mword 1 * mword 1 * mword 1 * string))).

Definition fence_bits_matches_prefix (arg_ : string)
: M (option ((mword 4 * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s993_ := arg_ in
   (_s983_ _s993_) >>= fun w__0 : option ((mword 1 * mword 1 * mword 1 * mword 1 * string)) =>
   (if match w__0 with | Some (i, o, r, w, s_) => true | _ => false end then
      (_s983_ _s993_) >>= fun w__1 : option ((mword 1 * mword 1 * mword 1 * mword 1 * string)) =>
      (match w__1 with
       | Some (i, o, r, w, s_) =>
          returnm (Some
                     (concat_vec (i  : bits 1)
                        (concat_vec (o  : bits 1) (concat_vec (r  : bits 1) (w  : bits 1))), build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((mword 4 * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((mword 4 * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((mword 4 * {n : Z & ArithFact (n >=? 0)}))).

Definition aqrl_str (aq : bool) (rl : bool) : string :=
   match (aq, rl) with
   | (false, false) => ""
   | (false, true) => ".rl"
   | (true, false) => ".aq"
   | (true, true) => ".aqrl"
   end.

Definition lrsc_width_str (width : word_width) : string :=
   match width with | BYTE => ".b" | HALF => ".h" | WORD => ".w" | DOUBLE => ".d" end.

Definition process_loadres {n : Z}
(rd : mword 5) (addr : mword 32) (value : MemoryOpResult (mword (8 * n))) (is_unsigned : bool)
`{ArithFact ((0 <? n) && (n <=? 4))}
: M (Retired) :=
   (match (extend_value is_unsigned value) with
    | MemValue result =>
       let '_ := (load_reservation addr)  : unit in
       (wX_bits rd result) >> returnm RETIRE_SUCCESS
    | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
    end)
    : M (Retired).

Definition encdec_amoop_forwards (arg_ : amoop) : mword 5 :=
   match arg_ with
   | AMOSWAP => 'b"00001"  : mword 5
   | AMOADD => 'b"00000"  : mword 5
   | AMOXOR => 'b"00100"  : mword 5
   | AMOAND => 'b"01100"  : mword 5
   | AMOOR => 'b"01000"  : mword 5
   | AMOMIN => 'b"10000"  : mword 5
   | AMOMAX => 'b"10100"  : mword 5
   | AMOMINU => 'b"11000"  : mword 5
   | AMOMAXU => 'b"11100"  : mword 5
   end.

Definition encdec_amoop_backwards (arg_ : mword 5) : M (amoop) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"00001"  : mword 5) then returnm AMOSWAP
    else if eq_vec b__0 ('b"00000"  : mword 5) then returnm AMOADD
    else if eq_vec b__0 ('b"00100"  : mword 5) then returnm AMOXOR
    else if eq_vec b__0 ('b"01100"  : mword 5) then returnm AMOAND
    else if eq_vec b__0 ('b"01000"  : mword 5) then returnm AMOOR
    else if eq_vec b__0 ('b"10000"  : mword 5) then returnm AMOMIN
    else if eq_vec b__0 ('b"10100"  : mword 5) then returnm AMOMAX
    else if eq_vec b__0 ('b"11000"  : mword 5) then returnm AMOMINU
    else if eq_vec b__0 ('b"11100"  : mword 5) then returnm AMOMAXU
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (amoop).

Definition encdec_amoop_forwards_matches (arg_ : amoop) : bool :=
   match arg_ with
   | AMOSWAP => true
   | AMOADD => true
   | AMOXOR => true
   | AMOAND => true
   | AMOOR => true
   | AMOMIN => true
   | AMOMAX => true
   | AMOMINU => true
   | AMOMAXU => true
   end.

Definition encdec_amoop_backwards_matches (arg_ : mword 5) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"00001"  : mword 5) then true
   else if eq_vec b__0 ('b"00000"  : mword 5) then true
   else if eq_vec b__0 ('b"00100"  : mword 5) then true
   else if eq_vec b__0 ('b"01100"  : mword 5) then true
   else if eq_vec b__0 ('b"01000"  : mword 5) then true
   else if eq_vec b__0 ('b"10000"  : mword 5) then true
   else if eq_vec b__0 ('b"10100"  : mword 5) then true
   else if eq_vec b__0 ('b"11000"  : mword 5) then true
   else if eq_vec b__0 ('b"11100"  : mword 5) then true
   else false.

Definition amo_mnemonic_forwards (arg_ : amoop) : string :=
   match arg_ with
   | AMOSWAP => "amoswap"
   | AMOADD => "amoadd"
   | AMOXOR => "amoxor"
   | AMOAND => "amoand"
   | AMOOR => "amoor"
   | AMOMIN => "amomin"
   | AMOMAX => "amomax"
   | AMOMINU => "amominu"
   | AMOMAXU => "amomaxu"
   end.

Definition amo_mnemonic_backwards (arg_ : string) : M (amoop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "amoswap" then returnm AMOSWAP
    else if generic_eq p0_ "amoadd" then returnm AMOADD
    else if generic_eq p0_ "amoxor" then returnm AMOXOR
    else if generic_eq p0_ "amoand" then returnm AMOAND
    else if generic_eq p0_ "amoor" then returnm AMOOR
    else if generic_eq p0_ "amomin" then returnm AMOMIN
    else if generic_eq p0_ "amomax" then returnm AMOMAX
    else if generic_eq p0_ "amominu" then returnm AMOMINU
    else if generic_eq p0_ "amomaxu" then returnm AMOMAXU
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (amoop).

Definition amo_mnemonic_forwards_matches (arg_ : amoop) : bool :=
   match arg_ with
   | AMOSWAP => true
   | AMOADD => true
   | AMOXOR => true
   | AMOAND => true
   | AMOOR => true
   | AMOMIN => true
   | AMOMAX => true
   | AMOMINU => true
   | AMOMAXU => true
   end.

Definition amo_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "amoswap" then true
   else if generic_eq p0_ "amoadd" then true
   else if generic_eq p0_ "amoxor" then true
   else if generic_eq p0_ "amoand" then true
   else if generic_eq p0_ "amoor" then true
   else if generic_eq p0_ "amomin" then true
   else if generic_eq p0_ "amomax" then true
   else if generic_eq p0_ "amominu" then true
   else if generic_eq p0_ "amomaxu" then true
   else false.

Definition _s1026_ (_s1027_ : string) : option string :=
   let _s1028_ := _s1027_ in
   if string_startswith _s1028_ "amomaxu" then
     match (string_drop _s1028_ (projT1 (string_length "amomaxu"))) with | s_ => Some s_ end
   else None.

Definition _s1022_ (_s1023_ : string) : option string :=
   let _s1024_ := _s1023_ in
   if string_startswith _s1024_ "amominu" then
     match (string_drop _s1024_ (projT1 (string_length "amominu"))) with | s_ => Some s_ end
   else None.

Definition _s1018_ (_s1019_ : string) : option string :=
   let _s1020_ := _s1019_ in
   if string_startswith _s1020_ "amomax" then
     match (string_drop _s1020_ (projT1 (string_length "amomax"))) with | s_ => Some s_ end
   else None.

Definition _s1014_ (_s1015_ : string) : option string :=
   let _s1016_ := _s1015_ in
   if string_startswith _s1016_ "amomin" then
     match (string_drop _s1016_ (projT1 (string_length "amomin"))) with | s_ => Some s_ end
   else None.

Definition _s1010_ (_s1011_ : string) : option string :=
   let _s1012_ := _s1011_ in
   if string_startswith _s1012_ "amoor" then
     match (string_drop _s1012_ (projT1 (string_length "amoor"))) with | s_ => Some s_ end
   else None.

Definition _s1006_ (_s1007_ : string) : option string :=
   let _s1008_ := _s1007_ in
   if string_startswith _s1008_ "amoand" then
     match (string_drop _s1008_ (projT1 (string_length "amoand"))) with | s_ => Some s_ end
   else None.

Definition _s1002_ (_s1003_ : string) : option string :=
   let _s1004_ := _s1003_ in
   if string_startswith _s1004_ "amoxor" then
     match (string_drop _s1004_ (projT1 (string_length "amoxor"))) with | s_ => Some s_ end
   else None.

Definition _s998_ (_s999_ : string) : option string :=
   let _s1000_ := _s999_ in
   if string_startswith _s1000_ "amoadd" then
     match (string_drop _s1000_ (projT1 (string_length "amoadd"))) with | s_ => Some s_ end
   else None.

Definition _s994_ (_s995_ : string) : option string :=
   let _s996_ := _s995_ in
   if string_startswith _s996_ "amoswap" then
     match (string_drop _s996_ (projT1 (string_length "amoswap"))) with | s_ => Some s_ end
   else None.

Definition amo_mnemonic_matches_prefix (arg_ : string)
: M (option ((amoop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s997_ := arg_ in
   (if match (_s994_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s994_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOSWAP, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s998_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s998_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOADD, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1002_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1002_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOXOR, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1006_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1006_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOAND, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1010_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1010_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOOR, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1014_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1014_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOMIN, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1018_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1018_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOMAX, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1022_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1022_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOMINU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1026_ _s997_) with | Some s_ => true | _ => false end then
      (match (_s1026_ _s997_) with
       | Some s_ =>
          returnm (Some
                     (AMOMAXU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((amoop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((amoop * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_mul_op_forwards (arg_ : (bool * bool * bool)) : M (mword 3) :=
   (match arg_ with
    | (false, true, true) => returnm ('b"000"  : mword 3)
    | (true, true, true) => returnm ('b"001"  : mword 3)
    | (true, true, false) => returnm ('b"010"  : mword 3)
    | (true, false, false) => returnm ('b"011"  : mword 3)
    | _ => exit tt  : M (mword 3)
    end)
    : M (mword 3).

Definition encdec_mul_op_backwards (arg_ : mword 3) : M ((bool * bool * bool)) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"000"  : mword 3) then returnm (false, true, true)
    else if eq_vec b__0 ('b"001"  : mword 3) then returnm (true, true, true)
    else if eq_vec b__0 ('b"010"  : mword 3) then returnm (true, true, false)
    else if eq_vec b__0 ('b"011"  : mword 3) then returnm (true, false, false)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M ((bool * bool * bool)).

Definition encdec_mul_op_forwards_matches (arg_ : (bool * bool * bool)) : bool :=
   match arg_ with
   | (false, true, true) => true
   | (true, true, true) => true
   | (true, true, false) => true
   | (true, false, false) => true
   | _ => false
   end.

Definition encdec_mul_op_backwards_matches (arg_ : mword 3) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"000"  : mword 3) then true
   else if eq_vec b__0 ('b"001"  : mword 3) then true
   else if eq_vec b__0 ('b"010"  : mword 3) then true
   else if eq_vec b__0 ('b"011"  : mword 3) then true
   else false.

Definition mul_mnemonic_forwards (arg_ : (bool * bool * bool)) : M (string) :=
   (match arg_ with
    | (false, true, true) => returnm "mul"
    | (true, true, true) => returnm "mulh"
    | (true, true, false) => returnm "mulhsu"
    | (true, false, false) => returnm "mulhu"
    | _ => exit tt  : M (string)
    end)
    : M (string).

Definition mul_mnemonic_backwards (arg_ : string) : M ((bool * bool * bool)) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "mul" then returnm (false, true, true)
    else if generic_eq p0_ "mulh" then returnm (true, true, true)
    else if generic_eq p0_ "mulhsu" then returnm (true, true, false)
    else if generic_eq p0_ "mulhu" then returnm (true, false, false)
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M ((bool * bool * bool)).

Definition mul_mnemonic_forwards_matches (arg_ : (bool * bool * bool)) : bool :=
   match arg_ with
   | (false, true, true) => true
   | (true, true, true) => true
   | (true, true, false) => true
   | (true, false, false) => true
   | _ => false
   end.

Definition mul_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "mul" then true
   else if generic_eq p0_ "mulh" then true
   else if generic_eq p0_ "mulhsu" then true
   else if generic_eq p0_ "mulhu" then true
   else false.

Definition _s1042_ (_s1043_ : string) : option string :=
   let _s1044_ := _s1043_ in
   if string_startswith _s1044_ "mulhu" then
     match (string_drop _s1044_ (projT1 (string_length "mulhu"))) with | s_ => Some s_ end
   else None.

Definition _s1038_ (_s1039_ : string) : option string :=
   let _s1040_ := _s1039_ in
   if string_startswith _s1040_ "mulhsu" then
     match (string_drop _s1040_ (projT1 (string_length "mulhsu"))) with | s_ => Some s_ end
   else None.

Definition _s1034_ (_s1035_ : string) : option string :=
   let _s1036_ := _s1035_ in
   if string_startswith _s1036_ "mulh" then
     match (string_drop _s1036_ (projT1 (string_length "mulh"))) with | s_ => Some s_ end
   else None.

Definition _s1030_ (_s1031_ : string) : option string :=
   let _s1032_ := _s1031_ in
   if string_startswith _s1032_ "mul" then
     match (string_drop _s1032_ (projT1 (string_length "mul"))) with | s_ => Some s_ end
   else None.

Definition mul_mnemonic_matches_prefix (arg_ : string)
: M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1033_ := arg_ in
   (if match (_s1030_ _s1033_) with | Some s_ => true | _ => false end then
      (match (_s1030_ _s1033_) with
       | Some s_ =>
          returnm (Some
                     ((false, true, true), build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1034_ _s1033_) with | Some s_ => true | _ => false end then
      (match (_s1034_ _s1033_) with
       | Some s_ =>
          returnm (Some
                     ((true, true, true), build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1038_ _s1033_) with | Some s_ => true | _ => false end then
      (match (_s1038_ _s1033_) with
       | Some s_ =>
          returnm (Some
                     ((true, true, false), build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1042_ _s1033_) with | Some s_ => true | _ => false end then
      (match (_s1042_ _s1033_) with
       | Some s_ =>
          returnm (Some
                     ((true, false, false), build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option (((bool * bool * bool) * {n : Z & ArithFact (n >=? 0)}))).

Definition maybe_not_u_forwards (arg_ : bool) : string :=
   match arg_ with | false => "u" | true => "" end.

Definition maybe_not_u_backwards (arg_ : string) : M (bool) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "u" then returnm false
    else if generic_eq p0_ "" then returnm true
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition maybe_not_u_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | false => true | true => true end.

Definition maybe_not_u_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "u" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s1050_ (_s1051_ : string) : option string :=
   let _s1052_ := _s1051_ in
   if string_startswith _s1052_ "" then
     match (string_drop _s1052_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s1046_ (_s1047_ : string) : option string :=
   let _s1048_ := _s1047_ in
   if string_startswith _s1048_ "u" then
     match (string_drop _s1048_ (projT1 (string_length "u"))) with | s_ => Some s_ end
   else None.

Definition maybe_not_u_matches_prefix (arg_ : string)
: M (option ((bool * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1049_ := arg_ in
   (if match (_s1046_ _s1049_) with | Some s_ => true | _ => false end then
      (match (_s1046_ _s1049_) with
       | Some s_ =>
          returnm (Some
                     (false, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1050_ _s1049_) with | Some s_ => true | _ => false end then
      (match (_s1050_ _s1049_) with
       | Some s_ =>
          returnm (Some
                     (true, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((bool * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_csrop_forwards (arg_ : csrop) : mword 2 :=
   match arg_ with
   | CSRRW => 'b"01"  : mword 2
   | CSRRS => 'b"10"  : mword 2
   | CSRRC => 'b"11"  : mword 2
   end.

Definition encdec_csrop_backwards (arg_ : mword 2) : M (csrop) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"01"  : mword 2) then returnm CSRRW
    else if eq_vec b__0 ('b"10"  : mword 2) then returnm CSRRS
    else if eq_vec b__0 ('b"11"  : mword 2) then returnm CSRRC
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (csrop).

Definition encdec_csrop_forwards_matches (arg_ : csrop) : bool :=
   match arg_ with | CSRRW => true | CSRRS => true | CSRRC => true end.

Definition encdec_csrop_backwards_matches (arg_ : mword 2) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"01"  : mword 2) then true
   else if eq_vec b__0 ('b"10"  : mword 2) then true
   else if eq_vec b__0 ('b"11"  : mword 2) then true
   else false.

Definition readCSR (csr : mword 12) : M (mword 32) :=
   (match (csr, 32) with
    | (b__0, g__311) =>
       (if eq_vec b__0 (Ox"F11"  : mword 12) then
          ((read_reg mvendorid_ref)  : M (mword 32)) >>= fun w__0 : mword 32 =>
          returnm (EXTZ 32 w__0)
        else if eq_vec b__0 (Ox"F12"  : mword 12) then
          ((read_reg marchid_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"F13"  : mword 12) then
          ((read_reg mimpid_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"F14"  : mword 12) then
          ((read_reg mhartid_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"300"  : mword 12) then
          read_reg mstatus_ref >>= fun w__4 : Mstatus => returnm (_get_Mstatus_bits w__4)
        else if eq_vec b__0 (Ox"301"  : mword 12) then
          read_reg misa_ref >>= fun w__5 : Misa => returnm (_get_Misa_bits w__5)
        else if eq_vec b__0 (Ox"302"  : mword 12) then
          read_reg medeleg_ref >>= fun w__6 : Medeleg => returnm (_get_Medeleg_bits w__6)
        else if eq_vec b__0 (Ox"303"  : mword 12) then
          read_reg mideleg_ref >>= fun w__7 : Minterrupts => returnm (_get_Minterrupts_bits w__7)
        else if eq_vec b__0 (Ox"304"  : mword 12) then
          read_reg mie_ref >>= fun w__8 : Minterrupts => returnm (_get_Minterrupts_bits w__8)
        else if eq_vec b__0 (Ox"305"  : mword 12) then (get_mtvec tt)  : M (mword 32)
        else if eq_vec b__0 (Ox"306"  : mword 12) then
          read_reg mcounteren_ref >>= fun w__10 : Counteren =>
          returnm (EXTZ 32 (_get_Counteren_bits w__10))
        else if eq_vec b__0 (Ox"320"  : mword 12) then
          read_reg mcountinhibit_ref >>= fun w__11 : Counterin =>
          returnm (EXTZ 32 (_get_Counterin_bits w__11))
        else if eq_vec b__0 (Ox"340"  : mword 12) then
          ((read_reg mscratch_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"341"  : mword 12) then
          (get_xret_target Machine) >>= fun w__13 : mword 32 =>
          (pc_alignment_mask tt) >>= fun w__14 : mword 32 => returnm (and_vec w__13 w__14)
        else if eq_vec b__0 (Ox"342"  : mword 12) then
          read_reg mcause_ref >>= fun w__15 : Mcause => returnm (_get_Mcause_bits w__15)
        else if eq_vec b__0 (Ox"343"  : mword 12) then
          ((read_reg mtval_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"344"  : mword 12) then
          read_reg mip_ref >>= fun w__17 : Minterrupts => returnm (_get_Minterrupts_bits w__17)
        else if eq_vec b__0 (Ox"3A0"  : mword 12) then (pmpReadCfgReg 0)  : M (mword 32)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"3A1"  : mword 12)) (Z.eqb g__311 32)) then
          (pmpReadCfgReg 1)
           : M (mword 32)
        else if eq_vec b__0 (Ox"3A2"  : mword 12) then (pmpReadCfgReg 2)  : M (mword 32)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"3A3"  : mword 12)) (Z.eqb g__311 32)) then
          (pmpReadCfgReg 3)
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B0"  : mword 12) then
          ((read_reg pmpaddr0_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B1"  : mword 12) then
          ((read_reg pmpaddr1_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B2"  : mword 12) then
          ((read_reg pmpaddr2_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B3"  : mword 12) then
          ((read_reg pmpaddr3_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B4"  : mword 12) then
          ((read_reg pmpaddr4_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B5"  : mword 12) then
          ((read_reg pmpaddr5_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B6"  : mword 12) then
          ((read_reg pmpaddr6_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B7"  : mword 12) then
          ((read_reg pmpaddr7_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B8"  : mword 12) then
          ((read_reg pmpaddr8_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3B9"  : mword 12) then
          ((read_reg pmpaddr9_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3BA"  : mword 12) then
          ((read_reg pmpaddr10_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3BB"  : mword 12) then
          ((read_reg pmpaddr11_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3BC"  : mword 12) then
          ((read_reg pmpaddr12_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3BD"  : mword 12) then
          ((read_reg pmpaddr13_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3BE"  : mword 12) then
          ((read_reg pmpaddr14_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"3BF"  : mword 12) then
          ((read_reg pmpaddr15_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"B00"  : mword 12) then
          ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__38 : mword 64 =>
          returnm (subrange_vec_dec w__38 (Z.sub 32 1) 0)
        else if eq_vec b__0 (Ox"B02"  : mword 12) then
          ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__39 : mword 64 =>
          returnm (subrange_vec_dec w__39 (Z.sub 32 1) 0)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"B80"  : mword 12)) (Z.eqb g__311 32)) then
          ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__40 : mword 64 =>
          returnm (subrange_vec_dec w__40 63 32)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"B82"  : mword 12)) (Z.eqb g__311 32)) then
          ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__41 : mword 64 =>
          returnm (subrange_vec_dec w__41 63 32)
        else if eq_vec b__0 (Ox"7A0"  : mword 12) then
          ((read_reg tselect_ref)  : M (mword 32)) >>= fun w__42 : mword 32 =>
          returnm (not_vec w__42)
        else if eq_vec b__0 (Ox"100"  : mword 12) then
          read_reg mstatus_ref >>= fun w__43 : Mstatus =>
          returnm (_get_Sstatus_bits (lower_mstatus w__43))
        else if eq_vec b__0 (Ox"102"  : mword 12) then
          read_reg sedeleg_ref >>= fun w__44 : Sedeleg => returnm (_get_Sedeleg_bits w__44)
        else if eq_vec b__0 (Ox"103"  : mword 12) then
          read_reg sideleg_ref >>= fun w__45 : Sinterrupts => returnm (_get_Sinterrupts_bits w__45)
        else if eq_vec b__0 (Ox"104"  : mword 12) then
          read_reg mie_ref >>= fun w__46 : Minterrupts =>
          read_reg mideleg_ref >>= fun w__47 : Minterrupts =>
          returnm (_get_Sinterrupts_bits (lower_mie w__46 w__47))
        else if eq_vec b__0 (Ox"105"  : mword 12) then (get_stvec tt)  : M (mword 32)
        else if eq_vec b__0 (Ox"106"  : mword 12) then
          read_reg scounteren_ref >>= fun w__49 : Counteren =>
          returnm (EXTZ 32 (_get_Counteren_bits w__49))
        else if eq_vec b__0 (Ox"140"  : mword 12) then
          ((read_reg sscratch_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"141"  : mword 12) then
          (get_xret_target Supervisor) >>= fun w__51 : mword 32 =>
          (pc_alignment_mask tt) >>= fun w__52 : mword 32 => returnm (and_vec w__51 w__52)
        else if eq_vec b__0 (Ox"142"  : mword 12) then
          read_reg scause_ref >>= fun w__53 : Mcause => returnm (_get_Mcause_bits w__53)
        else if eq_vec b__0 (Ox"143"  : mword 12) then
          ((read_reg stval_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"144"  : mword 12) then
          read_reg mip_ref >>= fun w__55 : Minterrupts =>
          read_reg mideleg_ref >>= fun w__56 : Minterrupts =>
          returnm (_get_Sinterrupts_bits (lower_mip w__55 w__56))
        else if eq_vec b__0 (Ox"180"  : mword 12) then
          ((read_reg satp_ref)  : M (mword 32))
           : M (mword 32)
        else if eq_vec b__0 (Ox"C00"  : mword 12) then
          ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__58 : mword 64 =>
          returnm (subrange_vec_dec w__58 (Z.sub 32 1) 0)
        else if eq_vec b__0 (Ox"C01"  : mword 12) then
          ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__59 : mword 64 =>
          returnm (subrange_vec_dec w__59 (Z.sub 32 1) 0)
        else if eq_vec b__0 (Ox"C02"  : mword 12) then
          ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__60 : mword 64 =>
          returnm (subrange_vec_dec w__60 (Z.sub 32 1) 0)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"C80"  : mword 12)) (Z.eqb g__311 32)) then
          ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__61 : mword 64 =>
          returnm (subrange_vec_dec w__61 63 32)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"C81"  : mword 12)) (Z.eqb g__311 32)) then
          ((read_reg mtime_ref)  : M (mword 64)) >>= fun w__62 : mword 64 =>
          returnm (subrange_vec_dec w__62 63 32)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"C82"  : mword 12)) (Z.eqb g__311 32)) then
          ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__63 : mword 64 =>
          returnm (subrange_vec_dec w__63 63 32)
        else
          (ext_read_CSR csr) >>= fun w__64 : option (mword 32) =>
          returnm (match w__64 with
                   | Some res => res
                   | None =>
                      let '_ := (print_bits "unhandled read to CSR " csr)  : unit in
                      EXTZ 32 (Ox"0"  : mword 4)
                   end))
        : M (mword 32)
    end) >>= fun res : xlenbits =>
   let '_ :=
     (if get_config_print_reg tt then
        print_endline
          (String.append "CSR "
             (String.append (csr_name csr) (String.append " -> " (string_of_bits res))))
      else tt)
      : unit in
   returnm res.

Definition writeCSR (csr : mword 12) (value : mword 32) : M (unit) :=
   (match (csr, 32) with
    | (b__0, g__310) =>
       (if eq_vec b__0 (Ox"300"  : mword 12) then
          read_reg mstatus_ref >>= fun w__0 : Mstatus =>
          (legalize_mstatus w__0 value) >>= fun w__1 : Mstatus =>
          write_reg mstatus_ref w__1 >>
          read_reg mstatus_ref >>= fun w__2 : Mstatus => returnm (Some (_get_Mstatus_bits w__2))
        else if eq_vec b__0 (Ox"301"  : mword 12) then
          read_reg misa_ref >>= fun w__3 : Misa =>
          (legalize_misa w__3 value) >>= fun w__4 : Misa =>
          write_reg misa_ref w__4 >>
          read_reg misa_ref >>= fun w__5 : Misa => returnm (Some (_get_Misa_bits w__5))
        else if eq_vec b__0 (Ox"302"  : mword 12) then
          read_reg medeleg_ref >>= fun w__6 : Medeleg =>
          write_reg medeleg_ref (legalize_medeleg w__6 value) >>
          read_reg medeleg_ref >>= fun w__7 : Medeleg => returnm (Some (_get_Medeleg_bits w__7))
        else if eq_vec b__0 (Ox"303"  : mword 12) then
          read_reg mideleg_ref >>= fun w__8 : Minterrupts =>
          write_reg mideleg_ref (legalize_mideleg w__8 value) >>
          read_reg mideleg_ref >>= fun w__9 : Minterrupts =>
          returnm (Some (_get_Minterrupts_bits w__9))
        else if eq_vec b__0 (Ox"304"  : mword 12) then
          read_reg mie_ref >>= fun w__10 : Minterrupts =>
          (legalize_mie w__10 value) >>= fun w__11 : Minterrupts =>
          write_reg mie_ref w__11 >>
          read_reg mie_ref >>= fun w__12 : Minterrupts =>
          returnm (Some (_get_Minterrupts_bits w__12))
        else if eq_vec b__0 (Ox"305"  : mword 12) then
          (set_mtvec value) >>= fun w__13 : mword 32 => returnm (Some w__13)
        else if eq_vec b__0 (Ox"306"  : mword 12) then
          read_reg mcounteren_ref >>= fun w__14 : Counteren =>
          write_reg mcounteren_ref (legalize_mcounteren w__14 value) >>
          read_reg mcounteren_ref >>= fun w__15 : Counteren =>
          returnm (Some (EXTZ 32 (_get_Counteren_bits w__15)))
        else if eq_vec b__0 (Ox"320"  : mword 12) then
          read_reg mcountinhibit_ref >>= fun w__16 : Counterin =>
          write_reg mcountinhibit_ref (legalize_mcountinhibit w__16 value) >>
          read_reg mcountinhibit_ref >>= fun w__17 : Counterin =>
          returnm (Some (EXTZ 32 (_get_Counterin_bits w__17)))
        else if eq_vec b__0 (Ox"340"  : mword 12) then
          write_reg mscratch_ref value >>
          ((read_reg mscratch_ref)  : M (mword 32)) >>= fun w__18 : mword 32 => returnm (Some w__18)
        else if eq_vec b__0 (Ox"341"  : mword 12) then
          (set_xret_target Machine value) >>= fun w__19 : mword 32 => returnm (Some w__19)
        else if eq_vec b__0 (Ox"342"  : mword 12) then
          (_set_Mcause_bits mcause_ref value) >>
          read_reg mcause_ref >>= fun w__20 : Mcause => returnm (Some (_get_Mcause_bits w__20))
        else if eq_vec b__0 (Ox"343"  : mword 12) then
          write_reg mtval_ref value >>
          ((read_reg mtval_ref)  : M (mword 32)) >>= fun w__21 : mword 32 => returnm (Some w__21)
        else if eq_vec b__0 (Ox"344"  : mword 12) then
          read_reg mip_ref >>= fun w__22 : Minterrupts =>
          (legalize_mip w__22 value) >>= fun w__23 : Minterrupts =>
          write_reg mip_ref w__23 >>
          read_reg mip_ref >>= fun w__24 : Minterrupts =>
          returnm (Some (_get_Minterrupts_bits w__24))
        else if eq_vec b__0 (Ox"3A0"  : mword 12) then
          (pmpWriteCfgReg 0 value) >>
          (pmpReadCfgReg 0) >>= fun w__25 : mword 32 => returnm (Some w__25)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"3A1"  : mword 12)) (Z.eqb g__310 32)) then
          (pmpWriteCfgReg 1 value) >>
          (pmpReadCfgReg 1) >>= fun w__26 : mword 32 => returnm (Some w__26)
        else if eq_vec b__0 (Ox"3A2"  : mword 12) then
          (pmpWriteCfgReg 2 value) >>
          (pmpReadCfgReg 2) >>= fun w__27 : mword 32 => returnm (Some w__27)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"3A3"  : mword 12)) (Z.eqb g__310 32)) then
          (pmpWriteCfgReg 3 value) >>
          (pmpReadCfgReg 3) >>= fun w__28 : mword 32 => returnm (Some w__28)
        else if eq_vec b__0 (Ox"3B0"  : mword 12) then
          read_reg pmp0cfg_ref >>= fun w__29 : Pmpcfg_ent =>
          read_reg pmp1cfg_ref >>= fun w__30 : Pmpcfg_ent =>
          (pmpTORLocked w__30) >>= fun w__31 : bool =>
          ((read_reg pmpaddr0_ref)  : M (mword 32)) >>= fun w__32 : mword 32 =>
          write_reg pmpaddr0_ref (pmpWriteAddr (pmpLocked w__29) w__31 w__32 value) >>
          ((read_reg pmpaddr0_ref)  : M (mword 32)) >>= fun w__33 : mword 32 => returnm (Some w__33)
        else if eq_vec b__0 (Ox"3B1"  : mword 12) then
          read_reg pmp1cfg_ref >>= fun w__34 : Pmpcfg_ent =>
          read_reg pmp2cfg_ref >>= fun w__35 : Pmpcfg_ent =>
          (pmpTORLocked w__35) >>= fun w__36 : bool =>
          ((read_reg pmpaddr1_ref)  : M (mword 32)) >>= fun w__37 : mword 32 =>
          write_reg pmpaddr1_ref (pmpWriteAddr (pmpLocked w__34) w__36 w__37 value) >>
          ((read_reg pmpaddr1_ref)  : M (mword 32)) >>= fun w__38 : mword 32 => returnm (Some w__38)
        else if eq_vec b__0 (Ox"3B2"  : mword 12) then
          read_reg pmp2cfg_ref >>= fun w__39 : Pmpcfg_ent =>
          read_reg pmp3cfg_ref >>= fun w__40 : Pmpcfg_ent =>
          (pmpTORLocked w__40) >>= fun w__41 : bool =>
          ((read_reg pmpaddr2_ref)  : M (mword 32)) >>= fun w__42 : mword 32 =>
          write_reg pmpaddr2_ref (pmpWriteAddr (pmpLocked w__39) w__41 w__42 value) >>
          ((read_reg pmpaddr2_ref)  : M (mword 32)) >>= fun w__43 : mword 32 => returnm (Some w__43)
        else if eq_vec b__0 (Ox"3B3"  : mword 12) then
          read_reg pmp3cfg_ref >>= fun w__44 : Pmpcfg_ent =>
          read_reg pmp4cfg_ref >>= fun w__45 : Pmpcfg_ent =>
          (pmpTORLocked w__45) >>= fun w__46 : bool =>
          ((read_reg pmpaddr3_ref)  : M (mword 32)) >>= fun w__47 : mword 32 =>
          write_reg pmpaddr3_ref (pmpWriteAddr (pmpLocked w__44) w__46 w__47 value) >>
          ((read_reg pmpaddr3_ref)  : M (mword 32)) >>= fun w__48 : mword 32 => returnm (Some w__48)
        else if eq_vec b__0 (Ox"3B4"  : mword 12) then
          read_reg pmp4cfg_ref >>= fun w__49 : Pmpcfg_ent =>
          read_reg pmp5cfg_ref >>= fun w__50 : Pmpcfg_ent =>
          (pmpTORLocked w__50) >>= fun w__51 : bool =>
          ((read_reg pmpaddr4_ref)  : M (mword 32)) >>= fun w__52 : mword 32 =>
          write_reg pmpaddr4_ref (pmpWriteAddr (pmpLocked w__49) w__51 w__52 value) >>
          ((read_reg pmpaddr4_ref)  : M (mword 32)) >>= fun w__53 : mword 32 => returnm (Some w__53)
        else if eq_vec b__0 (Ox"3B5"  : mword 12) then
          read_reg pmp5cfg_ref >>= fun w__54 : Pmpcfg_ent =>
          read_reg pmp6cfg_ref >>= fun w__55 : Pmpcfg_ent =>
          (pmpTORLocked w__55) >>= fun w__56 : bool =>
          ((read_reg pmpaddr5_ref)  : M (mword 32)) >>= fun w__57 : mword 32 =>
          write_reg pmpaddr5_ref (pmpWriteAddr (pmpLocked w__54) w__56 w__57 value) >>
          ((read_reg pmpaddr5_ref)  : M (mword 32)) >>= fun w__58 : mword 32 => returnm (Some w__58)
        else if eq_vec b__0 (Ox"3B6"  : mword 12) then
          read_reg pmp6cfg_ref >>= fun w__59 : Pmpcfg_ent =>
          read_reg pmp7cfg_ref >>= fun w__60 : Pmpcfg_ent =>
          (pmpTORLocked w__60) >>= fun w__61 : bool =>
          ((read_reg pmpaddr6_ref)  : M (mword 32)) >>= fun w__62 : mword 32 =>
          write_reg pmpaddr6_ref (pmpWriteAddr (pmpLocked w__59) w__61 w__62 value) >>
          ((read_reg pmpaddr6_ref)  : M (mword 32)) >>= fun w__63 : mword 32 => returnm (Some w__63)
        else if eq_vec b__0 (Ox"3B7"  : mword 12) then
          read_reg pmp7cfg_ref >>= fun w__64 : Pmpcfg_ent =>
          read_reg pmp8cfg_ref >>= fun w__65 : Pmpcfg_ent =>
          (pmpTORLocked w__65) >>= fun w__66 : bool =>
          ((read_reg pmpaddr7_ref)  : M (mword 32)) >>= fun w__67 : mword 32 =>
          write_reg pmpaddr7_ref (pmpWriteAddr (pmpLocked w__64) w__66 w__67 value) >>
          ((read_reg pmpaddr7_ref)  : M (mword 32)) >>= fun w__68 : mword 32 => returnm (Some w__68)
        else if eq_vec b__0 (Ox"3B8"  : mword 12) then
          read_reg pmp8cfg_ref >>= fun w__69 : Pmpcfg_ent =>
          read_reg pmp9cfg_ref >>= fun w__70 : Pmpcfg_ent =>
          (pmpTORLocked w__70) >>= fun w__71 : bool =>
          ((read_reg pmpaddr8_ref)  : M (mword 32)) >>= fun w__72 : mword 32 =>
          write_reg pmpaddr8_ref (pmpWriteAddr (pmpLocked w__69) w__71 w__72 value) >>
          ((read_reg pmpaddr8_ref)  : M (mword 32)) >>= fun w__73 : mword 32 => returnm (Some w__73)
        else if eq_vec b__0 (Ox"3B9"  : mword 12) then
          read_reg pmp9cfg_ref >>= fun w__74 : Pmpcfg_ent =>
          read_reg pmp10cfg_ref >>= fun w__75 : Pmpcfg_ent =>
          (pmpTORLocked w__75) >>= fun w__76 : bool =>
          ((read_reg pmpaddr9_ref)  : M (mword 32)) >>= fun w__77 : mword 32 =>
          write_reg pmpaddr9_ref (pmpWriteAddr (pmpLocked w__74) w__76 w__77 value) >>
          ((read_reg pmpaddr9_ref)  : M (mword 32)) >>= fun w__78 : mword 32 => returnm (Some w__78)
        else if eq_vec b__0 (Ox"3BA"  : mword 12) then
          read_reg pmp10cfg_ref >>= fun w__79 : Pmpcfg_ent =>
          read_reg pmp11cfg_ref >>= fun w__80 : Pmpcfg_ent =>
          (pmpTORLocked w__80) >>= fun w__81 : bool =>
          ((read_reg pmpaddr10_ref)  : M (mword 32)) >>= fun w__82 : mword 32 =>
          write_reg pmpaddr10_ref (pmpWriteAddr (pmpLocked w__79) w__81 w__82 value) >>
          ((read_reg pmpaddr10_ref)  : M (mword 32)) >>= fun w__83 : mword 32 =>
          returnm (Some w__83)
        else if eq_vec b__0 (Ox"3BB"  : mword 12) then
          read_reg pmp11cfg_ref >>= fun w__84 : Pmpcfg_ent =>
          read_reg pmp12cfg_ref >>= fun w__85 : Pmpcfg_ent =>
          (pmpTORLocked w__85) >>= fun w__86 : bool =>
          ((read_reg pmpaddr11_ref)  : M (mword 32)) >>= fun w__87 : mword 32 =>
          write_reg pmpaddr11_ref (pmpWriteAddr (pmpLocked w__84) w__86 w__87 value) >>
          ((read_reg pmpaddr11_ref)  : M (mword 32)) >>= fun w__88 : mword 32 =>
          returnm (Some w__88)
        else if eq_vec b__0 (Ox"3BC"  : mword 12) then
          read_reg pmp12cfg_ref >>= fun w__89 : Pmpcfg_ent =>
          read_reg pmp13cfg_ref >>= fun w__90 : Pmpcfg_ent =>
          (pmpTORLocked w__90) >>= fun w__91 : bool =>
          ((read_reg pmpaddr12_ref)  : M (mword 32)) >>= fun w__92 : mword 32 =>
          write_reg pmpaddr12_ref (pmpWriteAddr (pmpLocked w__89) w__91 w__92 value) >>
          ((read_reg pmpaddr12_ref)  : M (mword 32)) >>= fun w__93 : mword 32 =>
          returnm (Some w__93)
        else if eq_vec b__0 (Ox"3BD"  : mword 12) then
          read_reg pmp13cfg_ref >>= fun w__94 : Pmpcfg_ent =>
          read_reg pmp14cfg_ref >>= fun w__95 : Pmpcfg_ent =>
          (pmpTORLocked w__95) >>= fun w__96 : bool =>
          ((read_reg pmpaddr13_ref)  : M (mword 32)) >>= fun w__97 : mword 32 =>
          write_reg pmpaddr13_ref (pmpWriteAddr (pmpLocked w__94) w__96 w__97 value) >>
          ((read_reg pmpaddr13_ref)  : M (mword 32)) >>= fun w__98 : mword 32 =>
          returnm (Some w__98)
        else if eq_vec b__0 (Ox"3BE"  : mword 12) then
          read_reg pmp14cfg_ref >>= fun w__99 : Pmpcfg_ent =>
          read_reg pmp15cfg_ref >>= fun w__100 : Pmpcfg_ent =>
          (pmpTORLocked w__100) >>= fun w__101 : bool =>
          ((read_reg pmpaddr14_ref)  : M (mword 32)) >>= fun w__102 : mword 32 =>
          write_reg pmpaddr14_ref (pmpWriteAddr (pmpLocked w__99) w__101 w__102 value) >>
          ((read_reg pmpaddr14_ref)  : M (mword 32)) >>= fun w__103 : mword 32 =>
          returnm (Some w__103)
        else if eq_vec b__0 (Ox"3BF"  : mword 12) then
          read_reg pmp15cfg_ref >>= fun w__104 : Pmpcfg_ent =>
          ((read_reg pmpaddr15_ref)  : M (mword 32)) >>= fun w__105 : mword 32 =>
          write_reg pmpaddr15_ref (pmpWriteAddr (pmpLocked w__104) false w__105 value) >>
          ((read_reg pmpaddr15_ref)  : M (mword 32)) >>= fun w__106 : mword 32 =>
          returnm (Some w__106)
        else if eq_vec b__0 (Ox"B00"  : mword 12) then
          ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__107 : mword 64 =>
          write_reg mcycle_ref (update_subrange_vec_dec w__107 (Z.sub 32 1) 0 value) >>
          returnm (Some value)
        else if eq_vec b__0 (Ox"B02"  : mword 12) then
          ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__108 : mword 64 =>
          write_reg minstret_ref (update_subrange_vec_dec w__108 (Z.sub 32 1) 0 value) >>
          write_reg minstret_written_ref true >> returnm (Some value)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"B80"  : mword 12)) (Z.eqb g__310 32)) then
          ((read_reg mcycle_ref)  : M (mword 64)) >>= fun w__109 : mword 64 =>
          write_reg mcycle_ref (update_subrange_vec_dec w__109 63 32 value) >> returnm (Some value)
        else if sumbool_of_bool (andb (eq_vec b__0 (Ox"B82"  : mword 12)) (Z.eqb g__310 32)) then
          ((read_reg minstret_ref)  : M (mword 64)) >>= fun w__110 : mword 64 =>
          write_reg minstret_ref (update_subrange_vec_dec w__110 63 32 value) >>
          write_reg minstret_written_ref true >> returnm (Some value)
        else if eq_vec b__0 (Ox"7A0"  : mword 12) then
          write_reg tselect_ref value >>
          ((read_reg tselect_ref)  : M (mword 32)) >>= fun w__111 : mword 32 =>
          returnm (Some w__111)
        else if eq_vec b__0 (Ox"100"  : mword 12) then
          read_reg mstatus_ref >>= fun w__112 : Mstatus =>
          (legalize_sstatus w__112 value) >>= fun w__113 : Mstatus =>
          write_reg mstatus_ref w__113 >>
          read_reg mstatus_ref >>= fun w__114 : Mstatus => returnm (Some (_get_Mstatus_bits w__114))
        else if eq_vec b__0 (Ox"102"  : mword 12) then
          read_reg sedeleg_ref >>= fun w__115 : Sedeleg =>
          write_reg sedeleg_ref (legalize_sedeleg w__115 value) >>
          read_reg sedeleg_ref >>= fun w__116 : Sedeleg => returnm (Some (_get_Sedeleg_bits w__116))
        else if eq_vec b__0 (Ox"103"  : mword 12) then
          (_set_Sinterrupts_bits sideleg_ref value) >>
          read_reg sideleg_ref >>= fun w__117 : Sinterrupts =>
          returnm (Some (_get_Sinterrupts_bits w__117))
        else if eq_vec b__0 (Ox"104"  : mword 12) then
          read_reg mie_ref >>= fun w__118 : Minterrupts =>
          read_reg mideleg_ref >>= fun w__119 : Minterrupts =>
          (legalize_sie w__118 w__119 value) >>= fun w__120 : Minterrupts =>
          write_reg mie_ref w__120 >>
          read_reg mie_ref >>= fun w__121 : Minterrupts =>
          returnm (Some (_get_Minterrupts_bits w__121))
        else if eq_vec b__0 (Ox"105"  : mword 12) then
          (set_stvec value) >>= fun w__122 : mword 32 => returnm (Some w__122)
        else if eq_vec b__0 (Ox"106"  : mword 12) then
          read_reg scounteren_ref >>= fun w__123 : Counteren =>
          write_reg scounteren_ref (legalize_scounteren w__123 value) >>
          read_reg scounteren_ref >>= fun w__124 : Counteren =>
          returnm (Some (EXTZ 32 (_get_Counteren_bits w__124)))
        else if eq_vec b__0 (Ox"140"  : mword 12) then
          write_reg sscratch_ref value >>
          ((read_reg sscratch_ref)  : M (mword 32)) >>= fun w__125 : mword 32 =>
          returnm (Some w__125)
        else if eq_vec b__0 (Ox"141"  : mword 12) then
          (set_xret_target Supervisor value) >>= fun w__126 : mword 32 => returnm (Some w__126)
        else if eq_vec b__0 (Ox"142"  : mword 12) then
          (_set_Mcause_bits scause_ref value) >>
          read_reg scause_ref >>= fun w__127 : Mcause => returnm (Some (_get_Mcause_bits w__127))
        else if eq_vec b__0 (Ox"143"  : mword 12) then
          write_reg stval_ref value >>
          ((read_reg stval_ref)  : M (mword 32)) >>= fun w__128 : mword 32 => returnm (Some w__128)
        else if eq_vec b__0 (Ox"144"  : mword 12) then
          read_reg mip_ref >>= fun w__129 : Minterrupts =>
          read_reg mideleg_ref >>= fun w__130 : Minterrupts =>
          (legalize_sip w__129 w__130 value) >>= fun w__131 : Minterrupts =>
          write_reg mip_ref w__131 >>
          read_reg mip_ref >>= fun w__132 : Minterrupts =>
          returnm (Some (_get_Minterrupts_bits w__132))
        else if eq_vec b__0 (Ox"180"  : mword 12) then
          (cur_Architecture tt) >>= fun w__133 : Architecture =>
          ((read_reg satp_ref)  : M (mword 32)) >>= fun w__134 : mword 32 =>
          write_reg satp_ref (legalize_satp w__133 w__134 value) >>
          ((read_reg satp_ref)  : M (mword 32)) >>= fun w__135 : mword 32 => returnm (Some w__135)
        else (ext_write_CSR csr value)  : M (option (mword 32)))
        : M (option (mword 32))
    end) >>= fun res : option xlenbits =>
   returnm (match res with
            | Some v =>
               if get_config_print_reg tt then
                 print_endline
                   (String.append "CSR "
                      (String.append (csr_name csr)
                         (String.append " <- "
                            (String.append (string_of_bits v)
                               (String.append " (input: " (String.append (string_of_bits value) ")"))))))
               else tt
            | None => print_bits "unhandled write to CSR " csr
            end).

Definition maybe_i_forwards (arg_ : bool) : string :=
   match arg_ with | true => "i" | false => "" end.

Definition maybe_i_backwards (arg_ : string) : M (bool) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "i" then returnm true
    else if generic_eq p0_ "" then returnm false
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (bool).

Definition maybe_i_forwards_matches (arg_ : bool) : bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_i_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "i" then true
   else if generic_eq p0_ "" then true
   else false.

Definition _s1058_ (_s1059_ : string) : option string :=
   let _s1060_ := _s1059_ in
   if string_startswith _s1060_ "" then
     match (string_drop _s1060_ (projT1 (string_length ""))) with | s_ => Some s_ end
   else None.

Definition _s1054_ (_s1055_ : string) : option string :=
   let _s1056_ := _s1055_ in
   if string_startswith _s1056_ "i" then
     match (string_drop _s1056_ (projT1 (string_length "i"))) with | s_ => Some s_ end
   else None.

Definition maybe_i_matches_prefix (arg_ : string)
: M (option ((bool * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1057_ := arg_ in
   (if match (_s1054_ _s1057_) with | Some s_ => true | _ => false end then
      (match (_s1054_ _s1057_) with
       | Some s_ =>
          returnm (Some
                     (true, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1058_ _s1057_) with | Some s_ => true | _ => false end then
      (match (_s1058_ _s1057_) with
       | Some s_ =>
          returnm (Some
                     (false, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((bool * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((bool * {n : Z & ArithFact (n >=? 0)}))).

Definition csr_mnemonic_forwards (arg_ : csrop) : string :=
   match arg_ with | CSRRW => "csrrw" | CSRRS => "csrrs" | CSRRC => "csrrc" end.

Definition csr_mnemonic_backwards (arg_ : string) : M (csrop) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "csrrw" then returnm CSRRW
    else if generic_eq p0_ "csrrs" then returnm CSRRS
    else if generic_eq p0_ "csrrc" then returnm CSRRC
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (csrop).

Definition csr_mnemonic_forwards_matches (arg_ : csrop) : bool :=
   match arg_ with | CSRRW => true | CSRRS => true | CSRRC => true end.

Definition csr_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "csrrw" then true
   else if generic_eq p0_ "csrrs" then true
   else if generic_eq p0_ "csrrc" then true
   else false.

Definition _s1070_ (_s1071_ : string) : option string :=
   let _s1072_ := _s1071_ in
   if string_startswith _s1072_ "csrrc" then
     match (string_drop _s1072_ (projT1 (string_length "csrrc"))) with | s_ => Some s_ end
   else None.

Definition _s1066_ (_s1067_ : string) : option string :=
   let _s1068_ := _s1067_ in
   if string_startswith _s1068_ "csrrs" then
     match (string_drop _s1068_ (projT1 (string_length "csrrs"))) with | s_ => Some s_ end
   else None.

Definition _s1062_ (_s1063_ : string) : option string :=
   let _s1064_ := _s1063_ in
   if string_startswith _s1064_ "csrrw" then
     match (string_drop _s1064_ (projT1 (string_length "csrrw"))) with | s_ => Some s_ end
   else None.

Definition csr_mnemonic_matches_prefix (arg_ : string)
: M (option ((csrop * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1065_ := arg_ in
   (if match (_s1062_ _s1065_) with | Some s_ => true | _ => false end then
      (match (_s1062_ _s1065_) with
       | Some s_ =>
          returnm (Some
                     (CSRRW, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((csrop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((csrop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1066_ _s1065_) with | Some s_ => true | _ => false end then
      (match (_s1066_ _s1065_) with
       | Some s_ =>
          returnm (Some
                     (CSRRS, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((csrop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((csrop * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1070_ _s1065_) with | Some s_ => true | _ => false end then
      (match (_s1070_ _s1065_) with
       | Some s_ =>
          returnm (Some
                     (CSRRC, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((csrop * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((csrop * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((csrop * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_rounding_mode_forwards (arg_ : rounding_mode) : mword 3 :=
   match arg_ with
   | RM_RNE => 'b"000"  : mword 3
   | RM_RTZ => 'b"001"  : mword 3
   | RM_RDN => 'b"010"  : mword 3
   | RM_RUP => 'b"011"  : mword 3
   | RM_RMM => 'b"100"  : mword 3
   | RM_DYN => 'b"111"  : mword 3
   end.

Definition encdec_rounding_mode_backwards (arg_ : mword 3) : M (rounding_mode) :=
   let b__0 := arg_ in
   (if eq_vec b__0 ('b"000"  : mword 3) then returnm RM_RNE
    else if eq_vec b__0 ('b"001"  : mword 3) then returnm RM_RTZ
    else if eq_vec b__0 ('b"010"  : mword 3) then returnm RM_RDN
    else if eq_vec b__0 ('b"011"  : mword 3) then returnm RM_RUP
    else if eq_vec b__0 ('b"100"  : mword 3) then returnm RM_RMM
    else if eq_vec b__0 ('b"111"  : mword 3) then returnm RM_DYN
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (rounding_mode).

Definition encdec_rounding_mode_forwards_matches (arg_ : rounding_mode) : bool :=
   match arg_ with
   | RM_RNE => true
   | RM_RTZ => true
   | RM_RDN => true
   | RM_RUP => true
   | RM_RMM => true
   | RM_DYN => true
   end.

Definition encdec_rounding_mode_backwards_matches (arg_ : mword 3) : bool :=
   let b__0 := arg_ in
   if eq_vec b__0 ('b"000"  : mword 3) then true
   else if eq_vec b__0 ('b"001"  : mword 3) then true
   else if eq_vec b__0 ('b"010"  : mword 3) then true
   else if eq_vec b__0 ('b"011"  : mword 3) then true
   else if eq_vec b__0 ('b"100"  : mword 3) then true
   else if eq_vec b__0 ('b"111"  : mword 3) then true
   else false.

Definition frm_mnemonic_forwards (arg_ : rounding_mode) : string :=
   match arg_ with
   | RM_RNE => "rne"
   | RM_RTZ => "rtz"
   | RM_RDN => "rdn"
   | RM_RUP => "rup"
   | RM_RMM => "rmm"
   | RM_DYN => "dyn"
   end.

Definition frm_mnemonic_backwards (arg_ : string) : M (rounding_mode) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "rne" then returnm RM_RNE
    else if generic_eq p0_ "rtz" then returnm RM_RTZ
    else if generic_eq p0_ "rdn" then returnm RM_RDN
    else if generic_eq p0_ "rup" then returnm RM_RUP
    else if generic_eq p0_ "rmm" then returnm RM_RMM
    else if generic_eq p0_ "dyn" then returnm RM_DYN
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (rounding_mode).

Definition frm_mnemonic_forwards_matches (arg_ : rounding_mode) : bool :=
   match arg_ with
   | RM_RNE => true
   | RM_RTZ => true
   | RM_RDN => true
   | RM_RUP => true
   | RM_RMM => true
   | RM_DYN => true
   end.

Definition frm_mnemonic_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "rne" then true
   else if generic_eq p0_ "rtz" then true
   else if generic_eq p0_ "rdn" then true
   else if generic_eq p0_ "rup" then true
   else if generic_eq p0_ "rmm" then true
   else if generic_eq p0_ "dyn" then true
   else false.

Definition _s1094_ (_s1095_ : string) : option string :=
   let _s1096_ := _s1095_ in
   if string_startswith _s1096_ "dyn" then
     match (string_drop _s1096_ (projT1 (string_length "dyn"))) with | s_ => Some s_ end
   else None.

Definition _s1090_ (_s1091_ : string) : option string :=
   let _s1092_ := _s1091_ in
   if string_startswith _s1092_ "rmm" then
     match (string_drop _s1092_ (projT1 (string_length "rmm"))) with | s_ => Some s_ end
   else None.

Definition _s1086_ (_s1087_ : string) : option string :=
   let _s1088_ := _s1087_ in
   if string_startswith _s1088_ "rup" then
     match (string_drop _s1088_ (projT1 (string_length "rup"))) with | s_ => Some s_ end
   else None.

Definition _s1082_ (_s1083_ : string) : option string :=
   let _s1084_ := _s1083_ in
   if string_startswith _s1084_ "rdn" then
     match (string_drop _s1084_ (projT1 (string_length "rdn"))) with | s_ => Some s_ end
   else None.

Definition _s1078_ (_s1079_ : string) : option string :=
   let _s1080_ := _s1079_ in
   if string_startswith _s1080_ "rtz" then
     match (string_drop _s1080_ (projT1 (string_length "rtz"))) with | s_ => Some s_ end
   else None.

Definition _s1074_ (_s1075_ : string) : option string :=
   let _s1076_ := _s1075_ in
   if string_startswith _s1076_ "rne" then
     match (string_drop _s1076_ (projT1 (string_length "rne"))) with | s_ => Some s_ end
   else None.

Definition frm_mnemonic_matches_prefix (arg_ : string)
: M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1077_ := arg_ in
   (if match (_s1074_ _s1077_) with | Some s_ => true | _ => false end then
      (match (_s1074_ _s1077_) with
       | Some s_ =>
          returnm (Some
                     (RM_RNE, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1078_ _s1077_) with | Some s_ => true | _ => false end then
      (match (_s1078_ _s1077_) with
       | Some s_ =>
          returnm (Some
                     (RM_RTZ, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1082_ _s1077_) with | Some s_ => true | _ => false end then
      (match (_s1082_ _s1077_) with
       | Some s_ =>
          returnm (Some
                     (RM_RDN, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1086_ _s1077_) with | Some s_ => true | _ => false end then
      (match (_s1086_ _s1077_) with
       | Some s_ =>
          returnm (Some
                     (RM_RUP, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1090_ _s1077_) with | Some s_ => true | _ => false end then
      (match (_s1090_ _s1077_) with
       | Some s_ =>
          returnm (Some
                     (RM_RMM, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1094_ _s1077_) with | Some s_ => true | _ => false end then
      (match (_s1094_ _s1077_) with
       | Some s_ =>
          returnm (Some
                     (RM_DYN, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((rounding_mode * {n : Z & ArithFact (n >=? 0)}))).

Definition select_instr_or_fcsr_rm (instr_rm : rounding_mode) : M (rounding_mode) :=
   (if generic_eq instr_rm RM_DYN then
      read_reg fcsr_ref >>= fun w__0 : Fcsr =>
      (encdec_rounding_mode_backwards (_get_Fcsr_FRM w__0))
       : M (rounding_mode)
    else returnm instr_rm)
    : M (rounding_mode).

Definition nxFlag '(tt : unit) : mword 5 := 'b"00001"  : mword 5.

Definition ufFlag '(tt : unit) : mword 5 := 'b"00010"  : mword 5.

Definition ofFlag '(tt : unit) : mword 5 := 'b"00100"  : mword 5.

Definition dzFlag '(tt : unit) : mword 5 := 'b"01000"  : mword 5.

Definition nvFlag '(tt : unit) : mword 5 := 'b"10000"  : mword 5.

Definition fsplit_S (x32 : mword 32) : (mword 1 * mword 8 * mword 23) :=
   (subrange_vec_dec x32 31 31, subrange_vec_dec x32 30 23, subrange_vec_dec x32 22 0).

Definition fmake_S (sign : mword 1) (exp : mword 8) (mant : mword 23) : mword 32 :=
   concat_vec sign (concat_vec exp mant).

Definition canonical_NaN_S '(tt : unit) : mword 32 := Ox"7FC00000"  : mword 32.

Definition f_is_neg_inf_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign ('b"1"  : mword 1))
     (andb (eq_vec exp (ones 8)) (eq_vec mant (zeros_implicit 23))).

Definition f_is_neg_norm_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign ('b"1"  : mword 1))
     (andb (neq_vec exp (zeros_implicit 8)) (neq_vec exp (ones 8))).

Definition f_is_neg_subnorm_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign ('b"1"  : mword 1))
     (andb (eq_vec exp (zeros_implicit 8)) (neq_vec mant (zeros_implicit 23))).

Definition f_is_neg_zero_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign (ones 1))
     (andb (eq_vec exp (zeros_implicit 8)) (eq_vec mant (zeros_implicit 23))).

Definition f_is_pos_zero_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign (zeros_implicit 1))
     (andb (eq_vec exp (zeros_implicit 8)) (eq_vec mant (zeros_implicit 23))).

Definition f_is_pos_subnorm_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign (zeros_implicit 1))
     (andb (eq_vec exp (zeros_implicit 8)) (neq_vec mant (zeros_implicit 23))).

Definition f_is_pos_norm_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign (zeros_implicit 1))
     (andb (neq_vec exp (zeros_implicit 8)) (neq_vec exp (ones 8))).

Definition f_is_pos_inf_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec sign (zeros_implicit 1))
     (andb (eq_vec exp (ones 8)) (eq_vec mant (zeros_implicit 23))).

Definition f_is_SNaN_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec exp (ones 8))
     (andb (eq_bit (access_vec_dec mant 22) B0) (neq_vec mant (zeros_implicit 23))).

Definition f_is_QNaN_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec exp (ones 8)) (eq_bit (access_vec_dec mant 22) B1).

Definition f_is_NaN_S (x32 : mword 32) : bool :=
   let '(sign, exp, mant) := fsplit_S x32 in
   andb (eq_vec exp (ones 8)) (neq_vec mant (zeros_implicit 23)).

Definition negate_S (x32 : mword 32) : mword 32 :=
   let '(sign, exp, mant) := fsplit_S x32 in
   let new_sign := if eq_vec sign ('b"0"  : mword 1) then 'b"1"  : mword 1 else 'b"0"  : mword 1 in
   fmake_S new_sign exp mant.

Definition feq_quiet_S (v1 : mword 32) (v2 : mword 32) : (bool * mword 5) :=
   let '(s1, e1, m1) := fsplit_S v1 in
   let '(s2, e2, m2) := fsplit_S v2 in
   let v1Is0 := orb (f_is_neg_zero_S v1) (f_is_pos_zero_S v1) in
   let v2Is0 := orb (f_is_neg_zero_S v2) (f_is_pos_zero_S v2) in
   let result := orb (eq_vec v1 v2) (andb v1Is0 v2Is0) in
   let fflags := if orb (f_is_SNaN_S v1) (f_is_SNaN_S v2) then nvFlag tt else zeros_implicit 5 in
   (result, fflags).

Definition flt_S (v1 : mword 32) (v2 : mword 32) (is_quiet : bool) : (bool * mword 5) :=
   let '(s1, e1, m1) := fsplit_S v1 in
   let '(s2, e2, m2) := fsplit_S v2 in
   let result : bool :=
     if andb (eq_vec s1 ('b"0"  : mword 1)) (eq_vec s2 ('b"0"  : mword 1)) then
       if eq_vec e1 e2 then Z.ltb (projT1 (uint m1)) (projT1 (uint m2))
       else Z.ltb (projT1 (uint e1)) (projT1 (uint e2))
     else if andb (eq_vec s1 ('b"0"  : mword 1)) (eq_vec s2 ('b"1"  : mword 1)) then false
     else if andb (eq_vec s1 ('b"1"  : mword 1)) (eq_vec s2 ('b"0"  : mword 1)) then true
     else if eq_vec e1 e2 then Z.gtb (projT1 (uint m1)) (projT1 (uint m2))
     else Z.gtb (projT1 (uint e1)) (projT1 (uint e2)) in
   let fflags :=
     if sumbool_of_bool is_quiet then
       if orb (f_is_SNaN_S v1) (f_is_SNaN_S v2) then nvFlag tt
       else zeros_implicit 5
     else if orb (f_is_NaN_S v1) (f_is_NaN_S v2) then nvFlag tt
     else zeros_implicit 5 in
   (result, fflags).

Definition fle_S (v1 : mword 32) (v2 : mword 32) (is_quiet : bool) : (bool * mword 5) :=
   let '(s1, e1, m1) := fsplit_S v1 in
   let '(s2, e2, m2) := fsplit_S v2 in
   let v1Is0 := orb (f_is_neg_zero_S v1) (f_is_pos_zero_S v1) in
   let v2Is0 := orb (f_is_neg_zero_S v2) (f_is_pos_zero_S v2) in
   let result : bool :=
     if andb (eq_vec s1 ('b"0"  : mword 1)) (eq_vec s2 ('b"0"  : mword 1)) then
       if eq_vec e1 e2 then Z.leb (projT1 (uint m1)) (projT1 (uint m2))
       else Z.ltb (projT1 (uint e1)) (projT1 (uint e2))
     else if andb (eq_vec s1 ('b"0"  : mword 1)) (eq_vec s2 ('b"1"  : mword 1)) then
       andb v1Is0 v2Is0
     else if andb (eq_vec s1 ('b"1"  : mword 1)) (eq_vec s2 ('b"0"  : mword 1)) then true
     else if eq_vec e1 e2 then Z.geb (projT1 (uint m1)) (projT1 (uint m2))
     else Z.gtb (projT1 (uint e1)) (projT1 (uint e2)) in
   let fflags :=
     if sumbool_of_bool is_quiet then
       if orb (f_is_SNaN_S v1) (f_is_SNaN_S v2) then nvFlag tt
       else zeros_implicit 5
     else if orb (f_is_NaN_S v1) (f_is_NaN_S v2) then nvFlag tt
     else zeros_implicit 5 in
   (result, fflags).

Definition nan_box (val_32b : mword 32) : mword 32 := val_32b.

Definition nan_unbox (regval : mword 32) : mword 32 := regval.

Definition is_RV32F_or_RV64F '(tt : unit) : M (bool) :=
   projT1_m
   ((and_boolMP (build_trivial_ex ((haveFExt tt)  : M (bool)))
       ((returnm (build_ex
         (projT1
         (build_ex
         (orb (Z.eqb 32 32) (Z.eqb 32 64))
          : {_bool : bool & ArithFact (Bool.eqb ((32 =? 32) || (32 =? 64)) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb ((32 =?
         32) ||
         (32 =? 64)) _bool)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
     ((32 =? 32) || (32 =? 64))) _bool = true)}))
    : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && ((32 =? 32) || (32 =? 64))) _bool = true)})).

Definition is_RV64F '(tt : unit) : M (bool) :=
   projT1_m
   ((and_boolMP (build_trivial_ex ((haveFExt tt)  : M (bool)))
       ((returnm (build_ex
         (projT1
         (build_ex
         (Z.eqb 32 64)
          : {_bool : bool & ArithFact (Bool.eqb (32 =? 64) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
         64) _bool)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
     (32 =? 64)) _bool = true)}))
    : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 64)) _bool = true)})).

Definition is_RV32D_or_RV64D '(tt : unit) : M (bool) :=
   projT1_m
   ((and_boolMP (build_trivial_ex ((haveDExt tt)  : M (bool)))
       ((returnm (build_ex
         (projT1
         (build_ex
         (orb (Z.eqb 32 32) (Z.eqb 32 64))
          : {_bool : bool & ArithFact (Bool.eqb ((32 =? 32) || (32 =? 64)) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb ((32 =?
         32) ||
         (32 =? 64)) _bool)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
     ((32 =? 32) || (32 =? 64))) _bool = true)}))
    : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && ((32 =? 32) || (32 =? 64))) _bool = true)})).

Definition is_RV64D '(tt : unit) : M (bool) :=
   projT1_m
   ((and_boolMP (build_trivial_ex ((haveDExt tt)  : M (bool)))
       ((returnm (build_ex
         (projT1
         (build_ex
         (Z.eqb 32 64)
          : {_bool : bool & ArithFact (Bool.eqb (32 =? 64) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
         64) _bool)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
     (32 =? 64)) _bool = true)}))
    : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 64)) _bool = true)})).

Definition process_fload64 (rd : mword 5) (addr : mword 32) (value : MemoryOpResult (mword 64))
: M (Retired) :=
   returnm RETIRE_FAIL.

Definition process_fload32 (rd : mword 5) (addr : mword 32) (value : MemoryOpResult (mword 32))
: M (Retired) :=
   (match value with
    | MemValue result => (wF_bits rd (nan_box result)) >> returnm RETIRE_SUCCESS
    | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
    end)
    : M (Retired).

Definition process_fstore (vaddr : mword 32) (value : MemoryOpResult bool) : M (Retired) :=
   (match value with
    | MemValue true => returnm RETIRE_SUCCESS
    | MemValue false => (internal_error "store got false from mem_write_value")  : M (Retired)
    | MemException e => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
    end)
    : M (Retired).

Definition f_madd_type_mnemonic_S_forwards (arg_ : f_madd_op_S) : string :=
   match arg_ with
   | FMADD_S => "fmadd.s"
   | FMSUB_S => "fmsub.s"
   | FNMSUB_S => "fnmsub.s"
   | FNMADD_S => "fnmadd.s"
   end.

Definition f_madd_type_mnemonic_S_backwards (arg_ : string) : M (f_madd_op_S) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "fmadd.s" then returnm FMADD_S
    else if generic_eq p0_ "fmsub.s" then returnm FMSUB_S
    else if generic_eq p0_ "fnmsub.s" then returnm FNMSUB_S
    else if generic_eq p0_ "fnmadd.s" then returnm FNMADD_S
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (f_madd_op_S).

Definition f_madd_type_mnemonic_S_forwards_matches (arg_ : f_madd_op_S) : bool :=
   match arg_ with | FMADD_S => true | FMSUB_S => true | FNMSUB_S => true | FNMADD_S => true end.

Definition f_madd_type_mnemonic_S_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "fmadd.s" then true
   else if generic_eq p0_ "fmsub.s" then true
   else if generic_eq p0_ "fnmsub.s" then true
   else if generic_eq p0_ "fnmadd.s" then true
   else false.

Definition _s1110_ (_s1111_ : string) : option string :=
   let _s1112_ := _s1111_ in
   if string_startswith _s1112_ "fnmadd.s" then
     match (string_drop _s1112_ (projT1 (string_length "fnmadd.s"))) with | s_ => Some s_ end
   else None.

Definition _s1106_ (_s1107_ : string) : option string :=
   let _s1108_ := _s1107_ in
   if string_startswith _s1108_ "fnmsub.s" then
     match (string_drop _s1108_ (projT1 (string_length "fnmsub.s"))) with | s_ => Some s_ end
   else None.

Definition _s1102_ (_s1103_ : string) : option string :=
   let _s1104_ := _s1103_ in
   if string_startswith _s1104_ "fmsub.s" then
     match (string_drop _s1104_ (projT1 (string_length "fmsub.s"))) with | s_ => Some s_ end
   else None.

Definition _s1098_ (_s1099_ : string) : option string :=
   let _s1100_ := _s1099_ in
   if string_startswith _s1100_ "fmadd.s" then
     match (string_drop _s1100_ (projT1 (string_length "fmadd.s"))) with | s_ => Some s_ end
   else None.

Definition f_madd_type_mnemonic_S_matches_prefix (arg_ : string)
: M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1101_ := arg_ in
   (if match (_s1098_ _s1101_) with | Some s_ => true | _ => false end then
      (match (_s1098_ _s1101_) with
       | Some s_ =>
          returnm (Some
                     (FMADD_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1102_ _s1101_) with | Some s_ => true | _ => false end then
      (match (_s1102_ _s1101_) with
       | Some s_ =>
          returnm (Some
                     (FMSUB_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1106_ _s1101_) with | Some s_ => true | _ => false end then
      (match (_s1106_ _s1101_) with
       | Some s_ =>
          returnm (Some
                     (FNMSUB_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1110_ _s1101_) with | Some s_ => true | _ => false end then
      (match (_s1110_ _s1101_) with
       | Some s_ =>
          returnm (Some
                     (FNMADD_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((f_madd_op_S * {n : Z & ArithFact (n >=? 0)}))).

Definition f_bin_rm_type_mnemonic_S_forwards (arg_ : f_bin_rm_op_S) : string :=
   match arg_ with
   | FADD_S => "fadd.s"
   | FSUB_S => "fsub.s"
   | FMUL_S => "fmul.s"
   | FDIV_S => "fdiv.s"
   end.

Definition f_bin_rm_type_mnemonic_S_backwards (arg_ : string) : M (f_bin_rm_op_S) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "fadd.s" then returnm FADD_S
    else if generic_eq p0_ "fsub.s" then returnm FSUB_S
    else if generic_eq p0_ "fmul.s" then returnm FMUL_S
    else if generic_eq p0_ "fdiv.s" then returnm FDIV_S
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (f_bin_rm_op_S).

Definition f_bin_rm_type_mnemonic_S_forwards_matches (arg_ : f_bin_rm_op_S) : bool :=
   match arg_ with | FADD_S => true | FSUB_S => true | FMUL_S => true | FDIV_S => true end.

Definition f_bin_rm_type_mnemonic_S_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "fadd.s" then true
   else if generic_eq p0_ "fsub.s" then true
   else if generic_eq p0_ "fmul.s" then true
   else if generic_eq p0_ "fdiv.s" then true
   else false.

Definition _s1126_ (_s1127_ : string) : option string :=
   let _s1128_ := _s1127_ in
   if string_startswith _s1128_ "fdiv.s" then
     match (string_drop _s1128_ (projT1 (string_length "fdiv.s"))) with | s_ => Some s_ end
   else None.

Definition _s1122_ (_s1123_ : string) : option string :=
   let _s1124_ := _s1123_ in
   if string_startswith _s1124_ "fmul.s" then
     match (string_drop _s1124_ (projT1 (string_length "fmul.s"))) with | s_ => Some s_ end
   else None.

Definition _s1118_ (_s1119_ : string) : option string :=
   let _s1120_ := _s1119_ in
   if string_startswith _s1120_ "fsub.s" then
     match (string_drop _s1120_ (projT1 (string_length "fsub.s"))) with | s_ => Some s_ end
   else None.

Definition _s1114_ (_s1115_ : string) : option string :=
   let _s1116_ := _s1115_ in
   if string_startswith _s1116_ "fadd.s" then
     match (string_drop _s1116_ (projT1 (string_length "fadd.s"))) with | s_ => Some s_ end
   else None.

Definition f_bin_rm_type_mnemonic_S_matches_prefix (arg_ : string)
: M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1117_ := arg_ in
   (if match (_s1114_ _s1117_) with | Some s_ => true | _ => false end then
      (match (_s1114_ _s1117_) with
       | Some s_ =>
          returnm (Some
                     (FADD_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1118_ _s1117_) with | Some s_ => true | _ => false end then
      (match (_s1118_ _s1117_) with
       | Some s_ =>
          returnm (Some
                     (FSUB_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1122_ _s1117_) with | Some s_ => true | _ => false end then
      (match (_s1122_ _s1117_) with
       | Some s_ =>
          returnm (Some
                     (FMUL_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1126_ _s1117_) with | Some s_ => true | _ => false end then
      (match (_s1126_ _s1117_) with
       | Some s_ =>
          returnm (Some
                     (FDIV_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=? 0)}))).

Definition f_un_rm_type_mnemonic_S_forwards (arg_ : f_un_rm_op_S) : string :=
   match arg_ with
   | FSQRT_S => "fsqrt.s"
   | FCVT_W_S => "fcvt.w.s"
   | FCVT_WU_S => "fcvt.wu.s"
   | FCVT_S_W => "fcvt.s.w"
   | FCVT_S_WU => "fcvt.s.wu"
   | FCVT_L_S => "fcvt.l.s"
   | FCVT_LU_S => "fcvt.lu.s"
   | FCVT_S_L => "fcvt.s.l"
   | FCVT_S_LU => "fcvt.s.lu"
   end.

Definition f_un_rm_type_mnemonic_S_backwards (arg_ : string) : M (f_un_rm_op_S) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "fsqrt.s" then returnm FSQRT_S
    else if generic_eq p0_ "fcvt.w.s" then returnm FCVT_W_S
    else if generic_eq p0_ "fcvt.wu.s" then returnm FCVT_WU_S
    else if generic_eq p0_ "fcvt.s.w" then returnm FCVT_S_W
    else if generic_eq p0_ "fcvt.s.wu" then returnm FCVT_S_WU
    else if generic_eq p0_ "fcvt.l.s" then returnm FCVT_L_S
    else if generic_eq p0_ "fcvt.lu.s" then returnm FCVT_LU_S
    else if generic_eq p0_ "fcvt.s.l" then returnm FCVT_S_L
    else if generic_eq p0_ "fcvt.s.lu" then returnm FCVT_S_LU
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (f_un_rm_op_S).

Definition f_un_rm_type_mnemonic_S_forwards_matches (arg_ : f_un_rm_op_S) : bool :=
   match arg_ with
   | FSQRT_S => true
   | FCVT_W_S => true
   | FCVT_WU_S => true
   | FCVT_S_W => true
   | FCVT_S_WU => true
   | FCVT_L_S => true
   | FCVT_LU_S => true
   | FCVT_S_L => true
   | FCVT_S_LU => true
   end.

Definition f_un_rm_type_mnemonic_S_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "fsqrt.s" then true
   else if generic_eq p0_ "fcvt.w.s" then true
   else if generic_eq p0_ "fcvt.wu.s" then true
   else if generic_eq p0_ "fcvt.s.w" then true
   else if generic_eq p0_ "fcvt.s.wu" then true
   else if generic_eq p0_ "fcvt.l.s" then true
   else if generic_eq p0_ "fcvt.lu.s" then true
   else if generic_eq p0_ "fcvt.s.l" then true
   else if generic_eq p0_ "fcvt.s.lu" then true
   else false.

Definition _s1162_ (_s1163_ : string) : option string :=
   let _s1164_ := _s1163_ in
   if string_startswith _s1164_ "fcvt.s.lu" then
     match (string_drop _s1164_ (projT1 (string_length "fcvt.s.lu"))) with | s_ => Some s_ end
   else None.

Definition _s1158_ (_s1159_ : string) : option string :=
   let _s1160_ := _s1159_ in
   if string_startswith _s1160_ "fcvt.s.l" then
     match (string_drop _s1160_ (projT1 (string_length "fcvt.s.l"))) with | s_ => Some s_ end
   else None.

Definition _s1154_ (_s1155_ : string) : option string :=
   let _s1156_ := _s1155_ in
   if string_startswith _s1156_ "fcvt.lu.s" then
     match (string_drop _s1156_ (projT1 (string_length "fcvt.lu.s"))) with | s_ => Some s_ end
   else None.

Definition _s1150_ (_s1151_ : string) : option string :=
   let _s1152_ := _s1151_ in
   if string_startswith _s1152_ "fcvt.l.s" then
     match (string_drop _s1152_ (projT1 (string_length "fcvt.l.s"))) with | s_ => Some s_ end
   else None.

Definition _s1146_ (_s1147_ : string) : option string :=
   let _s1148_ := _s1147_ in
   if string_startswith _s1148_ "fcvt.s.wu" then
     match (string_drop _s1148_ (projT1 (string_length "fcvt.s.wu"))) with | s_ => Some s_ end
   else None.

Definition _s1142_ (_s1143_ : string) : option string :=
   let _s1144_ := _s1143_ in
   if string_startswith _s1144_ "fcvt.s.w" then
     match (string_drop _s1144_ (projT1 (string_length "fcvt.s.w"))) with | s_ => Some s_ end
   else None.

Definition _s1138_ (_s1139_ : string) : option string :=
   let _s1140_ := _s1139_ in
   if string_startswith _s1140_ "fcvt.wu.s" then
     match (string_drop _s1140_ (projT1 (string_length "fcvt.wu.s"))) with | s_ => Some s_ end
   else None.

Definition _s1134_ (_s1135_ : string) : option string :=
   let _s1136_ := _s1135_ in
   if string_startswith _s1136_ "fcvt.w.s" then
     match (string_drop _s1136_ (projT1 (string_length "fcvt.w.s"))) with | s_ => Some s_ end
   else None.

Definition _s1130_ (_s1131_ : string) : option string :=
   let _s1132_ := _s1131_ in
   if string_startswith _s1132_ "fsqrt.s" then
     match (string_drop _s1132_ (projT1 (string_length "fsqrt.s"))) with | s_ => Some s_ end
   else None.

Definition f_un_rm_type_mnemonic_S_matches_prefix (arg_ : string)
: M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1133_ := arg_ in
   (if match (_s1130_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1130_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FSQRT_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1134_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1134_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_W_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1138_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1138_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_WU_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1142_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1142_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_S_W, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1146_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1146_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_S_WU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1150_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1150_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_L_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1154_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1154_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_LU_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1158_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1158_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_S_L, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1162_ _s1133_) with | Some s_ => true | _ => false end then
      (match (_s1162_ _s1133_) with
       | Some s_ =>
          returnm (Some
                     (FCVT_S_LU, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((f_un_rm_op_S * {n : Z & ArithFact (n >=? 0)}))).

Definition f_bin_type_mnemonic_S_forwards (arg_ : f_bin_op_S) : string :=
   match arg_ with
   | FSGNJ_S => "fsgnj.s"
   | FSGNJN_S => "fsgnjn.s"
   | FSGNJX_S => "fsgnjx.s"
   | FMIN_S => "fmin.s"
   | FMAX_S => "fmax.s"
   | FEQ_S => "feq.s"
   | FLT_S => "flt.s"
   | FLE_S => "fle.s"
   end.

Definition f_bin_type_mnemonic_S_backwards (arg_ : string) : M (f_bin_op_S) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "fsgnj.s" then returnm FSGNJ_S
    else if generic_eq p0_ "fsgnjn.s" then returnm FSGNJN_S
    else if generic_eq p0_ "fsgnjx.s" then returnm FSGNJX_S
    else if generic_eq p0_ "fmin.s" then returnm FMIN_S
    else if generic_eq p0_ "fmax.s" then returnm FMAX_S
    else if generic_eq p0_ "feq.s" then returnm FEQ_S
    else if generic_eq p0_ "flt.s" then returnm FLT_S
    else if generic_eq p0_ "fle.s" then returnm FLE_S
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (f_bin_op_S).

Definition f_bin_type_mnemonic_S_forwards_matches (arg_ : f_bin_op_S) : bool :=
   match arg_ with
   | FSGNJ_S => true
   | FSGNJN_S => true
   | FSGNJX_S => true
   | FMIN_S => true
   | FMAX_S => true
   | FEQ_S => true
   | FLT_S => true
   | FLE_S => true
   end.

Definition f_bin_type_mnemonic_S_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "fsgnj.s" then true
   else if generic_eq p0_ "fsgnjn.s" then true
   else if generic_eq p0_ "fsgnjx.s" then true
   else if generic_eq p0_ "fmin.s" then true
   else if generic_eq p0_ "fmax.s" then true
   else if generic_eq p0_ "feq.s" then true
   else if generic_eq p0_ "flt.s" then true
   else if generic_eq p0_ "fle.s" then true
   else false.

Definition _s1194_ (_s1195_ : string) : option string :=
   let _s1196_ := _s1195_ in
   if string_startswith _s1196_ "fle.s" then
     match (string_drop _s1196_ (projT1 (string_length "fle.s"))) with | s_ => Some s_ end
   else None.

Definition _s1190_ (_s1191_ : string) : option string :=
   let _s1192_ := _s1191_ in
   if string_startswith _s1192_ "flt.s" then
     match (string_drop _s1192_ (projT1 (string_length "flt.s"))) with | s_ => Some s_ end
   else None.

Definition _s1186_ (_s1187_ : string) : option string :=
   let _s1188_ := _s1187_ in
   if string_startswith _s1188_ "feq.s" then
     match (string_drop _s1188_ (projT1 (string_length "feq.s"))) with | s_ => Some s_ end
   else None.

Definition _s1182_ (_s1183_ : string) : option string :=
   let _s1184_ := _s1183_ in
   if string_startswith _s1184_ "fmax.s" then
     match (string_drop _s1184_ (projT1 (string_length "fmax.s"))) with | s_ => Some s_ end
   else None.

Definition _s1178_ (_s1179_ : string) : option string :=
   let _s1180_ := _s1179_ in
   if string_startswith _s1180_ "fmin.s" then
     match (string_drop _s1180_ (projT1 (string_length "fmin.s"))) with | s_ => Some s_ end
   else None.

Definition _s1174_ (_s1175_ : string) : option string :=
   let _s1176_ := _s1175_ in
   if string_startswith _s1176_ "fsgnjx.s" then
     match (string_drop _s1176_ (projT1 (string_length "fsgnjx.s"))) with | s_ => Some s_ end
   else None.

Definition _s1170_ (_s1171_ : string) : option string :=
   let _s1172_ := _s1171_ in
   if string_startswith _s1172_ "fsgnjn.s" then
     match (string_drop _s1172_ (projT1 (string_length "fsgnjn.s"))) with | s_ => Some s_ end
   else None.

Definition _s1166_ (_s1167_ : string) : option string :=
   let _s1168_ := _s1167_ in
   if string_startswith _s1168_ "fsgnj.s" then
     match (string_drop _s1168_ (projT1 (string_length "fsgnj.s"))) with | s_ => Some s_ end
   else None.

Definition f_bin_type_mnemonic_S_matches_prefix (arg_ : string)
: M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1169_ := arg_ in
   (if match (_s1166_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1166_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FSGNJ_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1170_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1170_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FSGNJN_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1174_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1174_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FSGNJX_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1178_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1178_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FMIN_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1182_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1182_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FMAX_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1186_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1186_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FEQ_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1190_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1190_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FLT_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1194_ _s1169_) with | Some s_ => true | _ => false end then
      (match (_s1194_ _s1169_) with
       | Some s_ =>
          returnm (Some
                     (FLE_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((f_bin_op_S * {n : Z & ArithFact (n >=? 0)}))).

Definition f_un_type_mnemonic_S_forwards (arg_ : f_un_op_S) : string :=
   match arg_ with | FMV_X_W => "fmv.x.w" | FCLASS_S => "fclass.s" | FMV_W_X => "fmv.w.x" end.

Definition f_un_type_mnemonic_S_backwards (arg_ : string) : M (f_un_op_S) :=
   let p0_ := arg_ in
   (if generic_eq p0_ "fmv.x.w" then returnm FMV_X_W
    else if generic_eq p0_ "fclass.s" then returnm FCLASS_S
    else if generic_eq p0_ "fmv.w.x" then returnm FMV_W_X
    else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
    : M (f_un_op_S).

Definition f_un_type_mnemonic_S_forwards_matches (arg_ : f_un_op_S) : bool :=
   match arg_ with | FMV_X_W => true | FCLASS_S => true | FMV_W_X => true end.

Definition f_un_type_mnemonic_S_backwards_matches (arg_ : string) : bool :=
   let p0_ := arg_ in
   if generic_eq p0_ "fmv.x.w" then true
   else if generic_eq p0_ "fclass.s" then true
   else if generic_eq p0_ "fmv.w.x" then true
   else false.

Definition _s1206_ (_s1207_ : string) : option string :=
   let _s1208_ := _s1207_ in
   if string_startswith _s1208_ "fmv.w.x" then
     match (string_drop _s1208_ (projT1 (string_length "fmv.w.x"))) with | s_ => Some s_ end
   else None.

Definition _s1202_ (_s1203_ : string) : option string :=
   let _s1204_ := _s1203_ in
   if string_startswith _s1204_ "fclass.s" then
     match (string_drop _s1204_ (projT1 (string_length "fclass.s"))) with | s_ => Some s_ end
   else None.

Definition _s1198_ (_s1199_ : string) : option string :=
   let _s1200_ := _s1199_ in
   if string_startswith _s1200_ "fmv.x.w" then
     match (string_drop _s1200_ (projT1 (string_length "fmv.x.w"))) with | s_ => Some s_ end
   else None.

Definition f_un_type_mnemonic_S_matches_prefix (arg_ : string)
: M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s1201_ := arg_ in
   (if match (_s1198_ _s1201_) with | Some s_ => true | _ => false end then
      (match (_s1198_ _s1201_) with
       | Some s_ =>
          returnm (Some
                     (FMV_X_W, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1202_ _s1201_) with | Some s_ => true | _ => false end then
      (match (_s1202_ _s1201_) with
       | Some s_ =>
          returnm (Some
                     (FCLASS_S, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)})))
    else if match (_s1206_ _s1201_) with | Some s_ => true | _ => false end then
      (match (_s1206_ _s1201_) with
       | Some s_ =>
          returnm (Some
                     (FMV_W_X, build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)})))
    else returnm None)
    : M (option ((f_un_op_S * {n : Z & ArithFact (n >=? 0)}))).

Definition encdec_forwards (arg_ : ast) : M (mword 32) :=
   (match arg_ with
    | UTYPE (imm, rd, op) =>
       returnm (concat_vec (imm  : mword 20) (concat_vec (rd  : mword 5) (encdec_uop_forwards op)))
    | RISCV_JAL (v__2, rd) =>
       (if eq_vec (subrange_vec_dec v__2 0 0) ('b"0"  : mword (0 - 0 + 1)) then
          let imm_19 : bits 1 := subrange_vec_dec v__2 20 20 in
          let imm_8 : bits 1 := subrange_vec_dec v__2 11 11 in
          let imm_7_0 : bits 8 := subrange_vec_dec v__2 19 12 in
          let imm_19 : bits 1 := subrange_vec_dec v__2 20 20 in
          let imm_18_13 : bits 6 := subrange_vec_dec v__2 10 5 in
          let imm_12_9 : bits 4 := subrange_vec_dec v__2 4 1 in
          returnm (concat_vec (imm_19  : bits 1)
                     (concat_vec (imm_18_13  : bits 6)
                        (concat_vec (imm_12_9  : bits 4)
                           (concat_vec (imm_8  : bits 1)
                              (concat_vec (imm_7_0  : bits 8)
                                 (concat_vec (rd  : mword 5) ('b"1101111"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | RISCV_JALR (imm, rs1, rd) =>
       returnm (concat_vec (imm  : mword 12)
                  (concat_vec (rs1  : mword 5)
                     (concat_vec ('b"000"  : mword 3)
                        (concat_vec (rd  : mword 5) ('b"1100111"  : mword 7)))))
    | BTYPE (v__4, rs2, rs1, op) =>
       (if eq_vec (subrange_vec_dec v__4 0 0) ('b"0"  : mword (0 - 0 + 1)) then
          let imm7_6 : bits 1 := subrange_vec_dec v__4 12 12 in
          let imm7_6 : bits 1 := subrange_vec_dec v__4 12 12 in
          let imm7_5_0 : bits 6 := subrange_vec_dec v__4 10 5 in
          let imm5_4_1 : bits 4 := subrange_vec_dec v__4 4 1 in
          let imm5_0 : bits 1 := subrange_vec_dec v__4 11 11 in
          returnm (concat_vec (imm7_6  : bits 1)
                     (concat_vec (imm7_5_0  : bits 6)
                        (concat_vec (rs2  : mword 5)
                           (concat_vec (rs1  : mword 5)
                              (concat_vec (encdec_bop_forwards op)
                                 (concat_vec (imm5_4_1  : bits 4)
                                    (concat_vec (imm5_0  : bits 1) ('b"1100011"  : mword 7))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | ITYPE (imm, rs1, rd, op) =>
       returnm (concat_vec (imm  : mword 12)
                  (concat_vec (rs1  : mword 5)
                     (concat_vec (encdec_iop_forwards op)
                        (concat_vec (rd  : mword 5) ('b"0010011"  : mword 7)))))
    | SHIFTIOP (shamt, rs1, rd, RISCV_SLLI) =>
       returnm (concat_vec ('b"000000"  : mword 6)
                  (concat_vec (shamt  : mword 6)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"001"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0010011"  : mword 7))))))
    | SHIFTIOP (shamt, rs1, rd, RISCV_SRLI) =>
       returnm (concat_vec ('b"000000"  : mword 6)
                  (concat_vec (shamt  : mword 6)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"101"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0010011"  : mword 7))))))
    | SHIFTIOP (shamt, rs1, rd, RISCV_SRAI) =>
       returnm (concat_vec ('b"010000"  : mword 6)
                  (concat_vec (shamt  : mword 6)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"101"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0010011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_ADD) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_SLT) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"010"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_SLTU) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"011"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_AND) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"111"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_OR) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"110"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_XOR) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"100"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_SLL) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"001"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_SRL) =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"101"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_SUB) =>
       returnm (concat_vec ('b"0100000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | RTYPE (rs2, rs1, rd, RISCV_SRA) =>
       returnm (concat_vec ('b"0100000"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"101"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | LOAD (imm, rs1, rd, is_unsigned, size, false, false) =>
       (if sumbool_of_bool
          (orb (Z.ltb (projT1 (word_width_bytes size)) 4)
             (andb (negb is_unsigned) ((Z.leb (projT1 (word_width_bytes size)) 4)  : bool))) then
          returnm (concat_vec (imm  : mword 12)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec (bool_bits_forwards is_unsigned)
                           (concat_vec (size_bits_forwards size)
                              (concat_vec (rd  : mword 5) ('b"0000011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | STORE (v__6, rs2, rs1, size, false, false) =>
       (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then
          let imm7 : bits 7 := subrange_vec_dec v__6 11 5 in
          let imm7 : bits 7 := subrange_vec_dec v__6 11 5 in
          let imm5 : bits 5 := subrange_vec_dec v__6 4 0 in
          returnm (concat_vec (imm7  : bits 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"0"  : mword 1)
                              (concat_vec (size_bits_forwards size)
                                 (concat_vec (imm5  : bits 5) ('b"0100011"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | ADDIW (imm, rs1, rd) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec (imm  : mword 12)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | SHIFTW (shamt, rs1, rd, RISCV_SLLI) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (shamt  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | SHIFTW (shamt, rs1, rd, RISCV_SRLI) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (shamt  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"101"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | SHIFTW (shamt, rs1, rd, RISCV_SRAI) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0100000"  : mword 7)
                     (concat_vec (shamt  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"101"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | RTYPEW (rs2, rs1, rd, RISCV_ADDW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | RTYPEW (rs2, rs1, rd, RISCV_SUBW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0100000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | RTYPEW (rs2, rs1, rd, RISCV_SLLW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | RTYPEW (rs2, rs1, rd, RISCV_SRLW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"101"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | RTYPEW (rs2, rs1, rd, RISCV_SRAW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0100000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"101"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | SHIFTIWOP (shamt, rs1, rd, RISCV_SLLIW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (shamt  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | SHIFTIWOP (shamt, rs1, rd, RISCV_SRLIW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (shamt  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"101"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | SHIFTIWOP (shamt, rs1, rd, RISCV_SRAIW) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0100000"  : mword 7)
                     (concat_vec (shamt  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"101"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0011011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | FENCE (pred, succ) =>
       returnm (concat_vec (Ox"0"  : mword 4)
                  (concat_vec (pred  : mword 4)
                     (concat_vec (succ  : mword 4)
                        (concat_vec ('b"00000"  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec ('b"00000"  : mword 5) ('b"0001111"  : mword 7)))))))
    | FENCE_TSO (pred, succ) =>
       returnm (concat_vec (Ox"8"  : mword 4)
                  (concat_vec (pred  : mword 4)
                     (concat_vec (succ  : mword 4)
                        (concat_vec ('b"00000"  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec ('b"00000"  : mword 5) ('b"0001111"  : mword 7)))))))
    | FENCEI tt =>
       returnm (concat_vec (Ox"000"  : mword 12)
                  (concat_vec ('b"00000"  : mword 5)
                     (concat_vec ('b"001"  : mword 3)
                        (concat_vec ('b"00000"  : mword 5) ('b"0001111"  : mword 7)))))
    | ECALL tt =>
       returnm (concat_vec (Ox"000"  : mword 12)
                  (concat_vec ('b"00000"  : mword 5)
                     (concat_vec ('b"000"  : mword 3)
                        (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7)))))
    | MRET tt =>
       returnm (concat_vec ('b"0011000"  : mword 7)
                  (concat_vec ('b"00010"  : mword 5)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7))))))
    | SRET tt =>
       returnm (concat_vec ('b"0001000"  : mword 7)
                  (concat_vec ('b"00010"  : mword 5)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7))))))
    | EBREAK tt =>
       returnm (concat_vec (Ox"001"  : mword 12)
                  (concat_vec ('b"00000"  : mword 5)
                     (concat_vec ('b"000"  : mword 3)
                        (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7)))))
    | WFI tt =>
       returnm (concat_vec (Ox"105"  : mword 12)
                  (concat_vec ('b"00000"  : mword 5)
                     (concat_vec ('b"000"  : mword 3)
                        (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7)))))
    | SFENCE_VMA (rs1, rs2) =>
       returnm (concat_vec ('b"0001001"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7))))))
    | LOADRES (aq, rl, rs1, size, rd) =>
       (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then
          returnm (concat_vec ('b"00010"  : mword 5)
                     (concat_vec (bool_bits_forwards aq)
                        (concat_vec (bool_bits_forwards rl)
                           (concat_vec ('b"00000"  : mword 5)
                              (concat_vec (rs1  : mword 5)
                                 (concat_vec ('b"0"  : mword 1)
                                    (concat_vec (size_bits_forwards size)
                                       (concat_vec (rd  : mword 5) ('b"0101111"  : mword 7)))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | STORECON (aq, rl, rs2, rs1, size, rd) =>
       (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then
          returnm (concat_vec ('b"00011"  : mword 5)
                     (concat_vec (bool_bits_forwards aq)
                        (concat_vec (bool_bits_forwards rl)
                           (concat_vec (rs2  : mword 5)
                              (concat_vec (rs1  : mword 5)
                                 (concat_vec ('b"0"  : mword 1)
                                    (concat_vec (size_bits_forwards size)
                                       (concat_vec (rd  : mword 5) ('b"0101111"  : mword 7)))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | AMO (op, aq, rl, rs2, rs1, size, rd) =>
       (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then
          returnm (concat_vec (encdec_amoop_forwards op)
                     (concat_vec (bool_bits_forwards aq)
                        (concat_vec (bool_bits_forwards rl)
                           (concat_vec (rs2  : mword 5)
                              (concat_vec (rs1  : mword 5)
                                 (concat_vec ('b"0"  : mword 1)
                                    (concat_vec (size_bits_forwards size)
                                       (concat_vec (rd  : mword 5) ('b"0101111"  : mword 7)))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | MUL (rs2, rs1, rd, high, signed1, signed2) =>
       (encdec_mul_op_forwards (high, signed1, signed2)) >>= fun w__38 : mword 3 =>
       returnm (concat_vec ('b"0000001"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec (w__38  : bits 3)
                           (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7))))))
    | DIV (rs2, rs1, rd, s) =>
       returnm (concat_vec ('b"0000001"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"10"  : mword 2)
                           (concat_vec (bool_not_bits_forwards s)
                              (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7)))))))
    | REM (rs2, rs1, rd, s) =>
       returnm (concat_vec ('b"0000001"  : mword 7)
                  (concat_vec (rs2  : mword 5)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"11"  : mword 2)
                           (concat_vec (bool_not_bits_forwards s)
                              (concat_vec (rd  : mword 5) ('b"0110011"  : mword 7)))))))
    | MULW (rs2, rs1, rd) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000001"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | DIVW (rs2, rs1, rd, s) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000001"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"10"  : mword 2)
                              (concat_vec (bool_not_bits_forwards s)
                                 (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | REMW (rs2, rs1, rd, s) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"0000001"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"11"  : mword 2)
                              (concat_vec (bool_not_bits_forwards s)
                                 (concat_vec (rd  : mword 5) ('b"0111011"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | CSR (csr, rs1, rd, is_imm, op) =>
       returnm (concat_vec (csr  : mword 12)
                  (concat_vec (rs1  : mword 5)
                     (concat_vec (bool_bits_forwards is_imm)
                        (concat_vec (encdec_csrop_forwards op)
                           (concat_vec (rd  : mword 5) ('b"1110011"  : mword 7))))))
    | URET tt =>
       returnm (concat_vec ('b"0000000"  : mword 7)
                  (concat_vec ('b"00010"  : mword 5)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec ('b"000"  : mword 3)
                           (concat_vec ('b"00000"  : mword 5) ('b"1110011"  : mword 7))))))
    | LOAD_FP (imm, rs1, rd, WORD) =>
       (is_RV32F_or_RV64F tt) >>= fun w__45 : bool =>
       (if sumbool_of_bool w__45 then
          returnm (concat_vec (imm  : mword 12)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"010"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0000111"  : mword 7)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | LOAD_FP (imm, rs1, rd, DOUBLE) =>
       (is_RV32D_or_RV64D tt) >>= fun w__48 : bool =>
       (if sumbool_of_bool w__48 then
          returnm (concat_vec (imm  : mword 12)
                     (concat_vec (rs1  : mword 5)
                        (concat_vec ('b"011"  : mword 3)
                           (concat_vec (rd  : mword 5) ('b"0000111"  : mword 7)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | STORE_FP (v__7, rs2, rs1, WORD) =>
       (is_RV32F_or_RV64F tt) >>= fun w__51 : bool =>
       (if sumbool_of_bool w__51 then
          let imm7 : bits 7 := subrange_vec_dec v__7 11 5 in
          let imm7 : bits 7 := subrange_vec_dec v__7 11 5 in
          let imm5 : bits 5 := subrange_vec_dec v__7 4 0 in
          returnm (concat_vec (imm7  : bits 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"010"  : mword 3)
                              (concat_vec (imm5  : bits 5) ('b"0100111"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | STORE_FP (v__8, rs2, rs1, DOUBLE) =>
       (is_RV32D_or_RV64D tt) >>= fun w__54 : bool =>
       (if sumbool_of_bool w__54 then
          let imm7 : bits 7 := subrange_vec_dec v__8 11 5 in
          let imm7 : bits 7 := subrange_vec_dec v__8 11 5 in
          let imm5 : bits 5 := subrange_vec_dec v__8 4 0 in
          returnm (concat_vec (imm7  : bits 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"011"  : mword 3)
                              (concat_vec (imm5  : bits 5) ('b"0100111"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FMADD_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__57 : bool =>
       (if sumbool_of_bool w__57 then
          returnm (concat_vec (rs3  : mword 5)
                     (concat_vec ('b"00"  : mword 2)
                        (concat_vec (rs2  : mword 5)
                           (concat_vec (rs1  : mword 5)
                              (concat_vec (encdec_rounding_mode_forwards rm)
                                 (concat_vec (rd  : mword 5) ('b"1000011"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FMSUB_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__60 : bool =>
       (if sumbool_of_bool w__60 then
          returnm (concat_vec (rs3  : mword 5)
                     (concat_vec ('b"00"  : mword 2)
                        (concat_vec (rs2  : mword 5)
                           (concat_vec (rs1  : mword 5)
                              (concat_vec (encdec_rounding_mode_forwards rm)
                                 (concat_vec (rd  : mword 5) ('b"1000111"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FNMSUB_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__63 : bool =>
       (if sumbool_of_bool w__63 then
          returnm (concat_vec (rs3  : mword 5)
                     (concat_vec ('b"00"  : mword 2)
                        (concat_vec (rs2  : mword 5)
                           (concat_vec (rs1  : mword 5)
                              (concat_vec (encdec_rounding_mode_forwards rm)
                                 (concat_vec (rd  : mword 5) ('b"1001011"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FNMADD_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__66 : bool =>
       (if sumbool_of_bool w__66 then
          returnm (concat_vec (rs3  : mword 5)
                     (concat_vec ('b"00"  : mword 2)
                        (concat_vec (rs2  : mword 5)
                           (concat_vec (rs1  : mword 5)
                              (concat_vec (encdec_rounding_mode_forwards rm)
                                 (concat_vec (rd  : mword 5) ('b"1001111"  : mword 7)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FADD_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__69 : bool =>
       (if sumbool_of_bool w__69 then
          returnm (concat_vec ('b"0000000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FSUB_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__72 : bool =>
       (if sumbool_of_bool w__72 then
          returnm (concat_vec ('b"0000100"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FMUL_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__75 : bool =>
       (if sumbool_of_bool w__75 then
          returnm (concat_vec ('b"0001000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FDIV_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__78 : bool =>
       (if sumbool_of_bool w__78 then
          returnm (concat_vec ('b"0001100"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__81 : bool =>
       (if sumbool_of_bool w__81 then
          returnm (concat_vec ('b"0101100"  : mword 7)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__84 : bool =>
       (if sumbool_of_bool w__84 then
          returnm (concat_vec ('b"1100000"  : mword 7)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__87 : bool =>
       (if sumbool_of_bool w__87 then
          returnm (concat_vec ('b"1100000"  : mword 7)
                     (concat_vec ('b"00001"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W) =>
       (is_RV32F_or_RV64F tt) >>= fun w__90 : bool =>
       (if sumbool_of_bool w__90 then
          returnm (concat_vec ('b"1101000"  : mword 7)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_WU) =>
       (is_RV32F_or_RV64F tt) >>= fun w__93 : bool =>
       (if sumbool_of_bool w__93 then
          returnm (concat_vec ('b"1101000"  : mword 7)
                     (concat_vec ('b"00001"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_L_S) =>
       (is_RV64F tt) >>= fun w__96 : bool =>
       (if sumbool_of_bool w__96 then
          returnm (concat_vec ('b"1100000"  : mword 7)
                     (concat_vec ('b"00010"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_LU_S) =>
       (is_RV64F tt) >>= fun w__99 : bool =>
       (if sumbool_of_bool w__99 then
          returnm (concat_vec ('b"1100000"  : mword 7)
                     (concat_vec ('b"00011"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_L) =>
       (is_RV64F tt) >>= fun w__102 : bool =>
       (if sumbool_of_bool w__102 then
          returnm (concat_vec ('b"1101000"  : mword 7)
                     (concat_vec ('b"00010"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_LU) =>
       (is_RV64F tt) >>= fun w__105 : bool =>
       (if sumbool_of_bool w__105 then
          returnm (concat_vec ('b"1101000"  : mword 7)
                     (concat_vec ('b"00011"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec (encdec_rounding_mode_forwards rm)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJ_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__108 : bool =>
       (if sumbool_of_bool w__108 then
          returnm (concat_vec ('b"0010000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJN_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__111 : bool =>
       (if sumbool_of_bool w__111 then
          returnm (concat_vec ('b"0010000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJX_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__114 : bool =>
       (if sumbool_of_bool w__114 then
          returnm (concat_vec ('b"0010000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"010"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FMIN_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__117 : bool =>
       (if sumbool_of_bool w__117 then
          returnm (concat_vec ('b"0010100"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FMAX_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__120 : bool =>
       (if sumbool_of_bool w__120 then
          returnm (concat_vec ('b"0010100"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FEQ_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__123 : bool =>
       (if sumbool_of_bool w__123 then
          returnm (concat_vec ('b"1010000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"010"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FLT_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__126 : bool =>
       (if sumbool_of_bool w__126 then
          returnm (concat_vec ('b"1010000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_BIN_TYPE_S (rs2, rs1, rd, FLE_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__129 : bool =>
       (if sumbool_of_bool w__129 then
          returnm (concat_vec ('b"1010000"  : mword 7)
                     (concat_vec (rs2  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_TYPE_S (rs1, rd, FCLASS_S) =>
       (haveFExt tt) >>= fun w__132 : bool =>
       (if sumbool_of_bool w__132 then
          returnm (concat_vec ('b"1110000"  : mword 7)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"001"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_TYPE_S (rs1, rd, FMV_X_W) =>
       (haveFExt tt) >>= fun w__135 : bool =>
       (if sumbool_of_bool w__135 then
          returnm (concat_vec ('b"1110000"  : mword 7)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | F_UN_TYPE_S (rs1, rd, FMV_W_X) =>
       (haveFExt tt) >>= fun w__138 : bool =>
       (if sumbool_of_bool w__138 then
          returnm (concat_vec ('b"1111000"  : mword 7)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec (rs1  : mword 5)
                           (concat_vec ('b"000"  : mword 3)
                              (concat_vec (rd  : mword 5) ('b"1010011"  : mword 7))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 32)
    | ILLEGAL s => returnm s
    | _ => assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt
    end)
    : M (mword 32).

Definition encdec_backwards (arg_ : mword 32) : M (ast) :=
   let v__9 := arg_ in
   let _mappingpatterns_40_ : mword 7 := subrange_vec_dec v__9 6 0 in
   (and_boolM (returnm ((encdec_uop_backwards_matches _mappingpatterns_40_)  : bool))
      ((if encdec_uop_backwards_matches _mappingpatterns_40_ then
          (encdec_uop_backwards _mappingpatterns_40_) >>= fun op => returnm (true  : bool)
        else returnm false)
       : M (bool))) >>= fun w__1 : bool =>
   (if sumbool_of_bool w__1 then
      let imm : mword 20 := subrange_vec_dec v__9 31 12 in
      let rd : mword 5 := subrange_vec_dec v__9 11 7 in
      let imm : mword 20 := subrange_vec_dec v__9 31 12 in
      let _mappingpatterns_40_ : mword 7 := subrange_vec_dec v__9 6 0 in
      (encdec_uop_backwards _mappingpatterns_40_) >>= fun op => returnm (UTYPE (imm, rd, op))
    else if eq_vec (subrange_vec_dec v__9 6 0) ('b"1101111"  : mword (6 - 0 + 1)) then
      let imm_19 : bits 1 := subrange_vec_dec v__9 31 31 in
      let rd : mword 5 := subrange_vec_dec v__9 11 7 in
      let imm_8 : bits 1 := subrange_vec_dec v__9 20 20 in
      let imm_7_0 : bits 8 := subrange_vec_dec v__9 19 12 in
      let imm_19 : bits 1 := subrange_vec_dec v__9 31 31 in
      let imm_18_13 : bits 6 := subrange_vec_dec v__9 30 25 in
      let imm_12_9 : bits 4 := subrange_vec_dec v__9 24 21 in
      returnm (RISCV_JAL
                 (concat_vec (imm_19  : bits 1)
                    (concat_vec (imm_7_0  : bits 8)
                       (concat_vec (imm_8  : bits 1)
                          (concat_vec (imm_18_13  : bits 6)
                             (concat_vec (imm_12_9  : bits 4) ('b"0"  : mword 1))))), rd))
    else if andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"000"  : mword (14 - 12 + 1)))
              (eq_vec (subrange_vec_dec v__9 6 0) ('b"1100111"  : mword (6 - 0 + 1))) then
      let imm : mword 12 := subrange_vec_dec v__9 31 20 in
      let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
      let rd : mword 5 := subrange_vec_dec v__9 11 7 in
      let imm : mword 12 := subrange_vec_dec v__9 31 20 in
      returnm (RISCV_JALR (imm, rs1, rd))
    else
      (and_boolM
         (let _mappingpatterns_41_ : mword 3 := subrange_vec_dec v__9 14 12 in
         (and_boolM (returnm ((encdec_bop_backwards_matches _mappingpatterns_41_)  : bool))
            ((if encdec_bop_backwards_matches _mappingpatterns_41_ then
                (encdec_bop_backwards _mappingpatterns_41_) >>= fun op => returnm (true  : bool)
              else returnm false)
             : M (bool)))
          : M (bool))
         (returnm ((eq_vec (subrange_vec_dec v__9 6 0) ('b"1100011"  : mword (6 - 0 + 1)))  : bool))) >>= fun w__4 : bool =>
      (if sumbool_of_bool w__4 then
         let imm7_6 : bits 1 := subrange_vec_dec v__9 31 31 in
         let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
         let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
         let imm7_6 : bits 1 := subrange_vec_dec v__9 31 31 in
         let imm7_5_0 : bits 6 := subrange_vec_dec v__9 30 25 in
         let imm5_4_1 : bits 4 := subrange_vec_dec v__9 11 8 in
         let imm5_0 : bits 1 := subrange_vec_dec v__9 7 7 in
         let _mappingpatterns_41_ : mword 3 := subrange_vec_dec v__9 14 12 in
         (encdec_bop_backwards _mappingpatterns_41_) >>= fun op =>
         returnm (BTYPE
                    (concat_vec (imm7_6  : bits 1)
                       (concat_vec (imm5_0  : bits 1)
                          (concat_vec (imm7_5_0  : bits 6)
                             (concat_vec (imm5_4_1  : bits 4) ('b"0"  : mword 1)))), rs2, rs1, op))
       else
         (and_boolM
            (let _mappingpatterns_42_ : mword 3 := subrange_vec_dec v__9 14 12 in
            (and_boolM (returnm ((encdec_iop_backwards_matches _mappingpatterns_42_)  : bool))
               ((if encdec_iop_backwards_matches _mappingpatterns_42_ then
                   (encdec_iop_backwards _mappingpatterns_42_) >>= fun op => returnm (true  : bool)
                 else returnm false)
                : M (bool)))
             : M (bool))
            (returnm ((eq_vec (subrange_vec_dec v__9 6 0) ('b"0010011"  : mword (6 - 0 + 1)))
              : bool))) >>= fun w__7 : bool =>
         (if sumbool_of_bool w__7 then
            let imm : mword 12 := subrange_vec_dec v__9 31 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            let imm : mword 12 := subrange_vec_dec v__9 31 20 in
            let _mappingpatterns_42_ : mword 3 := subrange_vec_dec v__9 14 12 in
            (encdec_iop_backwards _mappingpatterns_42_) >>= fun op =>
            returnm (ITYPE (imm, rs1, rd, op))
          else if sumbool_of_bool
            (andb
               (let shamt : mword 6 := subrange_vec_dec v__9 25 20 in
               orb (Z.eqb 32 64) (eq_bit (access_vec_dec shamt 5) B0))
               (andb (eq_vec (subrange_vec_dec v__9 31 26) ('b"000000"  : mword (31 - 26 + 1)))
                  (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"001"  : mword (14 - 12 + 1)))
                     (eq_vec (subrange_vec_dec v__9 6 0) ('b"0010011"  : mword (6 - 0 + 1)))))) then
            let shamt : mword 6 := subrange_vec_dec v__9 25 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (SHIFTIOP (shamt, rs1, rd, RISCV_SLLI))
          else if sumbool_of_bool
            (andb
               (let shamt : mword 6 := subrange_vec_dec v__9 25 20 in
               orb (Z.eqb 32 64) (eq_bit (access_vec_dec shamt 5) B0))
               (andb (eq_vec (subrange_vec_dec v__9 31 26) ('b"000000"  : mword (31 - 26 + 1)))
                  (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                     (eq_vec (subrange_vec_dec v__9 6 0) ('b"0010011"  : mword (6 - 0 + 1)))))) then
            let shamt : mword 6 := subrange_vec_dec v__9 25 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (SHIFTIOP (shamt, rs1, rd, RISCV_SRLI))
          else if sumbool_of_bool
            (andb
               (let shamt : mword 6 := subrange_vec_dec v__9 25 20 in
               orb (Z.eqb 32 64) (eq_bit (access_vec_dec shamt 5) B0))
               (andb (eq_vec (subrange_vec_dec v__9 31 26) ('b"010000"  : mword (31 - 26 + 1)))
                  (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                     (eq_vec (subrange_vec_dec v__9 6 0) ('b"0010011"  : mword (6 - 0 + 1)))))) then
            let shamt : mword 6 := subrange_vec_dec v__9 25 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (SHIFTIOP (shamt, rs1, rd, RISCV_SRAI))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"000"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_ADD))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"010"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_SLT))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"011"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_SLTU))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"111"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_AND))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"110"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_OR))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"100"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_XOR))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"001"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_SLL))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_SRL))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"000"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_SUB))
          else if andb (eq_vec (subrange_vec_dec v__9 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__9 6 0) ('b"0110011"  : mword (6 - 0 + 1)))) then
            let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
            let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
            let rd : mword 5 := subrange_vec_dec v__9 11 7 in
            returnm (RTYPE (rs2, rs1, rd, RISCV_SRA))
          else
            (and_boolM
               (let _mappingpatterns_44_ : mword 2 := subrange_vec_dec v__9 13 12 in
               let _mappingpatterns_43_ : mword 1 := subrange_vec_dec v__9 14 14 in
               (and_boolM (returnm ((size_bits_backwards_matches _mappingpatterns_44_)  : bool))
                  ((if size_bits_backwards_matches _mappingpatterns_44_ then
                      (size_bits_backwards _mappingpatterns_44_) >>= fun size =>
                      (and_boolM
                         (returnm ((bool_bits_backwards_matches _mappingpatterns_43_)  : bool))
                         ((if bool_bits_backwards_matches _mappingpatterns_43_ then
                             (bool_bits_backwards _mappingpatterns_43_) >>= fun is_unsigned =>
                             returnm ((orb (Z.ltb (projT1 (word_width_bytes size)) 4)
                                         (andb (negb is_unsigned)
                                            ((Z.leb (projT1 (word_width_bytes size)) 4)
                                             : bool)))
                              : bool)
                           else returnm false)
                          : M (bool)))
                       : M (bool)
                    else returnm false)
                   : M (bool)))
                : M (bool))
               (returnm ((eq_vec (subrange_vec_dec v__9 6 0) ('b"0000011"  : mword (6 - 0 + 1)))
                 : bool))) >>= fun w__12 : bool =>
            (if sumbool_of_bool w__12 then
               let imm : mword 12 := subrange_vec_dec v__9 31 20 in
               let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
               let rd : mword 5 := subrange_vec_dec v__9 11 7 in
               let imm : mword 12 := subrange_vec_dec v__9 31 20 in
               let _mappingpatterns_44_ : mword 2 := subrange_vec_dec v__9 13 12 in
               let _mappingpatterns_43_ : mword 1 := subrange_vec_dec v__9 14 14 in
               (size_bits_backwards _mappingpatterns_44_) >>= fun size =>
               (bool_bits_backwards _mappingpatterns_43_) >>= fun is_unsigned =>
               returnm (LOAD (imm, rs1, rd, is_unsigned, size, false, false))
             else
               (and_boolM
                  (let _mappingpatterns_45_ : mword 2 := subrange_vec_dec v__9 13 12 in
                  (and_boolM (returnm ((size_bits_backwards_matches _mappingpatterns_45_)  : bool))
                     ((if size_bits_backwards_matches _mappingpatterns_45_ then
                         (size_bits_backwards _mappingpatterns_45_) >>= fun size =>
                         returnm ((Z.leb (projT1 (word_width_bytes size)) 4)  : bool)
                       else returnm false)
                      : M (bool)))
                   : M (bool))
                  (returnm ((andb
                               (eq_vec (subrange_vec_dec v__9 14 14) ('b"0"  : mword (14 - 14 + 1)))
                               (eq_vec (subrange_vec_dec v__9 6 0)
                                  ('b"0100011"
                                   : mword (6 - 0 + 1))))
                    : bool))) >>= fun w__15 : bool =>
               (if sumbool_of_bool w__15 then
                  let imm7 : bits 7 := subrange_vec_dec v__9 31 25 in
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let imm7 : bits 7 := subrange_vec_dec v__9 31 25 in
                  let imm5 : bits 5 := subrange_vec_dec v__9 11 7 in
                  let _mappingpatterns_45_ : mword 2 := subrange_vec_dec v__9 13 12 in
                  (size_bits_backwards _mappingpatterns_45_) >>= fun size =>
                  returnm (STORE
                             (concat_vec (imm7  : bits 7) (imm5  : bits 5), rs2, rs1, size, false, false))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb (eq_vec (subrange_vec_dec v__9 14 12) ('b"000"  : mword (14 - 12 + 1)))
                        (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1)))))
                then
                  let imm : mword 12 := subrange_vec_dec v__9 31 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  let imm : mword 12 := subrange_vec_dec v__9 31 20 in
                  returnm (ADDIW (imm, rs1, rd))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"001"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  let shamt : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (SHIFTW (shamt, rs1, rd, RISCV_SLLI))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  let shamt : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (SHIFTW (shamt, rs1, rd, RISCV_SRLI))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  let shamt : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (SHIFTW (shamt, rs1, rd, RISCV_SRAI))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"000"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (RTYPEW (rs2, rs1, rd, RISCV_ADDW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"000"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (RTYPEW (rs2, rs1, rd, RISCV_SUBW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"001"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (RTYPEW (rs2, rs1, rd, RISCV_SLLW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (RTYPEW (rs2, rs1, rd, RISCV_SRLW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (RTYPEW (rs2, rs1, rd, RISCV_SRAW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"001"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  let shamt : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (SHIFTIWOP (shamt, rs1, rd, RISCV_SLLIW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  let shamt : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (SHIFTIWOP (shamt, rs1, rd, RISCV_SRLIW))
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__9 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__9 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__9 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  let shamt : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                  returnm (SHIFTIWOP (shamt, rs1, rd, RISCV_SRAIW))
                else if andb (eq_vec (subrange_vec_dec v__9 31 28) (Ox"0"  : mword (31 - 28 + 1)))
                          (eq_vec (subrange_vec_dec v__9 19 0) (Ox"0000F"  : mword (19 - 0 + 1)))
                then
                  let succ : mword 4 := subrange_vec_dec v__9 23 20 in
                  let pred : mword 4 := subrange_vec_dec v__9 27 24 in
                  returnm (FENCE (pred, succ))
                else if andb (eq_vec (subrange_vec_dec v__9 31 28) (Ox"8"  : mword (31 - 28 + 1)))
                          (eq_vec (subrange_vec_dec v__9 19 0) (Ox"0000F"  : mword (19 - 0 + 1)))
                then
                  let succ : mword 4 := subrange_vec_dec v__9 23 20 in
                  let pred : mword 4 := subrange_vec_dec v__9 27 24 in
                  returnm (FENCE_TSO (pred, succ))
                else if eq_vec v__9 (Ox"0000100F"  : mword 32) then returnm (FENCEI tt)
                else if eq_vec v__9 (Ox"00000073"  : mword 32) then returnm (ECALL tt)
                else if eq_vec v__9 (Ox"30200073"  : mword 32) then returnm (MRET tt)
                else if eq_vec v__9 (Ox"10200073"  : mword 32) then returnm (SRET tt)
                else if eq_vec v__9 (Ox"00100073"  : mword 32) then returnm (EBREAK tt)
                else if eq_vec v__9 (Ox"10500073"  : mword 32) then returnm (WFI tt)
                else if andb
                          (eq_vec (subrange_vec_dec v__9 31 25) ('b"0001001"  : mword (31 - 25 + 1)))
                          (eq_vec (subrange_vec_dec v__9 14 0)
                             ('b"000000001110011"
                              : mword (14 - 0 + 1))) then
                  let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                  let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                  returnm (SFENCE_VMA (rs1, rs2))
                else
                  (and_boolM
                     (let _mappingpatterns_48_ : mword 2 := subrange_vec_dec v__9 13 12 in
                     let _mappingpatterns_47_ : mword 1 := subrange_vec_dec v__9 25 25 in
                     let _mappingpatterns_46_ : mword 1 := subrange_vec_dec v__9 26 26 in
                     (and_boolM
                        (returnm ((size_bits_backwards_matches _mappingpatterns_48_)  : bool))
                        ((if size_bits_backwards_matches _mappingpatterns_48_ then
                            (size_bits_backwards _mappingpatterns_48_) >>= fun size =>
                            (and_boolM
                               (returnm ((bool_bits_backwards_matches _mappingpatterns_47_)  : bool))
                               ((if bool_bits_backwards_matches _mappingpatterns_47_ then
                                   (bool_bits_backwards _mappingpatterns_47_) >>= fun rl =>
                                   (and_boolM
                                      (returnm ((bool_bits_backwards_matches _mappingpatterns_46_)
                                        : bool))
                                      ((if bool_bits_backwards_matches _mappingpatterns_46_ then
                                          (bool_bits_backwards _mappingpatterns_46_) >>= fun aq =>
                                          returnm ((Z.leb (projT1 (word_width_bytes size)) 4)
                                           : bool)
                                        else returnm false)
                                       : M (bool)))
                                    : M (bool)
                                 else returnm false)
                                : M (bool)))
                             : M (bool)
                          else returnm false)
                         : M (bool)))
                      : M (bool))
                     (returnm ((andb
                                  (eq_vec (subrange_vec_dec v__9 31 27)
                                     ('b"00010"
                                      : mword (31 - 27 + 1)))
                                  (andb
                                     (eq_vec (subrange_vec_dec v__9 24 20)
                                        ('b"00000"
                                         : mword (24 - 20 + 1)))
                                     (andb
                                        (eq_vec (subrange_vec_dec v__9 14 14)
                                           ('b"0"
                                            : mword (14 - 14 + 1)))
                                        (eq_vec (subrange_vec_dec v__9 6 0)
                                           ('b"0101111"
                                            : mword (6 - 0 + 1))))))
                       : bool))) >>= fun w__22 : bool =>
                  (if sumbool_of_bool w__22 then
                     let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                     let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                     let _mappingpatterns_48_ : mword 2 := subrange_vec_dec v__9 13 12 in
                     let _mappingpatterns_47_ : mword 1 := subrange_vec_dec v__9 25 25 in
                     let _mappingpatterns_46_ : mword 1 := subrange_vec_dec v__9 26 26 in
                     (size_bits_backwards _mappingpatterns_48_) >>= fun size =>
                     (bool_bits_backwards _mappingpatterns_47_) >>= fun rl =>
                     (bool_bits_backwards _mappingpatterns_46_) >>= fun aq =>
                     returnm (LOADRES (aq, rl, rs1, size, rd))
                   else
                     (and_boolM
                        (let _mappingpatterns_51_ : mword 2 := subrange_vec_dec v__9 13 12 in
                        let _mappingpatterns_50_ : mword 1 := subrange_vec_dec v__9 25 25 in
                        let _mappingpatterns_49_ : mword 1 := subrange_vec_dec v__9 26 26 in
                        (and_boolM
                           (returnm ((size_bits_backwards_matches _mappingpatterns_51_)  : bool))
                           ((if size_bits_backwards_matches _mappingpatterns_51_ then
                               (size_bits_backwards _mappingpatterns_51_) >>= fun size =>
                               (and_boolM
                                  (returnm ((bool_bits_backwards_matches _mappingpatterns_50_)
                                    : bool))
                                  ((if bool_bits_backwards_matches _mappingpatterns_50_ then
                                      (bool_bits_backwards _mappingpatterns_50_) >>= fun rl =>
                                      (and_boolM
                                         (returnm ((bool_bits_backwards_matches _mappingpatterns_49_)
                                           : bool))
                                         ((if bool_bits_backwards_matches _mappingpatterns_49_ then
                                             (bool_bits_backwards _mappingpatterns_49_) >>= fun aq =>
                                             returnm ((Z.leb (projT1 (word_width_bytes size)) 4)
                                              : bool)
                                           else returnm false)
                                          : M (bool)))
                                       : M (bool)
                                    else returnm false)
                                   : M (bool)))
                                : M (bool)
                             else returnm false)
                            : M (bool)))
                         : M (bool))
                        (returnm ((andb
                                     (eq_vec (subrange_vec_dec v__9 31 27)
                                        ('b"00011"
                                         : mword (31 - 27 + 1)))
                                     (andb
                                        (eq_vec (subrange_vec_dec v__9 14 14)
                                           ('b"0"
                                            : mword (14 - 14 + 1)))
                                        (eq_vec (subrange_vec_dec v__9 6 0)
                                           ('b"0101111"
                                            : mword (6 - 0 + 1)))))
                          : bool))) >>= fun w__29 : bool =>
                     (if sumbool_of_bool w__29 then
                        let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                        let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                        let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                        let _mappingpatterns_51_ : mword 2 := subrange_vec_dec v__9 13 12 in
                        let _mappingpatterns_50_ : mword 1 := subrange_vec_dec v__9 25 25 in
                        let _mappingpatterns_49_ : mword 1 := subrange_vec_dec v__9 26 26 in
                        (size_bits_backwards _mappingpatterns_51_) >>= fun size =>
                        (bool_bits_backwards _mappingpatterns_50_) >>= fun rl =>
                        (bool_bits_backwards _mappingpatterns_49_) >>= fun aq =>
                        returnm (STORECON (aq, rl, rs2, rs1, size, rd))
                      else
                        (and_boolM
                           (let _mappingpatterns_52_ : mword 5 := subrange_vec_dec v__9 31 27 in
                           let _mappingpatterns_55_ : mword 2 := subrange_vec_dec v__9 13 12 in
                           let _mappingpatterns_54_ : mword 1 := subrange_vec_dec v__9 25 25 in
                           let _mappingpatterns_53_ : mword 1 := subrange_vec_dec v__9 26 26 in
                           let _mappingpatterns_52_ : mword 5 := subrange_vec_dec v__9 31 27 in
                           (and_boolM
                              (returnm ((size_bits_backwards_matches _mappingpatterns_55_)  : bool))
                              ((if size_bits_backwards_matches _mappingpatterns_55_ then
                                  (size_bits_backwards _mappingpatterns_55_) >>= fun size =>
                                  (and_boolM
                                     (returnm ((bool_bits_backwards_matches _mappingpatterns_54_)
                                       : bool))
                                     ((if bool_bits_backwards_matches _mappingpatterns_54_ then
                                         (bool_bits_backwards _mappingpatterns_54_) >>= fun rl =>
                                         (and_boolM
                                            (returnm ((bool_bits_backwards_matches
                                                         _mappingpatterns_53_)
                                              : bool))
                                            ((if bool_bits_backwards_matches _mappingpatterns_53_
                                              then
                                                (bool_bits_backwards _mappingpatterns_53_) >>= fun aq =>
                                                (and_boolM
                                                   (returnm ((encdec_amoop_backwards_matches
                                                                _mappingpatterns_52_)
                                                     : bool))
                                                   ((if encdec_amoop_backwards_matches
                                                          _mappingpatterns_52_ then
                                                       (encdec_amoop_backwards _mappingpatterns_52_) >>= fun op =>
                                                       returnm ((Z.leb
                                                                   (projT1
                                                                    (word_width_bytes size)) 4)
                                                        : bool)
                                                     else returnm false)
                                                    : M (bool)))
                                                 : M (bool)
                                              else returnm false)
                                             : M (bool)))
                                          : M (bool)
                                       else returnm false)
                                      : M (bool)))
                                   : M (bool)
                                else returnm false)
                               : M (bool)))
                            : M (bool))
                           (returnm ((andb
                                        (eq_vec (subrange_vec_dec v__9 14 14)
                                           ('b"0"
                                            : mword (14 - 14 + 1)))
                                        (eq_vec (subrange_vec_dec v__9 6 0)
                                           ('b"0101111"
                                            : mword (6 - 0 + 1))))
                             : bool))) >>= fun w__38 : bool =>
                        (if sumbool_of_bool w__38 then
                           let _mappingpatterns_52_ : mword 5 := subrange_vec_dec v__9 31 27 in
                           let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                           let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                           let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                           let _mappingpatterns_55_ : mword 2 := subrange_vec_dec v__9 13 12 in
                           let _mappingpatterns_54_ : mword 1 := subrange_vec_dec v__9 25 25 in
                           let _mappingpatterns_53_ : mword 1 := subrange_vec_dec v__9 26 26 in
                           let _mappingpatterns_52_ : mword 5 := subrange_vec_dec v__9 31 27 in
                           (size_bits_backwards _mappingpatterns_55_) >>= fun size =>
                           (bool_bits_backwards _mappingpatterns_54_) >>= fun rl =>
                           (bool_bits_backwards _mappingpatterns_53_) >>= fun aq =>
                           (encdec_amoop_backwards _mappingpatterns_52_) >>= fun op =>
                           returnm (AMO (op, aq, rl, rs2, rs1, size, rd))
                         else
                           (and_boolM
                              (let _mappingpatterns_56_ : mword 3 := subrange_vec_dec v__9 14 12 in
                              (and_boolM
                                 (returnm ((encdec_mul_op_backwards_matches _mappingpatterns_56_)
                                   : bool))
                                 ((if encdec_mul_op_backwards_matches _mappingpatterns_56_ then
                                     (encdec_mul_op_backwards _mappingpatterns_56_) >>= fun '(high, signed1, signed2) =>
                                     returnm (true  : bool)
                                   else returnm false)
                                  : M (bool)))
                               : M (bool))
                              (returnm ((andb
                                           (eq_vec (subrange_vec_dec v__9 31 25)
                                              ('b"0000001"
                                               : mword (31 - 25 + 1)))
                                           (eq_vec (subrange_vec_dec v__9 6 0)
                                              ('b"0110011"
                                               : mword (6 - 0 + 1))))
                                : bool))) >>= fun w__41 : bool =>
                           (if sumbool_of_bool w__41 then
                              let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                              let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                              let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                              let _mappingpatterns_56_ : mword 3 := subrange_vec_dec v__9 14 12 in
                              (encdec_mul_op_backwards _mappingpatterns_56_) >>= fun '(high, signed1, signed2) =>
                              returnm (MUL (rs2, rs1, rd, high, signed1, signed2))
                            else
                              (and_boolM
                                 (let _mappingpatterns_57_ : mword 1 := subrange_vec_dec v__9 12 12 in
                                 (and_boolM
                                    (returnm ((bool_not_bits_backwards_matches _mappingpatterns_57_)
                                      : bool))
                                    ((if bool_not_bits_backwards_matches _mappingpatterns_57_ then
                                        (bool_not_bits_backwards _mappingpatterns_57_) >>= fun s =>
                                        returnm (true  : bool)
                                      else returnm false)
                                     : M (bool)))
                                  : M (bool))
                                 (returnm ((andb
                                              (eq_vec (subrange_vec_dec v__9 31 25)
                                                 ('b"0000001"
                                                  : mword (31 - 25 + 1)))
                                              (andb
                                                 (eq_vec (subrange_vec_dec v__9 14 13)
                                                    ('b"10"
                                                     : mword (14 - 13 + 1)))
                                                 (eq_vec (subrange_vec_dec v__9 6 0)
                                                    ('b"0110011"
                                                     : mword (6 - 0 + 1)))))
                                   : bool))) >>= fun w__44 : bool =>
                              (if sumbool_of_bool w__44 then
                                 let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                                 let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                 let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                 let _mappingpatterns_57_ : mword 1 := subrange_vec_dec v__9 12 12 in
                                 (bool_not_bits_backwards _mappingpatterns_57_) >>= fun s =>
                                 returnm (DIV (rs2, rs1, rd, s))
                               else
                                 (and_boolM
                                    (let _mappingpatterns_58_ : mword 1 :=
                                      subrange_vec_dec v__9 12 12 in
                                    (and_boolM
                                       (returnm ((bool_not_bits_backwards_matches
                                                    _mappingpatterns_58_)
                                         : bool))
                                       ((if bool_not_bits_backwards_matches _mappingpatterns_58_
                                         then
                                           (bool_not_bits_backwards _mappingpatterns_58_) >>= fun s =>
                                           returnm (true  : bool)
                                         else returnm false)
                                        : M (bool)))
                                     : M (bool))
                                    (returnm ((andb
                                                 (eq_vec (subrange_vec_dec v__9 31 25)
                                                    ('b"0000001"
                                                     : mword (31 - 25 + 1)))
                                                 (andb
                                                    (eq_vec (subrange_vec_dec v__9 14 13)
                                                       ('b"11"
                                                        : mword (14 - 13 + 1)))
                                                    (eq_vec (subrange_vec_dec v__9 6 0)
                                                       ('b"0110011"
                                                        : mword (6 - 0 + 1)))))
                                      : bool))) >>= fun w__47 : bool =>
                                 (if sumbool_of_bool w__47 then
                                    let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                                    let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                    let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                    let _mappingpatterns_58_ : mword 1 :=
                                      subrange_vec_dec v__9 12 12 in
                                    (bool_not_bits_backwards _mappingpatterns_58_) >>= fun s =>
                                    returnm (REM (rs2, rs1, rd, s))
                                  else if sumbool_of_bool
                                    (andb (Z.eqb 32 64)
                                       (andb
                                          (eq_vec (subrange_vec_dec v__9 31 25)
                                             ('b"0000001"
                                              : mword (31 - 25 + 1)))
                                          (andb
                                             (eq_vec (subrange_vec_dec v__9 14 12)
                                                ('b"000"
                                                 : mword (14 - 12 + 1)))
                                             (eq_vec (subrange_vec_dec v__9 6 0)
                                                ('b"0111011"
                                                 : mword (6 - 0 + 1)))))) then
                                    let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                                    let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                    let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                    returnm (MULW (rs2, rs1, rd))
                                  else
                                    (and_boolM
                                       (let _mappingpatterns_59_ : mword 1 :=
                                         subrange_vec_dec v__9 12 12 in
                                       (and_boolM
                                          (returnm ((bool_not_bits_backwards_matches
                                                       _mappingpatterns_59_)
                                            : bool))
                                          ((if bool_not_bits_backwards_matches _mappingpatterns_59_
                                            then
                                              (bool_not_bits_backwards _mappingpatterns_59_) >>= fun s =>
                                              returnm ((Z.eqb 32 64)  : bool)
                                            else returnm false)
                                           : M (bool)))
                                        : M (bool))
                                       (returnm ((andb
                                                    (eq_vec (subrange_vec_dec v__9 31 25)
                                                       ('b"0000001"
                                                        : mword (31 - 25 + 1)))
                                                    (andb
                                                       (eq_vec (subrange_vec_dec v__9 14 13)
                                                          ('b"10"
                                                           : mword (14 - 13 + 1)))
                                                       (eq_vec (subrange_vec_dec v__9 6 0)
                                                          ('b"0111011"
                                                           : mword (6 - 0 + 1)))))
                                         : bool))) >>= fun w__50 : bool =>
                                    (if sumbool_of_bool w__50 then
                                       let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                                       let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                       let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                       let _mappingpatterns_59_ : mword 1 :=
                                         subrange_vec_dec v__9 12 12 in
                                       (bool_not_bits_backwards _mappingpatterns_59_) >>= fun s =>
                                       returnm (DIVW (rs2, rs1, rd, s))
                                     else
                                       (and_boolM
                                          (let _mappingpatterns_60_ : mword 1 :=
                                            subrange_vec_dec v__9 12 12 in
                                          (and_boolM
                                             (returnm ((bool_not_bits_backwards_matches
                                                          _mappingpatterns_60_)
                                               : bool))
                                             ((if bool_not_bits_backwards_matches
                                                    _mappingpatterns_60_ then
                                                 (bool_not_bits_backwards _mappingpatterns_60_) >>= fun s =>
                                                 returnm ((Z.eqb 32 64)  : bool)
                                               else returnm false)
                                              : M (bool)))
                                           : M (bool))
                                          (returnm ((andb
                                                       (eq_vec (subrange_vec_dec v__9 31 25)
                                                          ('b"0000001"
                                                           : mword (31 - 25 + 1)))
                                                       (andb
                                                          (eq_vec (subrange_vec_dec v__9 14 13)
                                                             ('b"11"
                                                              : mword (14 - 13 + 1)))
                                                          (eq_vec (subrange_vec_dec v__9 6 0)
                                                             ('b"0111011"
                                                              : mword (6 - 0 + 1)))))
                                            : bool))) >>= fun w__53 : bool =>
                                       (if sumbool_of_bool w__53 then
                                          let rs2 : mword 5 := subrange_vec_dec v__9 24 20 in
                                          let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                          let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                          let _mappingpatterns_60_ : mword 1 :=
                                            subrange_vec_dec v__9 12 12 in
                                          (bool_not_bits_backwards _mappingpatterns_60_) >>= fun s =>
                                          returnm (REMW (rs2, rs1, rd, s))
                                        else
                                          (and_boolM
                                             (let _mappingpatterns_62_ : mword 2 :=
                                               subrange_vec_dec v__9 13 12 in
                                             let _mappingpatterns_61_ : mword 1 :=
                                               subrange_vec_dec v__9 14 14 in
                                             (and_boolM
                                                (returnm ((encdec_csrop_backwards_matches
                                                             _mappingpatterns_62_)
                                                  : bool))
                                                ((if encdec_csrop_backwards_matches
                                                       _mappingpatterns_62_ then
                                                    (encdec_csrop_backwards _mappingpatterns_62_) >>= fun op =>
                                                    (and_boolM
                                                       (returnm ((bool_bits_backwards_matches
                                                                    _mappingpatterns_61_)
                                                         : bool))
                                                       ((if bool_bits_backwards_matches
                                                              _mappingpatterns_61_ then
                                                           (bool_bits_backwards _mappingpatterns_61_) >>= fun is_imm =>
                                                           returnm (true  : bool)
                                                         else returnm false)
                                                        : M (bool)))
                                                     : M (bool)
                                                  else returnm false)
                                                 : M (bool)))
                                              : M (bool))
                                             (returnm ((eq_vec (subrange_vec_dec v__9 6 0)
                                                          ('b"1110011"
                                                           : mword (6 - 0 + 1)))
                                               : bool))) >>= fun w__58 : bool =>
                                          (if sumbool_of_bool w__58 then
                                             let csr : mword 12 := subrange_vec_dec v__9 31 20 in
                                             let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                             let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                             let csr : mword 12 := subrange_vec_dec v__9 31 20 in
                                             let _mappingpatterns_62_ : mword 2 :=
                                               subrange_vec_dec v__9 13 12 in
                                             let _mappingpatterns_61_ : mword 1 :=
                                               subrange_vec_dec v__9 14 14 in
                                             (encdec_csrop_backwards _mappingpatterns_62_) >>= fun op =>
                                             (bool_bits_backwards _mappingpatterns_61_) >>= fun is_imm =>
                                             returnm (CSR (csr, rs1, rd, is_imm, op))
                                           else if eq_vec v__9 (Ox"00200073"  : mword 32) then
                                             returnm (URET tt)
                                           else
                                             (and_boolM ((is_RV32F_or_RV64F tt)  : M (bool))
                                                (returnm ((andb
                                                             (eq_vec (subrange_vec_dec v__9 14 12)
                                                                ('b"010"
                                                                 : mword (14 - 12 + 1)))
                                                             (eq_vec (subrange_vec_dec v__9 6 0)
                                                                ('b"0000111"
                                                                 : mword (6 - 0 + 1))))
                                                  : bool))) >>= fun w__60 : bool =>
                                             (if sumbool_of_bool w__60 then
                                                let imm : mword 12 := subrange_vec_dec v__9 31 20 in
                                                let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                                let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                                let imm : mword 12 := subrange_vec_dec v__9 31 20 in
                                                returnm (LOAD_FP (imm, rs1, rd, WORD))
                                              else
                                                (and_boolM ((is_RV32D_or_RV64D tt)  : M (bool))
                                                   (returnm ((andb
                                                                (eq_vec
                                                                   (subrange_vec_dec v__9 14 12)
                                                                   ('b"011"
                                                                    : mword (14 - 12 + 1)))
                                                                (eq_vec (subrange_vec_dec v__9 6 0)
                                                                   ('b"0000111"
                                                                    : mword (6 - 0 + 1))))
                                                     : bool))) >>= fun w__62 : bool =>
                                                (if sumbool_of_bool w__62 then
                                                   let imm : mword 12 := subrange_vec_dec v__9 31 20 in
                                                   let rs1 : mword 5 := subrange_vec_dec v__9 19 15 in
                                                   let rd : mword 5 := subrange_vec_dec v__9 11 7 in
                                                   let imm : mword 12 := subrange_vec_dec v__9 31 20 in
                                                   returnm (LOAD_FP (imm, rs1, rd, DOUBLE))
                                                 else
                                                   (and_boolM ((is_RV32F_or_RV64F tt)  : M (bool))
                                                      (returnm ((andb
                                                                   (eq_vec
                                                                      (subrange_vec_dec v__9 14 12)
                                                                      ('b"010"
                                                                       : mword (14 - 12 + 1)))
                                                                   (eq_vec
                                                                      (subrange_vec_dec v__9 6 0)
                                                                      ('b"0100111"
                                                                       : mword (6 - 0 + 1))))
                                                        : bool))) >>= fun w__64 : bool =>
                                                   (if sumbool_of_bool w__64 then
                                                      let imm7 : bits 7 :=
                                                        subrange_vec_dec v__9 31 25 in
                                                      let rs2 : mword 5 :=
                                                        subrange_vec_dec v__9 24 20 in
                                                      let rs1 : mword 5 :=
                                                        subrange_vec_dec v__9 19 15 in
                                                      let imm7 : bits 7 :=
                                                        subrange_vec_dec v__9 31 25 in
                                                      let imm5 : bits 5 :=
                                                        subrange_vec_dec v__9 11 7 in
                                                      returnm (STORE_FP
                                                                 (concat_vec (imm7  : bits 7)
                                                                    (imm5
                                                                     : bits 5), rs2, rs1, WORD))
                                                    else
                                                      (and_boolM
                                                         ((is_RV32D_or_RV64D tt)
                                                          : M (bool))
                                                         (returnm ((andb
                                                                      (eq_vec
                                                                         (subrange_vec_dec v__9 14
                                                                            12)
                                                                         ('b"011"
                                                                          : mword (14 - 12 + 1)))
                                                                      (eq_vec
                                                                         (subrange_vec_dec v__9 6 0)
                                                                         ('b"0100111"
                                                                          : mword (6 - 0 + 1))))
                                                           : bool))) >>= fun w__66 : bool =>
                                                      (if sumbool_of_bool w__66 then
                                                         let imm7 : bits 7 :=
                                                           subrange_vec_dec v__9 31 25 in
                                                         let rs2 : mword 5 :=
                                                           subrange_vec_dec v__9 24 20 in
                                                         let rs1 : mword 5 :=
                                                           subrange_vec_dec v__9 19 15 in
                                                         let imm7 : bits 7 :=
                                                           subrange_vec_dec v__9 31 25 in
                                                         let imm5 : bits 5 :=
                                                           subrange_vec_dec v__9 11 7 in
                                                         returnm (STORE_FP
                                                                    (concat_vec (imm7  : bits 7)
                                                                       (imm5
                                                                        : bits 5), rs2, rs1, DOUBLE))
                                                       else
                                                         (and_boolM
                                                            (let _mappingpatterns_63_ : mword 3 :=
                                                              subrange_vec_dec v__9 14 12 in
                                                            (and_boolM
                                                               (returnm ((encdec_rounding_mode_backwards_matches
                                                                            _mappingpatterns_63_)
                                                                 : bool))
                                                               ((if encdec_rounding_mode_backwards_matches
                                                                      _mappingpatterns_63_ then
                                                                   (encdec_rounding_mode_backwards
                                                                      _mappingpatterns_63_) >>= fun rm =>
                                                                   (is_RV32F_or_RV64F tt)
                                                                    : M (bool)
                                                                 else returnm false)
                                                                : M (bool)))
                                                             : M (bool))
                                                            (returnm ((andb
                                                                         (eq_vec
                                                                            (subrange_vec_dec v__9
                                                                               26 25)
                                                                            ('b"00"
                                                                             : mword (26 - 25 + 1)))
                                                                         (eq_vec
                                                                            (subrange_vec_dec v__9 6
                                                                               0)
                                                                            ('b"1000011"
                                                                             : mword (6 - 0 + 1))))
                                                              : bool))) >>= fun w__70 : bool =>
                                                         (if sumbool_of_bool w__70 then
                                                            let rs3 : mword 5 :=
                                                              subrange_vec_dec v__9 31 27 in
                                                            let rs3 : mword 5 :=
                                                              subrange_vec_dec v__9 31 27 in
                                                            let rs2 : mword 5 :=
                                                              subrange_vec_dec v__9 24 20 in
                                                            let rs1 : mword 5 :=
                                                              subrange_vec_dec v__9 19 15 in
                                                            let rd : mword 5 :=
                                                              subrange_vec_dec v__9 11 7 in
                                                            let _mappingpatterns_63_ : mword 3 :=
                                                              subrange_vec_dec v__9 14 12 in
                                                            (encdec_rounding_mode_backwards
                                                               _mappingpatterns_63_) >>= fun rm =>
                                                            returnm (F_MADD_TYPE_S
                                                                       (rs3, rs2, rs1, rm, rd, FMADD_S))
                                                          else
                                                            (and_boolM
                                                               (let _mappingpatterns_64_ : mword 3 :=
                                                                 subrange_vec_dec v__9 14 12 in
                                                               (and_boolM
                                                                  (returnm ((encdec_rounding_mode_backwards_matches
                                                                               _mappingpatterns_64_)
                                                                    : bool))
                                                                  ((if encdec_rounding_mode_backwards_matches
                                                                         _mappingpatterns_64_ then
                                                                      (encdec_rounding_mode_backwards
                                                                         _mappingpatterns_64_) >>= fun rm =>
                                                                      (is_RV32F_or_RV64F tt)
                                                                       : M (bool)
                                                                    else returnm false)
                                                                   : M (bool)))
                                                                : M (bool))
                                                               (returnm ((andb
                                                                            (eq_vec
                                                                               (subrange_vec_dec
                                                                                  v__9 26 25)
                                                                               ('b"00"
                                                                                : mword (26 - 25 + 1)))
                                                                            (eq_vec
                                                                               (subrange_vec_dec
                                                                                  v__9 6 0)
                                                                               ('b"1000111"
                                                                                : mword (6 - 0 + 1))))
                                                                 : bool))) >>= fun w__74 : bool =>
                                                            (if sumbool_of_bool w__74 then
                                                               let rs3 : mword 5 :=
                                                                 subrange_vec_dec v__9 31 27 in
                                                               let rs3 : mword 5 :=
                                                                 subrange_vec_dec v__9 31 27 in
                                                               let rs2 : mword 5 :=
                                                                 subrange_vec_dec v__9 24 20 in
                                                               let rs1 : mword 5 :=
                                                                 subrange_vec_dec v__9 19 15 in
                                                               let rd : mword 5 :=
                                                                 subrange_vec_dec v__9 11 7 in
                                                               let _mappingpatterns_64_ : mword 3 :=
                                                                 subrange_vec_dec v__9 14 12 in
                                                               (encdec_rounding_mode_backwards
                                                                  _mappingpatterns_64_) >>= fun rm =>
                                                               returnm (F_MADD_TYPE_S
                                                                          (rs3, rs2, rs1, rm, rd, FMSUB_S))
                                                             else
                                                               (and_boolM
                                                                  (let _mappingpatterns_65_ : mword 3 :=
                                                                    subrange_vec_dec v__9 14 12 in
                                                                  (and_boolM
                                                                     (returnm ((encdec_rounding_mode_backwards_matches
                                                                                  _mappingpatterns_65_)
                                                                       : bool))
                                                                     ((if encdec_rounding_mode_backwards_matches
                                                                            _mappingpatterns_65_
                                                                       then
                                                                         (encdec_rounding_mode_backwards
                                                                            _mappingpatterns_65_) >>= fun rm =>
                                                                         (is_RV32F_or_RV64F tt)
                                                                          : M (bool)
                                                                       else returnm false)
                                                                      : M (bool)))
                                                                   : M (bool))
                                                                  (returnm ((andb
                                                                               (eq_vec
                                                                                  (subrange_vec_dec
                                                                                     v__9 26 25)
                                                                                  ('b"00"
                                                                                   : mword (26 - 25 + 1)))
                                                                               (eq_vec
                                                                                  (subrange_vec_dec
                                                                                     v__9 6 0)
                                                                                  ('b"1001011"
                                                                                   : mword (6 - 0 + 1))))
                                                                    : bool))) >>= fun w__78 : bool =>
                                                               (if sumbool_of_bool w__78 then
                                                                  let rs3 : mword 5 :=
                                                                    subrange_vec_dec v__9 31 27 in
                                                                  let rs3 : mword 5 :=
                                                                    subrange_vec_dec v__9 31 27 in
                                                                  let rs2 : mword 5 :=
                                                                    subrange_vec_dec v__9 24 20 in
                                                                  let rs1 : mword 5 :=
                                                                    subrange_vec_dec v__9 19 15 in
                                                                  let rd : mword 5 :=
                                                                    subrange_vec_dec v__9 11 7 in
                                                                  let _mappingpatterns_65_ : mword 3 :=
                                                                    subrange_vec_dec v__9 14 12 in
                                                                  (encdec_rounding_mode_backwards
                                                                     _mappingpatterns_65_) >>= fun rm =>
                                                                  returnm (F_MADD_TYPE_S
                                                                             (rs3, rs2, rs1, rm, rd, FNMSUB_S))
                                                                else
                                                                  (and_boolM
                                                                     (let _mappingpatterns_66_ : mword 3 :=
                                                                       subrange_vec_dec v__9 14 12 in
                                                                     (and_boolM
                                                                        (returnm ((encdec_rounding_mode_backwards_matches
                                                                                     _mappingpatterns_66_)
                                                                          : bool))
                                                                        ((if encdec_rounding_mode_backwards_matches
                                                                               _mappingpatterns_66_
                                                                          then
                                                                            (encdec_rounding_mode_backwards
                                                                               _mappingpatterns_66_) >>= fun rm =>
                                                                            (is_RV32F_or_RV64F tt)
                                                                             : M (bool)
                                                                          else returnm false)
                                                                         : M (bool)))
                                                                      : M (bool))
                                                                     (returnm ((andb
                                                                                  (eq_vec
                                                                                     (subrange_vec_dec
                                                                                        v__9 26 25)
                                                                                     ('b"00"
                                                                                      : mword (26 - 25 + 1)))
                                                                                  (eq_vec
                                                                                     (subrange_vec_dec
                                                                                        v__9 6 0)
                                                                                     ('b"1001111"
                                                                                      : mword (6 - 0 + 1))))
                                                                       : bool))) >>= fun w__82 : bool =>
                                                                  (if sumbool_of_bool w__82 then
                                                                     let rs3 : mword 5 :=
                                                                       subrange_vec_dec v__9 31 27 in
                                                                     let rs3 : mword 5 :=
                                                                       subrange_vec_dec v__9 31 27 in
                                                                     let rs2 : mword 5 :=
                                                                       subrange_vec_dec v__9 24 20 in
                                                                     let rs1 : mword 5 :=
                                                                       subrange_vec_dec v__9 19 15 in
                                                                     let rd : mword 5 :=
                                                                       subrange_vec_dec v__9 11 7 in
                                                                     let _mappingpatterns_66_ : mword 3 :=
                                                                       subrange_vec_dec v__9 14 12 in
                                                                     (encdec_rounding_mode_backwards
                                                                        _mappingpatterns_66_) >>= fun rm =>
                                                                     returnm (F_MADD_TYPE_S
                                                                                (rs3, rs2, rs1, rm, rd, FNMADD_S))
                                                                   else
                                                                     (and_boolM
                                                                        (let _mappingpatterns_67_ : mword 3 :=
                                                                          subrange_vec_dec v__9 14
                                                                            12 in
                                                                        (and_boolM
                                                                           (returnm ((encdec_rounding_mode_backwards_matches
                                                                                        _mappingpatterns_67_)
                                                                             : bool))
                                                                           ((if encdec_rounding_mode_backwards_matches
                                                                                  _mappingpatterns_67_
                                                                             then
                                                                               (encdec_rounding_mode_backwards
                                                                                  _mappingpatterns_67_) >>= fun rm =>
                                                                               (is_RV32F_or_RV64F tt)
                                                                                : M (bool)
                                                                             else returnm false)
                                                                            : M (bool)))
                                                                         : M (bool))
                                                                        (returnm ((andb
                                                                                     (eq_vec
                                                                                        (subrange_vec_dec
                                                                                           v__9 31
                                                                                           25)
                                                                                        ('b"0000000"
                                                                                         : mword (31 - 25 + 1)))
                                                                                     (eq_vec
                                                                                        (subrange_vec_dec
                                                                                           v__9 6 0)
                                                                                        ('b"1010011"
                                                                                         : mword (6 - 0 + 1))))
                                                                          : bool))) >>= fun w__86 : bool =>
                                                                     (if sumbool_of_bool w__86 then
                                                                        let rs2 : mword 5 :=
                                                                          subrange_vec_dec v__9 24
                                                                            20 in
                                                                        let rs1 : mword 5 :=
                                                                          subrange_vec_dec v__9 19
                                                                            15 in
                                                                        let rd : mword 5 :=
                                                                          subrange_vec_dec v__9 11 7 in
                                                                        let _mappingpatterns_67_ : mword 3 :=
                                                                          subrange_vec_dec v__9 14
                                                                            12 in
                                                                        (encdec_rounding_mode_backwards
                                                                           _mappingpatterns_67_) >>= fun rm =>
                                                                        returnm (F_BIN_RM_TYPE_S
                                                                                   (rs2, rs1, rm, rd, FADD_S))
                                                                      else
                                                                        (and_boolM
                                                                           (let _mappingpatterns_68_ : mword 3 :=
                                                                             subrange_vec_dec v__9
                                                                               14 12 in
                                                                           (and_boolM
                                                                              (returnm ((encdec_rounding_mode_backwards_matches
                                                                                           _mappingpatterns_68_)
                                                                                : bool))
                                                                              ((if encdec_rounding_mode_backwards_matches
                                                                                     _mappingpatterns_68_
                                                                                then
                                                                                  (encdec_rounding_mode_backwards
                                                                                     _mappingpatterns_68_) >>= fun rm =>
                                                                                  (is_RV32F_or_RV64F
                                                                                     tt)
                                                                                   : M (bool)
                                                                                else returnm false)
                                                                               : M (bool)))
                                                                            : M (bool))
                                                                           (returnm ((andb
                                                                                        (eq_vec
                                                                                           (subrange_vec_dec
                                                                                              v__9
                                                                                              31 25)
                                                                                           ('b"0000100"
                                                                                            : mword (31 - 25 + 1)))
                                                                                        (eq_vec
                                                                                           (subrange_vec_dec
                                                                                              v__9 6
                                                                                              0)
                                                                                           ('b"1010011"
                                                                                            : mword (6 - 0 + 1))))
                                                                             : bool))) >>= fun w__90 : bool =>
                                                                        (if sumbool_of_bool
                                                                           w__90 then
                                                                           let rs2 : mword 5 :=
                                                                             subrange_vec_dec v__9
                                                                               24 20 in
                                                                           let rs1 : mword 5 :=
                                                                             subrange_vec_dec v__9
                                                                               19 15 in
                                                                           let rd : mword 5 :=
                                                                             subrange_vec_dec v__9
                                                                               11 7 in
                                                                           let _mappingpatterns_68_ : mword 3 :=
                                                                             subrange_vec_dec v__9
                                                                               14 12 in
                                                                           (encdec_rounding_mode_backwards
                                                                              _mappingpatterns_68_) >>= fun rm =>
                                                                           returnm (F_BIN_RM_TYPE_S
                                                                                      (rs2, rs1, rm, rd, FSUB_S))
                                                                         else
                                                                           (and_boolM
                                                                              (let _mappingpatterns_69_ : mword 3 :=
                                                                                subrange_vec_dec
                                                                                  v__9 14 12 in
                                                                              (and_boolM
                                                                                 (returnm ((encdec_rounding_mode_backwards_matches
                                                                                              _mappingpatterns_69_)
                                                                                   : bool))
                                                                                 ((if encdec_rounding_mode_backwards_matches
                                                                                        _mappingpatterns_69_
                                                                                   then
                                                                                     (encdec_rounding_mode_backwards
                                                                                        _mappingpatterns_69_) >>= fun rm =>
                                                                                     (is_RV32F_or_RV64F
                                                                                        tt)
                                                                                      : M (bool)
                                                                                   else
                                                                                     returnm false)
                                                                                  : M (bool)))
                                                                               : M (bool))
                                                                              (returnm ((andb
                                                                                           (eq_vec
                                                                                              (subrange_vec_dec
                                                                                                 v__9
                                                                                                 31
                                                                                                 25)
                                                                                              ('b"0001000"
                                                                                               : mword (31 - 25 + 1)))
                                                                                           (eq_vec
                                                                                              (subrange_vec_dec
                                                                                                 v__9
                                                                                                 6 0)
                                                                                              ('b"1010011"
                                                                                               : mword (6 - 0 + 1))))
                                                                                : bool))) >>= fun w__94 : bool =>
                                                                           (if sumbool_of_bool
                                                                              w__94 then
                                                                              let rs2 : mword 5 :=
                                                                                subrange_vec_dec
                                                                                  v__9 24 20 in
                                                                              let rs1 : mword 5 :=
                                                                                subrange_vec_dec
                                                                                  v__9 19 15 in
                                                                              let rd : mword 5 :=
                                                                                subrange_vec_dec
                                                                                  v__9 11 7 in
                                                                              let _mappingpatterns_69_ : mword 3 :=
                                                                                subrange_vec_dec
                                                                                  v__9 14 12 in
                                                                              (encdec_rounding_mode_backwards
                                                                                 _mappingpatterns_69_) >>= fun rm =>
                                                                              returnm (F_BIN_RM_TYPE_S
                                                                                         (rs2, rs1, rm, rd, FMUL_S))
                                                                            else
                                                                              (and_boolM
                                                                                 (let _mappingpatterns_70_ : mword 3 :=
                                                                                   subrange_vec_dec
                                                                                     v__9 14 12 in
                                                                                 (and_boolM
                                                                                    (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                 _mappingpatterns_70_)
                                                                                      : bool))
                                                                                    ((if encdec_rounding_mode_backwards_matches
                                                                                           _mappingpatterns_70_
                                                                                      then
                                                                                        (encdec_rounding_mode_backwards
                                                                                           _mappingpatterns_70_) >>= fun rm =>
                                                                                        (is_RV32F_or_RV64F
                                                                                           tt)
                                                                                         : M (bool)
                                                                                      else
                                                                                        returnm false)
                                                                                     : M (bool)))
                                                                                  : M (bool))
                                                                                 (returnm ((andb
                                                                                              (eq_vec
                                                                                                 (subrange_vec_dec
                                                                                                    v__9
                                                                                                    31
                                                                                                    25)
                                                                                                 ('b"0001100"
                                                                                                  : mword (31 - 25 + 1)))
                                                                                              (eq_vec
                                                                                                 (subrange_vec_dec
                                                                                                    v__9
                                                                                                    6
                                                                                                    0)
                                                                                                 ('b"1010011"
                                                                                                  : mword (6 - 0 + 1))))
                                                                                   : bool))) >>= fun w__98 : bool =>
                                                                              (if sumbool_of_bool
                                                                                 w__98 then
                                                                                 let rs2 : mword 5 :=
                                                                                   subrange_vec_dec
                                                                                     v__9 24 20 in
                                                                                 let rs1 : mword 5 :=
                                                                                   subrange_vec_dec
                                                                                     v__9 19 15 in
                                                                                 let rd : mword 5 :=
                                                                                   subrange_vec_dec
                                                                                     v__9 11 7 in
                                                                                 let _mappingpatterns_70_ : mword 3 :=
                                                                                   subrange_vec_dec
                                                                                     v__9 14 12 in
                                                                                 (encdec_rounding_mode_backwards
                                                                                    _mappingpatterns_70_) >>= fun rm =>
                                                                                 returnm (F_BIN_RM_TYPE_S
                                                                                            (rs2, rs1, rm, rd, FDIV_S))
                                                                               else
                                                                                 (and_boolM
                                                                                    (let _mappingpatterns_71_ : mword 3 :=
                                                                                      subrange_vec_dec
                                                                                        v__9 14 12 in
                                                                                    (and_boolM
                                                                                       (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                    _mappingpatterns_71_)
                                                                                         : bool))
                                                                                       ((if encdec_rounding_mode_backwards_matches
                                                                                              _mappingpatterns_71_
                                                                                         then
                                                                                           (encdec_rounding_mode_backwards
                                                                                              _mappingpatterns_71_) >>= fun rm =>
                                                                                           (is_RV32F_or_RV64F
                                                                                              tt)
                                                                                            : M (bool)
                                                                                         else
                                                                                           returnm false)
                                                                                        : M (bool)))
                                                                                     : M (bool))
                                                                                    (returnm ((andb
                                                                                                 (eq_vec
                                                                                                    (subrange_vec_dec
                                                                                                       v__9
                                                                                                       31
                                                                                                       20)
                                                                                                    (Ox"580"
                                                                                                     : mword (31 - 20 + 1)))
                                                                                                 (eq_vec
                                                                                                    (subrange_vec_dec
                                                                                                       v__9
                                                                                                       6
                                                                                                       0)
                                                                                                    ('b"1010011"
                                                                                                     : mword (6 - 0 + 1))))
                                                                                      : bool))) >>= fun w__102 : bool =>
                                                                                 (if sumbool_of_bool
                                                                                    w__102 then
                                                                                    let rs1 : mword 5 :=
                                                                                      subrange_vec_dec
                                                                                        v__9 19 15 in
                                                                                    let rd : mword 5 :=
                                                                                      subrange_vec_dec
                                                                                        v__9 11 7 in
                                                                                    let _mappingpatterns_71_ : mword 3 :=
                                                                                      subrange_vec_dec
                                                                                        v__9 14 12 in
                                                                                    (encdec_rounding_mode_backwards
                                                                                       _mappingpatterns_71_) >>= fun rm =>
                                                                                    returnm (F_UN_RM_TYPE_S
                                                                                               (rs1, rm, rd, FSQRT_S))
                                                                                  else
                                                                                    (and_boolM
                                                                                       (let _mappingpatterns_72_ : mword 3 :=
                                                                                         subrange_vec_dec
                                                                                           v__9 14
                                                                                           12 in
                                                                                       (and_boolM
                                                                                          (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                       _mappingpatterns_72_)
                                                                                            : bool))
                                                                                          ((if encdec_rounding_mode_backwards_matches
                                                                                                 _mappingpatterns_72_
                                                                                            then
                                                                                              (encdec_rounding_mode_backwards
                                                                                                 _mappingpatterns_72_) >>= fun rm =>
                                                                                              (is_RV32F_or_RV64F
                                                                                                 tt)
                                                                                               : M (bool)
                                                                                            else
                                                                                              returnm false)
                                                                                           : M (bool)))
                                                                                        : M (bool))
                                                                                       (returnm ((andb
                                                                                                    (eq_vec
                                                                                                       (subrange_vec_dec
                                                                                                          v__9
                                                                                                          31
                                                                                                          20)
                                                                                                       (Ox"C00"
                                                                                                        : mword (31 - 20 + 1)))
                                                                                                    (eq_vec
                                                                                                       (subrange_vec_dec
                                                                                                          v__9
                                                                                                          6
                                                                                                          0)
                                                                                                       ('b"1010011"
                                                                                                        : mword (6 - 0 + 1))))
                                                                                         : bool))) >>= fun w__106 : bool =>
                                                                                    (if sumbool_of_bool
                                                                                       w__106 then
                                                                                       let rs1 : mword 5 :=
                                                                                         subrange_vec_dec
                                                                                           v__9 19
                                                                                           15 in
                                                                                       let rd : mword 5 :=
                                                                                         subrange_vec_dec
                                                                                           v__9 11 7 in
                                                                                       let _mappingpatterns_72_ : mword 3 :=
                                                                                         subrange_vec_dec
                                                                                           v__9 14
                                                                                           12 in
                                                                                       (encdec_rounding_mode_backwards
                                                                                          _mappingpatterns_72_) >>= fun rm =>
                                                                                       returnm (F_UN_RM_TYPE_S
                                                                                                  (rs1, rm, rd, FCVT_W_S))
                                                                                     else
                                                                                       (and_boolM
                                                                                          (let _mappingpatterns_73_ : mword 3 :=
                                                                                            subrange_vec_dec
                                                                                              v__9
                                                                                              14 12 in
                                                                                          (and_boolM
                                                                                             (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                          _mappingpatterns_73_)
                                                                                               : bool))
                                                                                             ((if encdec_rounding_mode_backwards_matches
                                                                                                    _mappingpatterns_73_
                                                                                               then
                                                                                                 (encdec_rounding_mode_backwards
                                                                                                    _mappingpatterns_73_) >>= fun rm =>
                                                                                                 (is_RV32F_or_RV64F
                                                                                                    tt)
                                                                                                  : M (bool)
                                                                                               else
                                                                                                 returnm false)
                                                                                              : M (bool)))
                                                                                           : M (bool))
                                                                                          (returnm ((andb
                                                                                                       (eq_vec
                                                                                                          (subrange_vec_dec
                                                                                                             v__9
                                                                                                             31
                                                                                                             20)
                                                                                                          (Ox"C01"
                                                                                                           : mword (31 - 20 + 1)))
                                                                                                       (eq_vec
                                                                                                          (subrange_vec_dec
                                                                                                             v__9
                                                                                                             6
                                                                                                             0)
                                                                                                          ('b"1010011"
                                                                                                           : mword (6 - 0 + 1))))
                                                                                            : bool))) >>= fun w__110 : bool =>
                                                                                       (if sumbool_of_bool
                                                                                          w__110
                                                                                        then
                                                                                          let rs1 : mword 5 :=
                                                                                            subrange_vec_dec
                                                                                              v__9
                                                                                              19 15 in
                                                                                          let rd : mword 5 :=
                                                                                            subrange_vec_dec
                                                                                              v__9
                                                                                              11 7 in
                                                                                          let _mappingpatterns_73_ : mword 3 :=
                                                                                            subrange_vec_dec
                                                                                              v__9
                                                                                              14 12 in
                                                                                          (encdec_rounding_mode_backwards
                                                                                             _mappingpatterns_73_) >>= fun rm =>
                                                                                          returnm (F_UN_RM_TYPE_S
                                                                                                     (rs1, rm, rd, FCVT_WU_S))
                                                                                        else
                                                                                          (and_boolM
                                                                                             (let _mappingpatterns_74_ : mword 3 :=
                                                                                               subrange_vec_dec
                                                                                                 v__9
                                                                                                 14
                                                                                                 12 in
                                                                                             (and_boolM
                                                                                                (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                             _mappingpatterns_74_)
                                                                                                  : bool))
                                                                                                ((if
                                                                                                    encdec_rounding_mode_backwards_matches
                                                                                                      _mappingpatterns_74_
                                                                                                  then
                                                                                                    (encdec_rounding_mode_backwards
                                                                                                       _mappingpatterns_74_) >>= fun rm =>
                                                                                                    (is_RV32F_or_RV64F
                                                                                                       tt)
                                                                                                     : M (bool)
                                                                                                  else
                                                                                                    returnm false)
                                                                                                 : M (bool)))
                                                                                              : M (bool))
                                                                                             (returnm ((andb
                                                                                                          (eq_vec
                                                                                                             (subrange_vec_dec
                                                                                                                v__9
                                                                                                                31
                                                                                                                20)
                                                                                                             (Ox"D00"
                                                                                                              : mword (31 - 20 + 1)))
                                                                                                          (eq_vec
                                                                                                             (subrange_vec_dec
                                                                                                                v__9
                                                                                                                6
                                                                                                                0)
                                                                                                             ('b"1010011"
                                                                                                              : mword (6 - 0 + 1))))
                                                                                               : bool))) >>= fun w__114 : bool =>
                                                                                          (if sumbool_of_bool
                                                                                             w__114
                                                                                           then
                                                                                             let rs1 : mword 5 :=
                                                                                               subrange_vec_dec
                                                                                                 v__9
                                                                                                 19
                                                                                                 15 in
                                                                                             let rd : mword 5 :=
                                                                                               subrange_vec_dec
                                                                                                 v__9
                                                                                                 11
                                                                                                 7 in
                                                                                             let _mappingpatterns_74_ : mword 3 :=
                                                                                               subrange_vec_dec
                                                                                                 v__9
                                                                                                 14
                                                                                                 12 in
                                                                                             (encdec_rounding_mode_backwards
                                                                                                _mappingpatterns_74_) >>= fun rm =>
                                                                                             returnm (F_UN_RM_TYPE_S
                                                                                                        (rs1, rm, rd, FCVT_S_W))
                                                                                           else
                                                                                             (and_boolM
                                                                                                (let _mappingpatterns_75_ : mword 3 :=
                                                                                                  subrange_vec_dec
                                                                                                    v__9
                                                                                                    14
                                                                                                    12 in
                                                                                                (and_boolM
                                                                                                   (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                _mappingpatterns_75_)
                                                                                                     : bool))
                                                                                                   ((if
                                                                                                       encdec_rounding_mode_backwards_matches
                                                                                                         _mappingpatterns_75_
                                                                                                     then
                                                                                                       (encdec_rounding_mode_backwards
                                                                                                          _mappingpatterns_75_) >>= fun rm =>
                                                                                                       (is_RV32F_or_RV64F
                                                                                                          tt)
                                                                                                        : M (bool)
                                                                                                     else
                                                                                                       returnm false)
                                                                                                    : M (bool)))
                                                                                                 : M (bool))
                                                                                                (returnm ((andb
                                                                                                             (eq_vec
                                                                                                                (subrange_vec_dec
                                                                                                                   v__9
                                                                                                                   31
                                                                                                                   20)
                                                                                                                (Ox"D01"
                                                                                                                 : mword (31 - 20 + 1)))
                                                                                                             (eq_vec
                                                                                                                (subrange_vec_dec
                                                                                                                   v__9
                                                                                                                   6
                                                                                                                   0)
                                                                                                                ('b"1010011"
                                                                                                                 : mword (6 - 0 + 1))))
                                                                                                  : bool))) >>= fun w__118 : bool =>
                                                                                             (if sumbool_of_bool
                                                                                                w__118
                                                                                              then
                                                                                                let rs1 : mword 5 :=
                                                                                                  subrange_vec_dec
                                                                                                    v__9
                                                                                                    19
                                                                                                    15 in
                                                                                                let rd : mword 5 :=
                                                                                                  subrange_vec_dec
                                                                                                    v__9
                                                                                                    11
                                                                                                    7 in
                                                                                                let _mappingpatterns_75_ : mword 3 :=
                                                                                                  subrange_vec_dec
                                                                                                    v__9
                                                                                                    14
                                                                                                    12 in
                                                                                                (encdec_rounding_mode_backwards
                                                                                                   _mappingpatterns_75_) >>= fun rm =>
                                                                                                returnm (F_UN_RM_TYPE_S
                                                                                                           (rs1, rm, rd, FCVT_S_WU))
                                                                                              else
                                                                                                (and_boolM
                                                                                                   (let _mappingpatterns_76_ : mword 3 :=
                                                                                                     subrange_vec_dec
                                                                                                       v__9
                                                                                                       14
                                                                                                       12 in
                                                                                                   (and_boolM
                                                                                                      (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                   _mappingpatterns_76_)
                                                                                                        : bool))
                                                                                                      ((if
                                                                                                          encdec_rounding_mode_backwards_matches
                                                                                                            _mappingpatterns_76_
                                                                                                        then
                                                                                                          (encdec_rounding_mode_backwards
                                                                                                             _mappingpatterns_76_) >>= fun rm =>
                                                                                                          (is_RV64F
                                                                                                             tt)
                                                                                                           : M (bool)
                                                                                                        else
                                                                                                          returnm false)
                                                                                                       : M (bool)))
                                                                                                    : M (bool))
                                                                                                   (returnm ((andb
                                                                                                                (eq_vec
                                                                                                                   (subrange_vec_dec
                                                                                                                      v__9
                                                                                                                      31
                                                                                                                      20)
                                                                                                                   (Ox"C02"
                                                                                                                    : mword (31 - 20 + 1)))
                                                                                                                (eq_vec
                                                                                                                   (subrange_vec_dec
                                                                                                                      v__9
                                                                                                                      6
                                                                                                                      0)
                                                                                                                   ('b"1010011"
                                                                                                                    : mword (6 - 0 + 1))))
                                                                                                     : bool))) >>= fun w__122 : bool =>
                                                                                                (if sumbool_of_bool
                                                                                                   w__122
                                                                                                 then
                                                                                                   let rs1 : mword 5 :=
                                                                                                     subrange_vec_dec
                                                                                                       v__9
                                                                                                       19
                                                                                                       15 in
                                                                                                   let rd : mword 5 :=
                                                                                                     subrange_vec_dec
                                                                                                       v__9
                                                                                                       11
                                                                                                       7 in
                                                                                                   let _mappingpatterns_76_ : mword 3 :=
                                                                                                     subrange_vec_dec
                                                                                                       v__9
                                                                                                       14
                                                                                                       12 in
                                                                                                   (encdec_rounding_mode_backwards
                                                                                                      _mappingpatterns_76_) >>= fun rm =>
                                                                                                   returnm (F_UN_RM_TYPE_S
                                                                                                              (rs1, rm, rd, FCVT_L_S))
                                                                                                 else
                                                                                                   (and_boolM
                                                                                                      (let _mappingpatterns_77_ : mword 3 :=
                                                                                                        subrange_vec_dec
                                                                                                          v__9
                                                                                                          14
                                                                                                          12 in
                                                                                                      (and_boolM
                                                                                                         (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                      _mappingpatterns_77_)
                                                                                                           : bool))
                                                                                                         ((if
                                                                                                             encdec_rounding_mode_backwards_matches
                                                                                                               _mappingpatterns_77_
                                                                                                           then
                                                                                                             (encdec_rounding_mode_backwards
                                                                                                                _mappingpatterns_77_) >>= fun rm =>
                                                                                                             (is_RV64F
                                                                                                                tt)
                                                                                                              : M (bool)
                                                                                                           else
                                                                                                             returnm false)
                                                                                                          : M (bool)))
                                                                                                       : M (bool))
                                                                                                      (returnm ((andb
                                                                                                                   (eq_vec
                                                                                                                      (subrange_vec_dec
                                                                                                                         v__9
                                                                                                                         31
                                                                                                                         20)
                                                                                                                      (Ox"C03"
                                                                                                                       : mword (31 - 20 + 1)))
                                                                                                                   (eq_vec
                                                                                                                      (subrange_vec_dec
                                                                                                                         v__9
                                                                                                                         6
                                                                                                                         0)
                                                                                                                      ('b"1010011"
                                                                                                                       : mword (6 - 0 + 1))))
                                                                                                        : bool))) >>= fun w__126 : bool =>
                                                                                                   (if
                                                                                                      sumbool_of_bool
                                                                                                      w__126
                                                                                                    then
                                                                                                      let rs1 : mword 5 :=
                                                                                                        subrange_vec_dec
                                                                                                          v__9
                                                                                                          19
                                                                                                          15 in
                                                                                                      let rd : mword 5 :=
                                                                                                        subrange_vec_dec
                                                                                                          v__9
                                                                                                          11
                                                                                                          7 in
                                                                                                      let _mappingpatterns_77_ : mword 3 :=
                                                                                                        subrange_vec_dec
                                                                                                          v__9
                                                                                                          14
                                                                                                          12 in
                                                                                                      (encdec_rounding_mode_backwards
                                                                                                         _mappingpatterns_77_) >>= fun rm =>
                                                                                                      returnm (F_UN_RM_TYPE_S
                                                                                                                 (rs1, rm, rd, FCVT_LU_S))
                                                                                                    else
                                                                                                      (and_boolM
                                                                                                         (let _mappingpatterns_78_ : mword 3 :=
                                                                                                           subrange_vec_dec
                                                                                                             v__9
                                                                                                             14
                                                                                                             12 in
                                                                                                         (and_boolM
                                                                                                            (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                         _mappingpatterns_78_)
                                                                                                              : bool))
                                                                                                            ((if
                                                                                                                encdec_rounding_mode_backwards_matches
                                                                                                                  _mappingpatterns_78_
                                                                                                              then
                                                                                                                (encdec_rounding_mode_backwards
                                                                                                                   _mappingpatterns_78_) >>= fun rm =>
                                                                                                                (is_RV64F
                                                                                                                   tt)
                                                                                                                 : M (bool)
                                                                                                              else
                                                                                                                returnm false)
                                                                                                             : M (bool)))
                                                                                                          : M (bool))
                                                                                                         (returnm ((andb
                                                                                                                      (eq_vec
                                                                                                                         (subrange_vec_dec
                                                                                                                            v__9
                                                                                                                            31
                                                                                                                            20)
                                                                                                                         (Ox"D02"
                                                                                                                          : mword (31 - 20 + 1)))
                                                                                                                      (eq_vec
                                                                                                                         (subrange_vec_dec
                                                                                                                            v__9
                                                                                                                            6
                                                                                                                            0)
                                                                                                                         ('b"1010011"
                                                                                                                          : mword (6 - 0 + 1))))
                                                                                                           : bool))) >>= fun w__130 : bool =>
                                                                                                      (if
                                                                                                         sumbool_of_bool
                                                                                                         w__130
                                                                                                       then
                                                                                                         let rs1 : mword 5 :=
                                                                                                           subrange_vec_dec
                                                                                                             v__9
                                                                                                             19
                                                                                                             15 in
                                                                                                         let rd : mword 5 :=
                                                                                                           subrange_vec_dec
                                                                                                             v__9
                                                                                                             11
                                                                                                             7 in
                                                                                                         let _mappingpatterns_78_ : mword 3 :=
                                                                                                           subrange_vec_dec
                                                                                                             v__9
                                                                                                             14
                                                                                                             12 in
                                                                                                         (encdec_rounding_mode_backwards
                                                                                                            _mappingpatterns_78_) >>= fun rm =>
                                                                                                         returnm (F_UN_RM_TYPE_S
                                                                                                                    (rs1, rm, rd, FCVT_S_L))
                                                                                                       else
                                                                                                         (and_boolM
                                                                                                            (let _mappingpatterns_79_ : mword 3 :=
                                                                                                              subrange_vec_dec
                                                                                                                v__9
                                                                                                                14
                                                                                                                12 in
                                                                                                            (and_boolM
                                                                                                               (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                            _mappingpatterns_79_)
                                                                                                                 : bool))
                                                                                                               ((if
                                                                                                                   encdec_rounding_mode_backwards_matches
                                                                                                                     _mappingpatterns_79_
                                                                                                                 then
                                                                                                                   (encdec_rounding_mode_backwards
                                                                                                                      _mappingpatterns_79_) >>= fun rm =>
                                                                                                                   (is_RV64F
                                                                                                                      tt)
                                                                                                                    : M (bool)
                                                                                                                 else
                                                                                                                   returnm false)
                                                                                                                : M (bool)))
                                                                                                             : M (bool))
                                                                                                            (returnm ((andb
                                                                                                                         (eq_vec
                                                                                                                            (subrange_vec_dec
                                                                                                                               v__9
                                                                                                                               31
                                                                                                                               20)
                                                                                                                            (Ox"D03"
                                                                                                                             : mword (31 - 20 + 1)))
                                                                                                                         (eq_vec
                                                                                                                            (subrange_vec_dec
                                                                                                                               v__9
                                                                                                                               6
                                                                                                                               0)
                                                                                                                            ('b"1010011"
                                                                                                                             : mword (6 - 0 + 1))))
                                                                                                              : bool))) >>= fun w__134 : bool =>
                                                                                                         (if
                                                                                                            sumbool_of_bool
                                                                                                            w__134
                                                                                                          then
                                                                                                            let rs1 : mword 5 :=
                                                                                                              subrange_vec_dec
                                                                                                                v__9
                                                                                                                19
                                                                                                                15 in
                                                                                                            let rd : mword 5 :=
                                                                                                              subrange_vec_dec
                                                                                                                v__9
                                                                                                                11
                                                                                                                7 in
                                                                                                            let _mappingpatterns_79_ : mword 3 :=
                                                                                                              subrange_vec_dec
                                                                                                                v__9
                                                                                                                14
                                                                                                                12 in
                                                                                                            (encdec_rounding_mode_backwards
                                                                                                               _mappingpatterns_79_) >>= fun rm =>
                                                                                                            returnm (F_UN_RM_TYPE_S
                                                                                                                       (rs1, rm, rd, FCVT_S_LU))
                                                                                                          else
                                                                                                            (and_boolM
                                                                                                               ((is_RV32F_or_RV64F
                                                                                                                   tt)
                                                                                                                : M (bool))
                                                                                                               (returnm ((andb
                                                                                                                            (eq_vec
                                                                                                                               (subrange_vec_dec
                                                                                                                                  v__9
                                                                                                                                  31
                                                                                                                                  25)
                                                                                                                               ('b"0010000"
                                                                                                                                : mword (31 - 25 + 1)))
                                                                                                                            (andb
                                                                                                                               (eq_vec
                                                                                                                                  (subrange_vec_dec
                                                                                                                                     v__9
                                                                                                                                     14
                                                                                                                                     12)
                                                                                                                                  ('b"000"
                                                                                                                                   : mword (14 - 12 + 1)))
                                                                                                                               (eq_vec
                                                                                                                                  (subrange_vec_dec
                                                                                                                                     v__9
                                                                                                                                     6
                                                                                                                                     0)
                                                                                                                                  ('b"1010011"
                                                                                                                                   : mword (6 - 0 + 1)))))
                                                                                                                 : bool))) >>= fun w__136 : bool =>
                                                                                                            (if
                                                                                                               sumbool_of_bool
                                                                                                               w__136
                                                                                                             then
                                                                                                               let rs2 : mword 5 :=
                                                                                                                 subrange_vec_dec
                                                                                                                   v__9
                                                                                                                   24
                                                                                                                   20 in
                                                                                                               let rs1 : mword 5 :=
                                                                                                                 subrange_vec_dec
                                                                                                                   v__9
                                                                                                                   19
                                                                                                                   15 in
                                                                                                               let rd : mword 5 :=
                                                                                                                 subrange_vec_dec
                                                                                                                   v__9
                                                                                                                   11
                                                                                                                   7 in
                                                                                                               returnm (F_BIN_TYPE_S
                                                                                                                          (rs2, rs1, rd, FSGNJ_S))
                                                                                                             else
                                                                                                               (and_boolM
                                                                                                                  ((is_RV32F_or_RV64F
                                                                                                                      tt)
                                                                                                                   : M (bool))
                                                                                                                  (returnm ((andb
                                                                                                                               (eq_vec
                                                                                                                                  (subrange_vec_dec
                                                                                                                                     v__9
                                                                                                                                     31
                                                                                                                                     25)
                                                                                                                                  ('b"0010000"
                                                                                                                                   : mword (31 - 25 + 1)))
                                                                                                                               (andb
                                                                                                                                  (eq_vec
                                                                                                                                     (subrange_vec_dec
                                                                                                                                        v__9
                                                                                                                                        14
                                                                                                                                        12)
                                                                                                                                     ('b"001"
                                                                                                                                      : mword (14 - 12 + 1)))
                                                                                                                                  (eq_vec
                                                                                                                                     (subrange_vec_dec
                                                                                                                                        v__9
                                                                                                                                        6
                                                                                                                                        0)
                                                                                                                                     ('b"1010011"
                                                                                                                                      : mword (6 - 0 + 1)))))
                                                                                                                    : bool))) >>= fun w__138 : bool =>
                                                                                                               (if
                                                                                                                  sumbool_of_bool
                                                                                                                  w__138
                                                                                                                then
                                                                                                                  let rs2 : mword 5 :=
                                                                                                                    subrange_vec_dec
                                                                                                                      v__9
                                                                                                                      24
                                                                                                                      20 in
                                                                                                                  let rs1 : mword 5 :=
                                                                                                                    subrange_vec_dec
                                                                                                                      v__9
                                                                                                                      19
                                                                                                                      15 in
                                                                                                                  let rd : mword 5 :=
                                                                                                                    subrange_vec_dec
                                                                                                                      v__9
                                                                                                                      11
                                                                                                                      7 in
                                                                                                                  returnm (F_BIN_TYPE_S
                                                                                                                             (rs2, rs1, rd, FSGNJN_S))
                                                                                                                else
                                                                                                                  (and_boolM
                                                                                                                     ((is_RV32F_or_RV64F
                                                                                                                         tt)
                                                                                                                      : M (bool))
                                                                                                                     (returnm ((andb
                                                                                                                                  (eq_vec
                                                                                                                                     (subrange_vec_dec
                                                                                                                                        v__9
                                                                                                                                        31
                                                                                                                                        25)
                                                                                                                                     ('b"0010000"
                                                                                                                                      : mword (31 - 25 + 1)))
                                                                                                                                  (andb
                                                                                                                                     (eq_vec
                                                                                                                                        (subrange_vec_dec
                                                                                                                                           v__9
                                                                                                                                           14
                                                                                                                                           12)
                                                                                                                                        ('b"010"
                                                                                                                                         : mword (14 - 12 + 1)))
                                                                                                                                     (eq_vec
                                                                                                                                        (subrange_vec_dec
                                                                                                                                           v__9
                                                                                                                                           6
                                                                                                                                           0)
                                                                                                                                        ('b"1010011"
                                                                                                                                         : mword (6 - 0 + 1)))))
                                                                                                                       : bool))) >>= fun w__140 : bool =>
                                                                                                                  (if
                                                                                                                     sumbool_of_bool
                                                                                                                     w__140
                                                                                                                   then
                                                                                                                     let rs2 : mword 5 :=
                                                                                                                       subrange_vec_dec
                                                                                                                         v__9
                                                                                                                         24
                                                                                                                         20 in
                                                                                                                     let rs1 : mword 5 :=
                                                                                                                       subrange_vec_dec
                                                                                                                         v__9
                                                                                                                         19
                                                                                                                         15 in
                                                                                                                     let rd : mword 5 :=
                                                                                                                       subrange_vec_dec
                                                                                                                         v__9
                                                                                                                         11
                                                                                                                         7 in
                                                                                                                     returnm (F_BIN_TYPE_S
                                                                                                                                (rs2, rs1, rd, FSGNJX_S))
                                                                                                                   else
                                                                                                                     (and_boolM
                                                                                                                        ((is_RV32F_or_RV64F
                                                                                                                            tt)
                                                                                                                         : M (bool))
                                                                                                                        (returnm ((andb
                                                                                                                                     (eq_vec
                                                                                                                                        (subrange_vec_dec
                                                                                                                                           v__9
                                                                                                                                           31
                                                                                                                                           25)
                                                                                                                                        ('b"0010100"
                                                                                                                                         : mword (31 - 25 + 1)))
                                                                                                                                     (andb
                                                                                                                                        (eq_vec
                                                                                                                                           (subrange_vec_dec
                                                                                                                                              v__9
                                                                                                                                              14
                                                                                                                                              12)
                                                                                                                                           ('b"000"
                                                                                                                                            : mword (14 - 12 + 1)))
                                                                                                                                        (eq_vec
                                                                                                                                           (subrange_vec_dec
                                                                                                                                              v__9
                                                                                                                                              6
                                                                                                                                              0)
                                                                                                                                           ('b"1010011"
                                                                                                                                            : mword (6 - 0 + 1)))))
                                                                                                                          : bool))) >>= fun w__142 : bool =>
                                                                                                                     (if
                                                                                                                        sumbool_of_bool
                                                                                                                        w__142
                                                                                                                      then
                                                                                                                        let rs2 : mword 5 :=
                                                                                                                          subrange_vec_dec
                                                                                                                            v__9
                                                                                                                            24
                                                                                                                            20 in
                                                                                                                        let rs1 : mword 5 :=
                                                                                                                          subrange_vec_dec
                                                                                                                            v__9
                                                                                                                            19
                                                                                                                            15 in
                                                                                                                        let rd : mword 5 :=
                                                                                                                          subrange_vec_dec
                                                                                                                            v__9
                                                                                                                            11
                                                                                                                            7 in
                                                                                                                        returnm (F_BIN_TYPE_S
                                                                                                                                   (rs2, rs1, rd, FMIN_S))
                                                                                                                      else
                                                                                                                        (and_boolM
                                                                                                                           ((is_RV32F_or_RV64F
                                                                                                                               tt)
                                                                                                                            : M (bool))
                                                                                                                           (returnm ((andb
                                                                                                                                        (eq_vec
                                                                                                                                           (subrange_vec_dec
                                                                                                                                              v__9
                                                                                                                                              31
                                                                                                                                              25)
                                                                                                                                           ('b"0010100"
                                                                                                                                            : mword (31 - 25 + 1)))
                                                                                                                                        (andb
                                                                                                                                           (eq_vec
                                                                                                                                              (subrange_vec_dec
                                                                                                                                                 v__9
                                                                                                                                                 14
                                                                                                                                                 12)
                                                                                                                                              ('b"001"
                                                                                                                                               : mword (14 - 12 + 1)))
                                                                                                                                           (eq_vec
                                                                                                                                              (subrange_vec_dec
                                                                                                                                                 v__9
                                                                                                                                                 6
                                                                                                                                                 0)
                                                                                                                                              ('b"1010011"
                                                                                                                                               : mword (6 - 0 + 1)))))
                                                                                                                             : bool))) >>= fun w__144 : bool =>
                                                                                                                        (if
                                                                                                                           sumbool_of_bool
                                                                                                                           w__144
                                                                                                                         then
                                                                                                                           let rs2 : mword 5 :=
                                                                                                                             subrange_vec_dec
                                                                                                                               v__9
                                                                                                                               24
                                                                                                                               20 in
                                                                                                                           let rs1 : mword 5 :=
                                                                                                                             subrange_vec_dec
                                                                                                                               v__9
                                                                                                                               19
                                                                                                                               15 in
                                                                                                                           let rd : mword 5 :=
                                                                                                                             subrange_vec_dec
                                                                                                                               v__9
                                                                                                                               11
                                                                                                                               7 in
                                                                                                                           returnm (F_BIN_TYPE_S
                                                                                                                                      (rs2, rs1, rd, FMAX_S))
                                                                                                                         else
                                                                                                                           (and_boolM
                                                                                                                              ((is_RV32F_or_RV64F
                                                                                                                                  tt)
                                                                                                                               : M (bool))
                                                                                                                              (returnm ((andb
                                                                                                                                           (eq_vec
                                                                                                                                              (subrange_vec_dec
                                                                                                                                                 v__9
                                                                                                                                                 31
                                                                                                                                                 25)
                                                                                                                                              ('b"1010000"
                                                                                                                                               : mword (31 - 25 + 1)))
                                                                                                                                           (andb
                                                                                                                                              (eq_vec
                                                                                                                                                 (subrange_vec_dec
                                                                                                                                                    v__9
                                                                                                                                                    14
                                                                                                                                                    12)
                                                                                                                                                 ('b"010"
                                                                                                                                                  : mword (14 - 12 + 1)))
                                                                                                                                              (eq_vec
                                                                                                                                                 (subrange_vec_dec
                                                                                                                                                    v__9
                                                                                                                                                    6
                                                                                                                                                    0)
                                                                                                                                                 ('b"1010011"
                                                                                                                                                  : mword (6 - 0 + 1)))))
                                                                                                                                : bool))) >>= fun w__146 : bool =>
                                                                                                                           (if
                                                                                                                              sumbool_of_bool
                                                                                                                              w__146
                                                                                                                            then
                                                                                                                              let rs2 : mword 5 :=
                                                                                                                                subrange_vec_dec
                                                                                                                                  v__9
                                                                                                                                  24
                                                                                                                                  20 in
                                                                                                                              let rs1 : mword 5 :=
                                                                                                                                subrange_vec_dec
                                                                                                                                  v__9
                                                                                                                                  19
                                                                                                                                  15 in
                                                                                                                              let rd : mword 5 :=
                                                                                                                                subrange_vec_dec
                                                                                                                                  v__9
                                                                                                                                  11
                                                                                                                                  7 in
                                                                                                                              returnm (F_BIN_TYPE_S
                                                                                                                                         (rs2, rs1, rd, FEQ_S))
                                                                                                                            else
                                                                                                                              (and_boolM
                                                                                                                                 ((is_RV32F_or_RV64F
                                                                                                                                     tt)
                                                                                                                                  : M (bool))
                                                                                                                                 (returnm ((andb
                                                                                                                                              (eq_vec
                                                                                                                                                 (subrange_vec_dec
                                                                                                                                                    v__9
                                                                                                                                                    31
                                                                                                                                                    25)
                                                                                                                                                 ('b"1010000"
                                                                                                                                                  : mword (31 - 25 + 1)))
                                                                                                                                              (andb
                                                                                                                                                 (eq_vec
                                                                                                                                                    (subrange_vec_dec
                                                                                                                                                       v__9
                                                                                                                                                       14
                                                                                                                                                       12)
                                                                                                                                                    ('b"001"
                                                                                                                                                     : mword (14 - 12 + 1)))
                                                                                                                                                 (eq_vec
                                                                                                                                                    (subrange_vec_dec
                                                                                                                                                       v__9
                                                                                                                                                       6
                                                                                                                                                       0)
                                                                                                                                                    ('b"1010011"
                                                                                                                                                     : mword (6 - 0 + 1)))))
                                                                                                                                   : bool))) >>= fun w__148 : bool =>
                                                                                                                              (if
                                                                                                                                 sumbool_of_bool
                                                                                                                                 w__148
                                                                                                                               then
                                                                                                                                 let rs2 : mword 5 :=
                                                                                                                                   subrange_vec_dec
                                                                                                                                     v__9
                                                                                                                                     24
                                                                                                                                     20 in
                                                                                                                                 let rs1 : mword 5 :=
                                                                                                                                   subrange_vec_dec
                                                                                                                                     v__9
                                                                                                                                     19
                                                                                                                                     15 in
                                                                                                                                 let rd : mword 5 :=
                                                                                                                                   subrange_vec_dec
                                                                                                                                     v__9
                                                                                                                                     11
                                                                                                                                     7 in
                                                                                                                                 returnm (F_BIN_TYPE_S
                                                                                                                                            (rs2, rs1, rd, FLT_S))
                                                                                                                               else
                                                                                                                                 (and_boolM
                                                                                                                                    ((is_RV32F_or_RV64F
                                                                                                                                        tt)
                                                                                                                                     : M (bool))
                                                                                                                                    (returnm ((andb
                                                                                                                                                 (eq_vec
                                                                                                                                                    (subrange_vec_dec
                                                                                                                                                       v__9
                                                                                                                                                       31
                                                                                                                                                       25)
                                                                                                                                                    ('b"1010000"
                                                                                                                                                     : mword (31 - 25 + 1)))
                                                                                                                                                 (andb
                                                                                                                                                    (eq_vec
                                                                                                                                                       (subrange_vec_dec
                                                                                                                                                          v__9
                                                                                                                                                          14
                                                                                                                                                          12)
                                                                                                                                                       ('b"000"
                                                                                                                                                        : mword (14 - 12 + 1)))
                                                                                                                                                    (eq_vec
                                                                                                                                                       (subrange_vec_dec
                                                                                                                                                          v__9
                                                                                                                                                          6
                                                                                                                                                          0)
                                                                                                                                                       ('b"1010011"
                                                                                                                                                        : mword (6 - 0 + 1)))))
                                                                                                                                      : bool))) >>= fun w__150 : bool =>
                                                                                                                                 (if
                                                                                                                                    sumbool_of_bool
                                                                                                                                    w__150
                                                                                                                                  then
                                                                                                                                    let rs2 : mword 5 :=
                                                                                                                                      subrange_vec_dec
                                                                                                                                        v__9
                                                                                                                                        24
                                                                                                                                        20 in
                                                                                                                                    let rs1 : mword 5 :=
                                                                                                                                      subrange_vec_dec
                                                                                                                                        v__9
                                                                                                                                        19
                                                                                                                                        15 in
                                                                                                                                    let rd : mword 5 :=
                                                                                                                                      subrange_vec_dec
                                                                                                                                        v__9
                                                                                                                                        11
                                                                                                                                        7 in
                                                                                                                                    returnm (F_BIN_TYPE_S
                                                                                                                                               (rs2, rs1, rd, FLE_S))
                                                                                                                                  else
                                                                                                                                    (and_boolM
                                                                                                                                       ((haveFExt
                                                                                                                                           tt)
                                                                                                                                        : M (bool))
                                                                                                                                       (returnm ((andb
                                                                                                                                                    (eq_vec
                                                                                                                                                       (subrange_vec_dec
                                                                                                                                                          v__9
                                                                                                                                                          31
                                                                                                                                                          20)
                                                                                                                                                       (Ox"E00"
                                                                                                                                                        : mword (31 - 20 + 1)))
                                                                                                                                                    (andb
                                                                                                                                                       (eq_vec
                                                                                                                                                          (subrange_vec_dec
                                                                                                                                                             v__9
                                                                                                                                                             14
                                                                                                                                                             12)
                                                                                                                                                          ('b"001"
                                                                                                                                                           : mword (14 - 12 + 1)))
                                                                                                                                                       (eq_vec
                                                                                                                                                          (subrange_vec_dec
                                                                                                                                                             v__9
                                                                                                                                                             6
                                                                                                                                                             0)
                                                                                                                                                          ('b"1010011"
                                                                                                                                                           : mword (6 - 0 + 1)))))
                                                                                                                                         : bool))) >>= fun w__152 : bool =>
                                                                                                                                    (if
                                                                                                                                       sumbool_of_bool
                                                                                                                                       w__152
                                                                                                                                     then
                                                                                                                                       let rs1 : mword 5 :=
                                                                                                                                         subrange_vec_dec
                                                                                                                                           v__9
                                                                                                                                           19
                                                                                                                                           15 in
                                                                                                                                       let rd : mword 5 :=
                                                                                                                                         subrange_vec_dec
                                                                                                                                           v__9
                                                                                                                                           11
                                                                                                                                           7 in
                                                                                                                                       returnm (F_UN_TYPE_S
                                                                                                                                                  (rs1, rd, FCLASS_S))
                                                                                                                                     else
                                                                                                                                       (and_boolM
                                                                                                                                          ((haveFExt
                                                                                                                                              tt)
                                                                                                                                           : M (bool))
                                                                                                                                          (returnm ((andb
                                                                                                                                                       (eq_vec
                                                                                                                                                          (subrange_vec_dec
                                                                                                                                                             v__9
                                                                                                                                                             31
                                                                                                                                                             20)
                                                                                                                                                          (Ox"E00"
                                                                                                                                                           : mword (31 - 20 + 1)))
                                                                                                                                                       (andb
                                                                                                                                                          (eq_vec
                                                                                                                                                             (subrange_vec_dec
                                                                                                                                                                v__9
                                                                                                                                                                14
                                                                                                                                                                12)
                                                                                                                                                             ('b"000"
                                                                                                                                                              : mword (14 - 12 + 1)))
                                                                                                                                                          (eq_vec
                                                                                                                                                             (subrange_vec_dec
                                                                                                                                                                v__9
                                                                                                                                                                6
                                                                                                                                                                0)
                                                                                                                                                             ('b"1010011"
                                                                                                                                                              : mword (6 - 0 + 1)))))
                                                                                                                                            : bool))) >>= fun w__154 : bool =>
                                                                                                                                       (if
                                                                                                                                          sumbool_of_bool
                                                                                                                                          w__154
                                                                                                                                        then
                                                                                                                                          let rs1 : mword 5 :=
                                                                                                                                            subrange_vec_dec
                                                                                                                                              v__9
                                                                                                                                              19
                                                                                                                                              15 in
                                                                                                                                          let rd : mword 5 :=
                                                                                                                                            subrange_vec_dec
                                                                                                                                              v__9
                                                                                                                                              11
                                                                                                                                              7 in
                                                                                                                                          returnm (F_UN_TYPE_S
                                                                                                                                                     (rs1, rd, FMV_X_W))
                                                                                                                                        else
                                                                                                                                          (and_boolM
                                                                                                                                             ((haveFExt
                                                                                                                                                 tt)
                                                                                                                                              : M (bool))
                                                                                                                                             (returnm ((andb
                                                                                                                                                          (eq_vec
                                                                                                                                                             (subrange_vec_dec
                                                                                                                                                                v__9
                                                                                                                                                                31
                                                                                                                                                                20)
                                                                                                                                                             (Ox"F00"
                                                                                                                                                              : mword (31 - 20 + 1)))
                                                                                                                                                          (andb
                                                                                                                                                             (eq_vec
                                                                                                                                                                (subrange_vec_dec
                                                                                                                                                                   v__9
                                                                                                                                                                   14
                                                                                                                                                                   12)
                                                                                                                                                                ('b"000"
                                                                                                                                                                 : mword (14 - 12 + 1)))
                                                                                                                                                             (eq_vec
                                                                                                                                                                (subrange_vec_dec
                                                                                                                                                                   v__9
                                                                                                                                                                   6
                                                                                                                                                                   0)
                                                                                                                                                                ('b"1010011"
                                                                                                                                                                 : mword (6 - 0 + 1)))))
                                                                                                                                               : bool))) >>= fun w__156 : bool =>
                                                                                                                                          returnm (if
                                                                                                                                                     sumbool_of_bool
                                                                                                                                                     w__156
                                                                                                                                                   then
                                                                                                                                                     let rs1 : mword 5 :=
                                                                                                                                                       subrange_vec_dec
                                                                                                                                                         v__9
                                                                                                                                                         19
                                                                                                                                                         15 in
                                                                                                                                                     let rd : mword 5 :=
                                                                                                                                                       subrange_vec_dec
                                                                                                                                                         v__9
                                                                                                                                                         11
                                                                                                                                                         7 in
                                                                                                                                                     F_UN_TYPE_S
                                                                                                                                                       (rs1, rd, FMV_W_X)
                                                                                                                                                   else
                                                                                                                                                     ILLEGAL
                                                                                                                                                       v__9))
                                                                                                                                        : M (ast))
                                                                                                                                     : M (ast))
                                                                                                                                  : M (ast))
                                                                                                                               : M (ast))
                                                                                                                            : M (ast))
                                                                                                                         : M (ast))
                                                                                                                      : M (ast))
                                                                                                                   : M (ast))
                                                                                                                : M (ast))
                                                                                                             : M (ast))
                                                                                                          : M (ast))
                                                                                                       : M (ast))
                                                                                                    : M (ast))
                                                                                                 : M (ast))
                                                                                              : M (ast))
                                                                                           : M (ast))
                                                                                        : M (ast))
                                                                                     : M (ast))
                                                                                  : M (ast))
                                                                               : M (ast))
                                                                            : M (ast))
                                                                         : M (ast))
                                                                      : M (ast))
                                                                   : M (ast))
                                                                : M (ast))
                                                             : M (ast))
                                                          : M (ast))
                                                       : M (ast))
                                                    : M (ast))
                                                 : M (ast))
                                              : M (ast))
                                           : M (ast))
                                        : M (ast))
                                     : M (ast))
                                  : M (ast))
                               : M (ast))
                            : M (ast))
                         : M (ast))
                      : M (ast))
                   : M (ast))
                : M (ast))
             : M (ast))
          : M (ast))
       : M (ast))
    : M (ast).

Definition encdec_forwards_matches (arg_ : ast) : M (bool) :=
   (match arg_ with
    | UTYPE (imm, rd, op) => returnm true
    | RISCV_JAL (v__341, rd) =>
       returnm (if eq_vec (subrange_vec_dec v__341 0 0) ('b"0"  : mword (0 - 0 + 1)) then true
                else false)
    | RISCV_JALR (imm, rs1, rd) => returnm true
    | BTYPE (v__343, rs2, rs1, op) =>
       returnm (if eq_vec (subrange_vec_dec v__343 0 0) ('b"0"  : mword (0 - 0 + 1)) then true
                else false)
    | ITYPE (imm, rs1, rd, op) => returnm true
    | SHIFTIOP (shamt, rs1, rd, RISCV_SLLI) => returnm true
    | SHIFTIOP (shamt, rs1, rd, RISCV_SRLI) => returnm true
    | SHIFTIOP (shamt, rs1, rd, RISCV_SRAI) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_ADD) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_SLT) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_SLTU) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_AND) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_OR) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_XOR) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_SLL) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_SRL) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_SUB) => returnm true
    | RTYPE (rs2, rs1, rd, RISCV_SRA) => returnm true
    | LOAD (imm, rs1, rd, is_unsigned, size, false, false) =>
       returnm (if sumbool_of_bool
                  (orb (Z.ltb (projT1 (word_width_bytes size)) 4)
                     (andb (negb is_unsigned) ((Z.leb (projT1 (word_width_bytes size)) 4)  : bool)))
                then
                  true
                else false)
    | STORE (v__345, rs2, rs1, size, false, false) =>
       returnm (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then true else false)
    | ADDIW (imm, rs1, rd) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | SHIFTW (shamt, rs1, rd, RISCV_SLLI) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | SHIFTW (shamt, rs1, rd, RISCV_SRLI) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | SHIFTW (shamt, rs1, rd, RISCV_SRAI) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | RTYPEW (rs2, rs1, rd, RISCV_ADDW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | RTYPEW (rs2, rs1, rd, RISCV_SUBW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | RTYPEW (rs2, rs1, rd, RISCV_SLLW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | RTYPEW (rs2, rs1, rd, RISCV_SRLW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | RTYPEW (rs2, rs1, rd, RISCV_SRAW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | SHIFTIWOP (shamt, rs1, rd, RISCV_SLLIW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | SHIFTIWOP (shamt, rs1, rd, RISCV_SRLIW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | SHIFTIWOP (shamt, rs1, rd, RISCV_SRAIW) =>
       returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | FENCE (pred, succ) => returnm true
    | FENCE_TSO (pred, succ) => returnm true
    | FENCEI tt => returnm true
    | ECALL tt => returnm true
    | MRET tt => returnm true
    | SRET tt => returnm true
    | EBREAK tt => returnm true
    | WFI tt => returnm true
    | SFENCE_VMA (rs1, rs2) => returnm true
    | LOADRES (aq, rl, rs1, size, rd) =>
       returnm (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then true else false)
    | STORECON (aq, rl, rs2, rs1, size, rd) =>
       returnm (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then true else false)
    | AMO (op, aq, rl, rs2, rs1, size, rd) =>
       returnm (if sumbool_of_bool (Z.leb (projT1 (word_width_bytes size)) 4) then true else false)
    | MUL (rs2, rs1, rd, high, signed1, signed2) => returnm true
    | DIV (rs2, rs1, rd, s) => returnm true
    | REM (rs2, rs1, rd, s) => returnm true
    | MULW (rs2, rs1, rd) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | DIVW (rs2, rs1, rd, s) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | REMW (rs2, rs1, rd, s) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | CSR (csr, rs1, rd, is_imm, op) => returnm true
    | URET tt => returnm true
    | LOAD_FP (imm, rs1, rd, WORD) =>
       (is_RV32F_or_RV64F tt) >>= fun w__0 : bool =>
       returnm (if sumbool_of_bool w__0 then true else false)
    | LOAD_FP (imm, rs1, rd, DOUBLE) =>
       (is_RV32D_or_RV64D tt) >>= fun w__1 : bool =>
       returnm (if sumbool_of_bool w__1 then true else false)
    | STORE_FP (v__346, rs2, rs1, WORD) =>
       (is_RV32F_or_RV64F tt) >>= fun w__2 : bool =>
       returnm (if sumbool_of_bool w__2 then true else false)
    | STORE_FP (v__347, rs2, rs1, DOUBLE) =>
       (is_RV32D_or_RV64D tt) >>= fun w__3 : bool =>
       returnm (if sumbool_of_bool w__3 then true else false)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FMADD_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__4 : bool =>
       returnm (if sumbool_of_bool w__4 then true else false)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FMSUB_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__5 : bool =>
       returnm (if sumbool_of_bool w__5 then true else false)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FNMSUB_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__6 : bool =>
       returnm (if sumbool_of_bool w__6 then true else false)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, FNMADD_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__7 : bool =>
       returnm (if sumbool_of_bool w__7 then true else false)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FADD_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__8 : bool =>
       returnm (if sumbool_of_bool w__8 then true else false)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FSUB_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__9 : bool =>
       returnm (if sumbool_of_bool w__9 then true else false)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FMUL_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__10 : bool =>
       returnm (if sumbool_of_bool w__10 then true else false)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, FDIV_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__11 : bool =>
       returnm (if sumbool_of_bool w__11 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__12 : bool =>
       returnm (if sumbool_of_bool w__12 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__13 : bool =>
       returnm (if sumbool_of_bool w__13 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__14 : bool =>
       returnm (if sumbool_of_bool w__14 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W) =>
       (is_RV32F_or_RV64F tt) >>= fun w__15 : bool =>
       returnm (if sumbool_of_bool w__15 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_WU) =>
       (is_RV32F_or_RV64F tt) >>= fun w__16 : bool =>
       returnm (if sumbool_of_bool w__16 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_L_S) =>
       (is_RV64F tt) >>= fun w__17 : bool => returnm (if sumbool_of_bool w__17 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_LU_S) =>
       (is_RV64F tt) >>= fun w__18 : bool => returnm (if sumbool_of_bool w__18 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_L) =>
       (is_RV64F tt) >>= fun w__19 : bool => returnm (if sumbool_of_bool w__19 then true else false)
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_LU) =>
       (is_RV64F tt) >>= fun w__20 : bool => returnm (if sumbool_of_bool w__20 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJ_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__21 : bool =>
       returnm (if sumbool_of_bool w__21 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJN_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__22 : bool =>
       returnm (if sumbool_of_bool w__22 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJX_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__23 : bool =>
       returnm (if sumbool_of_bool w__23 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FMIN_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__24 : bool =>
       returnm (if sumbool_of_bool w__24 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FMAX_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__25 : bool =>
       returnm (if sumbool_of_bool w__25 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FEQ_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__26 : bool =>
       returnm (if sumbool_of_bool w__26 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FLT_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__27 : bool =>
       returnm (if sumbool_of_bool w__27 then true else false)
    | F_BIN_TYPE_S (rs2, rs1, rd, FLE_S) =>
       (is_RV32F_or_RV64F tt) >>= fun w__28 : bool =>
       returnm (if sumbool_of_bool w__28 then true else false)
    | F_UN_TYPE_S (rs1, rd, FCLASS_S) =>
       (haveFExt tt) >>= fun w__29 : bool => returnm (if sumbool_of_bool w__29 then true else false)
    | F_UN_TYPE_S (rs1, rd, FMV_X_W) =>
       (haveFExt tt) >>= fun w__30 : bool => returnm (if sumbool_of_bool w__30 then true else false)
    | F_UN_TYPE_S (rs1, rd, FMV_W_X) =>
       (haveFExt tt) >>= fun w__31 : bool => returnm (if sumbool_of_bool w__31 then true else false)
    | ILLEGAL s => returnm true
    | _ => returnm false
    end)
    : M (bool).

Definition encdec_backwards_matches (arg_ : mword 32) : M (bool) :=
   let v__348 := arg_ in
   let _mappingpatterns_0_ : mword 7 := subrange_vec_dec v__348 6 0 in
   (and_boolM (returnm ((encdec_uop_backwards_matches _mappingpatterns_0_)  : bool))
      ((if encdec_uop_backwards_matches _mappingpatterns_0_ then
          (encdec_uop_backwards _mappingpatterns_0_) >>= fun op => returnm (true  : bool)
        else returnm false)
       : M (bool))) >>= fun w__1 : bool =>
   (if sumbool_of_bool w__1 then
      let _mappingpatterns_0_ : mword 7 := subrange_vec_dec v__348 6 0 in
      (encdec_uop_backwards _mappingpatterns_0_) >>= fun op => returnm true
    else if eq_vec (subrange_vec_dec v__348 6 0) ('b"1101111"  : mword (6 - 0 + 1)) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"000"  : mword (14 - 12 + 1)))
              (eq_vec (subrange_vec_dec v__348 6 0) ('b"1100111"  : mword (6 - 0 + 1))) then
      returnm true
    else
      (and_boolM
         (let _mappingpatterns_1_ : mword 3 := subrange_vec_dec v__348 14 12 in
         (and_boolM (returnm ((encdec_bop_backwards_matches _mappingpatterns_1_)  : bool))
            ((if encdec_bop_backwards_matches _mappingpatterns_1_ then
                (encdec_bop_backwards _mappingpatterns_1_) >>= fun op => returnm (true  : bool)
              else returnm false)
             : M (bool)))
          : M (bool))
         (returnm ((eq_vec (subrange_vec_dec v__348 6 0) ('b"1100011"  : mword (6 - 0 + 1)))
           : bool))) >>= fun w__4 : bool =>
      (if sumbool_of_bool w__4 then
         let _mappingpatterns_1_ : mword 3 := subrange_vec_dec v__348 14 12 in
         (encdec_bop_backwards _mappingpatterns_1_) >>= fun op => returnm true
       else
         (and_boolM
            (let _mappingpatterns_2_ : mword 3 := subrange_vec_dec v__348 14 12 in
            (and_boolM (returnm ((encdec_iop_backwards_matches _mappingpatterns_2_)  : bool))
               ((if encdec_iop_backwards_matches _mappingpatterns_2_ then
                   (encdec_iop_backwards _mappingpatterns_2_) >>= fun op => returnm (true  : bool)
                 else returnm false)
                : M (bool)))
             : M (bool))
            (returnm ((eq_vec (subrange_vec_dec v__348 6 0) ('b"0010011"  : mword (6 - 0 + 1)))
              : bool))) >>= fun w__7 : bool =>
         (if sumbool_of_bool w__7 then
            let _mappingpatterns_2_ : mword 3 := subrange_vec_dec v__348 14 12 in
            (encdec_iop_backwards _mappingpatterns_2_) >>= fun op => returnm true
          else if sumbool_of_bool
            (andb
               (let shamt : mword 6 := subrange_vec_dec v__348 25 20 in
               orb (Z.eqb 32 64) (eq_bit (access_vec_dec shamt 5) B0))
               (andb (eq_vec (subrange_vec_dec v__348 31 26) ('b"000000"  : mword (31 - 26 + 1)))
                  (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"001"  : mword (14 - 12 + 1)))
                     (eq_vec (subrange_vec_dec v__348 6 0) ('b"0010011"  : mword (6 - 0 + 1))))))
          then
            returnm true
          else if sumbool_of_bool
            (andb
               (let shamt : mword 6 := subrange_vec_dec v__348 25 20 in
               orb (Z.eqb 32 64) (eq_bit (access_vec_dec shamt 5) B0))
               (andb (eq_vec (subrange_vec_dec v__348 31 26) ('b"000000"  : mword (31 - 26 + 1)))
                  (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                     (eq_vec (subrange_vec_dec v__348 6 0) ('b"0010011"  : mword (6 - 0 + 1))))))
          then
            returnm true
          else if sumbool_of_bool
            (andb
               (let shamt : mword 6 := subrange_vec_dec v__348 25 20 in
               orb (Z.eqb 32 64) (eq_bit (access_vec_dec shamt 5) B0))
               (andb (eq_vec (subrange_vec_dec v__348 31 26) ('b"010000"  : mword (31 - 26 + 1)))
                  (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                     (eq_vec (subrange_vec_dec v__348 6 0) ('b"0010011"  : mword (6 - 0 + 1))))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"000"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"010"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"011"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"111"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"110"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"100"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"001"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"000"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else if andb (eq_vec (subrange_vec_dec v__348 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                    (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                       (eq_vec (subrange_vec_dec v__348 6 0) ('b"0110011"  : mword (6 - 0 + 1))))
          then
            returnm true
          else
            (and_boolM
               (let _mappingpatterns_4_ : mword 2 := subrange_vec_dec v__348 13 12 in
               let _mappingpatterns_3_ : mword 1 := subrange_vec_dec v__348 14 14 in
               (and_boolM (returnm ((size_bits_backwards_matches _mappingpatterns_4_)  : bool))
                  ((if size_bits_backwards_matches _mappingpatterns_4_ then
                      (size_bits_backwards _mappingpatterns_4_) >>= fun size =>
                      (and_boolM
                         (returnm ((bool_bits_backwards_matches _mappingpatterns_3_)  : bool))
                         ((if bool_bits_backwards_matches _mappingpatterns_3_ then
                             (bool_bits_backwards _mappingpatterns_3_) >>= fun is_unsigned =>
                             returnm ((orb (Z.ltb (projT1 (word_width_bytes size)) 4)
                                         (andb (negb is_unsigned)
                                            ((Z.leb (projT1 (word_width_bytes size)) 4)
                                             : bool)))
                              : bool)
                           else returnm false)
                          : M (bool)))
                       : M (bool)
                    else returnm false)
                   : M (bool)))
                : M (bool))
               (returnm ((eq_vec (subrange_vec_dec v__348 6 0) ('b"0000011"  : mword (6 - 0 + 1)))
                 : bool))) >>= fun w__12 : bool =>
            (if sumbool_of_bool w__12 then
               let _mappingpatterns_4_ : mword 2 := subrange_vec_dec v__348 13 12 in
               let _mappingpatterns_3_ : mword 1 := subrange_vec_dec v__348 14 14 in
               (size_bits_backwards _mappingpatterns_4_) >>= fun size =>
               (bool_bits_backwards _mappingpatterns_3_) >>= fun is_unsigned => returnm true
             else
               (and_boolM
                  (let _mappingpatterns_5_ : mword 2 := subrange_vec_dec v__348 13 12 in
                  (and_boolM (returnm ((size_bits_backwards_matches _mappingpatterns_5_)  : bool))
                     ((if size_bits_backwards_matches _mappingpatterns_5_ then
                         (size_bits_backwards _mappingpatterns_5_) >>= fun size =>
                         returnm ((Z.leb (projT1 (word_width_bytes size)) 4)  : bool)
                       else returnm false)
                      : M (bool)))
                   : M (bool))
                  (returnm ((andb
                               (eq_vec (subrange_vec_dec v__348 14 14)
                                  ('b"0"
                                   : mword (14 - 14 + 1)))
                               (eq_vec (subrange_vec_dec v__348 6 0)
                                  ('b"0100011"
                                   : mword (6 - 0 + 1))))
                    : bool))) >>= fun w__15 : bool =>
               (if sumbool_of_bool w__15 then
                  let _mappingpatterns_5_ : mword 2 := subrange_vec_dec v__348 13 12 in
                  (size_bits_backwards _mappingpatterns_5_) >>= fun size => returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb (eq_vec (subrange_vec_dec v__348 14 12) ('b"000"  : mword (14 - 12 + 1)))
                        (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1)))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"001"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"000"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"000"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"001"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0111011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"001"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0000000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if sumbool_of_bool
                  (andb (Z.eqb 32 64)
                     (andb
                        (eq_vec (subrange_vec_dec v__348 31 25) ('b"0100000"  : mword (31 - 25 + 1)))
                        (andb
                           (eq_vec (subrange_vec_dec v__348 14 12) ('b"101"  : mword (14 - 12 + 1)))
                           (eq_vec (subrange_vec_dec v__348 6 0) ('b"0011011"  : mword (6 - 0 + 1))))))
                then
                  returnm true
                else if andb (eq_vec (subrange_vec_dec v__348 31 28) (Ox"0"  : mword (31 - 28 + 1)))
                          (eq_vec (subrange_vec_dec v__348 19 0) (Ox"0000F"  : mword (19 - 0 + 1)))
                then
                  returnm true
                else if andb (eq_vec (subrange_vec_dec v__348 31 28) (Ox"8"  : mword (31 - 28 + 1)))
                          (eq_vec (subrange_vec_dec v__348 19 0) (Ox"0000F"  : mword (19 - 0 + 1)))
                then
                  returnm true
                else if eq_vec v__348 (Ox"0000100F"  : mword 32) then returnm true
                else if eq_vec v__348 (Ox"00000073"  : mword 32) then returnm true
                else if eq_vec v__348 (Ox"30200073"  : mword 32) then returnm true
                else if eq_vec v__348 (Ox"10200073"  : mword 32) then returnm true
                else if eq_vec v__348 (Ox"00100073"  : mword 32) then returnm true
                else if eq_vec v__348 (Ox"10500073"  : mword 32) then returnm true
                else if andb
                          (eq_vec (subrange_vec_dec v__348 31 25)
                             ('b"0001001"
                              : mword (31 - 25 + 1)))
                          (eq_vec (subrange_vec_dec v__348 14 0)
                             ('b"000000001110011"
                              : mword (14 - 0 + 1))) then
                  returnm true
                else
                  (and_boolM
                     (let _mappingpatterns_8_ : mword 2 := subrange_vec_dec v__348 13 12 in
                     let _mappingpatterns_7_ : mword 1 := subrange_vec_dec v__348 25 25 in
                     let _mappingpatterns_6_ : mword 1 := subrange_vec_dec v__348 26 26 in
                     (and_boolM
                        (returnm ((size_bits_backwards_matches _mappingpatterns_8_)  : bool))
                        ((if size_bits_backwards_matches _mappingpatterns_8_ then
                            (size_bits_backwards _mappingpatterns_8_) >>= fun size =>
                            (and_boolM
                               (returnm ((bool_bits_backwards_matches _mappingpatterns_7_)  : bool))
                               ((if bool_bits_backwards_matches _mappingpatterns_7_ then
                                   (bool_bits_backwards _mappingpatterns_7_) >>= fun rl =>
                                   (and_boolM
                                      (returnm ((bool_bits_backwards_matches _mappingpatterns_6_)
                                        : bool))
                                      ((if bool_bits_backwards_matches _mappingpatterns_6_ then
                                          (bool_bits_backwards _mappingpatterns_6_) >>= fun aq =>
                                          returnm ((Z.leb (projT1 (word_width_bytes size)) 4)
                                           : bool)
                                        else returnm false)
                                       : M (bool)))
                                    : M (bool)
                                 else returnm false)
                                : M (bool)))
                             : M (bool)
                          else returnm false)
                         : M (bool)))
                      : M (bool))
                     (returnm ((andb
                                  (eq_vec (subrange_vec_dec v__348 31 27)
                                     ('b"00010"
                                      : mword (31 - 27 + 1)))
                                  (andb
                                     (eq_vec (subrange_vec_dec v__348 24 20)
                                        ('b"00000"
                                         : mword (24 - 20 + 1)))
                                     (andb
                                        (eq_vec (subrange_vec_dec v__348 14 14)
                                           ('b"0"
                                            : mword (14 - 14 + 1)))
                                        (eq_vec (subrange_vec_dec v__348 6 0)
                                           ('b"0101111"
                                            : mword (6 - 0 + 1))))))
                       : bool))) >>= fun w__22 : bool =>
                  (if sumbool_of_bool w__22 then
                     let _mappingpatterns_8_ : mword 2 := subrange_vec_dec v__348 13 12 in
                     let _mappingpatterns_7_ : mword 1 := subrange_vec_dec v__348 25 25 in
                     let _mappingpatterns_6_ : mword 1 := subrange_vec_dec v__348 26 26 in
                     (size_bits_backwards _mappingpatterns_8_) >>= fun size =>
                     (bool_bits_backwards _mappingpatterns_7_) >>= fun rl =>
                     (bool_bits_backwards _mappingpatterns_6_) >>= fun aq => returnm true
                   else
                     (and_boolM
                        (let _mappingpatterns_9_ : mword 1 := subrange_vec_dec v__348 26 26 in
                        let _mappingpatterns_11_ : mword 2 := subrange_vec_dec v__348 13 12 in
                        let _mappingpatterns_10_ : mword 1 := subrange_vec_dec v__348 25 25 in
                        (and_boolM
                           (returnm ((size_bits_backwards_matches _mappingpatterns_11_)  : bool))
                           ((if size_bits_backwards_matches _mappingpatterns_11_ then
                               (size_bits_backwards _mappingpatterns_11_) >>= fun size =>
                               (and_boolM
                                  (returnm ((bool_bits_backwards_matches _mappingpatterns_10_)
                                    : bool))
                                  ((if bool_bits_backwards_matches _mappingpatterns_10_ then
                                      (bool_bits_backwards _mappingpatterns_10_) >>= fun rl =>
                                      (and_boolM
                                         (returnm ((bool_bits_backwards_matches _mappingpatterns_9_)
                                           : bool))
                                         ((if bool_bits_backwards_matches _mappingpatterns_9_ then
                                             (bool_bits_backwards _mappingpatterns_9_) >>= fun aq =>
                                             returnm ((Z.leb (projT1 (word_width_bytes size)) 4)
                                              : bool)
                                           else returnm false)
                                          : M (bool)))
                                       : M (bool)
                                    else returnm false)
                                   : M (bool)))
                                : M (bool)
                             else returnm false)
                            : M (bool)))
                         : M (bool))
                        (returnm ((andb
                                     (eq_vec (subrange_vec_dec v__348 31 27)
                                        ('b"00011"
                                         : mword (31 - 27 + 1)))
                                     (andb
                                        (eq_vec (subrange_vec_dec v__348 14 14)
                                           ('b"0"
                                            : mword (14 - 14 + 1)))
                                        (eq_vec (subrange_vec_dec v__348 6 0)
                                           ('b"0101111"
                                            : mword (6 - 0 + 1)))))
                          : bool))) >>= fun w__29 : bool =>
                     (if sumbool_of_bool w__29 then
                        let _mappingpatterns_9_ : mword 1 := subrange_vec_dec v__348 26 26 in
                        let _mappingpatterns_11_ : mword 2 := subrange_vec_dec v__348 13 12 in
                        let _mappingpatterns_10_ : mword 1 := subrange_vec_dec v__348 25 25 in
                        (size_bits_backwards _mappingpatterns_11_) >>= fun size =>
                        (bool_bits_backwards _mappingpatterns_10_) >>= fun rl =>
                        (bool_bits_backwards _mappingpatterns_9_) >>= fun aq => returnm true
                      else
                        (and_boolM
                           (let _mappingpatterns_12_ : mword 5 := subrange_vec_dec v__348 31 27 in
                           let _mappingpatterns_15_ : mword 2 := subrange_vec_dec v__348 13 12 in
                           let _mappingpatterns_14_ : mword 1 := subrange_vec_dec v__348 25 25 in
                           let _mappingpatterns_13_ : mword 1 := subrange_vec_dec v__348 26 26 in
                           let _mappingpatterns_12_ : mword 5 := subrange_vec_dec v__348 31 27 in
                           (and_boolM
                              (returnm ((size_bits_backwards_matches _mappingpatterns_15_)  : bool))
                              ((if size_bits_backwards_matches _mappingpatterns_15_ then
                                  (size_bits_backwards _mappingpatterns_15_) >>= fun size =>
                                  (and_boolM
                                     (returnm ((bool_bits_backwards_matches _mappingpatterns_14_)
                                       : bool))
                                     ((if bool_bits_backwards_matches _mappingpatterns_14_ then
                                         (bool_bits_backwards _mappingpatterns_14_) >>= fun rl =>
                                         (and_boolM
                                            (returnm ((bool_bits_backwards_matches
                                                         _mappingpatterns_13_)
                                              : bool))
                                            ((if bool_bits_backwards_matches _mappingpatterns_13_
                                              then
                                                (bool_bits_backwards _mappingpatterns_13_) >>= fun aq =>
                                                (and_boolM
                                                   (returnm ((encdec_amoop_backwards_matches
                                                                _mappingpatterns_12_)
                                                     : bool))
                                                   ((if encdec_amoop_backwards_matches
                                                          _mappingpatterns_12_ then
                                                       (encdec_amoop_backwards _mappingpatterns_12_) >>= fun op =>
                                                       returnm ((Z.leb
                                                                   (projT1
                                                                    (word_width_bytes size)) 4)
                                                        : bool)
                                                     else returnm false)
                                                    : M (bool)))
                                                 : M (bool)
                                              else returnm false)
                                             : M (bool)))
                                          : M (bool)
                                       else returnm false)
                                      : M (bool)))
                                   : M (bool)
                                else returnm false)
                               : M (bool)))
                            : M (bool))
                           (returnm ((andb
                                        (eq_vec (subrange_vec_dec v__348 14 14)
                                           ('b"0"
                                            : mword (14 - 14 + 1)))
                                        (eq_vec (subrange_vec_dec v__348 6 0)
                                           ('b"0101111"
                                            : mword (6 - 0 + 1))))
                             : bool))) >>= fun w__38 : bool =>
                        (if sumbool_of_bool w__38 then
                           let _mappingpatterns_12_ : mword 5 := subrange_vec_dec v__348 31 27 in
                           let _mappingpatterns_15_ : mword 2 := subrange_vec_dec v__348 13 12 in
                           let _mappingpatterns_14_ : mword 1 := subrange_vec_dec v__348 25 25 in
                           let _mappingpatterns_13_ : mword 1 := subrange_vec_dec v__348 26 26 in
                           let _mappingpatterns_12_ : mword 5 := subrange_vec_dec v__348 31 27 in
                           (size_bits_backwards _mappingpatterns_15_) >>= fun size =>
                           (bool_bits_backwards _mappingpatterns_14_) >>= fun rl =>
                           (bool_bits_backwards _mappingpatterns_13_) >>= fun aq =>
                           (encdec_amoop_backwards _mappingpatterns_12_) >>= fun op => returnm true
                         else
                           (and_boolM
                              (let _mappingpatterns_16_ : mword 3 := subrange_vec_dec v__348 14 12 in
                              (and_boolM
                                 (returnm ((encdec_mul_op_backwards_matches _mappingpatterns_16_)
                                   : bool))
                                 ((if encdec_mul_op_backwards_matches _mappingpatterns_16_ then
                                     (encdec_mul_op_backwards _mappingpatterns_16_) >>= fun '(high, signed1, signed2) =>
                                     returnm (true  : bool)
                                   else returnm false)
                                  : M (bool)))
                               : M (bool))
                              (returnm ((andb
                                           (eq_vec (subrange_vec_dec v__348 31 25)
                                              ('b"0000001"
                                               : mword (31 - 25 + 1)))
                                           (eq_vec (subrange_vec_dec v__348 6 0)
                                              ('b"0110011"
                                               : mword (6 - 0 + 1))))
                                : bool))) >>= fun w__41 : bool =>
                           (if sumbool_of_bool w__41 then
                              let _mappingpatterns_16_ : mword 3 := subrange_vec_dec v__348 14 12 in
                              (encdec_mul_op_backwards _mappingpatterns_16_) >>= fun '(high, signed1, signed2) =>
                              returnm true
                            else
                              (and_boolM
                                 (let _mappingpatterns_17_ : mword 1 :=
                                   subrange_vec_dec v__348 12 12 in
                                 (and_boolM
                                    (returnm ((bool_not_bits_backwards_matches _mappingpatterns_17_)
                                      : bool))
                                    ((if bool_not_bits_backwards_matches _mappingpatterns_17_ then
                                        (bool_not_bits_backwards _mappingpatterns_17_) >>= fun s =>
                                        returnm (true  : bool)
                                      else returnm false)
                                     : M (bool)))
                                  : M (bool))
                                 (returnm ((andb
                                              (eq_vec (subrange_vec_dec v__348 31 25)
                                                 ('b"0000001"
                                                  : mword (31 - 25 + 1)))
                                              (andb
                                                 (eq_vec (subrange_vec_dec v__348 14 13)
                                                    ('b"10"
                                                     : mword (14 - 13 + 1)))
                                                 (eq_vec (subrange_vec_dec v__348 6 0)
                                                    ('b"0110011"
                                                     : mword (6 - 0 + 1)))))
                                   : bool))) >>= fun w__44 : bool =>
                              (if sumbool_of_bool w__44 then
                                 let _mappingpatterns_17_ : mword 1 := subrange_vec_dec v__348 12 12 in
                                 (bool_not_bits_backwards _mappingpatterns_17_) >>= fun s =>
                                 returnm true
                               else
                                 (and_boolM
                                    (let _mappingpatterns_18_ : mword 1 :=
                                      subrange_vec_dec v__348 12 12 in
                                    (and_boolM
                                       (returnm ((bool_not_bits_backwards_matches
                                                    _mappingpatterns_18_)
                                         : bool))
                                       ((if bool_not_bits_backwards_matches _mappingpatterns_18_
                                         then
                                           (bool_not_bits_backwards _mappingpatterns_18_) >>= fun s =>
                                           returnm (true  : bool)
                                         else returnm false)
                                        : M (bool)))
                                     : M (bool))
                                    (returnm ((andb
                                                 (eq_vec (subrange_vec_dec v__348 31 25)
                                                    ('b"0000001"
                                                     : mword (31 - 25 + 1)))
                                                 (andb
                                                    (eq_vec (subrange_vec_dec v__348 14 13)
                                                       ('b"11"
                                                        : mword (14 - 13 + 1)))
                                                    (eq_vec (subrange_vec_dec v__348 6 0)
                                                       ('b"0110011"
                                                        : mword (6 - 0 + 1)))))
                                      : bool))) >>= fun w__47 : bool =>
                                 (if sumbool_of_bool w__47 then
                                    let _mappingpatterns_18_ : mword 1 :=
                                      subrange_vec_dec v__348 12 12 in
                                    (bool_not_bits_backwards _mappingpatterns_18_) >>= fun s =>
                                    returnm true
                                  else if sumbool_of_bool
                                    (andb (Z.eqb 32 64)
                                       (andb
                                          (eq_vec (subrange_vec_dec v__348 31 25)
                                             ('b"0000001"
                                              : mword (31 - 25 + 1)))
                                          (andb
                                             (eq_vec (subrange_vec_dec v__348 14 12)
                                                ('b"000"
                                                 : mword (14 - 12 + 1)))
                                             (eq_vec (subrange_vec_dec v__348 6 0)
                                                ('b"0111011"
                                                 : mword (6 - 0 + 1)))))) then
                                    returnm true
                                  else
                                    (and_boolM
                                       (let _mappingpatterns_19_ : mword 1 :=
                                         subrange_vec_dec v__348 12 12 in
                                       (and_boolM
                                          (returnm ((bool_not_bits_backwards_matches
                                                       _mappingpatterns_19_)
                                            : bool))
                                          ((if bool_not_bits_backwards_matches _mappingpatterns_19_
                                            then
                                              (bool_not_bits_backwards _mappingpatterns_19_) >>= fun s =>
                                              returnm ((Z.eqb 32 64)  : bool)
                                            else returnm false)
                                           : M (bool)))
                                        : M (bool))
                                       (returnm ((andb
                                                    (eq_vec (subrange_vec_dec v__348 31 25)
                                                       ('b"0000001"
                                                        : mword (31 - 25 + 1)))
                                                    (andb
                                                       (eq_vec (subrange_vec_dec v__348 14 13)
                                                          ('b"10"
                                                           : mword (14 - 13 + 1)))
                                                       (eq_vec (subrange_vec_dec v__348 6 0)
                                                          ('b"0111011"
                                                           : mword (6 - 0 + 1)))))
                                         : bool))) >>= fun w__50 : bool =>
                                    (if sumbool_of_bool w__50 then
                                       let _mappingpatterns_19_ : mword 1 :=
                                         subrange_vec_dec v__348 12 12 in
                                       (bool_not_bits_backwards _mappingpatterns_19_) >>= fun s =>
                                       returnm true
                                     else
                                       (and_boolM
                                          (let _mappingpatterns_20_ : mword 1 :=
                                            subrange_vec_dec v__348 12 12 in
                                          (and_boolM
                                             (returnm ((bool_not_bits_backwards_matches
                                                          _mappingpatterns_20_)
                                               : bool))
                                             ((if bool_not_bits_backwards_matches
                                                    _mappingpatterns_20_ then
                                                 (bool_not_bits_backwards _mappingpatterns_20_) >>= fun s =>
                                                 returnm ((Z.eqb 32 64)  : bool)
                                               else returnm false)
                                              : M (bool)))
                                           : M (bool))
                                          (returnm ((andb
                                                       (eq_vec (subrange_vec_dec v__348 31 25)
                                                          ('b"0000001"
                                                           : mword (31 - 25 + 1)))
                                                       (andb
                                                          (eq_vec (subrange_vec_dec v__348 14 13)
                                                             ('b"11"
                                                              : mword (14 - 13 + 1)))
                                                          (eq_vec (subrange_vec_dec v__348 6 0)
                                                             ('b"0111011"
                                                              : mword (6 - 0 + 1)))))
                                            : bool))) >>= fun w__53 : bool =>
                                       (if sumbool_of_bool w__53 then
                                          let _mappingpatterns_20_ : mword 1 :=
                                            subrange_vec_dec v__348 12 12 in
                                          (bool_not_bits_backwards _mappingpatterns_20_) >>= fun s =>
                                          returnm true
                                        else
                                          (and_boolM
                                             (let _mappingpatterns_22_ : mword 2 :=
                                               subrange_vec_dec v__348 13 12 in
                                             let _mappingpatterns_21_ : mword 1 :=
                                               subrange_vec_dec v__348 14 14 in
                                             (and_boolM
                                                (returnm ((encdec_csrop_backwards_matches
                                                             _mappingpatterns_22_)
                                                  : bool))
                                                ((if encdec_csrop_backwards_matches
                                                       _mappingpatterns_22_ then
                                                    (encdec_csrop_backwards _mappingpatterns_22_) >>= fun op =>
                                                    (and_boolM
                                                       (returnm ((bool_bits_backwards_matches
                                                                    _mappingpatterns_21_)
                                                         : bool))
                                                       ((if bool_bits_backwards_matches
                                                              _mappingpatterns_21_ then
                                                           (bool_bits_backwards _mappingpatterns_21_) >>= fun is_imm =>
                                                           returnm (true  : bool)
                                                         else returnm false)
                                                        : M (bool)))
                                                     : M (bool)
                                                  else returnm false)
                                                 : M (bool)))
                                              : M (bool))
                                             (returnm ((eq_vec (subrange_vec_dec v__348 6 0)
                                                          ('b"1110011"
                                                           : mword (6 - 0 + 1)))
                                               : bool))) >>= fun w__58 : bool =>
                                          (if sumbool_of_bool w__58 then
                                             let _mappingpatterns_22_ : mword 2 :=
                                               subrange_vec_dec v__348 13 12 in
                                             let _mappingpatterns_21_ : mword 1 :=
                                               subrange_vec_dec v__348 14 14 in
                                             (encdec_csrop_backwards _mappingpatterns_22_) >>= fun op =>
                                             (bool_bits_backwards _mappingpatterns_21_) >>= fun is_imm =>
                                             returnm true
                                           else if eq_vec v__348 (Ox"00200073"  : mword 32) then
                                             returnm true
                                           else
                                             (and_boolM ((is_RV32F_or_RV64F tt)  : M (bool))
                                                (returnm ((andb
                                                             (eq_vec (subrange_vec_dec v__348 14 12)
                                                                ('b"010"
                                                                 : mword (14 - 12 + 1)))
                                                             (eq_vec (subrange_vec_dec v__348 6 0)
                                                                ('b"0000111"
                                                                 : mword (6 - 0 + 1))))
                                                  : bool))) >>= fun w__60 : bool =>
                                             (if sumbool_of_bool w__60 then returnm true
                                              else
                                                (and_boolM ((is_RV32D_or_RV64D tt)  : M (bool))
                                                   (returnm ((andb
                                                                (eq_vec
                                                                   (subrange_vec_dec v__348 14 12)
                                                                   ('b"011"
                                                                    : mword (14 - 12 + 1)))
                                                                (eq_vec
                                                                   (subrange_vec_dec v__348 6 0)
                                                                   ('b"0000111"
                                                                    : mword (6 - 0 + 1))))
                                                     : bool))) >>= fun w__62 : bool =>
                                                (if sumbool_of_bool w__62 then returnm true
                                                 else
                                                   (and_boolM ((is_RV32F_or_RV64F tt)  : M (bool))
                                                      (returnm ((andb
                                                                   (eq_vec
                                                                      (subrange_vec_dec v__348 14 12)
                                                                      ('b"010"
                                                                       : mword (14 - 12 + 1)))
                                                                   (eq_vec
                                                                      (subrange_vec_dec v__348 6 0)
                                                                      ('b"0100111"
                                                                       : mword (6 - 0 + 1))))
                                                        : bool))) >>= fun w__64 : bool =>
                                                   (if sumbool_of_bool w__64 then returnm true
                                                    else
                                                      (and_boolM
                                                         ((is_RV32D_or_RV64D tt)
                                                          : M (bool))
                                                         (returnm ((andb
                                                                      (eq_vec
                                                                         (subrange_vec_dec v__348 14
                                                                            12)
                                                                         ('b"011"
                                                                          : mword (14 - 12 + 1)))
                                                                      (eq_vec
                                                                         (subrange_vec_dec v__348 6
                                                                            0)
                                                                         ('b"0100111"
                                                                          : mword (6 - 0 + 1))))
                                                           : bool))) >>= fun w__66 : bool =>
                                                      (if sumbool_of_bool w__66 then returnm true
                                                       else
                                                         (and_boolM
                                                            (let _mappingpatterns_23_ : mword 3 :=
                                                              subrange_vec_dec v__348 14 12 in
                                                            (and_boolM
                                                               (returnm ((encdec_rounding_mode_backwards_matches
                                                                            _mappingpatterns_23_)
                                                                 : bool))
                                                               ((if encdec_rounding_mode_backwards_matches
                                                                      _mappingpatterns_23_ then
                                                                   (encdec_rounding_mode_backwards
                                                                      _mappingpatterns_23_) >>= fun rm =>
                                                                   (is_RV32F_or_RV64F tt)
                                                                    : M (bool)
                                                                 else returnm false)
                                                                : M (bool)))
                                                             : M (bool))
                                                            (returnm ((andb
                                                                         (eq_vec
                                                                            (subrange_vec_dec v__348
                                                                               26 25)
                                                                            ('b"00"
                                                                             : mword (26 - 25 + 1)))
                                                                         (eq_vec
                                                                            (subrange_vec_dec v__348
                                                                               6 0)
                                                                            ('b"1000011"
                                                                             : mword (6 - 0 + 1))))
                                                              : bool))) >>= fun w__70 : bool =>
                                                         (if sumbool_of_bool w__70 then
                                                            let _mappingpatterns_23_ : mword 3 :=
                                                              subrange_vec_dec v__348 14 12 in
                                                            (encdec_rounding_mode_backwards
                                                               _mappingpatterns_23_) >>= fun rm =>
                                                            returnm true
                                                          else
                                                            (and_boolM
                                                               (let _mappingpatterns_24_ : mword 3 :=
                                                                 subrange_vec_dec v__348 14 12 in
                                                               (and_boolM
                                                                  (returnm ((encdec_rounding_mode_backwards_matches
                                                                               _mappingpatterns_24_)
                                                                    : bool))
                                                                  ((if encdec_rounding_mode_backwards_matches
                                                                         _mappingpatterns_24_ then
                                                                      (encdec_rounding_mode_backwards
                                                                         _mappingpatterns_24_) >>= fun rm =>
                                                                      (is_RV32F_or_RV64F tt)
                                                                       : M (bool)
                                                                    else returnm false)
                                                                   : M (bool)))
                                                                : M (bool))
                                                               (returnm ((andb
                                                                            (eq_vec
                                                                               (subrange_vec_dec
                                                                                  v__348 26 25)
                                                                               ('b"00"
                                                                                : mword (26 - 25 + 1)))
                                                                            (eq_vec
                                                                               (subrange_vec_dec
                                                                                  v__348 6 0)
                                                                               ('b"1000111"
                                                                                : mword (6 - 0 + 1))))
                                                                 : bool))) >>= fun w__74 : bool =>
                                                            (if sumbool_of_bool w__74 then
                                                               let _mappingpatterns_24_ : mword 3 :=
                                                                 subrange_vec_dec v__348 14 12 in
                                                               (encdec_rounding_mode_backwards
                                                                  _mappingpatterns_24_) >>= fun rm =>
                                                               returnm true
                                                             else
                                                               (and_boolM
                                                                  (let _mappingpatterns_25_ : mword 3 :=
                                                                    subrange_vec_dec v__348 14 12 in
                                                                  (and_boolM
                                                                     (returnm ((encdec_rounding_mode_backwards_matches
                                                                                  _mappingpatterns_25_)
                                                                       : bool))
                                                                     ((if encdec_rounding_mode_backwards_matches
                                                                            _mappingpatterns_25_
                                                                       then
                                                                         (encdec_rounding_mode_backwards
                                                                            _mappingpatterns_25_) >>= fun rm =>
                                                                         (is_RV32F_or_RV64F tt)
                                                                          : M (bool)
                                                                       else returnm false)
                                                                      : M (bool)))
                                                                   : M (bool))
                                                                  (returnm ((andb
                                                                               (eq_vec
                                                                                  (subrange_vec_dec
                                                                                     v__348 26 25)
                                                                                  ('b"00"
                                                                                   : mword (26 - 25 + 1)))
                                                                               (eq_vec
                                                                                  (subrange_vec_dec
                                                                                     v__348 6 0)
                                                                                  ('b"1001011"
                                                                                   : mword (6 - 0 + 1))))
                                                                    : bool))) >>= fun w__78 : bool =>
                                                               (if sumbool_of_bool w__78 then
                                                                  let _mappingpatterns_25_ : mword 3 :=
                                                                    subrange_vec_dec v__348 14 12 in
                                                                  (encdec_rounding_mode_backwards
                                                                     _mappingpatterns_25_) >>= fun rm =>
                                                                  returnm true
                                                                else
                                                                  (and_boolM
                                                                     (let _mappingpatterns_26_ : mword 3 :=
                                                                       subrange_vec_dec v__348 14 12 in
                                                                     (and_boolM
                                                                        (returnm ((encdec_rounding_mode_backwards_matches
                                                                                     _mappingpatterns_26_)
                                                                          : bool))
                                                                        ((if encdec_rounding_mode_backwards_matches
                                                                               _mappingpatterns_26_
                                                                          then
                                                                            (encdec_rounding_mode_backwards
                                                                               _mappingpatterns_26_) >>= fun rm =>
                                                                            (is_RV32F_or_RV64F tt)
                                                                             : M (bool)
                                                                          else returnm false)
                                                                         : M (bool)))
                                                                      : M (bool))
                                                                     (returnm ((andb
                                                                                  (eq_vec
                                                                                     (subrange_vec_dec
                                                                                        v__348 26 25)
                                                                                     ('b"00"
                                                                                      : mword (26 - 25 + 1)))
                                                                                  (eq_vec
                                                                                     (subrange_vec_dec
                                                                                        v__348 6 0)
                                                                                     ('b"1001111"
                                                                                      : mword (6 - 0 + 1))))
                                                                       : bool))) >>= fun w__82 : bool =>
                                                                  (if sumbool_of_bool w__82 then
                                                                     let _mappingpatterns_26_ : mword 3 :=
                                                                       subrange_vec_dec v__348 14 12 in
                                                                     (encdec_rounding_mode_backwards
                                                                        _mappingpatterns_26_) >>= fun rm =>
                                                                     returnm true
                                                                   else
                                                                     (and_boolM
                                                                        (let _mappingpatterns_27_ : mword 3 :=
                                                                          subrange_vec_dec v__348 14
                                                                            12 in
                                                                        (and_boolM
                                                                           (returnm ((encdec_rounding_mode_backwards_matches
                                                                                        _mappingpatterns_27_)
                                                                             : bool))
                                                                           ((if encdec_rounding_mode_backwards_matches
                                                                                  _mappingpatterns_27_
                                                                             then
                                                                               (encdec_rounding_mode_backwards
                                                                                  _mappingpatterns_27_) >>= fun rm =>
                                                                               (is_RV32F_or_RV64F tt)
                                                                                : M (bool)
                                                                             else returnm false)
                                                                            : M (bool)))
                                                                         : M (bool))
                                                                        (returnm ((andb
                                                                                     (eq_vec
                                                                                        (subrange_vec_dec
                                                                                           v__348 31
                                                                                           25)
                                                                                        ('b"0000000"
                                                                                         : mword (31 - 25 + 1)))
                                                                                     (eq_vec
                                                                                        (subrange_vec_dec
                                                                                           v__348 6
                                                                                           0)
                                                                                        ('b"1010011"
                                                                                         : mword (6 - 0 + 1))))
                                                                          : bool))) >>= fun w__86 : bool =>
                                                                     (if sumbool_of_bool w__86 then
                                                                        let _mappingpatterns_27_ : mword 3 :=
                                                                          subrange_vec_dec v__348 14
                                                                            12 in
                                                                        (encdec_rounding_mode_backwards
                                                                           _mappingpatterns_27_) >>= fun rm =>
                                                                        returnm true
                                                                      else
                                                                        (and_boolM
                                                                           (let _mappingpatterns_28_ : mword 3 :=
                                                                             subrange_vec_dec v__348
                                                                               14 12 in
                                                                           (and_boolM
                                                                              (returnm ((encdec_rounding_mode_backwards_matches
                                                                                           _mappingpatterns_28_)
                                                                                : bool))
                                                                              ((if encdec_rounding_mode_backwards_matches
                                                                                     _mappingpatterns_28_
                                                                                then
                                                                                  (encdec_rounding_mode_backwards
                                                                                     _mappingpatterns_28_) >>= fun rm =>
                                                                                  (is_RV32F_or_RV64F
                                                                                     tt)
                                                                                   : M (bool)
                                                                                else returnm false)
                                                                               : M (bool)))
                                                                            : M (bool))
                                                                           (returnm ((andb
                                                                                        (eq_vec
                                                                                           (subrange_vec_dec
                                                                                              v__348
                                                                                              31 25)
                                                                                           ('b"0000100"
                                                                                            : mword (31 - 25 + 1)))
                                                                                        (eq_vec
                                                                                           (subrange_vec_dec
                                                                                              v__348
                                                                                              6 0)
                                                                                           ('b"1010011"
                                                                                            : mword (6 - 0 + 1))))
                                                                             : bool))) >>= fun w__90 : bool =>
                                                                        (if sumbool_of_bool
                                                                           w__90 then
                                                                           let _mappingpatterns_28_ : mword 3 :=
                                                                             subrange_vec_dec v__348
                                                                               14 12 in
                                                                           (encdec_rounding_mode_backwards
                                                                              _mappingpatterns_28_) >>= fun rm =>
                                                                           returnm true
                                                                         else
                                                                           (and_boolM
                                                                              (let _mappingpatterns_29_ : mword 3 :=
                                                                                subrange_vec_dec
                                                                                  v__348 14 12 in
                                                                              (and_boolM
                                                                                 (returnm ((encdec_rounding_mode_backwards_matches
                                                                                              _mappingpatterns_29_)
                                                                                   : bool))
                                                                                 ((if encdec_rounding_mode_backwards_matches
                                                                                        _mappingpatterns_29_
                                                                                   then
                                                                                     (encdec_rounding_mode_backwards
                                                                                        _mappingpatterns_29_) >>= fun rm =>
                                                                                     (is_RV32F_or_RV64F
                                                                                        tt)
                                                                                      : M (bool)
                                                                                   else
                                                                                     returnm false)
                                                                                  : M (bool)))
                                                                               : M (bool))
                                                                              (returnm ((andb
                                                                                           (eq_vec
                                                                                              (subrange_vec_dec
                                                                                                 v__348
                                                                                                 31
                                                                                                 25)
                                                                                              ('b"0001000"
                                                                                               : mword (31 - 25 + 1)))
                                                                                           (eq_vec
                                                                                              (subrange_vec_dec
                                                                                                 v__348
                                                                                                 6 0)
                                                                                              ('b"1010011"
                                                                                               : mword (6 - 0 + 1))))
                                                                                : bool))) >>= fun w__94 : bool =>
                                                                           (if sumbool_of_bool
                                                                              w__94 then
                                                                              let _mappingpatterns_29_ : mword 3 :=
                                                                                subrange_vec_dec
                                                                                  v__348 14 12 in
                                                                              (encdec_rounding_mode_backwards
                                                                                 _mappingpatterns_29_) >>= fun rm =>
                                                                              returnm true
                                                                            else
                                                                              (and_boolM
                                                                                 (let _mappingpatterns_30_ : mword 3 :=
                                                                                   subrange_vec_dec
                                                                                     v__348 14 12 in
                                                                                 (and_boolM
                                                                                    (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                 _mappingpatterns_30_)
                                                                                      : bool))
                                                                                    ((if encdec_rounding_mode_backwards_matches
                                                                                           _mappingpatterns_30_
                                                                                      then
                                                                                        (encdec_rounding_mode_backwards
                                                                                           _mappingpatterns_30_) >>= fun rm =>
                                                                                        (is_RV32F_or_RV64F
                                                                                           tt)
                                                                                         : M (bool)
                                                                                      else
                                                                                        returnm false)
                                                                                     : M (bool)))
                                                                                  : M (bool))
                                                                                 (returnm ((andb
                                                                                              (eq_vec
                                                                                                 (subrange_vec_dec
                                                                                                    v__348
                                                                                                    31
                                                                                                    25)
                                                                                                 ('b"0001100"
                                                                                                  : mword (31 - 25 + 1)))
                                                                                              (eq_vec
                                                                                                 (subrange_vec_dec
                                                                                                    v__348
                                                                                                    6
                                                                                                    0)
                                                                                                 ('b"1010011"
                                                                                                  : mword (6 - 0 + 1))))
                                                                                   : bool))) >>= fun w__98 : bool =>
                                                                              (if sumbool_of_bool
                                                                                 w__98 then
                                                                                 let _mappingpatterns_30_ : mword 3 :=
                                                                                   subrange_vec_dec
                                                                                     v__348 14 12 in
                                                                                 (encdec_rounding_mode_backwards
                                                                                    _mappingpatterns_30_) >>= fun rm =>
                                                                                 returnm true
                                                                               else
                                                                                 (and_boolM
                                                                                    (let _mappingpatterns_31_ : mword 3 :=
                                                                                      subrange_vec_dec
                                                                                        v__348 14 12 in
                                                                                    (and_boolM
                                                                                       (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                    _mappingpatterns_31_)
                                                                                         : bool))
                                                                                       ((if encdec_rounding_mode_backwards_matches
                                                                                              _mappingpatterns_31_
                                                                                         then
                                                                                           (encdec_rounding_mode_backwards
                                                                                              _mappingpatterns_31_) >>= fun rm =>
                                                                                           (is_RV32F_or_RV64F
                                                                                              tt)
                                                                                            : M (bool)
                                                                                         else
                                                                                           returnm false)
                                                                                        : M (bool)))
                                                                                     : M (bool))
                                                                                    (returnm ((andb
                                                                                                 (eq_vec
                                                                                                    (subrange_vec_dec
                                                                                                       v__348
                                                                                                       31
                                                                                                       20)
                                                                                                    (Ox"580"
                                                                                                     : mword (31 - 20 + 1)))
                                                                                                 (eq_vec
                                                                                                    (subrange_vec_dec
                                                                                                       v__348
                                                                                                       6
                                                                                                       0)
                                                                                                    ('b"1010011"
                                                                                                     : mword (6 - 0 + 1))))
                                                                                      : bool))) >>= fun w__102 : bool =>
                                                                                 (if sumbool_of_bool
                                                                                    w__102 then
                                                                                    let _mappingpatterns_31_ : mword 3 :=
                                                                                      subrange_vec_dec
                                                                                        v__348 14 12 in
                                                                                    (encdec_rounding_mode_backwards
                                                                                       _mappingpatterns_31_) >>= fun rm =>
                                                                                    returnm true
                                                                                  else
                                                                                    (and_boolM
                                                                                       (let _mappingpatterns_32_ : mword 3 :=
                                                                                         subrange_vec_dec
                                                                                           v__348 14
                                                                                           12 in
                                                                                       (and_boolM
                                                                                          (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                       _mappingpatterns_32_)
                                                                                            : bool))
                                                                                          ((if encdec_rounding_mode_backwards_matches
                                                                                                 _mappingpatterns_32_
                                                                                            then
                                                                                              (encdec_rounding_mode_backwards
                                                                                                 _mappingpatterns_32_) >>= fun rm =>
                                                                                              (is_RV32F_or_RV64F
                                                                                                 tt)
                                                                                               : M (bool)
                                                                                            else
                                                                                              returnm false)
                                                                                           : M (bool)))
                                                                                        : M (bool))
                                                                                       (returnm ((andb
                                                                                                    (eq_vec
                                                                                                       (subrange_vec_dec
                                                                                                          v__348
                                                                                                          31
                                                                                                          20)
                                                                                                       (Ox"C00"
                                                                                                        : mword (31 - 20 + 1)))
                                                                                                    (eq_vec
                                                                                                       (subrange_vec_dec
                                                                                                          v__348
                                                                                                          6
                                                                                                          0)
                                                                                                       ('b"1010011"
                                                                                                        : mword (6 - 0 + 1))))
                                                                                         : bool))) >>= fun w__106 : bool =>
                                                                                    (if sumbool_of_bool
                                                                                       w__106 then
                                                                                       let _mappingpatterns_32_ : mword 3 :=
                                                                                         subrange_vec_dec
                                                                                           v__348 14
                                                                                           12 in
                                                                                       (encdec_rounding_mode_backwards
                                                                                          _mappingpatterns_32_) >>= fun rm =>
                                                                                       returnm true
                                                                                     else
                                                                                       (and_boolM
                                                                                          (let _mappingpatterns_33_ : mword 3 :=
                                                                                            subrange_vec_dec
                                                                                              v__348
                                                                                              14 12 in
                                                                                          (and_boolM
                                                                                             (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                          _mappingpatterns_33_)
                                                                                               : bool))
                                                                                             ((if encdec_rounding_mode_backwards_matches
                                                                                                    _mappingpatterns_33_
                                                                                               then
                                                                                                 (encdec_rounding_mode_backwards
                                                                                                    _mappingpatterns_33_) >>= fun rm =>
                                                                                                 (is_RV32F_or_RV64F
                                                                                                    tt)
                                                                                                  : M (bool)
                                                                                               else
                                                                                                 returnm false)
                                                                                              : M (bool)))
                                                                                           : M (bool))
                                                                                          (returnm ((andb
                                                                                                       (eq_vec
                                                                                                          (subrange_vec_dec
                                                                                                             v__348
                                                                                                             31
                                                                                                             20)
                                                                                                          (Ox"C01"
                                                                                                           : mword (31 - 20 + 1)))
                                                                                                       (eq_vec
                                                                                                          (subrange_vec_dec
                                                                                                             v__348
                                                                                                             6
                                                                                                             0)
                                                                                                          ('b"1010011"
                                                                                                           : mword (6 - 0 + 1))))
                                                                                            : bool))) >>= fun w__110 : bool =>
                                                                                       (if sumbool_of_bool
                                                                                          w__110
                                                                                        then
                                                                                          let _mappingpatterns_33_ : mword 3 :=
                                                                                            subrange_vec_dec
                                                                                              v__348
                                                                                              14 12 in
                                                                                          (encdec_rounding_mode_backwards
                                                                                             _mappingpatterns_33_) >>= fun rm =>
                                                                                          returnm true
                                                                                        else
                                                                                          (and_boolM
                                                                                             (let _mappingpatterns_34_ : mword 3 :=
                                                                                               subrange_vec_dec
                                                                                                 v__348
                                                                                                 14
                                                                                                 12 in
                                                                                             (and_boolM
                                                                                                (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                             _mappingpatterns_34_)
                                                                                                  : bool))
                                                                                                ((if
                                                                                                    encdec_rounding_mode_backwards_matches
                                                                                                      _mappingpatterns_34_
                                                                                                  then
                                                                                                    (encdec_rounding_mode_backwards
                                                                                                       _mappingpatterns_34_) >>= fun rm =>
                                                                                                    (is_RV32F_or_RV64F
                                                                                                       tt)
                                                                                                     : M (bool)
                                                                                                  else
                                                                                                    returnm false)
                                                                                                 : M (bool)))
                                                                                              : M (bool))
                                                                                             (returnm ((andb
                                                                                                          (eq_vec
                                                                                                             (subrange_vec_dec
                                                                                                                v__348
                                                                                                                31
                                                                                                                20)
                                                                                                             (Ox"D00"
                                                                                                              : mword (31 - 20 + 1)))
                                                                                                          (eq_vec
                                                                                                             (subrange_vec_dec
                                                                                                                v__348
                                                                                                                6
                                                                                                                0)
                                                                                                             ('b"1010011"
                                                                                                              : mword (6 - 0 + 1))))
                                                                                               : bool))) >>= fun w__114 : bool =>
                                                                                          (if sumbool_of_bool
                                                                                             w__114
                                                                                           then
                                                                                             let _mappingpatterns_34_ : mword 3 :=
                                                                                               subrange_vec_dec
                                                                                                 v__348
                                                                                                 14
                                                                                                 12 in
                                                                                             (encdec_rounding_mode_backwards
                                                                                                _mappingpatterns_34_) >>= fun rm =>
                                                                                             returnm true
                                                                                           else
                                                                                             (and_boolM
                                                                                                (let _mappingpatterns_35_ : mword 3 :=
                                                                                                  subrange_vec_dec
                                                                                                    v__348
                                                                                                    14
                                                                                                    12 in
                                                                                                (and_boolM
                                                                                                   (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                _mappingpatterns_35_)
                                                                                                     : bool))
                                                                                                   ((if
                                                                                                       encdec_rounding_mode_backwards_matches
                                                                                                         _mappingpatterns_35_
                                                                                                     then
                                                                                                       (encdec_rounding_mode_backwards
                                                                                                          _mappingpatterns_35_) >>= fun rm =>
                                                                                                       (is_RV32F_or_RV64F
                                                                                                          tt)
                                                                                                        : M (bool)
                                                                                                     else
                                                                                                       returnm false)
                                                                                                    : M (bool)))
                                                                                                 : M (bool))
                                                                                                (returnm ((andb
                                                                                                             (eq_vec
                                                                                                                (subrange_vec_dec
                                                                                                                   v__348
                                                                                                                   31
                                                                                                                   20)
                                                                                                                (Ox"D01"
                                                                                                                 : mword (31 - 20 + 1)))
                                                                                                             (eq_vec
                                                                                                                (subrange_vec_dec
                                                                                                                   v__348
                                                                                                                   6
                                                                                                                   0)
                                                                                                                ('b"1010011"
                                                                                                                 : mword (6 - 0 + 1))))
                                                                                                  : bool))) >>= fun w__118 : bool =>
                                                                                             (if sumbool_of_bool
                                                                                                w__118
                                                                                              then
                                                                                                let _mappingpatterns_35_ : mword 3 :=
                                                                                                  subrange_vec_dec
                                                                                                    v__348
                                                                                                    14
                                                                                                    12 in
                                                                                                (encdec_rounding_mode_backwards
                                                                                                   _mappingpatterns_35_) >>= fun rm =>
                                                                                                returnm true
                                                                                              else
                                                                                                (and_boolM
                                                                                                   (let _mappingpatterns_36_ : mword 3 :=
                                                                                                     subrange_vec_dec
                                                                                                       v__348
                                                                                                       14
                                                                                                       12 in
                                                                                                   (and_boolM
                                                                                                      (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                   _mappingpatterns_36_)
                                                                                                        : bool))
                                                                                                      ((if
                                                                                                          encdec_rounding_mode_backwards_matches
                                                                                                            _mappingpatterns_36_
                                                                                                        then
                                                                                                          (encdec_rounding_mode_backwards
                                                                                                             _mappingpatterns_36_) >>= fun rm =>
                                                                                                          (is_RV64F
                                                                                                             tt)
                                                                                                           : M (bool)
                                                                                                        else
                                                                                                          returnm false)
                                                                                                       : M (bool)))
                                                                                                    : M (bool))
                                                                                                   (returnm ((andb
                                                                                                                (eq_vec
                                                                                                                   (subrange_vec_dec
                                                                                                                      v__348
                                                                                                                      31
                                                                                                                      20)
                                                                                                                   (Ox"C02"
                                                                                                                    : mword (31 - 20 + 1)))
                                                                                                                (eq_vec
                                                                                                                   (subrange_vec_dec
                                                                                                                      v__348
                                                                                                                      6
                                                                                                                      0)
                                                                                                                   ('b"1010011"
                                                                                                                    : mword (6 - 0 + 1))))
                                                                                                     : bool))) >>= fun w__122 : bool =>
                                                                                                (if sumbool_of_bool
                                                                                                   w__122
                                                                                                 then
                                                                                                   let _mappingpatterns_36_ : mword 3 :=
                                                                                                     subrange_vec_dec
                                                                                                       v__348
                                                                                                       14
                                                                                                       12 in
                                                                                                   (encdec_rounding_mode_backwards
                                                                                                      _mappingpatterns_36_) >>= fun rm =>
                                                                                                   returnm true
                                                                                                 else
                                                                                                   (and_boolM
                                                                                                      (let _mappingpatterns_37_ : mword 3 :=
                                                                                                        subrange_vec_dec
                                                                                                          v__348
                                                                                                          14
                                                                                                          12 in
                                                                                                      (and_boolM
                                                                                                         (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                      _mappingpatterns_37_)
                                                                                                           : bool))
                                                                                                         ((if
                                                                                                             encdec_rounding_mode_backwards_matches
                                                                                                               _mappingpatterns_37_
                                                                                                           then
                                                                                                             (encdec_rounding_mode_backwards
                                                                                                                _mappingpatterns_37_) >>= fun rm =>
                                                                                                             (is_RV64F
                                                                                                                tt)
                                                                                                              : M (bool)
                                                                                                           else
                                                                                                             returnm false)
                                                                                                          : M (bool)))
                                                                                                       : M (bool))
                                                                                                      (returnm ((andb
                                                                                                                   (eq_vec
                                                                                                                      (subrange_vec_dec
                                                                                                                         v__348
                                                                                                                         31
                                                                                                                         20)
                                                                                                                      (Ox"C03"
                                                                                                                       : mword (31 - 20 + 1)))
                                                                                                                   (eq_vec
                                                                                                                      (subrange_vec_dec
                                                                                                                         v__348
                                                                                                                         6
                                                                                                                         0)
                                                                                                                      ('b"1010011"
                                                                                                                       : mword (6 - 0 + 1))))
                                                                                                        : bool))) >>= fun w__126 : bool =>
                                                                                                   (if
                                                                                                      sumbool_of_bool
                                                                                                      w__126
                                                                                                    then
                                                                                                      let _mappingpatterns_37_ : mword 3 :=
                                                                                                        subrange_vec_dec
                                                                                                          v__348
                                                                                                          14
                                                                                                          12 in
                                                                                                      (encdec_rounding_mode_backwards
                                                                                                         _mappingpatterns_37_) >>= fun rm =>
                                                                                                      returnm true
                                                                                                    else
                                                                                                      (and_boolM
                                                                                                         (let _mappingpatterns_38_ : mword 3 :=
                                                                                                           subrange_vec_dec
                                                                                                             v__348
                                                                                                             14
                                                                                                             12 in
                                                                                                         (and_boolM
                                                                                                            (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                         _mappingpatterns_38_)
                                                                                                              : bool))
                                                                                                            ((if
                                                                                                                encdec_rounding_mode_backwards_matches
                                                                                                                  _mappingpatterns_38_
                                                                                                              then
                                                                                                                (encdec_rounding_mode_backwards
                                                                                                                   _mappingpatterns_38_) >>= fun rm =>
                                                                                                                (is_RV64F
                                                                                                                   tt)
                                                                                                                 : M (bool)
                                                                                                              else
                                                                                                                returnm false)
                                                                                                             : M (bool)))
                                                                                                          : M (bool))
                                                                                                         (returnm ((andb
                                                                                                                      (eq_vec
                                                                                                                         (subrange_vec_dec
                                                                                                                            v__348
                                                                                                                            31
                                                                                                                            20)
                                                                                                                         (Ox"D02"
                                                                                                                          : mword (31 - 20 + 1)))
                                                                                                                      (eq_vec
                                                                                                                         (subrange_vec_dec
                                                                                                                            v__348
                                                                                                                            6
                                                                                                                            0)
                                                                                                                         ('b"1010011"
                                                                                                                          : mword (6 - 0 + 1))))
                                                                                                           : bool))) >>= fun w__130 : bool =>
                                                                                                      (if
                                                                                                         sumbool_of_bool
                                                                                                         w__130
                                                                                                       then
                                                                                                         let _mappingpatterns_38_ : mword 3 :=
                                                                                                           subrange_vec_dec
                                                                                                             v__348
                                                                                                             14
                                                                                                             12 in
                                                                                                         (encdec_rounding_mode_backwards
                                                                                                            _mappingpatterns_38_) >>= fun rm =>
                                                                                                         returnm true
                                                                                                       else
                                                                                                         (and_boolM
                                                                                                            (let _mappingpatterns_39_ : mword 3 :=
                                                                                                              subrange_vec_dec
                                                                                                                v__348
                                                                                                                14
                                                                                                                12 in
                                                                                                            (and_boolM
                                                                                                               (returnm ((encdec_rounding_mode_backwards_matches
                                                                                                                            _mappingpatterns_39_)
                                                                                                                 : bool))
                                                                                                               ((if
                                                                                                                   encdec_rounding_mode_backwards_matches
                                                                                                                     _mappingpatterns_39_
                                                                                                                 then
                                                                                                                   (encdec_rounding_mode_backwards
                                                                                                                      _mappingpatterns_39_) >>= fun rm =>
                                                                                                                   (is_RV64F
                                                                                                                      tt)
                                                                                                                    : M (bool)
                                                                                                                 else
                                                                                                                   returnm false)
                                                                                                                : M (bool)))
                                                                                                             : M (bool))
                                                                                                            (returnm ((andb
                                                                                                                         (eq_vec
                                                                                                                            (subrange_vec_dec
                                                                                                                               v__348
                                                                                                                               31
                                                                                                                               20)
                                                                                                                            (Ox"D03"
                                                                                                                             : mword (31 - 20 + 1)))
                                                                                                                         (eq_vec
                                                                                                                            (subrange_vec_dec
                                                                                                                               v__348
                                                                                                                               6
                                                                                                                               0)
                                                                                                                            ('b"1010011"
                                                                                                                             : mword (6 - 0 + 1))))
                                                                                                              : bool))) >>= fun w__134 : bool =>
                                                                                                         (if
                                                                                                            sumbool_of_bool
                                                                                                            w__134
                                                                                                          then
                                                                                                            let _mappingpatterns_39_ : mword 3 :=
                                                                                                              subrange_vec_dec
                                                                                                                v__348
                                                                                                                14
                                                                                                                12 in
                                                                                                            (encdec_rounding_mode_backwards
                                                                                                               _mappingpatterns_39_) >>= fun rm =>
                                                                                                            returnm true
                                                                                                          else
                                                                                                            (and_boolM
                                                                                                               ((is_RV32F_or_RV64F
                                                                                                                   tt)
                                                                                                                : M (bool))
                                                                                                               (returnm ((andb
                                                                                                                            (eq_vec
                                                                                                                               (subrange_vec_dec
                                                                                                                                  v__348
                                                                                                                                  31
                                                                                                                                  25)
                                                                                                                               ('b"0010000"
                                                                                                                                : mword (31 - 25 + 1)))
                                                                                                                            (andb
                                                                                                                               (eq_vec
                                                                                                                                  (subrange_vec_dec
                                                                                                                                     v__348
                                                                                                                                     14
                                                                                                                                     12)
                                                                                                                                  ('b"000"
                                                                                                                                   : mword (14 - 12 + 1)))
                                                                                                                               (eq_vec
                                                                                                                                  (subrange_vec_dec
                                                                                                                                     v__348
                                                                                                                                     6
                                                                                                                                     0)
                                                                                                                                  ('b"1010011"
                                                                                                                                   : mword (6 - 0 + 1)))))
                                                                                                                 : bool))) >>= fun w__136 : bool =>
                                                                                                            (if
                                                                                                               sumbool_of_bool
                                                                                                               w__136
                                                                                                             then
                                                                                                               returnm true
                                                                                                             else
                                                                                                               (and_boolM
                                                                                                                  ((is_RV32F_or_RV64F
                                                                                                                      tt)
                                                                                                                   : M (bool))
                                                                                                                  (returnm ((andb
                                                                                                                               (eq_vec
                                                                                                                                  (subrange_vec_dec
                                                                                                                                     v__348
                                                                                                                                     31
                                                                                                                                     25)
                                                                                                                                  ('b"0010000"
                                                                                                                                   : mword (31 - 25 + 1)))
                                                                                                                               (andb
                                                                                                                                  (eq_vec
                                                                                                                                     (subrange_vec_dec
                                                                                                                                        v__348
                                                                                                                                        14
                                                                                                                                        12)
                                                                                                                                     ('b"001"
                                                                                                                                      : mword (14 - 12 + 1)))
                                                                                                                                  (eq_vec
                                                                                                                                     (subrange_vec_dec
                                                                                                                                        v__348
                                                                                                                                        6
                                                                                                                                        0)
                                                                                                                                     ('b"1010011"
                                                                                                                                      : mword (6 - 0 + 1)))))
                                                                                                                    : bool))) >>= fun w__138 : bool =>
                                                                                                               (if
                                                                                                                  sumbool_of_bool
                                                                                                                  w__138
                                                                                                                then
                                                                                                                  returnm true
                                                                                                                else
                                                                                                                  (and_boolM
                                                                                                                     ((is_RV32F_or_RV64F
                                                                                                                         tt)
                                                                                                                      : M (bool))
                                                                                                                     (returnm ((andb
                                                                                                                                  (eq_vec
                                                                                                                                     (subrange_vec_dec
                                                                                                                                        v__348
                                                                                                                                        31
                                                                                                                                        25)
                                                                                                                                     ('b"0010000"
                                                                                                                                      : mword (31 - 25 + 1)))
                                                                                                                                  (andb
                                                                                                                                     (eq_vec
                                                                                                                                        (subrange_vec_dec
                                                                                                                                           v__348
                                                                                                                                           14
                                                                                                                                           12)
                                                                                                                                        ('b"010"
                                                                                                                                         : mword (14 - 12 + 1)))
                                                                                                                                     (eq_vec
                                                                                                                                        (subrange_vec_dec
                                                                                                                                           v__348
                                                                                                                                           6
                                                                                                                                           0)
                                                                                                                                        ('b"1010011"
                                                                                                                                         : mword (6 - 0 + 1)))))
                                                                                                                       : bool))) >>= fun w__140 : bool =>
                                                                                                                  (if
                                                                                                                     sumbool_of_bool
                                                                                                                     w__140
                                                                                                                   then
                                                                                                                     returnm true
                                                                                                                   else
                                                                                                                     (and_boolM
                                                                                                                        ((is_RV32F_or_RV64F
                                                                                                                            tt)
                                                                                                                         : M (bool))
                                                                                                                        (returnm ((andb
                                                                                                                                     (eq_vec
                                                                                                                                        (subrange_vec_dec
                                                                                                                                           v__348
                                                                                                                                           31
                                                                                                                                           25)
                                                                                                                                        ('b"0010100"
                                                                                                                                         : mword (31 - 25 + 1)))
                                                                                                                                     (andb
                                                                                                                                        (eq_vec
                                                                                                                                           (subrange_vec_dec
                                                                                                                                              v__348
                                                                                                                                              14
                                                                                                                                              12)
                                                                                                                                           ('b"000"
                                                                                                                                            : mword (14 - 12 + 1)))
                                                                                                                                        (eq_vec
                                                                                                                                           (subrange_vec_dec
                                                                                                                                              v__348
                                                                                                                                              6
                                                                                                                                              0)
                                                                                                                                           ('b"1010011"
                                                                                                                                            : mword (6 - 0 + 1)))))
                                                                                                                          : bool))) >>= fun w__142 : bool =>
                                                                                                                     (if
                                                                                                                        sumbool_of_bool
                                                                                                                        w__142
                                                                                                                      then
                                                                                                                        returnm true
                                                                                                                      else
                                                                                                                        (and_boolM
                                                                                                                           ((is_RV32F_or_RV64F
                                                                                                                               tt)
                                                                                                                            : M (bool))
                                                                                                                           (returnm ((andb
                                                                                                                                        (eq_vec
                                                                                                                                           (subrange_vec_dec
                                                                                                                                              v__348
                                                                                                                                              31
                                                                                                                                              25)
                                                                                                                                           ('b"0010100"
                                                                                                                                            : mword (31 - 25 + 1)))
                                                                                                                                        (andb
                                                                                                                                           (eq_vec
                                                                                                                                              (subrange_vec_dec
                                                                                                                                                 v__348
                                                                                                                                                 14
                                                                                                                                                 12)
                                                                                                                                              ('b"001"
                                                                                                                                               : mword (14 - 12 + 1)))
                                                                                                                                           (eq_vec
                                                                                                                                              (subrange_vec_dec
                                                                                                                                                 v__348
                                                                                                                                                 6
                                                                                                                                                 0)
                                                                                                                                              ('b"1010011"
                                                                                                                                               : mword (6 - 0 + 1)))))
                                                                                                                             : bool))) >>= fun w__144 : bool =>
                                                                                                                        (if
                                                                                                                           sumbool_of_bool
                                                                                                                           w__144
                                                                                                                         then
                                                                                                                           returnm true
                                                                                                                         else
                                                                                                                           (and_boolM
                                                                                                                              ((is_RV32F_or_RV64F
                                                                                                                                  tt)
                                                                                                                               : M (bool))
                                                                                                                              (returnm ((andb
                                                                                                                                           (eq_vec
                                                                                                                                              (subrange_vec_dec
                                                                                                                                                 v__348
                                                                                                                                                 31
                                                                                                                                                 25)
                                                                                                                                              ('b"1010000"
                                                                                                                                               : mword (31 - 25 + 1)))
                                                                                                                                           (andb
                                                                                                                                              (eq_vec
                                                                                                                                                 (subrange_vec_dec
                                                                                                                                                    v__348
                                                                                                                                                    14
                                                                                                                                                    12)
                                                                                                                                                 ('b"010"
                                                                                                                                                  : mword (14 - 12 + 1)))
                                                                                                                                              (eq_vec
                                                                                                                                                 (subrange_vec_dec
                                                                                                                                                    v__348
                                                                                                                                                    6
                                                                                                                                                    0)
                                                                                                                                                 ('b"1010011"
                                                                                                                                                  : mword (6 - 0 + 1)))))
                                                                                                                                : bool))) >>= fun w__146 : bool =>
                                                                                                                           (if
                                                                                                                              sumbool_of_bool
                                                                                                                              w__146
                                                                                                                            then
                                                                                                                              returnm true
                                                                                                                            else
                                                                                                                              (and_boolM
                                                                                                                                 ((is_RV32F_or_RV64F
                                                                                                                                     tt)
                                                                                                                                  : M (bool))
                                                                                                                                 (returnm ((andb
                                                                                                                                              (eq_vec
                                                                                                                                                 (subrange_vec_dec
                                                                                                                                                    v__348
                                                                                                                                                    31
                                                                                                                                                    25)
                                                                                                                                                 ('b"1010000"
                                                                                                                                                  : mword (31 - 25 + 1)))
                                                                                                                                              (andb
                                                                                                                                                 (eq_vec
                                                                                                                                                    (subrange_vec_dec
                                                                                                                                                       v__348
                                                                                                                                                       14
                                                                                                                                                       12)
                                                                                                                                                    ('b"001"
                                                                                                                                                     : mword (14 - 12 + 1)))
                                                                                                                                                 (eq_vec
                                                                                                                                                    (subrange_vec_dec
                                                                                                                                                       v__348
                                                                                                                                                       6
                                                                                                                                                       0)
                                                                                                                                                    ('b"1010011"
                                                                                                                                                     : mword (6 - 0 + 1)))))
                                                                                                                                   : bool))) >>= fun w__148 : bool =>
                                                                                                                              (if
                                                                                                                                 sumbool_of_bool
                                                                                                                                 w__148
                                                                                                                               then
                                                                                                                                 returnm true
                                                                                                                               else
                                                                                                                                 (and_boolM
                                                                                                                                    ((is_RV32F_or_RV64F
                                                                                                                                        tt)
                                                                                                                                     : M (bool))
                                                                                                                                    (returnm ((andb
                                                                                                                                                 (eq_vec
                                                                                                                                                    (subrange_vec_dec
                                                                                                                                                       v__348
                                                                                                                                                       31
                                                                                                                                                       25)
                                                                                                                                                    ('b"1010000"
                                                                                                                                                     : mword (31 - 25 + 1)))
                                                                                                                                                 (andb
                                                                                                                                                    (eq_vec
                                                                                                                                                       (subrange_vec_dec
                                                                                                                                                          v__348
                                                                                                                                                          14
                                                                                                                                                          12)
                                                                                                                                                       ('b"000"
                                                                                                                                                        : mword (14 - 12 + 1)))
                                                                                                                                                    (eq_vec
                                                                                                                                                       (subrange_vec_dec
                                                                                                                                                          v__348
                                                                                                                                                          6
                                                                                                                                                          0)
                                                                                                                                                       ('b"1010011"
                                                                                                                                                        : mword (6 - 0 + 1)))))
                                                                                                                                      : bool))) >>= fun w__150 : bool =>
                                                                                                                                 (if
                                                                                                                                    sumbool_of_bool
                                                                                                                                    w__150
                                                                                                                                  then
                                                                                                                                    returnm true
                                                                                                                                  else
                                                                                                                                    (and_boolM
                                                                                                                                       ((haveFExt
                                                                                                                                           tt)
                                                                                                                                        : M (bool))
                                                                                                                                       (returnm ((andb
                                                                                                                                                    (eq_vec
                                                                                                                                                       (subrange_vec_dec
                                                                                                                                                          v__348
                                                                                                                                                          31
                                                                                                                                                          20)
                                                                                                                                                       (Ox"E00"
                                                                                                                                                        : mword (31 - 20 + 1)))
                                                                                                                                                    (andb
                                                                                                                                                       (eq_vec
                                                                                                                                                          (subrange_vec_dec
                                                                                                                                                             v__348
                                                                                                                                                             14
                                                                                                                                                             12)
                                                                                                                                                          ('b"001"
                                                                                                                                                           : mword (14 - 12 + 1)))
                                                                                                                                                       (eq_vec
                                                                                                                                                          (subrange_vec_dec
                                                                                                                                                             v__348
                                                                                                                                                             6
                                                                                                                                                             0)
                                                                                                                                                          ('b"1010011"
                                                                                                                                                           : mword (6 - 0 + 1)))))
                                                                                                                                         : bool))) >>= fun w__152 : bool =>
                                                                                                                                    (if
                                                                                                                                       sumbool_of_bool
                                                                                                                                       w__152
                                                                                                                                     then
                                                                                                                                       returnm true
                                                                                                                                     else
                                                                                                                                       (and_boolM
                                                                                                                                          ((haveFExt
                                                                                                                                              tt)
                                                                                                                                           : M (bool))
                                                                                                                                          (returnm ((andb
                                                                                                                                                       (eq_vec
                                                                                                                                                          (subrange_vec_dec
                                                                                                                                                             v__348
                                                                                                                                                             31
                                                                                                                                                             20)
                                                                                                                                                          (Ox"E00"
                                                                                                                                                           : mword (31 - 20 + 1)))
                                                                                                                                                       (andb
                                                                                                                                                          (eq_vec
                                                                                                                                                             (subrange_vec_dec
                                                                                                                                                                v__348
                                                                                                                                                                14
                                                                                                                                                                12)
                                                                                                                                                             ('b"000"
                                                                                                                                                              : mword (14 - 12 + 1)))
                                                                                                                                                          (eq_vec
                                                                                                                                                             (subrange_vec_dec
                                                                                                                                                                v__348
                                                                                                                                                                6
                                                                                                                                                                0)
                                                                                                                                                             ('b"1010011"
                                                                                                                                                              : mword (6 - 0 + 1)))))
                                                                                                                                            : bool))) >>= fun w__154 : bool =>
                                                                                                                                       (if
                                                                                                                                          sumbool_of_bool
                                                                                                                                          w__154
                                                                                                                                        then
                                                                                                                                          returnm true
                                                                                                                                        else
                                                                                                                                          (and_boolM
                                                                                                                                             ((haveFExt
                                                                                                                                                 tt)
                                                                                                                                              : M (bool))
                                                                                                                                             (returnm ((andb
                                                                                                                                                          (eq_vec
                                                                                                                                                             (subrange_vec_dec
                                                                                                                                                                v__348
                                                                                                                                                                31
                                                                                                                                                                20)
                                                                                                                                                             (Ox"F00"
                                                                                                                                                              : mword (31 - 20 + 1)))
                                                                                                                                                          (andb
                                                                                                                                                             (eq_vec
                                                                                                                                                                (subrange_vec_dec
                                                                                                                                                                   v__348
                                                                                                                                                                   14
                                                                                                                                                                   12)
                                                                                                                                                                ('b"000"
                                                                                                                                                                 : mword (14 - 12 + 1)))
                                                                                                                                                             (eq_vec
                                                                                                                                                                (subrange_vec_dec
                                                                                                                                                                   v__348
                                                                                                                                                                   6
                                                                                                                                                                   0)
                                                                                                                                                                ('b"1010011"
                                                                                                                                                                 : mword (6 - 0 + 1)))))
                                                                                                                                               : bool))) >>= fun w__156 : bool =>
                                                                                                                                          returnm (if
                                                                                                                                                     sumbool_of_bool
                                                                                                                                                     w__156
                                                                                                                                                   then
                                                                                                                                                     true
                                                                                                                                                   else
                                                                                                                                                     true))
                                                                                                                                        : M (bool))
                                                                                                                                     : M (bool))
                                                                                                                                  : M (bool))
                                                                                                                               : M (bool))
                                                                                                                            : M (bool))
                                                                                                                         : M (bool))
                                                                                                                      : M (bool))
                                                                                                                   : M (bool))
                                                                                                                : M (bool))
                                                                                                             : M (bool))
                                                                                                          : M (bool))
                                                                                                       : M (bool))
                                                                                                    : M (bool))
                                                                                                 : M (bool))
                                                                                              : M (bool))
                                                                                           : M (bool))
                                                                                        : M (bool))
                                                                                     : M (bool))
                                                                                  : M (bool))
                                                                               : M (bool))
                                                                            : M (bool))
                                                                         : M (bool))
                                                                      : M (bool))
                                                                   : M (bool))
                                                                : M (bool))
                                                             : M (bool))
                                                          : M (bool))
                                                       : M (bool))
                                                    : M (bool))
                                                 : M (bool))
                                              : M (bool))
                                           : M (bool))
                                        : M (bool))
                                     : M (bool))
                                  : M (bool))
                               : M (bool))
                            : M (bool))
                         : M (bool))
                      : M (bool))
                   : M (bool))
                : M (bool))
             : M (bool))
          : M (bool))
       : M (bool))
    : M (bool).

Definition encdec_compressed_forwards (arg_ : ast) : M (mword 16) :=
   (match arg_ with
    | C_NOP tt =>
       returnm (concat_vec ('b"000"  : mword 3)
                  (concat_vec ('b"0"  : mword 1)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec ('b"00000"  : mword 5) ('b"01"  : mword 2)))))
    | C_ADDI4SPN (rd, v__680) =>
       (if let nz96 : bits 4 := subrange_vec_dec v__680 7 4 in
          let nz96 : bits 4 := subrange_vec_dec v__680 7 4 in
          let nz54 : bits 2 := subrange_vec_dec v__680 3 2 in
          let nz3 : bits 1 := subrange_vec_dec v__680 1 1 in
          let nz2 : bits 1 := subrange_vec_dec v__680 0 0 in
          neq_vec (concat_vec nz96 (concat_vec nz54 (concat_vec nz3 nz2)))
            (Ox"00"
             : mword (4 + (2 + (1 + 1)))) then
          let nz96 : bits 4 := subrange_vec_dec v__680 7 4 in
          let nz96 : bits 4 := subrange_vec_dec v__680 7 4 in
          let nz54 : bits 2 := subrange_vec_dec v__680 3 2 in
          let nz3 : bits 1 := subrange_vec_dec v__680 1 1 in
          let nz2 : bits 1 := subrange_vec_dec v__680 0 0 in
          returnm (concat_vec ('b"000"  : mword 3)
                     (concat_vec (nz54  : bits 2)
                        (concat_vec (nz96  : bits 4)
                           (concat_vec (nz2  : bits 1)
                              (concat_vec (nz3  : bits 1)
                                 (concat_vec (rd  : cregidx) ('b"00"  : mword 2)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_LW (v__681, rs1, rd) =>
       let ui6 : bits 1 := subrange_vec_dec v__681 4 4 in
       let ui6 : bits 1 := subrange_vec_dec v__681 4 4 in
       let ui53 : bits 3 := subrange_vec_dec v__681 3 1 in
       let ui2 : bits 1 := subrange_vec_dec v__681 0 0 in
       returnm (concat_vec ('b"010"  : mword 3)
                  (concat_vec (ui53  : bits 3)
                     (concat_vec (rs1  : cregidx)
                        (concat_vec (ui2  : bits 1)
                           (concat_vec (ui6  : bits 1)
                              (concat_vec (rd  : cregidx) ('b"00"  : mword 2)))))))
    | C_LD (v__682, rs1, rd) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          let ui76 : bits 2 := subrange_vec_dec v__682 4 3 in
          let ui76 : bits 2 := subrange_vec_dec v__682 4 3 in
          let ui53 : bits 3 := subrange_vec_dec v__682 2 0 in
          returnm (concat_vec ('b"011"  : mword 3)
                     (concat_vec (ui53  : bits 3)
                        (concat_vec (rs1  : cregidx)
                           (concat_vec (ui76  : bits 2)
                              (concat_vec (rd  : cregidx) ('b"00"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_SW (v__683, rs1, rs2) =>
       let ui6 : bits 1 := subrange_vec_dec v__683 4 4 in
       let ui6 : bits 1 := subrange_vec_dec v__683 4 4 in
       let ui53 : bits 3 := subrange_vec_dec v__683 3 1 in
       let ui2 : bits 1 := subrange_vec_dec v__683 0 0 in
       returnm (concat_vec ('b"110"  : mword 3)
                  (concat_vec (ui53  : bits 3)
                     (concat_vec (rs1  : cregidx)
                        (concat_vec (ui2  : bits 1)
                           (concat_vec (ui6  : bits 1)
                              (concat_vec (rs2  : cregidx) ('b"00"  : mword 2)))))))
    | C_SD (v__684, rs1, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          let ui76 : bits 2 := subrange_vec_dec v__684 4 3 in
          let ui76 : bits 2 := subrange_vec_dec v__684 4 3 in
          let ui53 : bits 3 := subrange_vec_dec v__684 2 0 in
          returnm (concat_vec ('b"111"  : mword 3)
                     (concat_vec (ui53  : bits 3)
                        (concat_vec (rs1  : bits 3)
                           (concat_vec (ui76  : bits 2)
                              (concat_vec (rs2  : bits 3) ('b"00"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_ADDI (v__685, rsd) =>
       (if let nzi5 : bits 1 := subrange_vec_dec v__685 5 5 in
          let nzi5 : bits 1 := subrange_vec_dec v__685 5 5 in
          let nzi40 : bits 5 := subrange_vec_dec v__685 4 0 in
          andb (neq_vec (concat_vec nzi5 nzi40) ('b"000000"  : mword (1 + 5))) (neq_vec rsd zreg)
        then
          let nzi5 : bits 1 := subrange_vec_dec v__685 5 5 in
          let nzi5 : bits 1 := subrange_vec_dec v__685 5 5 in
          let nzi40 : bits 5 := subrange_vec_dec v__685 4 0 in
          returnm (concat_vec ('b"000"  : mword 3)
                     (concat_vec (nzi5  : bits 1)
                        (concat_vec (rsd  : regidx)
                           (concat_vec (nzi40  : bits 5) ('b"01"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_JAL v__686 =>
       (if sumbool_of_bool (Z.eqb 32 32) then
          let i11 : bits 1 := subrange_vec_dec v__686 10 10 in
          let i98 : bits 2 := subrange_vec_dec v__686 8 7 in
          let i7 : bits 1 := subrange_vec_dec v__686 6 6 in
          let i6 : bits 1 := subrange_vec_dec v__686 5 5 in
          let i5 : bits 1 := subrange_vec_dec v__686 4 4 in
          let i4 : bits 1 := subrange_vec_dec v__686 3 3 in
          let i31 : bits 3 := subrange_vec_dec v__686 2 0 in
          let i11 : bits 1 := subrange_vec_dec v__686 10 10 in
          let i10 : bits 1 := subrange_vec_dec v__686 9 9 in
          returnm (concat_vec ('b"001"  : mword 3)
                     (concat_vec (i11  : bits 1)
                        (concat_vec (i4  : bits 1)
                           (concat_vec (i98  : bits 2)
                              (concat_vec (i10  : bits 1)
                                 (concat_vec (i6  : bits 1)
                                    (concat_vec (i7  : bits 1)
                                       (concat_vec (i31  : bits 3)
                                          (concat_vec (i5  : bits 1) ('b"01"  : mword 2))))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_ADDIW (v__687, rsd) =>
       (if sumbool_of_bool (andb (neq_vec rsd zreg) (Z.eqb 32 64)) then
          let imm5 : bits 1 := subrange_vec_dec v__687 5 5 in
          let imm5 : bits 1 := subrange_vec_dec v__687 5 5 in
          let imm40 : bits 5 := subrange_vec_dec v__687 4 0 in
          returnm (concat_vec ('b"001"  : mword 3)
                     (concat_vec (imm5  : bits 1)
                        (concat_vec (rsd  : regidx)
                           (concat_vec (imm40  : bits 5) ('b"01"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_LI (v__688, rd) =>
       (if neq_vec rd zreg then
          let imm5 : bits 1 := subrange_vec_dec v__688 5 5 in
          let imm5 : bits 1 := subrange_vec_dec v__688 5 5 in
          let imm40 : bits 5 := subrange_vec_dec v__688 4 0 in
          returnm (concat_vec ('b"010"  : mword 3)
                     (concat_vec (imm5  : bits 1)
                        (concat_vec (rd  : regidx)
                           (concat_vec (imm40  : bits 5) ('b"01"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_ADDI16SP v__689 =>
       (if let nzi9 : bits 1 := subrange_vec_dec v__689 5 5 in
          let nzi9 : bits 1 := subrange_vec_dec v__689 5 5 in
          let nzi87 : bits 2 := subrange_vec_dec v__689 4 3 in
          let nzi6 : bits 1 := subrange_vec_dec v__689 2 2 in
          let nzi5 : bits 1 := subrange_vec_dec v__689 1 1 in
          let nzi4 : bits 1 := subrange_vec_dec v__689 0 0 in
          neq_vec (concat_vec nzi9 (concat_vec nzi87 (concat_vec nzi6 (concat_vec nzi5 nzi4))))
            ('b"000000"
             : mword (1 + (2 + (1 + (1 + 1))))) then
          let nzi9 : bits 1 := subrange_vec_dec v__689 5 5 in
          let nzi9 : bits 1 := subrange_vec_dec v__689 5 5 in
          let nzi87 : bits 2 := subrange_vec_dec v__689 4 3 in
          let nzi6 : bits 1 := subrange_vec_dec v__689 2 2 in
          let nzi5 : bits 1 := subrange_vec_dec v__689 1 1 in
          let nzi4 : bits 1 := subrange_vec_dec v__689 0 0 in
          returnm (concat_vec ('b"011"  : mword 3)
                     (concat_vec (nzi9  : bits 1)
                        (concat_vec ('b"00010"  : mword 5)
                           (concat_vec (nzi4  : bits 1)
                              (concat_vec (nzi6  : bits 1)
                                 (concat_vec (nzi87  : bits 2)
                                    (concat_vec (nzi5  : bits 1) ('b"01"  : mword 2))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_LUI (v__690, rd) =>
       (if let imm17 : bits 1 := subrange_vec_dec v__690 5 5 in
          let imm17 : bits 1 := subrange_vec_dec v__690 5 5 in
          let imm1612 : bits 5 := subrange_vec_dec v__690 4 0 in
          andb (neq_vec rd zreg)
            (andb (neq_vec rd sp) (neq_vec (concat_vec imm17 imm1612) ('b"000000"  : mword (1 + 5))))
        then
          let imm17 : bits 1 := subrange_vec_dec v__690 5 5 in
          let imm17 : bits 1 := subrange_vec_dec v__690 5 5 in
          let imm1612 : bits 5 := subrange_vec_dec v__690 4 0 in
          returnm (concat_vec ('b"011"  : mword 3)
                     (concat_vec (imm17  : bits 1)
                        (concat_vec (rd  : regidx)
                           (concat_vec (imm1612  : bits 5) ('b"01"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_SRLI (v__691, rsd) =>
       (if let nzui5 : bits 1 := subrange_vec_dec v__691 5 5 in
          let nzui5 : bits 1 := subrange_vec_dec v__691 5 5 in
          let nzui40 : bits 5 := subrange_vec_dec v__691 4 0 in
          neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)) then
          let nzui5 : bits 1 := subrange_vec_dec v__691 5 5 in
          let nzui5 : bits 1 := subrange_vec_dec v__691 5 5 in
          let nzui40 : bits 5 := subrange_vec_dec v__691 4 0 in
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec (nzui5  : bits 1)
                        (concat_vec ('b"00"  : mword 2)
                           (concat_vec (rsd  : cregidx)
                              (concat_vec (nzui40  : bits 5) ('b"01"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_SRAI (v__692, rsd) =>
       (if let nzui5 : bits 1 := subrange_vec_dec v__692 5 5 in
          let nzui5 : bits 1 := subrange_vec_dec v__692 5 5 in
          let nzui40 : bits 5 := subrange_vec_dec v__692 4 0 in
          neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)) then
          let nzui5 : bits 1 := subrange_vec_dec v__692 5 5 in
          let nzui5 : bits 1 := subrange_vec_dec v__692 5 5 in
          let nzui40 : bits 5 := subrange_vec_dec v__692 4 0 in
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec (nzui5  : bits 1)
                        (concat_vec ('b"01"  : mword 2)
                           (concat_vec (rsd  : cregidx)
                              (concat_vec (nzui40  : bits 5) ('b"01"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_ANDI (v__693, rsd) =>
       let i5 : bits 1 := subrange_vec_dec v__693 5 5 in
       let i5 : bits 1 := subrange_vec_dec v__693 5 5 in
       let i40 : bits 5 := subrange_vec_dec v__693 4 0 in
       returnm (concat_vec ('b"100"  : mword 3)
                  (concat_vec (i5  : bits 1)
                     (concat_vec ('b"10"  : mword 2)
                        (concat_vec (rsd  : cregidx)
                           (concat_vec (i40  : bits 5) ('b"01"  : mword 2))))))
    | C_SUB (rsd, rs2) =>
       returnm (concat_vec ('b"100"  : mword 3)
                  (concat_vec ('b"0"  : mword 1)
                     (concat_vec ('b"11"  : mword 2)
                        (concat_vec (rsd  : cregidx)
                           (concat_vec ('b"00"  : mword 2)
                              (concat_vec (rs2  : cregidx) ('b"01"  : mword 2)))))))
    | C_XOR (rsd, rs2) =>
       returnm (concat_vec ('b"100"  : mword 3)
                  (concat_vec ('b"0"  : mword 1)
                     (concat_vec ('b"11"  : mword 2)
                        (concat_vec (rsd  : cregidx)
                           (concat_vec ('b"01"  : mword 2)
                              (concat_vec (rs2  : cregidx) ('b"01"  : mword 2)))))))
    | C_OR (rsd, rs2) =>
       returnm (concat_vec ('b"100"  : mword 3)
                  (concat_vec ('b"0"  : mword 1)
                     (concat_vec ('b"11"  : mword 2)
                        (concat_vec (rsd  : cregidx)
                           (concat_vec ('b"10"  : mword 2)
                              (concat_vec (rs2  : cregidx) ('b"01"  : mword 2)))))))
    | C_AND (rsd, rs2) =>
       returnm (concat_vec ('b"100"  : mword 3)
                  (concat_vec ('b"0"  : mword 1)
                     (concat_vec ('b"11"  : mword 2)
                        (concat_vec (rsd  : cregidx)
                           (concat_vec ('b"11"  : mword 2)
                              (concat_vec (rs2  : cregidx) ('b"01"  : mword 2)))))))
    | C_SUBW (rsd, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec ('b"1"  : mword 1)
                        (concat_vec ('b"11"  : mword 2)
                           (concat_vec (rsd  : cregidx)
                              (concat_vec ('b"00"  : mword 2)
                                 (concat_vec (rs2  : cregidx) ('b"01"  : mword 2)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_ADDW (rsd, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec ('b"1"  : mword 1)
                        (concat_vec ('b"11"  : mword 2)
                           (concat_vec (rsd  : cregidx)
                              (concat_vec ('b"01"  : mword 2)
                                 (concat_vec (rs2  : cregidx) ('b"01"  : mword 2)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_J v__694 =>
       let i11 : bits 1 := subrange_vec_dec v__694 10 10 in
       let i98 : bits 2 := subrange_vec_dec v__694 8 7 in
       let i7 : bits 1 := subrange_vec_dec v__694 6 6 in
       let i6 : bits 1 := subrange_vec_dec v__694 5 5 in
       let i5 : bits 1 := subrange_vec_dec v__694 4 4 in
       let i4 : bits 1 := subrange_vec_dec v__694 3 3 in
       let i31 : bits 3 := subrange_vec_dec v__694 2 0 in
       let i11 : bits 1 := subrange_vec_dec v__694 10 10 in
       let i10 : bits 1 := subrange_vec_dec v__694 9 9 in
       returnm (concat_vec ('b"101"  : mword 3)
                  (concat_vec (i11  : bits 1)
                     (concat_vec (i4  : bits 1)
                        (concat_vec (i98  : bits 2)
                           (concat_vec (i10  : bits 1)
                              (concat_vec (i6  : bits 1)
                                 (concat_vec (i7  : bits 1)
                                    (concat_vec (i31  : bits 3)
                                       (concat_vec (i5  : bits 1) ('b"01"  : mword 2))))))))))
    | C_BEQZ (v__695, rs) =>
       let i8 : bits 1 := subrange_vec_dec v__695 7 7 in
       let i8 : bits 1 := subrange_vec_dec v__695 7 7 in
       let i76 : bits 2 := subrange_vec_dec v__695 6 5 in
       let i5 : bits 1 := subrange_vec_dec v__695 4 4 in
       let i43 : bits 2 := subrange_vec_dec v__695 3 2 in
       let i21 : bits 2 := subrange_vec_dec v__695 1 0 in
       returnm (concat_vec ('b"110"  : mword 3)
                  (concat_vec (i8  : bits 1)
                     (concat_vec (i43  : bits 2)
                        (concat_vec (rs  : cregidx)
                           (concat_vec (i76  : bits 2)
                              (concat_vec (i21  : bits 2)
                                 (concat_vec (i5  : bits 1) ('b"01"  : mword 2))))))))
    | C_BNEZ (v__696, rs) =>
       let i8 : bits 1 := subrange_vec_dec v__696 7 7 in
       let i8 : bits 1 := subrange_vec_dec v__696 7 7 in
       let i76 : bits 2 := subrange_vec_dec v__696 6 5 in
       let i5 : bits 1 := subrange_vec_dec v__696 4 4 in
       let i43 : bits 2 := subrange_vec_dec v__696 3 2 in
       let i21 : bits 2 := subrange_vec_dec v__696 1 0 in
       returnm (concat_vec ('b"111"  : mword 3)
                  (concat_vec (i8  : bits 1)
                     (concat_vec (i43  : bits 2)
                        (concat_vec (rs  : cregidx)
                           (concat_vec (i76  : bits 2)
                              (concat_vec (i21  : bits 2)
                                 (concat_vec (i5  : bits 1) ('b"01"  : mword 2))))))))
    | C_SLLI (v__697, rsd) =>
       (if sumbool_of_bool
          (let nzui5 : bits 1 := subrange_vec_dec v__697 5 5 in
          let nzui5 : bits 1 := subrange_vec_dec v__697 5 5 in
          let nzui40 : bits 5 := subrange_vec_dec v__697 4 0 in
          andb (neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
            (andb (neq_vec rsd zreg) (orb (Z.eqb 32 64) (eq_vec nzui5 ('b"0"  : mword 1))))) then
          let nzui5 : bits 1 := subrange_vec_dec v__697 5 5 in
          let nzui5 : bits 1 := subrange_vec_dec v__697 5 5 in
          let nzui40 : bits 5 := subrange_vec_dec v__697 4 0 in
          returnm (concat_vec ('b"000"  : mword 3)
                     (concat_vec (nzui5  : bits 1)
                        (concat_vec (rsd  : regidx)
                           (concat_vec (nzui40  : bits 5) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_LWSP (v__698, rd) =>
       (if neq_vec rd zreg then
          let ui76 : bits 2 := subrange_vec_dec v__698 5 4 in
          let ui76 : bits 2 := subrange_vec_dec v__698 5 4 in
          let ui5 : bits 1 := subrange_vec_dec v__698 3 3 in
          let ui42 : bits 3 := subrange_vec_dec v__698 2 0 in
          returnm (concat_vec ('b"010"  : mword 3)
                     (concat_vec (ui5  : bits 1)
                        (concat_vec (rd  : regidx)
                           (concat_vec (ui42  : bits 3)
                              (concat_vec (ui76  : bits 2) ('b"10"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_LDSP (v__699, rd) =>
       (if sumbool_of_bool (andb (neq_vec rd zreg) (Z.eqb 32 64)) then
          let ui86 : bits 3 := subrange_vec_dec v__699 5 3 in
          let ui86 : bits 3 := subrange_vec_dec v__699 5 3 in
          let ui5 : bits 1 := subrange_vec_dec v__699 2 2 in
          let ui43 : bits 2 := subrange_vec_dec v__699 1 0 in
          returnm (concat_vec ('b"011"  : mword 3)
                     (concat_vec (ui5  : bits 1)
                        (concat_vec (rd  : regidx)
                           (concat_vec (ui43  : bits 2)
                              (concat_vec (ui86  : bits 3) ('b"10"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_SWSP (v__700, rs2) =>
       let ui76 : bits 2 := subrange_vec_dec v__700 5 4 in
       let ui76 : bits 2 := subrange_vec_dec v__700 5 4 in
       let ui52 : bits 4 := subrange_vec_dec v__700 3 0 in
       returnm (concat_vec ('b"110"  : mword 3)
                  (concat_vec (ui52  : bits 4)
                     (concat_vec (ui76  : bits 2) (concat_vec (rs2  : regidx) ('b"10"  : mword 2)))))
    | C_SDSP (v__701, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          let ui86 : bits 3 := subrange_vec_dec v__701 5 3 in
          let ui86 : bits 3 := subrange_vec_dec v__701 5 3 in
          let ui53 : bits 3 := subrange_vec_dec v__701 2 0 in
          returnm (concat_vec ('b"111"  : mword 3)
                     (concat_vec (ui53  : bits 3)
                        (concat_vec (ui86  : bits 3)
                           (concat_vec (rs2  : regidx) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_JR rs1 =>
       (if neq_vec rs1 zreg then
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec ('b"0"  : mword 1)
                        (concat_vec (rs1  : regidx)
                           (concat_vec ('b"00000"  : mword 5) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_JALR rs1 =>
       (if neq_vec rs1 zreg then
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec ('b"1"  : mword 1)
                        (concat_vec (rs1  : regidx)
                           (concat_vec ('b"00000"  : mword 5) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_MV (rd, rs2) =>
       (if andb (neq_vec rd zreg) (neq_vec rs2 zreg) then
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec ('b"0"  : mword 1)
                        (concat_vec (rd  : regidx) (concat_vec (rs2  : regidx) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_EBREAK tt =>
       returnm (concat_vec ('b"100"  : mword 3)
                  (concat_vec ('b"1"  : mword 1)
                     (concat_vec ('b"00000"  : mword 5)
                        (concat_vec ('b"00000"  : mword 5) ('b"10"  : mword 2)))))
    | C_ADD (rsd, rs2) =>
       (if andb (neq_vec rsd zreg) (neq_vec rs2 zreg) then
          returnm (concat_vec ('b"100"  : mword 3)
                     (concat_vec ('b"1"  : mword 1)
                        (concat_vec (rsd  : regidx) (concat_vec (rs2  : regidx) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_FLWSP (v__702, rd) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__45 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       (if sumbool_of_bool w__45 then
          let ui76 : bits 2 := subrange_vec_dec v__702 5 4 in
          let ui76 : bits 2 := subrange_vec_dec v__702 5 4 in
          let ui5 : bits 1 := subrange_vec_dec v__702 3 3 in
          let ui42 : bits 3 := subrange_vec_dec v__702 2 0 in
          returnm (concat_vec ('b"011"  : mword 3)
                     (concat_vec (ui5  : bits 1)
                        (concat_vec (rd  : regidx)
                           (concat_vec (ui42  : bits 3)
                              (concat_vec (ui76  : bits 2) ('b"10"  : mword 2))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_FSWSP (v__703, rs2) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__51 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       (if sumbool_of_bool w__51 then
          let ui76 : bits 2 := subrange_vec_dec v__703 5 4 in
          let ui76 : bits 2 := subrange_vec_dec v__703 5 4 in
          let ui52 : bits 4 := subrange_vec_dec v__703 3 0 in
          returnm (concat_vec ('b"111"  : mword 3)
                     (concat_vec (ui52  : bits 4)
                        (concat_vec (ui76  : bits 2)
                           (concat_vec (rs2  : regidx) ('b"10"  : mword 2)))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_FLW (v__704, rs1, rd) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__57 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       (if sumbool_of_bool w__57 then
          let ui6 : bits 1 := subrange_vec_dec v__704 4 4 in
          let ui6 : bits 1 := subrange_vec_dec v__704 4 4 in
          let ui53 : bits 3 := subrange_vec_dec v__704 3 1 in
          let ui2 : bits 1 := subrange_vec_dec v__704 0 0 in
          returnm (concat_vec ('b"011"  : mword 3)
                     (concat_vec (ui53  : bits 3)
                        (concat_vec (rs1  : cregidx)
                           (concat_vec (ui2  : bits 1)
                              (concat_vec (ui6  : bits 1)
                                 (concat_vec (rd  : cregidx) ('b"00"  : mword 2)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_FSW (v__705, rs1, rs2) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__63 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       (if sumbool_of_bool w__63 then
          let ui6 : bits 1 := subrange_vec_dec v__705 4 4 in
          let ui6 : bits 1 := subrange_vec_dec v__705 4 4 in
          let ui53 : bits 3 := subrange_vec_dec v__705 3 1 in
          let ui2 : bits 1 := subrange_vec_dec v__705 0 0 in
          returnm (concat_vec ('b"111"  : mword 3)
                     (concat_vec (ui53  : bits 3)
                        (concat_vec (rs1  : cregidx)
                           (concat_vec (ui2  : bits 1)
                              (concat_vec (ui6  : bits 1)
                                 (concat_vec (rs2  : cregidx) ('b"00"  : mword 2)))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (mword 16)
    | C_ILLEGAL s => returnm s
    | _ => assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt
    end)
    : M (mword 16).

Definition encdec_compressed_backwards (arg_ : mword 16) : M (ast) :=
   let v__706 := arg_ in
   (if eq_vec v__706 (Ox"0001"  : mword 16) then returnm (C_NOP tt)
    else if andb
              (let nz96 : bits 4 := subrange_vec_dec v__706 10 7 in
              let nz54 : bits 2 := subrange_vec_dec v__706 12 11 in
              let nz3 : bits 1 := subrange_vec_dec v__706 5 5 in
              let nz2 : bits 1 := subrange_vec_dec v__706 6 6 in
              neq_vec (concat_vec nz96 (concat_vec nz54 (concat_vec nz3 nz2)))
                (Ox"00"
                 : mword (4 + (2 + (1 + 1)))))
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"000"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1)))) then
      let rd : cregidx := subrange_vec_dec v__706 4 2 in
      let nz96 : bits 4 := subrange_vec_dec v__706 10 7 in
      let nz54 : bits 2 := subrange_vec_dec v__706 12 11 in
      let nz3 : bits 1 := subrange_vec_dec v__706 5 5 in
      let nz2 : bits 1 := subrange_vec_dec v__706 6 6 in
      returnm (C_ADDI4SPN
                 (rd, concat_vec (nz96  : bits 4)
                        (concat_vec (nz54  : bits 2) (concat_vec (nz3  : bits 1) (nz2  : bits 1)))))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"010"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1))) then
      let ui6 : bits 1 := subrange_vec_dec v__706 5 5 in
      let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
      let ui2 : bits 1 := subrange_vec_dec v__706 6 6 in
      let rs1 : cregidx := subrange_vec_dec v__706 9 7 in
      let rd : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_LW
                 (concat_vec (ui6  : bits 1) (concat_vec (ui53  : bits 3) (ui2  : bits 1)), rs1, rd))
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"011"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1))))) then
      let ui76 : bits 2 := subrange_vec_dec v__706 6 5 in
      let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
      let rs1 : cregidx := subrange_vec_dec v__706 9 7 in
      let rd : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_LD (concat_vec (ui76  : bits 2) (ui53  : bits 3), rs1, rd))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"110"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1))) then
      let ui6 : bits 1 := subrange_vec_dec v__706 5 5 in
      let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
      let ui2 : bits 1 := subrange_vec_dec v__706 6 6 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      let rs1 : cregidx := subrange_vec_dec v__706 9 7 in
      returnm (C_SW
                 (concat_vec (ui6  : bits 1) (concat_vec (ui53  : bits 3) (ui2  : bits 1)), rs1, rs2))
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"111"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1))))) then
      let ui76 : bits 2 := subrange_vec_dec v__706 6 5 in
      let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
      let rs2 : bits 3 := subrange_vec_dec v__706 4 2 in
      let rs1 : bits 3 := subrange_vec_dec v__706 9 7 in
      returnm (C_SD (concat_vec (ui76  : bits 2) (ui53  : bits 3), rs1, rs2))
    else if andb
              (let rsd : regidx := subrange_vec_dec v__706 11 7 in
              let nzi5 : bits 1 := subrange_vec_dec v__706 12 12 in
              let nzi40 : bits 5 := subrange_vec_dec v__706 6 2 in
              andb (neq_vec (concat_vec nzi5 nzi40) ('b"000000"  : mword (1 + 5)))
                (neq_vec rsd zreg))
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"000"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rsd : regidx := subrange_vec_dec v__706 11 7 in
      let nzi5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let nzi40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_ADDI (concat_vec (nzi5  : bits 1) (nzi40  : bits 5), rsd))
    else if sumbool_of_bool
      (andb (Z.eqb 32 32)
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"001"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      let i98 : bits 2 := subrange_vec_dec v__706 10 9 in
      let i7 : bits 1 := subrange_vec_dec v__706 6 6 in
      let i6 : bits 1 := subrange_vec_dec v__706 7 7 in
      let i5 : bits 1 := subrange_vec_dec v__706 2 2 in
      let i4 : bits 1 := subrange_vec_dec v__706 11 11 in
      let i31 : bits 3 := subrange_vec_dec v__706 5 3 in
      let i11 : bits 1 := subrange_vec_dec v__706 12 12 in
      let i10 : bits 1 := subrange_vec_dec v__706 8 8 in
      returnm (C_JAL
                 (concat_vec (i11  : bits 1)
                    (concat_vec (i10  : bits 1)
                       (concat_vec (i98  : bits 2)
                          (concat_vec (i7  : bits 1)
                             (concat_vec (i6  : bits 1)
                                (concat_vec (i5  : bits 1)
                                   (concat_vec (i4  : bits 1) (i31  : bits 3)))))))))
    else if sumbool_of_bool
      (andb
         (let rsd : regidx := subrange_vec_dec v__706 11 7 in
         andb (neq_vec rsd zreg) (Z.eqb 32 64))
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"001"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      let rsd : regidx := subrange_vec_dec v__706 11 7 in
      let imm5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let imm40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_ADDIW (concat_vec (imm5  : bits 1) (imm40  : bits 5), rsd))
    else if andb
              (let rd : regidx := subrange_vec_dec v__706 11 7 in
              neq_vec rd zreg)
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"010"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rd : regidx := subrange_vec_dec v__706 11 7 in
      let imm5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let imm40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_LI (concat_vec (imm5  : bits 1) (imm40  : bits 5), rd))
    else if andb
              (let nzi9 : bits 1 := subrange_vec_dec v__706 12 12 in
              let nzi87 : bits 2 := subrange_vec_dec v__706 4 3 in
              let nzi6 : bits 1 := subrange_vec_dec v__706 5 5 in
              let nzi5 : bits 1 := subrange_vec_dec v__706 2 2 in
              let nzi4 : bits 1 := subrange_vec_dec v__706 6 6 in
              neq_vec (concat_vec nzi9 (concat_vec nzi87 (concat_vec nzi6 (concat_vec nzi5 nzi4))))
                ('b"000000"
                 : mword (1 + (2 + (1 + (1 + 1))))))
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"011"  : mword (15 - 13 + 1)))
                 (andb (eq_vec (subrange_vec_dec v__706 11 7) ('b"00010"  : mword (11 - 7 + 1)))
                    (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      let nzi9 : bits 1 := subrange_vec_dec v__706 12 12 in
      let nzi87 : bits 2 := subrange_vec_dec v__706 4 3 in
      let nzi6 : bits 1 := subrange_vec_dec v__706 5 5 in
      let nzi5 : bits 1 := subrange_vec_dec v__706 2 2 in
      let nzi4 : bits 1 := subrange_vec_dec v__706 6 6 in
      returnm (C_ADDI16SP
                 (concat_vec (nzi9  : bits 1)
                    (concat_vec (nzi87  : bits 2)
                       (concat_vec (nzi6  : bits 1) (concat_vec (nzi5  : bits 1) (nzi4  : bits 1))))))
    else if andb
              (let rd : regidx := subrange_vec_dec v__706 11 7 in
              let imm17 : bits 1 := subrange_vec_dec v__706 12 12 in
              let imm1612 : bits 5 := subrange_vec_dec v__706 6 2 in
              andb (neq_vec rd zreg)
                (andb (neq_vec rd sp)
                   (neq_vec (concat_vec imm17 imm1612) ('b"000000"  : mword (1 + 5)))))
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"011"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rd : regidx := subrange_vec_dec v__706 11 7 in
      let imm17 : bits 1 := subrange_vec_dec v__706 12 12 in
      let imm1612 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_LUI (concat_vec (imm17  : bits 1) (imm1612  : bits 5), rd))
    else if andb
              (let nzui5 : bits 1 := subrange_vec_dec v__706 12 12 in
              let nzui40 : bits 5 := subrange_vec_dec v__706 6 2 in
              neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"100"  : mword (15 - 13 + 1)))
                 (andb (eq_vec (subrange_vec_dec v__706 11 10) ('b"00"  : mword (11 - 10 + 1)))
                    (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let nzui5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let nzui40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_SRLI (concat_vec (nzui5  : bits 1) (nzui40  : bits 5), rsd))
    else if andb
              (let nzui5 : bits 1 := subrange_vec_dec v__706 12 12 in
              let nzui40 : bits 5 := subrange_vec_dec v__706 6 2 in
              neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"100"  : mword (15 - 13 + 1)))
                 (andb (eq_vec (subrange_vec_dec v__706 11 10) ('b"01"  : mword (11 - 10 + 1)))
                    (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let nzui5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let nzui40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_SRAI (concat_vec (nzui5  : bits 1) (nzui40  : bits 5), rsd))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"100"  : mword (15 - 13 + 1)))
              (andb (eq_vec (subrange_vec_dec v__706 11 10) ('b"10"  : mword (11 - 10 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let i5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let i40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_ANDI (concat_vec (i5  : bits 1) (i40  : bits 5), rsd))
    else if andb (eq_vec (subrange_vec_dec v__706 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__706 6 5) ('b"00"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_SUB (rsd, rs2))
    else if andb (eq_vec (subrange_vec_dec v__706 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__706 6 5) ('b"01"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_XOR (rsd, rs2))
    else if andb (eq_vec (subrange_vec_dec v__706 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__706 6 5) ('b"10"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_OR (rsd, rs2))
    else if andb (eq_vec (subrange_vec_dec v__706 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__706 6 5) ('b"11"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_AND (rsd, rs2))
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__706 15 10) ('b"100111"  : mword (15 - 10 + 1)))
            (andb (eq_vec (subrange_vec_dec v__706 6 5) ('b"00"  : mword (6 - 5 + 1)))
               (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_SUBW (rsd, rs2))
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__706 15 10) ('b"100111"  : mword (15 - 10 + 1)))
            (andb (eq_vec (subrange_vec_dec v__706 6 5) ('b"01"  : mword (6 - 5 + 1)))
               (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1)))))) then
      let rsd : cregidx := subrange_vec_dec v__706 9 7 in
      let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
      returnm (C_ADDW (rsd, rs2))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"101"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))) then
      let i98 : bits 2 := subrange_vec_dec v__706 10 9 in
      let i7 : bits 1 := subrange_vec_dec v__706 6 6 in
      let i6 : bits 1 := subrange_vec_dec v__706 7 7 in
      let i5 : bits 1 := subrange_vec_dec v__706 2 2 in
      let i4 : bits 1 := subrange_vec_dec v__706 11 11 in
      let i31 : bits 3 := subrange_vec_dec v__706 5 3 in
      let i11 : bits 1 := subrange_vec_dec v__706 12 12 in
      let i10 : bits 1 := subrange_vec_dec v__706 8 8 in
      returnm (C_J
                 (concat_vec (i11  : bits 1)
                    (concat_vec (i10  : bits 1)
                       (concat_vec (i98  : bits 2)
                          (concat_vec (i7  : bits 1)
                             (concat_vec (i6  : bits 1)
                                (concat_vec (i5  : bits 1)
                                   (concat_vec (i4  : bits 1) (i31  : bits 3)))))))))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"110"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))) then
      let rs : cregidx := subrange_vec_dec v__706 9 7 in
      let i8 : bits 1 := subrange_vec_dec v__706 12 12 in
      let i76 : bits 2 := subrange_vec_dec v__706 6 5 in
      let i5 : bits 1 := subrange_vec_dec v__706 2 2 in
      let i43 : bits 2 := subrange_vec_dec v__706 11 10 in
      let i21 : bits 2 := subrange_vec_dec v__706 4 3 in
      returnm (C_BEQZ
                 (concat_vec (i8  : bits 1)
                    (concat_vec (i76  : bits 2)
                       (concat_vec (i5  : bits 1) (concat_vec (i43  : bits 2) (i21  : bits 2)))), rs))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"111"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__706 1 0) ('b"01"  : mword (1 - 0 + 1))) then
      let rs : cregidx := subrange_vec_dec v__706 9 7 in
      let i8 : bits 1 := subrange_vec_dec v__706 12 12 in
      let i76 : bits 2 := subrange_vec_dec v__706 6 5 in
      let i5 : bits 1 := subrange_vec_dec v__706 2 2 in
      let i43 : bits 2 := subrange_vec_dec v__706 11 10 in
      let i21 : bits 2 := subrange_vec_dec v__706 4 3 in
      returnm (C_BNEZ
                 (concat_vec (i8  : bits 1)
                    (concat_vec (i76  : bits 2)
                       (concat_vec (i5  : bits 1) (concat_vec (i43  : bits 2) (i21  : bits 2)))), rs))
    else if sumbool_of_bool
      (andb
         (let rsd : regidx := subrange_vec_dec v__706 11 7 in
         let nzui5 : bits 1 := subrange_vec_dec v__706 12 12 in
         let nzui40 : bits 5 := subrange_vec_dec v__706 6 2 in
         andb (neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
           (andb (neq_vec rsd zreg) (orb (Z.eqb 32 64) (eq_vec nzui5 ('b"0"  : mword 1)))))
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"000"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1))))) then
      let rsd : regidx := subrange_vec_dec v__706 11 7 in
      let nzui5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let nzui40 : bits 5 := subrange_vec_dec v__706 6 2 in
      returnm (C_SLLI (concat_vec (nzui5  : bits 1) (nzui40  : bits 5), rsd))
    else if andb
              (let rd : regidx := subrange_vec_dec v__706 11 7 in
              neq_vec rd zreg)
              (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"010"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1)))) then
      let ui76 : bits 2 := subrange_vec_dec v__706 3 2 in
      let ui5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let ui42 : bits 3 := subrange_vec_dec v__706 6 4 in
      let rd : regidx := subrange_vec_dec v__706 11 7 in
      returnm (C_LWSP
                 (concat_vec (ui76  : bits 2) (concat_vec (ui5  : bits 1) (ui42  : bits 3)), rd))
    else if sumbool_of_bool
      (andb
         (let rd : regidx := subrange_vec_dec v__706 11 7 in
         andb (neq_vec rd zreg) (Z.eqb 32 64))
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"011"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1))))) then
      let ui86 : bits 3 := subrange_vec_dec v__706 4 2 in
      let ui5 : bits 1 := subrange_vec_dec v__706 12 12 in
      let ui43 : bits 2 := subrange_vec_dec v__706 6 5 in
      let rd : regidx := subrange_vec_dec v__706 11 7 in
      returnm (C_LDSP
                 (concat_vec (ui86  : bits 3) (concat_vec (ui5  : bits 1) (ui43  : bits 2)), rd))
    else if andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"110"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1))) then
      let ui76 : bits 2 := subrange_vec_dec v__706 8 7 in
      let ui52 : bits 4 := subrange_vec_dec v__706 12 9 in
      let rs2 : regidx := subrange_vec_dec v__706 6 2 in
      returnm (C_SWSP (concat_vec (ui76  : bits 2) (ui52  : bits 4), rs2))
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"111"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1))))) then
      let ui86 : bits 3 := subrange_vec_dec v__706 9 7 in
      let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
      let rs2 : regidx := subrange_vec_dec v__706 6 2 in
      returnm (C_SDSP (concat_vec (ui86  : bits 3) (ui53  : bits 3), rs2))
    else if andb
              (let rs1 : regidx := subrange_vec_dec v__706 11 7 in
              neq_vec rs1 zreg)
              (andb (eq_vec (subrange_vec_dec v__706 15 12) (Ox"8"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__706 6 0) ('b"0000010"  : mword (6 - 0 + 1)))) then
      let rs1 : regidx := subrange_vec_dec v__706 11 7 in
      returnm (C_JR rs1)
    else if andb
              (let rs1 : regidx := subrange_vec_dec v__706 11 7 in
              neq_vec rs1 zreg)
              (andb (eq_vec (subrange_vec_dec v__706 15 12) (Ox"9"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__706 6 0) ('b"0000010"  : mword (6 - 0 + 1)))) then
      let rs1 : regidx := subrange_vec_dec v__706 11 7 in
      returnm (C_JALR rs1)
    else if andb
              (let rs2 : regidx := subrange_vec_dec v__706 6 2 in
              let rd : regidx := subrange_vec_dec v__706 11 7 in
              andb (neq_vec rd zreg) (neq_vec rs2 zreg))
              (andb (eq_vec (subrange_vec_dec v__706 15 12) (Ox"8"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1)))) then
      let rs2 : regidx := subrange_vec_dec v__706 6 2 in
      let rd : regidx := subrange_vec_dec v__706 11 7 in
      returnm (C_MV (rd, rs2))
    else if eq_vec v__706 (Ox"9002"  : mword 16) then returnm (C_EBREAK tt)
    else if andb
              (let rsd : regidx := subrange_vec_dec v__706 11 7 in
              let rs2 : regidx := subrange_vec_dec v__706 6 2 in
              andb (neq_vec rsd zreg) (neq_vec rs2 zreg))
              (andb (eq_vec (subrange_vec_dec v__706 15 12) (Ox"9"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1)))) then
      let rsd : regidx := subrange_vec_dec v__706 11 7 in
      let rs2 : regidx := subrange_vec_dec v__706 6 2 in
      returnm (C_ADD (rsd, rs2))
    else
      (and_boolMP
         (((and_boolMP
              ((returnm (build_ex
                (projT1
                (build_ex
                (Z.eqb 32 32)
                 : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                32) _bool)}))
              (build_trivial_ex
              ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
               : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)}))
          : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)}))
         (build_trivial_ex
         (returnm ((andb (eq_vec (subrange_vec_dec v__706 15 13) ('b"011"  : mword (15 - 13 + 1)))
                      (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1))))
           : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__4 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
        (32 =? 32)) _bool = true)}) =>
      (if sumbool_of_bool w__4 then
         let ui76 : bits 2 := subrange_vec_dec v__706 3 2 in
         let ui5 : bits 1 := subrange_vec_dec v__706 12 12 in
         let ui42 : bits 3 := subrange_vec_dec v__706 6 4 in
         let rd : regidx := subrange_vec_dec v__706 11 7 in
         returnm (C_FLWSP
                    (concat_vec (ui76  : bits 2) (concat_vec (ui5  : bits 1) (ui42  : bits 3)), rd))
       else
         (and_boolMP
            (((and_boolMP
                 ((returnm (build_ex
                   (projT1
                   (build_ex
                   (Z.eqb 32 32)
                    : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                   32) _bool)}))
                 (build_trivial_ex
                 ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
                  : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)}))
             : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)}))
            (build_trivial_ex
            (returnm ((andb
                         (eq_vec (subrange_vec_dec v__706 15 13) ('b"111"  : mword (15 - 13 + 1)))
                         (eq_vec (subrange_vec_dec v__706 1 0) ('b"10"  : mword (1 - 0 + 1))))
              : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__9 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)}) =>
         (if sumbool_of_bool w__9 then
            let ui76 : bits 2 := subrange_vec_dec v__706 8 7 in
            let ui52 : bits 4 := subrange_vec_dec v__706 12 9 in
            let rs2 : regidx := subrange_vec_dec v__706 6 2 in
            returnm (C_FSWSP (concat_vec (ui76  : bits 2) (ui52  : bits 4), rs2))
          else
            (and_boolMP
               (((and_boolMP
                    ((returnm (build_ex
                      (projT1
                      (build_ex
                      (Z.eqb 32 32)
                       : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                      32) _bool)}))
                    (build_trivial_ex
                    ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
                     : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)}))
                : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)}))
               (build_trivial_ex
               (returnm ((andb
                            (eq_vec (subrange_vec_dec v__706 15 13) ('b"011"  : mword (15 - 13 + 1)))
                            (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1))))
                 : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__14 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)}) =>
            (if sumbool_of_bool w__14 then
               let ui6 : bits 1 := subrange_vec_dec v__706 5 5 in
               let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
               let ui2 : bits 1 := subrange_vec_dec v__706 6 6 in
               let rs1 : cregidx := subrange_vec_dec v__706 9 7 in
               let rd : cregidx := subrange_vec_dec v__706 4 2 in
               returnm (C_FLW
                          (concat_vec (ui6  : bits 1) (concat_vec (ui53  : bits 3) (ui2  : bits 1)), rs1, rd))
             else
               (and_boolMP
                  (((and_boolMP
                       ((returnm (build_ex
                         (projT1
                         (build_ex
                         (Z.eqb 32 32)
                          : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                         32) _bool)}))
                       (build_trivial_ex
                       ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
                        : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                    (32 =? 32)) _bool = true)}))
                   : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                    (32 =? 32)) _bool = true)}))
                  (build_trivial_ex
                  (returnm ((andb
                               (eq_vec (subrange_vec_dec v__706 15 13)
                                  ('b"111"
                                   : mword (15 - 13 + 1)))
                               (eq_vec (subrange_vec_dec v__706 1 0) ('b"00"  : mword (1 - 0 + 1))))
                    : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__19 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)}) =>
               returnm (if sumbool_of_bool w__19 then
                          let ui6 : bits 1 := subrange_vec_dec v__706 5 5 in
                          let ui53 : bits 3 := subrange_vec_dec v__706 12 10 in
                          let ui2 : bits 1 := subrange_vec_dec v__706 6 6 in
                          let rs2 : cregidx := subrange_vec_dec v__706 4 2 in
                          let rs1 : cregidx := subrange_vec_dec v__706 9 7 in
                          C_FSW
                            (concat_vec (ui6  : bits 1)
                               (concat_vec (ui53  : bits 3) (ui2  : bits 1)), rs1, rs2)
                        else C_ILLEGAL v__706))
             : M (ast))
          : M (ast))
       : M (ast))
    : M (ast).

Definition encdec_compressed_forwards_matches (arg_ : ast) : M (bool) :=
   (match arg_ with
    | C_NOP tt => returnm true
    | C_ADDI4SPN (rd, v__854) =>
       returnm (if let nz96 : bits 4 := subrange_vec_dec v__854 7 4 in
                  let nz96 : bits 4 := subrange_vec_dec v__854 7 4 in
                  let nz54 : bits 2 := subrange_vec_dec v__854 3 2 in
                  let nz3 : bits 1 := subrange_vec_dec v__854 1 1 in
                  let nz2 : bits 1 := subrange_vec_dec v__854 0 0 in
                  neq_vec (concat_vec nz96 (concat_vec nz54 (concat_vec nz3 nz2)))
                    (Ox"00"
                     : mword (4 + (2 + (1 + 1)))) then
                  true
                else false)
    | C_LW (v__855, rs1, rd) => returnm true
    | C_LD (v__856, rs1, rd) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | C_SW (v__857, rs1, rs2) => returnm true
    | C_SD (v__858, rs1, rs2) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | C_ADDI (v__859, rsd) =>
       returnm (if let nzi5 : bits 1 := subrange_vec_dec v__859 5 5 in
                  let nzi5 : bits 1 := subrange_vec_dec v__859 5 5 in
                  let nzi40 : bits 5 := subrange_vec_dec v__859 4 0 in
                  andb (neq_vec (concat_vec nzi5 nzi40) ('b"000000"  : mword (1 + 5)))
                    (neq_vec rsd zreg) then
                  true
                else false)
    | C_JAL v__860 => returnm (if sumbool_of_bool (Z.eqb 32 32) then true else false)
    | C_ADDIW (v__861, rsd) =>
       returnm (if sumbool_of_bool (andb (neq_vec rsd zreg) (Z.eqb 32 64)) then true else false)
    | C_LI (v__862, rd) => returnm (if neq_vec rd zreg then true else false)
    | C_ADDI16SP v__863 =>
       returnm (if let nzi9 : bits 1 := subrange_vec_dec v__863 5 5 in
                  let nzi9 : bits 1 := subrange_vec_dec v__863 5 5 in
                  let nzi87 : bits 2 := subrange_vec_dec v__863 4 3 in
                  let nzi6 : bits 1 := subrange_vec_dec v__863 2 2 in
                  let nzi5 : bits 1 := subrange_vec_dec v__863 1 1 in
                  let nzi4 : bits 1 := subrange_vec_dec v__863 0 0 in
                  neq_vec
                    (concat_vec nzi9 (concat_vec nzi87 (concat_vec nzi6 (concat_vec nzi5 nzi4))))
                    ('b"000000"
                     : mword (1 + (2 + (1 + (1 + 1))))) then
                  true
                else false)
    | C_LUI (v__864, rd) =>
       returnm (if let imm17 : bits 1 := subrange_vec_dec v__864 5 5 in
                  let imm17 : bits 1 := subrange_vec_dec v__864 5 5 in
                  let imm1612 : bits 5 := subrange_vec_dec v__864 4 0 in
                  andb (neq_vec rd zreg)
                    (andb (neq_vec rd sp)
                       (neq_vec (concat_vec imm17 imm1612) ('b"000000"  : mword (1 + 5)))) then
                  true
                else false)
    | C_SRLI (v__865, rsd) =>
       returnm (if let nzui5 : bits 1 := subrange_vec_dec v__865 5 5 in
                  let nzui5 : bits 1 := subrange_vec_dec v__865 5 5 in
                  let nzui40 : bits 5 := subrange_vec_dec v__865 4 0 in
                  neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)) then
                  true
                else false)
    | C_SRAI (v__866, rsd) =>
       returnm (if let nzui5 : bits 1 := subrange_vec_dec v__866 5 5 in
                  let nzui5 : bits 1 := subrange_vec_dec v__866 5 5 in
                  let nzui40 : bits 5 := subrange_vec_dec v__866 4 0 in
                  neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)) then
                  true
                else false)
    | C_ANDI (v__867, rsd) => returnm true
    | C_SUB (rsd, rs2) => returnm true
    | C_XOR (rsd, rs2) => returnm true
    | C_OR (rsd, rs2) => returnm true
    | C_AND (rsd, rs2) => returnm true
    | C_SUBW (rsd, rs2) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | C_ADDW (rsd, rs2) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | C_J v__868 => returnm true
    | C_BEQZ (v__869, rs) => returnm true
    | C_BNEZ (v__870, rs) => returnm true
    | C_SLLI (v__871, rsd) =>
       returnm (if sumbool_of_bool
                  (let nzui5 : bits 1 := subrange_vec_dec v__871 5 5 in
                  let nzui5 : bits 1 := subrange_vec_dec v__871 5 5 in
                  let nzui40 : bits 5 := subrange_vec_dec v__871 4 0 in
                  andb (neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
                    (andb (neq_vec rsd zreg) (orb (Z.eqb 32 64) (eq_vec nzui5 ('b"0"  : mword 1)))))
                then
                  true
                else false)
    | C_LWSP (v__872, rd) => returnm (if neq_vec rd zreg then true else false)
    | C_LDSP (v__873, rd) =>
       returnm (if sumbool_of_bool (andb (neq_vec rd zreg) (Z.eqb 32 64)) then true else false)
    | C_SWSP (v__874, rs2) => returnm true
    | C_SDSP (v__875, rs2) => returnm (if sumbool_of_bool (Z.eqb 32 64) then true else false)
    | C_JR rs1 => returnm (if neq_vec rs1 zreg then true else false)
    | C_JALR rs1 => returnm (if neq_vec rs1 zreg then true else false)
    | C_MV (rd, rs2) => returnm (if andb (neq_vec rd zreg) (neq_vec rs2 zreg) then true else false)
    | C_EBREAK tt => returnm true
    | C_ADD (rsd, rs2) =>
       returnm (if andb (neq_vec rsd zreg) (neq_vec rs2 zreg) then true else false)
    | C_FLWSP (v__876, rd) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__3 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       returnm (if sumbool_of_bool w__3 then true else false)
    | C_FSWSP (v__877, rs2) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__7 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       returnm (if sumbool_of_bool w__7 then true else false)
    | C_FLW (v__878, rs1, rd) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__11 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       returnm (if sumbool_of_bool w__11 then true else false)
    | C_FSW (v__879, rs1, rs2) =>
       (and_boolMP
          ((returnm (build_ex
            (projT1
            (build_ex
            (Z.eqb 32 32)
             : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
            32) _bool)}))
          (build_trivial_ex
          ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
           : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__15 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
         (32 =? 32)) _bool = true)}) =>
       returnm (if sumbool_of_bool w__15 then true else false)
    | C_ILLEGAL s => returnm true
    | _ => returnm false
    end)
    : M (bool).

Definition encdec_compressed_backwards_matches (arg_ : mword 16) : M (bool) :=
   let v__880 := arg_ in
   (if eq_vec v__880 (Ox"0001"  : mword 16) then returnm true
    else if andb
              (let nz96 : bits 4 := subrange_vec_dec v__880 10 7 in
              let nz54 : bits 2 := subrange_vec_dec v__880 12 11 in
              let nz3 : bits 1 := subrange_vec_dec v__880 5 5 in
              let nz2 : bits 1 := subrange_vec_dec v__880 6 6 in
              neq_vec (concat_vec nz96 (concat_vec nz54 (concat_vec nz3 nz2)))
                (Ox"00"
                 : mword (4 + (2 + (1 + 1)))))
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"000"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"010"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1))) then
      returnm true
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"011"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"110"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1))) then
      returnm true
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"111"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb
              (let rsd : regidx := subrange_vec_dec v__880 11 7 in
              let nzi5 : bits 1 := subrange_vec_dec v__880 12 12 in
              let nzi40 : bits 5 := subrange_vec_dec v__880 6 2 in
              andb (neq_vec (concat_vec nzi5 nzi40) ('b"000000"  : mword (1 + 5)))
                (neq_vec rsd zreg))
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"000"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if sumbool_of_bool
      (andb (Z.eqb 32 32)
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"001"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      returnm true
    else if sumbool_of_bool
      (andb
         (let rsd : regidx := subrange_vec_dec v__880 11 7 in
         andb (neq_vec rsd zreg) (Z.eqb 32 64))
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"001"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb
              (let rd : regidx := subrange_vec_dec v__880 11 7 in
              neq_vec rd zreg)
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"010"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb
              (let nzi9 : bits 1 := subrange_vec_dec v__880 12 12 in
              let nzi87 : bits 2 := subrange_vec_dec v__880 4 3 in
              let nzi6 : bits 1 := subrange_vec_dec v__880 5 5 in
              let nzi5 : bits 1 := subrange_vec_dec v__880 2 2 in
              let nzi4 : bits 1 := subrange_vec_dec v__880 6 6 in
              neq_vec (concat_vec nzi9 (concat_vec nzi87 (concat_vec nzi6 (concat_vec nzi5 nzi4))))
                ('b"000000"
                 : mword (1 + (2 + (1 + (1 + 1))))))
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"011"  : mword (15 - 13 + 1)))
                 (andb (eq_vec (subrange_vec_dec v__880 11 7) ('b"00010"  : mword (11 - 7 + 1)))
                    (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb
              (let rd : regidx := subrange_vec_dec v__880 11 7 in
              let imm17 : bits 1 := subrange_vec_dec v__880 12 12 in
              let imm1612 : bits 5 := subrange_vec_dec v__880 6 2 in
              andb (neq_vec rd zreg)
                (andb (neq_vec rd sp)
                   (neq_vec (concat_vec imm17 imm1612) ('b"000000"  : mword (1 + 5)))))
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"011"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb
              (let nzui5 : bits 1 := subrange_vec_dec v__880 12 12 in
              let nzui40 : bits 5 := subrange_vec_dec v__880 6 2 in
              neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"100"  : mword (15 - 13 + 1)))
                 (andb (eq_vec (subrange_vec_dec v__880 11 10) ('b"00"  : mword (11 - 10 + 1)))
                    (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb
              (let nzui5 : bits 1 := subrange_vec_dec v__880 12 12 in
              let nzui40 : bits 5 := subrange_vec_dec v__880 6 2 in
              neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"100"  : mword (15 - 13 + 1)))
                 (andb (eq_vec (subrange_vec_dec v__880 11 10) ('b"01"  : mword (11 - 10 + 1)))
                    (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"100"  : mword (15 - 13 + 1)))
              (andb (eq_vec (subrange_vec_dec v__880 11 10) ('b"10"  : mword (11 - 10 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__880 6 5) ('b"00"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__880 6 5) ('b"01"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__880 6 5) ('b"10"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 10) ('b"100011"  : mword (15 - 10 + 1)))
              (andb (eq_vec (subrange_vec_dec v__880 6 5) ('b"11"  : mword (6 - 5 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))) then
      returnm true
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__880 15 10) ('b"100111"  : mword (15 - 10 + 1)))
            (andb (eq_vec (subrange_vec_dec v__880 6 5) ('b"00"  : mword (6 - 5 + 1)))
               (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))))) then
      returnm true
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__880 15 10) ('b"100111"  : mword (15 - 10 + 1)))
            (andb (eq_vec (subrange_vec_dec v__880 6 5) ('b"01"  : mword (6 - 5 + 1)))
               (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1)))))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"101"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"110"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"111"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__880 1 0) ('b"01"  : mword (1 - 0 + 1))) then
      returnm true
    else if sumbool_of_bool
      (andb
         (let rsd : regidx := subrange_vec_dec v__880 11 7 in
         let nzui5 : bits 1 := subrange_vec_dec v__880 12 12 in
         let nzui40 : bits 5 := subrange_vec_dec v__880 6 2 in
         andb (neq_vec (concat_vec nzui5 nzui40) ('b"000000"  : mword (1 + 5)))
           (andb (neq_vec rsd zreg) (orb (Z.eqb 32 64) (eq_vec nzui5 ('b"0"  : mword 1)))))
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"000"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb
              (let rd : regidx := subrange_vec_dec v__880 11 7 in
              neq_vec rd zreg)
              (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"010"  : mword (15 - 13 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1)))) then
      returnm true
    else if sumbool_of_bool
      (andb
         (let rd : regidx := subrange_vec_dec v__880 11 7 in
         andb (neq_vec rd zreg) (Z.eqb 32 64))
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"011"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"110"  : mword (15 - 13 + 1)))
              (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1))) then
      returnm true
    else if sumbool_of_bool
      (andb (Z.eqb 32 64)
         (andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"111"  : mword (15 - 13 + 1)))
            (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1))))) then
      returnm true
    else if andb
              (let rs1 : regidx := subrange_vec_dec v__880 11 7 in
              neq_vec rs1 zreg)
              (andb (eq_vec (subrange_vec_dec v__880 15 12) (Ox"8"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__880 6 0) ('b"0000010"  : mword (6 - 0 + 1)))) then
      returnm true
    else if andb
              (let rs1 : regidx := subrange_vec_dec v__880 11 7 in
              neq_vec rs1 zreg)
              (andb (eq_vec (subrange_vec_dec v__880 15 12) (Ox"9"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__880 6 0) ('b"0000010"  : mword (6 - 0 + 1)))) then
      returnm true
    else if andb
              (let rs2 : regidx := subrange_vec_dec v__880 6 2 in
              let rd : regidx := subrange_vec_dec v__880 11 7 in
              andb (neq_vec rd zreg) (neq_vec rs2 zreg))
              (andb (eq_vec (subrange_vec_dec v__880 15 12) (Ox"8"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1)))) then
      returnm true
    else if eq_vec v__880 (Ox"9002"  : mword 16) then returnm true
    else if andb
              (let rsd : regidx := subrange_vec_dec v__880 11 7 in
              let rs2 : regidx := subrange_vec_dec v__880 6 2 in
              andb (neq_vec rsd zreg) (neq_vec rs2 zreg))
              (andb (eq_vec (subrange_vec_dec v__880 15 12) (Ox"9"  : mword (15 - 12 + 1)))
                 (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1)))) then
      returnm true
    else
      (and_boolMP
         (((and_boolMP
              ((returnm (build_ex
                (projT1
                (build_ex
                (Z.eqb 32 32)
                 : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                32) _bool)}))
              (build_trivial_ex
              ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
               : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)}))
          : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)}))
         (build_trivial_ex
         (returnm ((andb (eq_vec (subrange_vec_dec v__880 15 13) ('b"011"  : mword (15 - 13 + 1)))
                      (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1))))
           : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__4 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
        (32 =? 32)) _bool = true)}) =>
      (if sumbool_of_bool w__4 then returnm true
       else
         (and_boolMP
            (((and_boolMP
                 ((returnm (build_ex
                   (projT1
                   (build_ex
                   (Z.eqb 32 32)
                    : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                   32) _bool)}))
                 (build_trivial_ex
                 ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
                  : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)}))
             : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)}))
            (build_trivial_ex
            (returnm ((andb
                         (eq_vec (subrange_vec_dec v__880 15 13) ('b"111"  : mword (15 - 13 + 1)))
                         (eq_vec (subrange_vec_dec v__880 1 0) ('b"10"  : mword (1 - 0 + 1))))
              : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__9 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
           (32 =? 32)) _bool = true)}) =>
         (if sumbool_of_bool w__9 then returnm true
          else
            (and_boolMP
               (((and_boolMP
                    ((returnm (build_ex
                      (projT1
                      (build_ex
                      (Z.eqb 32 32)
                       : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                      32) _bool)}))
                    (build_trivial_ex
                    ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
                     : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)}))
                : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)}))
               (build_trivial_ex
               (returnm ((andb
                            (eq_vec (subrange_vec_dec v__880 15 13) ('b"011"  : mword (15 - 13 + 1)))
                            (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1))))
                 : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__14 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
              (32 =? 32)) _bool = true)}) =>
            (if sumbool_of_bool w__14 then returnm true
             else
               (and_boolMP
                  (((and_boolMP
                       ((returnm (build_ex
                         (projT1
                         (build_ex
                         (Z.eqb 32 32)
                          : {_bool : bool & ArithFact (Bool.eqb (32 =? 32) _bool)})))) : M ({_bool : bool & ArithFact (Bool.eqb (32 =?
                         32) _bool)}))
                       (build_trivial_ex
                       ((and_boolM ((haveRVC tt)  : M (bool)) ((haveFExt tt)  : M (bool)))
                        : M (bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                    (32 =? 32)) _bool = true)}))
                   : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 && (32 =? 32)) _bool = true)})) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                    (32 =? 32)) _bool = true)}))
                  (build_trivial_ex
                  (returnm ((andb
                               (eq_vec (subrange_vec_dec v__880 15 13)
                                  ('b"111"
                                   : mword (15 - 13 + 1)))
                               (eq_vec (subrange_vec_dec v__880 1 0) ('b"00"  : mword (1 - 0 + 1))))
                    : bool))) : M ({_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)})) >>= fun '(existT _ w__19 _ : {_bool : bool & ArithFactP (exists simp_0 , Bool.eqb (simp_0 &&
                 (32 =? 32)) _bool = true)}) =>
               returnm (if sumbool_of_bool w__19 then true else true))
             : M (bool))
          : M (bool))
       : M (bool))
    : M (bool).

Definition execute_WFI '(tt : unit) : M (Retired) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (match w__0 with
    | Machine => (platform_wfi tt) >> returnm RETIRE_SUCCESS
    | Supervisor =>
       read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       (if eq_vec (_get_Mstatus_TW w__1) ('b"1"  : mword 1) then
          (handle_illegal tt) >> returnm RETIRE_FAIL
        else (platform_wfi tt) >> returnm RETIRE_SUCCESS)
        : M (Retired)
    | User => (handle_illegal tt) >> returnm RETIRE_FAIL
    end)
    : M (Retired).

Definition execute_UTYPE (imm : mword 20) (rd : mword 5) (op : uop) : M (Retired) :=
   let off : xlenbits := EXTS 32 (concat_vec imm (Ox"000"  : mword 12)) in
   (match op with
    | RISCV_LUI => returnm off
    | RISCV_AUIPC => (get_arch_pc tt) >>= fun w__0 : mword 32 => returnm (add_vec w__0 off)
    end) >>= fun ret : xlenbits =>
   (wX_bits rd ret) >> returnm RETIRE_SUCCESS.

Definition execute_URET '(tt : unit) : M (Retired) :=
   (haveUsrMode tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool (negb w__0) then (handle_illegal tt)  : M (unit)
    else if negb (ext_check_xret_priv User) then returnm (ext_fail_xret_priv tt)
    else
      read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
      ((read_reg PC_ref)  : M (mword 32)) >>= fun w__2 : mword 32 =>
      (exception_handler w__1 (CTL_URET tt) w__2) >>= fun w__3 : mword 32 =>
      (set_next_pc w__3)
       : M (unit)) >>
   returnm RETIRE_FAIL.

Definition execute_STORE_FP (imm : mword 12) (rs2 : mword 5) (rs1 : mword 5) (width : word_width)
: M (Retired) :=
   let offset : xlenbits := EXTS 32 imm in
   let '(aq, rl, con) := (false, false, false) in
   (ext_data_get_addr rs1 offset (Write Data) width) >>= fun w__0 : Ext_DataAddr_Check unit =>
   (match w__0 with
    | Ext_DataAddr_Error e =>
       let '_ := (ext_handle_data_check_error e)  : unit in
       returnm RETIRE_FAIL
    | Ext_DataAddr_OK vaddr =>
       (if check_misaligned vaddr width then
          (handle_mem_exception vaddr (E_SAMO_Addr_Align tt)) >> returnm RETIRE_FAIL
        else
          (translateAddr vaddr (Write Data)) >>= fun w__1 : TR_Result (mword 32) ExceptionType =>
          (match w__1 with
           | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
           | TR_Address (addr, _) =>
              (match width with
               | BYTE => returnm (MemValue tt)
               | HALF => returnm (MemValue tt)
               | WORD => (mem_write_ea addr 4 aq rl false)  : M (MemoryOpResult unit)
               | DOUBLE => (mem_write_ea addr 8 aq rl false)  : M (MemoryOpResult unit)
               end) >>= fun eares : MemoryOpResult unit =>
              (match eares with
               | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
               | MemValue _ =>
                  (rF_bits rs2) >>= fun rs2_val =>
                  (match (width, 32) with
                   | (BYTE, _) => (handle_illegal tt) >> returnm RETIRE_FAIL
                   | (HALF, _) => (handle_illegal tt) >> returnm RETIRE_FAIL
                   | (WORD, _) =>
                      (mem_write_value addr 4 (subrange_vec_dec rs2_val 31 0) aq rl con) >>= fun w__4 : MemoryOpResult bool =>
                      (process_fstore vaddr w__4)
                       : M (Retired)
                   | _ => exit tt  : M (Retired)
                   end)
                   : M (Retired)
               end)
               : M (Retired)
           end)
           : M (Retired))
        : M (Retired)
    end)
    : M (Retired).

Definition execute_STORECON
(aq : bool) (rl : bool) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (rd : mword 5)
: M (Retired) :=
   (speculate_conditional tt) >>= fun w__0 : bool =>
   (if Bool.eqb w__0 false then (wX_bits rd (EXTZ 32 ('b"1"  : mword 1))) >> returnm RETIRE_SUCCESS
    else
      (haveAtomics tt) >>= fun w__1 : bool =>
      (if sumbool_of_bool w__1 then
         (ext_data_get_addr rs1 (zeros_implicit 32) (Write Data) width) >>= fun w__2 : Ext_DataAddr_Check unit =>
         (match w__2 with
          | Ext_DataAddr_Error e =>
             let '_ := (ext_handle_data_check_error e)  : unit in
             returnm RETIRE_FAIL
          | Ext_DataAddr_OK vaddr =>
             let aligned : bool :=
               match width with
               | BYTE => true
               | HALF => eq_vec (subrange_vec_dec vaddr 0 0) ('b"0"  : mword (0 - 0 + 1))
               | WORD => eq_vec (subrange_vec_dec vaddr 1 0) ('b"00"  : mword (1 - 0 + 1))
               | DOUBLE => eq_vec (subrange_vec_dec vaddr 2 0) ('b"000"  : mword (2 - 0 + 1))
               end in
             (if sumbool_of_bool (negb aligned) then
                (handle_mem_exception vaddr (E_SAMO_Addr_Align tt)) >> returnm RETIRE_FAIL
              else if Bool.eqb (match_reservation vaddr) false then
                (wX_bits rd (EXTZ 32 ('b"1"  : mword 1))) >>
                let '_ := (cancel_reservation tt)  : unit in
                returnm RETIRE_SUCCESS
              else
                (translateAddr vaddr (Write Data)) >>= fun w__3 : TR_Result (mword 32) ExceptionType =>
                (match w__3 with
                 | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
                 | TR_Address (addr, _) =>
                    (match (width, 32) with
                     | (WORD, _) => (mem_write_ea addr 4 aq rl true)  : M (MemoryOpResult unit)
                     | _ =>
                        (internal_error "STORECON expected word or double")
                         : M (MemoryOpResult unit)
                     end) >>= fun eares : MemoryOpResult unit =>
                    (match eares with
                     | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
                     | MemValue _ =>
                        (rX_bits rs2) >>= fun rs2_val =>
                        (match (width, 32) with
                         | (WORD, _) =>
                            (mem_write_value addr 4 (subrange_vec_dec rs2_val 31 0) aq rl true)
                             : M (MemoryOpResult bool)
                         | _ =>
                            (internal_error "STORECON expected word or double")
                             : M (MemoryOpResult bool)
                         end) >>= fun res : MemoryOpResult bool =>
                        (match res with
                         | MemValue true =>
                            (wX_bits rd (EXTZ 32 ('b"0"  : mword 1))) >>
                            let '_ := (cancel_reservation tt)  : unit in
                            returnm RETIRE_SUCCESS
                         | MemValue false =>
                            (wX_bits rd (EXTZ 32 ('b"1"  : mword 1))) >>
                            let '_ := (cancel_reservation tt)  : unit in
                            returnm RETIRE_SUCCESS
                         | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
                         end)
                         : M (Retired)
                     end)
                     : M (Retired)
                 end)
                 : M (Retired))
              : M (Retired)
          end)
          : M (Retired)
       else (handle_illegal tt) >> returnm RETIRE_FAIL)
       : M (Retired))
    : M (Retired).

Definition execute_STORE
(imm : mword 12) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (aq : bool) (rl : bool)
: M (Retired) :=
   let offset : xlenbits := EXTS 32 imm in
   (ext_data_get_addr rs1 offset (Write Data) width) >>= fun w__0 : Ext_DataAddr_Check unit =>
   (match w__0 with
    | Ext_DataAddr_Error e =>
       let '_ := (ext_handle_data_check_error e)  : unit in
       returnm RETIRE_FAIL
    | Ext_DataAddr_OK vaddr =>
       (if check_misaligned vaddr width then
          (handle_mem_exception vaddr (E_SAMO_Addr_Align tt)) >> returnm RETIRE_FAIL
        else
          (translateAddr vaddr (Write Data)) >>= fun w__1 : TR_Result (mword 32) ExceptionType =>
          (match w__1 with
           | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
           | TR_Address (paddr, _) =>
              (match width with
               | BYTE => (mem_write_ea paddr 1 aq rl false)  : M (MemoryOpResult unit)
               | HALF => (mem_write_ea paddr 2 aq rl false)  : M (MemoryOpResult unit)
               | WORD => (mem_write_ea paddr 4 aq rl false)  : M (MemoryOpResult unit)
               | DOUBLE => (mem_write_ea paddr 8 aq rl false)  : M (MemoryOpResult unit)
               end) >>= fun eares : MemoryOpResult unit =>
              (match eares with
               | MemException e => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
               | MemValue _ =>
                  (rX_bits rs2) >>= fun rs2_val =>
                  (match (width, 32) with
                   | (BYTE, _) =>
                      (mem_write_value paddr 1 (subrange_vec_dec rs2_val 7 0) aq rl false)
                       : M (MemoryOpResult bool)
                   | (HALF, _) =>
                      (mem_write_value paddr 2 (subrange_vec_dec rs2_val 15 0) aq rl false)
                       : M (MemoryOpResult bool)
                   | (WORD, _) =>
                      (mem_write_value paddr 4 (subrange_vec_dec rs2_val 31 0) aq rl false)
                       : M (MemoryOpResult bool)
                   | _ => exit tt  : M (MemoryOpResult bool)
                   end) >>= fun res : MemoryOpResult bool =>
                  (match res with
                   | MemValue true => returnm RETIRE_SUCCESS
                   | MemValue false =>
                      (internal_error "store got false from mem_write_value")  : M (Retired)
                   | MemException e => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
                   end)
                   : M (Retired)
               end)
               : M (Retired)
           end)
           : M (Retired))
        : M (Retired)
    end)
    : M (Retired).

Definition execute_SRET '(tt : unit) : M (Retired) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (match w__0 with
    | User => returnm true
    | Supervisor =>
       (or_boolM ((haveSupMode tt) >>= fun w__1 : bool => returnm ((negb w__1)  : bool))
          (read_reg mstatus_ref >>= fun w__2 : Mstatus =>
           returnm ((eq_vec (_get_Mstatus_TSR w__2) ('b"1"  : mword 1))  : bool)))
        : M (bool)
    | Machine => (haveSupMode tt) >>= fun w__4 : bool => returnm (negb w__4)
    end) >>= fun sret_illegal : bool =>
   (if sumbool_of_bool sret_illegal then (handle_illegal tt)  : M (unit)
    else if negb (ext_check_xret_priv Supervisor) then returnm (ext_fail_xret_priv tt)
    else
      read_reg cur_privilege_ref >>= fun w__5 : Privilege =>
      ((read_reg PC_ref)  : M (mword 32)) >>= fun w__6 : mword 32 =>
      (exception_handler w__5 (CTL_SRET tt) w__6) >>= fun w__7 : mword 32 =>
      (set_next_pc w__7)
       : M (unit)) >>
   returnm RETIRE_FAIL.

Definition execute_SHIFTW (shamt : mword 5) (rs1 : mword 5) (rd : mword 5) (op : sop) : M (Retired) :=
   (rX_bits rs1) >>= fun w__0 : mword 32 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   let result : bits 32 :=
     match op with
     | RISCV_SLLI => shift_bits_left rs1_val shamt
     | RISCV_SRLI => shift_bits_right rs1_val shamt
     | RISCV_SRAI => shift_right_arith32 rs1_val shamt
     end in
   (wX_bits rd (EXTS 32 result)) >> returnm RETIRE_SUCCESS.

Definition execute_SHIFTIWOP (shamt : mword 5) (rs1 : mword 5) (rd : mword 5) (op : sopw)
: M (Retired) :=
   (rX_bits rs1) >>= fun rs1_val =>
   let result : bits 32 :=
     match op with
     | RISCV_SLLIW => shift_bits_left (subrange_vec_dec rs1_val 31 0) shamt
     | RISCV_SRLIW => shift_bits_right (subrange_vec_dec rs1_val 31 0) shamt
     | RISCV_SRAIW => shift_right_arith32 (subrange_vec_dec rs1_val 31 0) shamt
     end in
   (wX_bits rd (EXTS 32 result)) >> returnm RETIRE_SUCCESS.

Definition execute_SHIFTIOP (shamt : mword 6) (rs1 : mword 5) (rd : mword 5) (op : sop)
: M (Retired) :=
   (rX_bits rs1) >>= fun rs1_val =>
   let result : xlenbits :=
     match op with
     | RISCV_SLLI => shift_bits_left rs1_val (subrange_vec_dec shamt 4 0)
     | RISCV_SRLI => shift_bits_right rs1_val (subrange_vec_dec shamt 4 0)
     | RISCV_SRAI => shift_right_arith32 rs1_val (subrange_vec_dec shamt 4 0)
     end in
   (wX_bits rd result) >> returnm RETIRE_SUCCESS.

Definition execute_SFENCE_VMA (rs1 : mword 5) (rs2 : mword 5) : M (Retired) :=
   (if eq_vec rs1 ('b"00000"  : mword 5) then returnm None
    else (rX_bits rs1) >>= fun w__0 : mword 32 => returnm (Some w__0)) >>= fun addr : option xlenbits =>
   (if eq_vec rs2 ('b"00000"  : mword 5) then returnm None
    else (rX_bits rs2) >>= fun w__1 : mword 32 => returnm (Some w__1)) >>= fun asid : option xlenbits =>
   read_reg cur_privilege_ref >>= fun w__2 : Privilege =>
   (match w__2 with
    | User => (handle_illegal tt) >> returnm RETIRE_FAIL
    | Supervisor =>
       read_reg mstatus_ref >>= fun w__3 : Mstatus =>
       read_reg mstatus_ref >>= fun w__4 : Mstatus =>
       let p__309 := (architecture (get_mstatus_SXL w__3), _get_Mstatus_TVM w__4) in
       (match p__309 with
        | (Some g__308, b__0) =>
           (if eq_vec b__0 ('b"1"  : mword 1) then (handle_illegal tt) >> returnm RETIRE_FAIL
            else if eq_vec b__0 ('b"0"  : mword 1) then
              (flush_TLB asid addr) >> returnm RETIRE_SUCCESS
            else
              (match (Some g__308, b__0) with
               | (_, _) => (internal_error "unimplemented sfence architecture")  : M (Retired)
               end)
               : M (Retired))
            : M (Retired)
        | (_, _) => (internal_error "unimplemented sfence architecture")  : M (Retired)
        end)
        : M (Retired)
    | Machine => (flush_TLB asid addr) >> returnm RETIRE_SUCCESS
    end)
    : M (Retired).

Definition execute_RTYPEW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (op : ropw) : M (Retired) :=
   (rX_bits rs1) >>= fun w__0 : mword 32 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   (rX_bits rs2) >>= fun w__1 : mword 32 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let result : bits 32 :=
     match op with
     | RISCV_ADDW => add_vec rs1_val rs2_val
     | RISCV_SUBW => sub_vec rs1_val rs2_val
     | RISCV_SLLW => shift_bits_left rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRLW => shift_bits_right rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRAW => shift_right_arith32 rs1_val (subrange_vec_dec rs2_val 4 0)
     end in
   (wX_bits rd (EXTS 32 result)) >> returnm RETIRE_SUCCESS.

Definition execute_RTYPE (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (op : rop) : M (Retired) :=
   (rX_bits rs1) >>= fun rs1_val =>
   (rX_bits rs2) >>= fun rs2_val =>
   let result : xlenbits :=
     match op with
     | RISCV_ADD => add_vec rs1_val rs2_val
     | RISCV_SLT => EXTZ 32 (bool_to_bits (zopz0zI_s rs1_val rs2_val))
     | RISCV_SLTU => EXTZ 32 (bool_to_bits (zopz0zI_u rs1_val rs2_val))
     | RISCV_AND => and_vec rs1_val rs2_val
     | RISCV_OR => or_vec rs1_val rs2_val
     | RISCV_XOR => xor_vec rs1_val rs2_val
     | RISCV_SLL => shift_bits_left rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRL => shift_bits_right rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SUB => sub_vec rs1_val rs2_val
     | RISCV_SRA => shift_right_arith32 rs1_val (subrange_vec_dec rs2_val 4 0)
     end in
   (wX_bits rd result) >> returnm RETIRE_SUCCESS.

Definition execute_RISCV_JALR (imm : mword 12) (rs1 : mword 5) (rd : mword 5) : M (Retired) :=
   (rX_bits rs1) >>= fun w__0 : mword 32 =>
   let t : xlenbits := add_vec w__0 (EXTS 32 imm) in
   (match (ext_control_check_addr t) with
    | Ext_ControlAddr_Error e =>
       let '_ := (ext_handle_control_check_error e)  : unit in
       returnm RETIRE_FAIL
    | Ext_ControlAddr_OK addr =>
       let target := update_vec_dec addr 0 B0 in
       (and_boolM ((bit_to_bool (access_vec_dec target 1))  : M (bool))
          ((haveRVC tt) >>= fun w__2 : bool => returnm ((negb w__2)  : bool))) >>= fun w__3 : bool =>
       (if sumbool_of_bool w__3 then
          (handle_mem_exception target (E_Fetch_Addr_Align tt)) >> returnm RETIRE_FAIL
        else
          (get_next_pc tt) >>= fun w__4 : mword 32 =>
          (wX_bits rd w__4) >> (set_next_pc target) >> returnm RETIRE_SUCCESS)
        : M (Retired)
    end)
    : M (Retired).

Definition execute_RISCV_JAL (imm : mword 21) (rd : mword 5) : M (Retired) :=
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__0 : mword 32 =>
   let t : xlenbits := add_vec w__0 (EXTS 32 imm) in
   (match (ext_control_check_pc t) with
    | Ext_ControlAddr_Error e =>
       let '_ := (ext_handle_control_check_error e)  : unit in
       returnm RETIRE_FAIL
    | Ext_ControlAddr_OK target =>
       (and_boolM ((bit_to_bool (access_vec_dec target 1))  : M (bool))
          ((haveRVC tt) >>= fun w__2 : bool => returnm ((negb w__2)  : bool))) >>= fun w__3 : bool =>
       (if sumbool_of_bool w__3 then
          (handle_mem_exception target (E_Fetch_Addr_Align tt)) >> returnm RETIRE_FAIL
        else
          (get_next_pc tt) >>= fun w__4 : mword 32 =>
          (wX_bits rd w__4) >> (set_next_pc target) >> returnm RETIRE_SUCCESS)
        : M (Retired)
    end)
    : M (Retired).

Definition execute_REMW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) : M (Retired) :=
   (haveMulDiv tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (rX_bits rs1) >>= fun w__1 : mword 32 =>
      let rs1_val := subrange_vec_dec w__1 31 0 in
      (rX_bits rs2) >>= fun w__2 : mword 32 =>
      let rs2_val := subrange_vec_dec w__2 31 0 in
      let rs1_int : Z := if sumbool_of_bool s then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
      let rs2_int : Z := if sumbool_of_bool s then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
      let r : Z := if sumbool_of_bool (Z.eqb rs2_int 0) then rs1_int else Z.rem rs1_int rs2_int in
      (wX_bits rd (EXTS 32 (to_bits 32 r))) >> returnm RETIRE_SUCCESS
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_REM (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) : M (Retired) :=
   (haveMulDiv tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (rX_bits rs1) >>= fun rs1_val =>
      (rX_bits rs2) >>= fun rs2_val =>
      let rs1_int : Z := if sumbool_of_bool s then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
      let rs2_int : Z := if sumbool_of_bool s then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
      let r : Z := if sumbool_of_bool (Z.eqb rs2_int 0) then rs1_int else Z.rem rs1_int rs2_int in
      (wX_bits rd (to_bits 32 r)) >> returnm RETIRE_SUCCESS
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_MULW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) : M (Retired) :=
   (haveMulDiv tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (rX_bits rs1) >>= fun w__1 : mword 32 =>
      let rs1_val := subrange_vec_dec w__1 31 0 in
      (rX_bits rs2) >>= fun w__2 : mword 32 =>
      let rs2_val := subrange_vec_dec w__2 31 0 in
      let rs1_int : Z := projT1 (sint rs1_val) in
      let rs2_int : Z := projT1 (sint rs2_val) in
      let result32 := subrange_vec_dec (to_bits 64 (Z.mul rs1_int rs2_int)) 31 0 in
      let result : xlenbits := EXTS 32 result32 in
      (wX_bits rd result) >> returnm RETIRE_SUCCESS
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_MUL
(rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (high : bool) (signed1 : bool) (signed2 : bool)
: M (Retired) :=
   (haveMulDiv tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (rX_bits rs1) >>= fun rs1_val =>
      (rX_bits rs2) >>= fun rs2_val =>
      let rs1_int : Z :=
        if sumbool_of_bool signed1 then projT1 (sint rs1_val)
        else projT1 (uint rs1_val) in
      let rs2_int : Z :=
        if sumbool_of_bool signed2 then projT1 (sint rs2_val)
        else projT1 (uint rs2_val) in
      let result_wide := to_bits (Z.mul 2 32) (Z.mul rs1_int rs2_int) in
      let result :=
        if sumbool_of_bool high then subrange_vec_dec result_wide (Z.sub (Z.mul 2 32) 1) 32
        else subrange_vec_dec result_wide (Z.sub 32 1) 0 in
      (wX_bits rd result) >> returnm RETIRE_SUCCESS
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_MRET '(tt : unit) : M (Retired) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (if generic_neq w__0 Machine then (handle_illegal tt)  : M (unit)
    else if negb (ext_check_xret_priv Machine) then returnm (ext_fail_xret_priv tt)
    else
      read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
      ((read_reg PC_ref)  : M (mword 32)) >>= fun w__2 : mword 32 =>
      (exception_handler w__1 (CTL_MRET tt) w__2) >>= fun w__3 : mword 32 =>
      (set_next_pc w__3)
       : M (unit)) >>
   returnm RETIRE_FAIL.

Definition execute_LOAD_FP (imm : mword 12) (rs1 : mword 5) (rd : mword 5) (width : word_width)
: M (Retired) :=
   let offset : xlenbits := EXTS 32 imm in
   (ext_data_get_addr rs1 offset (Read Data) width) >>= fun w__0 : Ext_DataAddr_Check unit =>
   (match w__0 with
    | Ext_DataAddr_Error e =>
       let '_ := (ext_handle_data_check_error e)  : unit in
       returnm RETIRE_FAIL
    | Ext_DataAddr_OK vaddr =>
       (if check_misaligned vaddr width then
          (handle_mem_exception vaddr (E_Load_Addr_Align tt)) >> returnm RETIRE_FAIL
        else
          (translateAddr vaddr (Read Data)) >>= fun w__1 : TR_Result (mword 32) ExceptionType =>
          (match w__1 with
           | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
           | TR_Address (addr, _) =>
              let '(aq, rl, res) := (false, false, false) in
              (match (width, 32) with
               | (BYTE, _) => (handle_illegal tt) >> returnm RETIRE_FAIL
               | (HALF, _) => (handle_illegal tt) >> returnm RETIRE_FAIL
               | (WORD, _) =>
                  (mem_read (Read Data) addr 4 aq rl res) >>= fun w__2 : MemoryOpResult (mword (8 * 4)) =>
                  (process_fload32 rd vaddr w__2)
                   : M (Retired)
               | _ => exit tt  : M (Retired)
               end)
               : M (Retired)
           end)
           : M (Retired))
        : M (Retired)
    end)
    : M (Retired).

Definition execute_LOADRES
(aq : bool) (rl : bool) (rs1 : mword 5) (width : word_width) (rd : mword 5)
: M (Retired) :=
   (haveAtomics tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (ext_data_get_addr rs1 (zeros_implicit 32) (Read Data) width) >>= fun w__1 : Ext_DataAddr_Check unit =>
      (match w__1 with
       | Ext_DataAddr_Error e =>
          let '_ := (ext_handle_data_check_error e)  : unit in
          returnm RETIRE_FAIL
       | Ext_DataAddr_OK vaddr =>
          let aligned : bool :=
            match width with
            | BYTE => true
            | HALF => eq_vec (subrange_vec_dec vaddr 0 0) ('b"0"  : mword (0 - 0 + 1))
            | WORD => eq_vec (subrange_vec_dec vaddr 1 0) ('b"00"  : mword (1 - 0 + 1))
            | DOUBLE => eq_vec (subrange_vec_dec vaddr 2 0) ('b"000"  : mword (2 - 0 + 1))
            end in
          (if sumbool_of_bool (negb aligned) then
             (handle_mem_exception vaddr (E_Load_Addr_Align tt)) >> returnm RETIRE_FAIL
           else
             (translateAddr vaddr (Read Data)) >>= fun w__2 : TR_Result (mword 32) ExceptionType =>
             (match w__2 with
              | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
              | TR_Address (addr, _) =>
                 (match (width, 32) with
                  | (WORD, _) =>
                     (mem_read (Read Data) addr 4 aq rl true) >>= fun w__3 : MemoryOpResult (mword (8 * 4)) =>
                     (process_loadres rd vaddr w__3 false)
                      : M (Retired)
                  | _ => (internal_error "LOADRES expected WORD or DOUBLE")  : M (Retired)
                  end)
                  : M (Retired)
              end)
              : M (Retired))
           : M (Retired)
       end)
       : M (Retired)
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_LOAD
(imm : mword 12) (rs1 : mword 5) (rd : mword 5) (is_unsigned : bool) (width : word_width)
(aq : bool) (rl : bool)
: M (Retired) :=
   let offset : xlenbits := EXTS 32 imm in
   (ext_data_get_addr rs1 offset (Read Data) width) >>= fun w__0 : Ext_DataAddr_Check unit =>
   (match w__0 with
    | Ext_DataAddr_Error e =>
       let '_ := (ext_handle_data_check_error e)  : unit in
       returnm RETIRE_FAIL
    | Ext_DataAddr_OK vaddr =>
       (if check_misaligned vaddr width then
          (handle_mem_exception vaddr (E_Load_Addr_Align tt)) >> returnm RETIRE_FAIL
        else
          (translateAddr vaddr (Read Data)) >>= fun w__1 : TR_Result (mword 32) ExceptionType =>
          (match w__1 with
           | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
           | TR_Address (paddr, _) =>
              (match (width, 32) with
               | (BYTE, _) =>
                  (mem_read (Read Data) paddr 1 aq rl false) >>= fun w__2 : MemoryOpResult (mword (8 * 1)) =>
                  (process_load rd vaddr w__2 is_unsigned)
                   : M (Retired)
               | (HALF, _) =>
                  (mem_read (Read Data) paddr 2 aq rl false) >>= fun w__4 : MemoryOpResult (mword (8 * 2)) =>
                  (process_load rd vaddr w__4 is_unsigned)
                   : M (Retired)
               | (WORD, _) =>
                  (mem_read (Read Data) paddr 4 aq rl false) >>= fun w__6 : MemoryOpResult (mword (8 * 4)) =>
                  (process_load rd vaddr w__6 is_unsigned)
                   : M (Retired)
               | _ => exit tt  : M (Retired)
               end)
               : M (Retired)
           end)
           : M (Retired))
        : M (Retired)
    end)
    : M (Retired).

Definition execute_ITYPE (imm : mword 12) (rs1 : mword 5) (rd : mword 5) (op : iop) : M (Retired) :=
   (rX_bits rs1) >>= fun rs1_val =>
   let immext : xlenbits := EXTS 32 imm in
   let result : xlenbits :=
     match op with
     | RISCV_ADDI => add_vec rs1_val immext
     | RISCV_SLTI => EXTZ 32 (bool_to_bits (zopz0zI_s rs1_val immext))
     | RISCV_SLTIU => EXTZ 32 (bool_to_bits (zopz0zI_u rs1_val immext))
     | RISCV_ANDI => and_vec rs1_val immext
     | RISCV_ORI => or_vec rs1_val immext
     | RISCV_XORI => xor_vec rs1_val immext
     end in
   (wX_bits rd result) >> returnm RETIRE_SUCCESS.

Definition execute_ILLEGAL (s : mword 32) : M (Retired) :=
   (handle_illegal tt) >> returnm RETIRE_FAIL.

Definition execute_F_UN_TYPE_S (arg0 : mword 5) (arg1 : mword 5) (arg2 : f_un_op_S) : M (Retired) :=
   let merge_var := (arg0, arg1, arg2) in
   (match merge_var with
    | (rs1, rd, FCLASS_S) =>
       (rF_bits rs1) >>= fun w__0 : mword 32 =>
       let rs1_val_S := nan_unbox w__0 in
       let rd_val_10b : bits 10 :=
         if f_is_neg_inf_S rs1_val_S then 'b"0000000001"  : mword 10
         else if f_is_neg_norm_S rs1_val_S then 'b"0000000010"  : mword 10
         else if f_is_neg_subnorm_S rs1_val_S then 'b"0000000100"  : mword 10
         else if f_is_neg_zero_S rs1_val_S then 'b"0000001000"  : mword 10
         else if f_is_pos_zero_S rs1_val_S then 'b"0000010000"  : mword 10
         else if f_is_pos_subnorm_S rs1_val_S then 'b"0000100000"  : mword 10
         else if f_is_pos_norm_S rs1_val_S then 'b"0001000000"  : mword 10
         else if f_is_pos_inf_S rs1_val_S then 'b"0010000000"  : mword 10
         else if f_is_SNaN_S rs1_val_S then 'b"0100000000"  : mword 10
         else if f_is_QNaN_S rs1_val_S then 'b"1000000000"  : mword 10
         else zeros_implicit 10 in
       (wX_bits rd (EXTZ 32 rd_val_10b)) >> returnm RETIRE_SUCCESS
    | (rs1, rd, FMV_X_W) =>
       (rF_bits rs1) >>= fun w__1 : mword 32 =>
       let rs1_val_S := subrange_vec_dec w__1 31 0 in
       let rd_val_X : xlenbits := EXTS 32 rs1_val_S in
       (wX_bits rd rd_val_X) >> returnm RETIRE_SUCCESS
    | (rs1, rd, FMV_W_X) =>
       (rX_bits rs1) >>= fun rs1_val_X =>
       let rd_val_S := subrange_vec_dec rs1_val_X 31 0 in
       (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    end)
    : M (Retired).

Definition execute_F_UN_RM_TYPE_S
(arg0 : mword 5) (arg1 : rounding_mode) (arg2 : mword 5) (arg3 : f_un_rm_op_S)
: M (Retired) :=
   let merge_var := (arg0, arg1, arg2, arg3) in
   (match merge_var with
    | (rs1, rm, rd, FSQRT_S) =>
       (rF_bits rs1) >>= fun w__0 : mword 32 =>
       let rs1_val_S := nan_unbox w__0 in
       (select_instr_or_fcsr_rm rm) >>= fun w__1 : rounding_mode =>
       let rm_3b := encdec_rounding_mode_forwards w__1 in
       (riscv_f32Sqrt rm_3b rs1_val_S) >>= fun '(fflags, rd_val_S) =>
       (write_fflags fflags) >> (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs1, rm, rd, FCVT_W_S) =>
       (rF_bits rs1) >>= fun w__2 : mword 32 =>
       let rs1_val_S := nan_unbox w__2 in
       (select_instr_or_fcsr_rm rm) >>= fun w__3 : rounding_mode =>
       let rm_3b := encdec_rounding_mode_forwards w__3 in
       (riscv_f32ToI32 rm_3b rs1_val_S) >>= fun '(fflags, rd_val_W) =>
       (write_fflags fflags) >> (wX_bits rd (EXTS 32 rd_val_W)) >> returnm RETIRE_SUCCESS
    | (rs1, rm, rd, FCVT_WU_S) =>
       (rF_bits rs1) >>= fun w__4 : mword 32 =>
       let rs1_val_S := nan_unbox w__4 in
       (select_instr_or_fcsr_rm rm) >>= fun w__5 : rounding_mode =>
       let rm_3b := encdec_rounding_mode_forwards w__5 in
       (riscv_f32ToUi32 rm_3b rs1_val_S) >>= fun '(fflags, rd_val_WU) =>
       (write_fflags fflags) >> (wX_bits rd (EXTS 32 rd_val_WU)) >> returnm RETIRE_SUCCESS
    | (rs1, rm, rd, FCVT_S_W) =>
       (rX_bits rs1) >>= fun w__6 : mword 32 =>
       let rs1_val_W := subrange_vec_dec w__6 31 0 in
       (select_instr_or_fcsr_rm rm) >>= fun w__7 : rounding_mode =>
       let rm_3b := encdec_rounding_mode_forwards w__7 in
       (riscv_i32ToF32 rm_3b rs1_val_W) >>= fun '(fflags, rd_val_S) =>
       (write_fflags fflags) >> (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs1, rm, rd, FCVT_S_WU) =>
       (rX_bits rs1) >>= fun w__8 : mword 32 =>
       let rs1_val_WU := subrange_vec_dec w__8 31 0 in
       (select_instr_or_fcsr_rm rm) >>= fun w__9 : rounding_mode =>
       let rm_3b := encdec_rounding_mode_forwards w__9 in
       (riscv_ui32ToF32 rm_3b rs1_val_WU) >>= fun '(fflags, rd_val_S) =>
       (write_fflags fflags) >> (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs1, rm, rd, FCVT_L_S) => returnm RETIRE_FAIL
    | (rs1, rm, rd, FCVT_LU_S) => returnm RETIRE_FAIL
    | (rs1, rm, rd, FCVT_S_L) => returnm RETIRE_FAIL
    | (rs1, rm, rd, FCVT_S_LU) => returnm RETIRE_FAIL
    end)
    : M (Retired).

Definition execute_F_MADD_TYPE_S
(rs3 : mword 5) (rs2 : mword 5) (rs1 : mword 5) (rm : rounding_mode) (rd : mword 5)
(op : f_madd_op_S)
: M (Retired) :=
   (rF_bits rs1) >>= fun w__0 : mword 32 =>
   let rs1_val_32b := nan_unbox w__0 in
   (rF_bits rs2) >>= fun w__1 : mword 32 =>
   let rs2_val_32b := nan_unbox w__1 in
   (rF_bits rs3) >>= fun w__2 : mword 32 =>
   let rs3_val_32b := nan_unbox w__2 in
   (select_instr_or_fcsr_rm rm) >>= fun w__3 : rounding_mode =>
   let rm_3b := encdec_rounding_mode_forwards w__3 in
   (match op with
    | FMADD_S =>
       (riscv_f32MulAdd rm_3b rs1_val_32b rs2_val_32b rs3_val_32b)  : M ((mword 5 * mword 32))
    | FMSUB_S =>
       (riscv_f32MulAdd rm_3b rs1_val_32b rs2_val_32b (negate_S rs3_val_32b))
        : M ((mword 5 * mword 32))
    | FNMSUB_S =>
       (riscv_f32MulAdd rm_3b (negate_S rs1_val_32b) rs2_val_32b rs3_val_32b)
        : M ((mword 5 * mword 32))
    | FNMADD_S =>
       (riscv_f32MulAdd rm_3b (negate_S rs1_val_32b) rs2_val_32b (negate_S rs3_val_32b))
        : M ((mword 5 * mword 32))
    end) >>= fun '((fflags, rd_val_32b)
   : (bits 5 * bits 32)) =>
   (write_fflags fflags) >> (wF_bits rd (nan_box rd_val_32b)) >> returnm RETIRE_SUCCESS.

Definition execute_F_BIN_TYPE_S
(arg0 : mword 5) (arg1 : mword 5) (arg2 : mword 5) (arg3 : f_bin_op_S)
: M (Retired) :=
   let merge_var := (arg0, arg1, arg2, arg3) in
   (match merge_var with
    | (rs2, rs1, rd, FSGNJ_S) =>
       (rF_bits rs1) >>= fun w__0 : mword 32 =>
       let rs1_val_S := nan_unbox w__0 in
       (rF_bits rs2) >>= fun w__1 : mword 32 =>
       let rs2_val_S := nan_unbox w__1 in
       let '(s1, e1, m1) := fsplit_S rs1_val_S in
       let '(s2, e2, m2) := fsplit_S rs2_val_S in
       let rd_val_S := fmake_S s2 e1 m1 in
       (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FSGNJN_S) =>
       (rF_bits rs1) >>= fun w__2 : mword 32 =>
       let rs1_val_S := nan_unbox w__2 in
       (rF_bits rs2) >>= fun w__3 : mword 32 =>
       let rs2_val_S := nan_unbox w__3 in
       let '(s1, e1, m1) := fsplit_S rs1_val_S in
       let '(s2, e2, m2) := fsplit_S rs2_val_S in
       let rd_val_S := fmake_S (xor_vec ('b"1"  : mword 1) s2) e1 m1 in
       (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FSGNJX_S) =>
       (rF_bits rs1) >>= fun w__4 : mword 32 =>
       let rs1_val_S := nan_unbox w__4 in
       (rF_bits rs2) >>= fun w__5 : mword 32 =>
       let rs2_val_S := nan_unbox w__5 in
       let '(s1, e1, m1) := fsplit_S rs1_val_S in
       let '(s2, e2, m2) := fsplit_S rs2_val_S in
       let rd_val_S := fmake_S (xor_vec s1 s2) e1 m1 in
       (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FMIN_S) =>
       (rF_bits rs1) >>= fun w__6 : mword 32 =>
       let rs1_val_S := nan_unbox w__6 in
       (rF_bits rs2) >>= fun w__7 : mword 32 =>
       let rs2_val_S := nan_unbox w__7 in
       let is_quiet := true in
       let '(rs1_lt_rs2, fflags) := fle_S rs1_val_S rs2_val_S is_quiet in
       let rd_val_S :=
         if andb (f_is_NaN_S rs1_val_S) (f_is_NaN_S rs2_val_S) then canonical_NaN_S tt
         else if f_is_NaN_S rs1_val_S then rs2_val_S
         else if f_is_NaN_S rs2_val_S then rs1_val_S
         else if andb (f_is_neg_zero_S rs1_val_S) (f_is_pos_zero_S rs2_val_S) then rs1_val_S
         else if andb (f_is_neg_zero_S rs2_val_S) (f_is_pos_zero_S rs1_val_S) then rs2_val_S
         else if sumbool_of_bool rs1_lt_rs2 then rs1_val_S
         else rs2_val_S in
       (accrue_fflags fflags) >> (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FMAX_S) =>
       (rF_bits rs1) >>= fun w__8 : mword 32 =>
       let rs1_val_S := nan_unbox w__8 in
       (rF_bits rs2) >>= fun w__9 : mword 32 =>
       let rs2_val_S := nan_unbox w__9 in
       let is_quiet := true in
       let '(rs2_lt_rs1, fflags) := fle_S rs2_val_S rs1_val_S is_quiet in
       let rd_val_S :=
         if andb (f_is_NaN_S rs1_val_S) (f_is_NaN_S rs2_val_S) then canonical_NaN_S tt
         else if f_is_NaN_S rs1_val_S then rs2_val_S
         else if f_is_NaN_S rs2_val_S then rs1_val_S
         else if andb (f_is_neg_zero_S rs1_val_S) (f_is_pos_zero_S rs2_val_S) then rs2_val_S
         else if andb (f_is_neg_zero_S rs2_val_S) (f_is_pos_zero_S rs1_val_S) then rs1_val_S
         else if sumbool_of_bool rs2_lt_rs1 then rs1_val_S
         else rs2_val_S in
       (accrue_fflags fflags) >> (wF_bits rd (nan_box rd_val_S)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FEQ_S) =>
       (rF_bits rs1) >>= fun w__10 : mword 32 =>
       let rs1_val_S := nan_unbox w__10 in
       (rF_bits rs2) >>= fun w__11 : mword 32 =>
       let rs2_val_S := nan_unbox w__11 in
       (riscv_f32Eq rs1_val_S rs2_val_S) >>= fun '((fflags, rd_val)
       : (bits_fflags * bits_WU)) =>
       (write_fflags fflags) >> (wX_bits rd (EXTZ 32 rd_val)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FLT_S) =>
       (rF_bits rs1) >>= fun w__12 : mword 32 =>
       let rs1_val_S := nan_unbox w__12 in
       (rF_bits rs2) >>= fun w__13 : mword 32 =>
       let rs2_val_S := nan_unbox w__13 in
       (riscv_f32Lt rs1_val_S rs2_val_S) >>= fun '((fflags, rd_val)
       : (bits_fflags * bits_WU)) =>
       (write_fflags fflags) >> (wX_bits rd (EXTZ 32 rd_val)) >> returnm RETIRE_SUCCESS
    | (rs2, rs1, rd, FLE_S) =>
       (rF_bits rs1) >>= fun w__14 : mword 32 =>
       let rs1_val_S := nan_unbox w__14 in
       (rF_bits rs2) >>= fun w__15 : mword 32 =>
       let rs2_val_S := nan_unbox w__15 in
       (riscv_f32Le rs1_val_S rs2_val_S) >>= fun '((fflags, rd_val)
       : (bits_fflags * bits_WU)) =>
       (write_fflags fflags) >> (wX_bits rd (EXTZ 32 rd_val)) >> returnm RETIRE_SUCCESS
    end)
    : M (Retired).

Definition execute_F_BIN_RM_TYPE_S
(rs2 : mword 5) (rs1 : mword 5) (rm : rounding_mode) (rd : mword 5) (op : f_bin_rm_op_S)
: M (Retired) :=
   (rF_bits rs1) >>= fun w__0 : mword 32 =>
   let rs1_val_32b := nan_unbox w__0 in
   (rF_bits rs2) >>= fun w__1 : mword 32 =>
   let rs2_val_32b := nan_unbox w__1 in
   (select_instr_or_fcsr_rm rm) >>= fun w__2 : rounding_mode =>
   let rm_3b := encdec_rounding_mode_forwards w__2 in
   (match op with
    | FADD_S => (riscv_f32Add rm_3b rs1_val_32b rs2_val_32b)  : M ((mword 5 * mword 32))
    | FSUB_S => (riscv_f32Sub rm_3b rs1_val_32b rs2_val_32b)  : M ((mword 5 * mword 32))
    | FMUL_S => (riscv_f32Mul rm_3b rs1_val_32b rs2_val_32b)  : M ((mword 5 * mword 32))
    | FDIV_S => (riscv_f32Div rm_3b rs1_val_32b rs2_val_32b)  : M ((mword 5 * mword 32))
    end) >>= fun '((fflags, rd_val_32b)
   : (bits 5 * bits 32)) =>
   (write_fflags fflags) >> (wF_bits rd (nan_box rd_val_32b)) >> returnm RETIRE_SUCCESS.

Definition execute_FENCE_TSO (pred : mword 4) (succ : mword 4) : M (Retired) :=
   (match (pred, succ) with
    | (v__1068, v__1069) =>
       (if andb (eq_vec (subrange_vec_dec v__1068 1 0) ('b"11"  : mword (1 - 0 + 1)))
             (eq_vec (subrange_vec_dec v__1069 1 0) ('b"11"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_tso tt))
           : M (unit)
        else
          returnm (if andb (eq_vec (subrange_vec_dec v__1068 1 0) ('b"00"  : mword (1 - 0 + 1)))
                        (eq_vec (subrange_vec_dec v__1069 1 0) ('b"00"  : mword (1 - 0 + 1))) then
                     tt
                   else
                     let '_ := (print_endline "FIXME: unsupported fence")  : unit in
                     tt))
        : M (unit)
    end) >>
   returnm RETIRE_SUCCESS.

Definition execute_FENCEI '(tt : unit) : Retired := RETIRE_SUCCESS.

Definition execute_FENCE (pred : mword 4) (succ : mword 4) : M (Retired) :=
   (match (pred, succ) with
    | (v__1028, v__1029) =>
       (if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"11"  : mword (1 - 0 + 1)))
             (eq_vec (subrange_vec_dec v__1029 1 0) ('b"11"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_rw_rw tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"10"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"11"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_r_rw tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"10"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"10"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_r_r tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"11"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"01"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_rw_w tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"01"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"01"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_w_w tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"01"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"11"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_w_rw tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"11"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"10"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_rw_r tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"10"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"01"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_r_w tt))
           : M (unit)
        else if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"01"  : mword (1 - 0 + 1)))
                  (eq_vec (subrange_vec_dec v__1029 1 0) ('b"10"  : mword (1 - 0 + 1))) then
          (barrier (Barrier_RISCV_w_r tt))
           : M (unit)
        else
          returnm (if andb (eq_vec (subrange_vec_dec v__1028 1 0) ('b"00"  : mword (1 - 0 + 1)))
                        (eq_vec (subrange_vec_dec v__1029 1 0) ('b"00"  : mword (1 - 0 + 1))) then
                     tt
                   else
                     let '_ := (print_endline "FIXME: unsupported fence")  : unit in
                     tt))
        : M (unit)
    end) >>
   returnm RETIRE_SUCCESS.

Definition execute_ECALL '(tt : unit) : M (Retired) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   let t : sync_exception :=
     {| sync_exception_trap :=
          (match w__0 with
           | User => E_U_EnvCall tt
           | Supervisor => E_S_EnvCall tt
           | Machine => E_M_EnvCall tt
           end); 
        sync_exception_excinfo := (None  : option xlenbits); 
        sync_exception_ext := None |} in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__2 : mword 32 =>
   (exception_handler w__1 (CTL_TRAP t) w__2) >>= fun w__3 : mword 32 =>
   (set_next_pc w__3) >> returnm RETIRE_FAIL.

Definition execute_EBREAK '(tt : unit) : M (Retired) :=
   (handle_exception (E_Breakpoint tt)) >> returnm RETIRE_FAIL.

Definition execute_DIVW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) : M (Retired) :=
   (haveMulDiv tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (rX_bits rs1) >>= fun w__1 : mword 32 =>
      let rs1_val := subrange_vec_dec w__1 31 0 in
      (rX_bits rs2) >>= fun w__2 : mword 32 =>
      let rs2_val := subrange_vec_dec w__2 31 0 in
      let rs1_int : Z := if sumbool_of_bool s then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
      let rs2_int : Z := if sumbool_of_bool s then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
      let q : Z := if sumbool_of_bool (Z.eqb rs2_int 0) then (-1) else Z.quot rs1_int rs2_int in
      let q' : Z :=
        if sumbool_of_bool (andb s (Z.gtb q (Z.sub (projT1 (pow2 31)) 1))) then Z.sub 0 (pow 2 31)
        else q in
      (wX_bits rd (EXTS 32 (to_bits 32 q'))) >> returnm RETIRE_SUCCESS
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_DIV (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) : M (Retired) :=
   (haveMulDiv tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (rX_bits rs1) >>= fun rs1_val =>
      (rX_bits rs2) >>= fun rs2_val =>
      let rs1_int : Z := if sumbool_of_bool s then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
      let rs2_int : Z := if sumbool_of_bool s then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
      let q : Z := if sumbool_of_bool (Z.eqb rs2_int 0) then (-1) else Z.quot rs1_int rs2_int in
      let q' : Z :=
        if sumbool_of_bool (andb s (Z.gtb q xlen_max_signed)) then xlen_min_signed
        else q in
      (wX_bits rd (to_bits 32 q')) >> returnm RETIRE_SUCCESS
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_C_NOP '(tt : unit) : Retired := RETIRE_SUCCESS.

Definition execute_C_ILLEGAL (s : mword 16) : M (Retired) :=
   (handle_illegal tt) >> returnm RETIRE_FAIL.

Definition execute_CSR (csr : mword 12) (rs1 : mword 5) (rd : mword 5) (is_imm : bool) (op : csrop)
: M (Retired) :=
   (if sumbool_of_bool is_imm then returnm (EXTZ 32 rs1)
    else (rX_bits rs1)  : M (mword 32)) >>= fun rs1_val : xlenbits =>
   let isWrite : bool :=
     match op with
     | CSRRW => true
     | _ =>
        if sumbool_of_bool is_imm then projT1 (neq_int (projT1 (uint rs1_val)) 0)
        else projT1 (neq_int (projT1 (uint rs1)) 0)
     end in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   (check_CSR csr w__1 isWrite) >>= fun w__2 : bool =>
   (if sumbool_of_bool (negb w__2) then (handle_illegal tt) >> returnm RETIRE_FAIL
    else
      read_reg cur_privilege_ref >>= fun w__3 : Privilege =>
      (if negb (ext_check_CSR csr w__3 isWrite) then
         let '_ := (ext_check_CSR_fail tt)  : unit in
         returnm RETIRE_FAIL
       else
         (readCSR csr) >>= fun csr_val =>
         (if sumbool_of_bool isWrite then
            let new_val : xlenbits :=
              match op with
              | CSRRW => rs1_val
              | CSRRS => or_vec csr_val rs1_val
              | CSRRC => and_vec csr_val (not_vec rs1_val)
              end in
            (writeCSR csr new_val)
             : M (unit)
          else returnm tt) >>
         (wX_bits rd csr_val) >> returnm RETIRE_SUCCESS)
       : M (Retired))
    : M (Retired).

Definition execute_BTYPE (imm : mword 13) (rs2 : mword 5) (rs1 : mword 5) (op : bop) : M (Retired) :=
   (rX_bits rs1) >>= fun rs1_val =>
   (rX_bits rs2) >>= fun rs2_val =>
   let taken : bool :=
     match op with
     | RISCV_BEQ => eq_vec rs1_val rs2_val
     | RISCV_BNE => neq_vec rs1_val rs2_val
     | RISCV_BLT => zopz0zI_s rs1_val rs2_val
     | RISCV_BGE => zopz0zKzJ_s rs1_val rs2_val
     | RISCV_BLTU => zopz0zI_u rs1_val rs2_val
     | RISCV_BGEU => zopz0zKzJ_u rs1_val rs2_val
     end in
   ((read_reg PC_ref)  : M (mword 32)) >>= fun w__0 : mword 32 =>
   let t : xlenbits := add_vec w__0 (EXTS 32 imm) in
   (if sumbool_of_bool taken then
      (match (ext_control_check_pc t) with
       | Ext_ControlAddr_Error e =>
          let '_ := (ext_handle_control_check_error e)  : unit in
          returnm RETIRE_FAIL
       | Ext_ControlAddr_OK target =>
          (and_boolM ((bit_to_bool (access_vec_dec target 1))  : M (bool))
             ((haveRVC tt) >>= fun w__2 : bool => returnm ((negb w__2)  : bool))) >>= fun w__3 : bool =>
          (if sumbool_of_bool w__3 then
             (handle_mem_exception target (E_Fetch_Addr_Align tt)) >> returnm RETIRE_FAIL
           else (set_next_pc target) >> returnm RETIRE_SUCCESS)
           : M (Retired)
       end)
       : M (Retired)
    else returnm RETIRE_SUCCESS)
    : M (Retired).

Definition execute_AMO
(op : amoop) (aq : bool) (rl : bool) (rs2 : mword 5) (rs1 : mword 5) (width : word_width)
(rd : mword 5)
: M (Retired) :=
   (haveAtomics tt) >>= fun w__0 : bool =>
   (if sumbool_of_bool w__0 then
      (ext_data_get_addr rs1 (zeros_implicit 32) (ReadWrite Data) width) >>= fun w__1 : Ext_DataAddr_Check unit =>
      (match w__1 with
       | Ext_DataAddr_Error e =>
          let '_ := (ext_handle_data_check_error e)  : unit in
          returnm RETIRE_FAIL
       | Ext_DataAddr_OK vaddr =>
          (translateAddr vaddr (ReadWrite Data)) >>= fun w__2 : TR_Result (mword 32) ExceptionType =>
          (match w__2 with
           | TR_Failure (e, _) => (handle_mem_exception vaddr e) >> returnm RETIRE_FAIL
           | TR_Address (addr, _) =>
              (match (width, 32) with
               | (WORD, _) => (mem_write_ea addr 4 (andb aq rl) rl true)  : M (MemoryOpResult unit)
               | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult unit)
               end) >>= fun eares : MemoryOpResult unit =>
              let is_unsigned : bool :=
                match op with | AMOMINU => true | AMOMAXU => true | _ => false end in
              (match width with
               | WORD =>
                  (if sumbool_of_bool is_unsigned then
                     (rX_bits rs2) >>= fun w__5 : mword 32 =>
                     returnm (EXTZ 32 (subrange_vec_dec w__5 31 0))
                   else
                     (rX_bits rs2) >>= fun w__6 : mword 32 =>
                     returnm (EXTS 32 (subrange_vec_dec w__6 31 0)))
                   : M (mword 32)
               | DOUBLE => (rX_bits rs2)  : M (mword 32)
               | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (mword 32)
               end) >>= fun rs2_val : xlenbits =>
              (match eares with
               | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
               | MemValue _ =>
                  (match (width, 32) with
                   | (WORD, _) =>
                      (mem_read (ReadWrite Data) addr 4 aq (andb aq rl) true) >>= fun w__10 : MemoryOpResult (mword (8 * 4)) =>
                      returnm (extend_value is_unsigned w__10)
                   | _ =>
                      (internal_error "AMO expected WORD or DOUBLE")
                       : M (MemoryOpResult (mword 32))
                   end) >>= fun mval : MemoryOpResult xlenbits =>
                  (match mval with
                   | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
                   | MemValue loaded =>
                      let result : xlenbits :=
                        match op with
                        | AMOSWAP => rs2_val
                        | AMOADD => add_vec rs2_val loaded
                        | AMOXOR => xor_vec rs2_val loaded
                        | AMOAND => and_vec rs2_val loaded
                        | AMOOR => or_vec rs2_val loaded
                        | AMOMIN =>
                           to_bits 32
                             (projT1
                              (min_atom (projT1 (sint rs2_val)) (projT1 (sint loaded))))
                        | AMOMAX =>
                           to_bits 32
                             (projT1
                              (max_atom (projT1 (sint rs2_val)) (projT1 (sint loaded))))
                        | AMOMINU =>
                           to_bits 32
                             (projT1
                              (min_atom (projT1 (uint rs2_val)) (projT1 (uint loaded))))
                        | AMOMAXU =>
                           to_bits 32
                             (projT1
                              (max_atom (projT1 (uint rs2_val)) (projT1 (uint loaded))))
                        end in
                      (match width with
                       | WORD => returnm (EXTS 32 (subrange_vec_dec loaded 31 0))
                       | DOUBLE => returnm loaded
                       | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (mword 32)
                       end) >>= fun rval : xlenbits =>
                      (match (width, 32) with
                       | (WORD, _) =>
                          (mem_write_value addr 4 (subrange_vec_dec result 31 0) (andb aq rl) rl
                             true)
                           : M (MemoryOpResult bool)
                       | _ =>
                          (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult bool)
                       end) >>= fun wval : MemoryOpResult bool =>
                      (match wval with
                       | MemValue true => (wX_bits rd rval) >> returnm RETIRE_SUCCESS
                       | MemValue false =>
                          (internal_error "AMO got false from mem_write_value")  : M (Retired)
                       | MemException e => (handle_mem_exception addr e) >> returnm RETIRE_FAIL
                       end)
                       : M (Retired)
                   end)
                   : M (Retired)
               end)
               : M (Retired)
           end)
           : M (Retired)
       end)
       : M (Retired)
    else (handle_illegal tt) >> returnm RETIRE_FAIL)
    : M (Retired).

Definition execute_ADDIW (imm : mword 12) (rs1 : mword 5) (rd : mword 5) : M (Retired) :=
   (rX_bits rs1) >>= fun w__0 : mword 32 =>
   let result : xlenbits := add_vec (EXTS 32 imm) w__0 in
   (wX_bits rd (EXTS 32 (subrange_vec_dec result 31 0))) >> returnm RETIRE_SUCCESS.

Definition compressed_measure (instr : ast) : Z :=
   match instr with
   | C_ADDI4SPN (rdc, nzimm) => 1
   | C_LW (uimm, rsc, rdc) => 1
   | C_LD (uimm, rsc, rdc) => 1
   | C_SW (uimm, rsc1, rsc2) => 1
   | C_SD (uimm, rsc1, rsc2) => 1
   | C_ADDI (nzi, rsd) => 1
   | C_JAL imm => 1
   | C_LI (imm, rd) => 1
   | C_ADDI16SP imm => 1
   | C_LUI (imm, rd) => 1
   | C_SRLI (shamt, rsd) => 1
   | C_SRAI (shamt, rsd) => 1
   | C_ANDI (imm, rsd) => 1
   | C_SUB (rsd, rs2) => 1
   | C_XOR (rsd, rs2) => 1
   | C_OR (rsd, rs2) => 1
   | C_AND (rsd, rs2) => 1
   | C_SUBW (rsd, rs2) => 1
   | C_ADDW (rsd, rs2) => 1
   | C_J imm => 1
   | C_BEQZ (imm, rs) => 1
   | C_BNEZ (imm, rs) => 1
   | C_SLLI (shamt, rsd) => 1
   | C_LWSP (uimm, rd) => 1
   | C_LDSP (uimm, rd) => 1
   | C_SWSP (uimm, rs2) => 1
   | C_SDSP (uimm, rs2) => 1
   | C_JR rs1 => 1
   | C_JALR rs1 => 1
   | C_MV (rd, rs2) => 1
   | C_EBREAK tt' => 1
   | C_ADD (rsd, rs2) => 1
   | _ => 0
   end.

Fixpoint _rec_execute (merge_var : ast) (_reclimit : Z) (_acc : Acc (Zwf 0) _reclimit)
{struct _acc} : M (Retired).
exact (
   assert_exp' (Z.geb _reclimit 0) "recursion limit reached" >>= fun _ =>
   (match merge_var with
    | C_ADDI4SPN (rdc, nzimm) =>
       let imm : bits 12 := concat_vec ('b"00"  : mword 2) (concat_vec nzimm ('b"00"  : mword 2)) in
       let rd := creg2reg_idx rdc in
       (_rec_execute (ITYPE (imm, sp, rd, RISCV_ADDI)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_LW (uimm, rsc, rdc) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       let rd := creg2reg_idx rdc in
       let rs := creg2reg_idx rsc in
       (_rec_execute (LOAD (imm, rs, rd, false, WORD, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_LD (uimm, rsc, rdc) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"000"  : mword 3)) in
       let rd := creg2reg_idx rdc in
       let rs := creg2reg_idx rsc in
       (_rec_execute (LOAD (imm, rs, rd, false, DOUBLE, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_SW (uimm, rsc1, rsc2) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       let rs1 := creg2reg_idx rsc1 in
       let rs2 := creg2reg_idx rsc2 in
       (_rec_execute (STORE (imm, rs2, rs1, WORD, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_SD (uimm, rsc1, rsc2) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"000"  : mword 3)) in
       let rs1 := creg2reg_idx rsc1 in
       let rs2 := creg2reg_idx rsc2 in
       (_rec_execute (STORE (imm, rs2, rs1, DOUBLE, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_ADDI (nzi, rsd) =>
       let imm : bits 12 := EXTS 12 nzi in
       (_rec_execute (ITYPE (imm, rsd, rsd, RISCV_ADDI)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_JAL imm =>
       (_rec_execute (RISCV_JAL (EXTS 21 (concat_vec imm ('b"0"  : mword 1)), ra))
          (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_ADDIW (imm, rsd) =>
       (_rec_execute (ADDIW (EXTS 12 imm, rsd, rsd)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_LI (imm, rd) =>
       let imm : bits 12 := EXTS 12 imm in
       (_rec_execute (ITYPE (imm, zreg, rd, RISCV_ADDI)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_ADDI16SP imm =>
       let imm : bits 12 := EXTS 12 (concat_vec imm (Ox"0"  : mword 4)) in
       (_rec_execute (ITYPE (imm, sp, sp, RISCV_ADDI)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_LUI (imm, rd) =>
       let res : bits 20 := EXTS 20 imm in
       (_rec_execute (UTYPE (res, rd, RISCV_LUI)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_SRLI (shamt, rsd) =>
       let rsd := creg2reg_idx rsd in
       (_rec_execute (SHIFTIOP (shamt, rsd, rsd, RISCV_SRLI)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_SRAI (shamt, rsd) =>
       let rsd := creg2reg_idx rsd in
       (_rec_execute (SHIFTIOP (shamt, rsd, rsd, RISCV_SRAI)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_ANDI (imm, rsd) =>
       let rsd := creg2reg_idx rsd in
       (_rec_execute (ITYPE (EXTS 12 imm, rsd, rsd, RISCV_ANDI)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_SUB (rsd, rs2) =>
       let rsd := creg2reg_idx rsd in
       let rs2 := creg2reg_idx rs2 in
       (_rec_execute (RTYPE (rs2, rsd, rsd, RISCV_SUB)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_XOR (rsd, rs2) =>
       let rsd := creg2reg_idx rsd in
       let rs2 := creg2reg_idx rs2 in
       (_rec_execute (RTYPE (rs2, rsd, rsd, RISCV_XOR)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_OR (rsd, rs2) =>
       let rsd := creg2reg_idx rsd in
       let rs2 := creg2reg_idx rs2 in
       (_rec_execute (RTYPE (rs2, rsd, rsd, RISCV_OR)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_AND (rsd, rs2) =>
       let rsd := creg2reg_idx rsd in
       let rs2 := creg2reg_idx rs2 in
       (_rec_execute (RTYPE (rs2, rsd, rsd, RISCV_AND)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_SUBW (rsd, rs2) =>
       let rsd := creg2reg_idx rsd in
       let rs2 := creg2reg_idx rs2 in
       (_rec_execute (RTYPEW (rs2, rsd, rsd, RISCV_SUBW)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_ADDW (rsd, rs2) =>
       let rsd := creg2reg_idx rsd in
       let rs2 := creg2reg_idx rs2 in
       (_rec_execute (RTYPEW (rs2, rsd, rsd, RISCV_ADDW)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_J imm =>
       (_rec_execute (RISCV_JAL (EXTS 21 (concat_vec imm ('b"0"  : mword 1)), zreg))
          (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_BEQZ (imm, rs) =>
       (_rec_execute
          (BTYPE (EXTS 13 (concat_vec imm ('b"0"  : mword 1)), zreg, creg2reg_idx rs, RISCV_BEQ))
          (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_BNEZ (imm, rs) =>
       (_rec_execute
          (BTYPE (EXTS 13 (concat_vec imm ('b"0"  : mword 1)), zreg, creg2reg_idx rs, RISCV_BNE))
          (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_SLLI (shamt, rsd) =>
       (_rec_execute (SHIFTIOP (shamt, rsd, rsd, RISCV_SLLI)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_LWSP (uimm, rd) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       (_rec_execute (LOAD (imm, sp, rd, false, WORD, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_LDSP (uimm, rd) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"000"  : mword 3)) in
       (_rec_execute (LOAD (imm, sp, rd, false, DOUBLE, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_SWSP (uimm, rs2) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       (_rec_execute (STORE (imm, rs2, sp, WORD, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_SDSP (uimm, rs2) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"000"  : mword 3)) in
       (_rec_execute (STORE (imm, rs2, sp, DOUBLE, false, false)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_JR rs1 =>
       (_rec_execute (RISCV_JALR (EXTZ 12 ('b"0"  : mword 1), rs1, zreg)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_JALR rs1 =>
       (_rec_execute (RISCV_JALR (EXTZ 12 ('b"0"  : mword 1), rs1, ra)) (Z.sub _reclimit 1)
          (_limit_reduces _acc))
        : M (Retired)
    | C_MV (rd, rs2) =>
       (_rec_execute (RTYPE (rs2, zreg, rd, RISCV_ADD)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_EBREAK tt =>
       (_rec_execute (EBREAK tt) (Z.sub _reclimit 1) (_limit_reduces _acc))  : M (Retired)
    | C_ADD (rsd, rs2) =>
       (_rec_execute (RTYPE (rs2, rsd, rsd, RISCV_ADD)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_FLWSP (imm, rd) =>
       let imm : bits 12 := EXTZ 12 (concat_vec imm ('b"00"  : mword 2)) in
       (_rec_execute (LOAD_FP (imm, sp, rd, WORD)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_FSWSP (uimm, rs2) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       (_rec_execute (STORE_FP (imm, rs2, sp, WORD)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_FLW (uimm, rsc, rdc) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       let rd := creg2reg_idx rdc in
       let rs := creg2reg_idx rsc in
       (_rec_execute (LOAD_FP (imm, rs, rd, WORD)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | C_FSW (uimm, rsc1, rsc2) =>
       let imm : bits 12 := EXTZ 12 (concat_vec uimm ('b"00"  : mword 2)) in
       let rs1 := creg2reg_idx rsc1 in
       let rs2 := creg2reg_idx rsc2 in
       (_rec_execute (STORE_FP (imm, rs2, rs1, WORD)) (Z.sub _reclimit 1) (_limit_reduces _acc))
        : M (Retired)
    | UTYPE (imm, rd, op) => (execute_UTYPE imm rd op)  : M (Retired)
    | RISCV_JAL (imm, rd) => (execute_RISCV_JAL imm rd)  : M (Retired)
    | BTYPE (imm, rs2, rs1, op) => (execute_BTYPE imm rs2 rs1 op)  : M (Retired)
    | ITYPE (imm, rs1, rd, op) => (execute_ITYPE imm rs1 rd op)  : M (Retired)
    | SHIFTIOP (shamt, rs1, rd, op) => (execute_SHIFTIOP shamt rs1 rd op)  : M (Retired)
    | RTYPE (rs2, rs1, rd, op) => (execute_RTYPE rs2 rs1 rd op)  : M (Retired)
    | LOAD (imm, rs1, rd, is_unsigned, width, aq, rl) =>
       (execute_LOAD imm rs1 rd is_unsigned width aq rl)  : M (Retired)
    | STORE (imm, rs2, rs1, width, aq, rl) => (execute_STORE imm rs2 rs1 width aq rl)  : M (Retired)
    | ADDIW (imm, rs1, rd) => (execute_ADDIW imm rs1 rd)  : M (Retired)
    | SHIFTW (shamt, rs1, rd, op) => (execute_SHIFTW shamt rs1 rd op)  : M (Retired)
    | RTYPEW (rs2, rs1, rd, op) => (execute_RTYPEW rs2 rs1 rd op)  : M (Retired)
    | SHIFTIWOP (shamt, rs1, rd, op) => (execute_SHIFTIWOP shamt rs1 rd op)  : M (Retired)
    | FENCE (pred, succ) => (execute_FENCE pred succ)  : M (Retired)
    | FENCE_TSO (pred, succ) => (execute_FENCE_TSO pred succ)  : M (Retired)
    | FENCEI arg0 => returnm (execute_FENCEI arg0)
    | ECALL arg0 => (execute_ECALL arg0)  : M (Retired)
    | MRET arg0 => (execute_MRET arg0)  : M (Retired)
    | SRET arg0 => (execute_SRET arg0)  : M (Retired)
    | EBREAK arg0 => (execute_EBREAK arg0)  : M (Retired)
    | WFI arg0 => (execute_WFI arg0)  : M (Retired)
    | SFENCE_VMA (rs1, rs2) => (execute_SFENCE_VMA rs1 rs2)  : M (Retired)
    | LOADRES (aq, rl, rs1, width, rd) => (execute_LOADRES aq rl rs1 width rd)  : M (Retired)
    | STORECON (aq, rl, rs2, rs1, width, rd) =>
       (execute_STORECON aq rl rs2 rs1 width rd)  : M (Retired)
    | AMO (op, aq, rl, rs2, rs1, width, rd) =>
       (execute_AMO op aq rl rs2 rs1 width rd)  : M (Retired)
    | C_NOP arg0 => returnm (execute_C_NOP arg0)
    | MUL (rs2, rs1, rd, high, signed1, signed2) =>
       (execute_MUL rs2 rs1 rd high signed1 signed2)  : M (Retired)
    | DIV (rs2, rs1, rd, s) => (execute_DIV rs2 rs1 rd s)  : M (Retired)
    | REM (rs2, rs1, rd, s) => (execute_REM rs2 rs1 rd s)  : M (Retired)
    | MULW (rs2, rs1, rd) => (execute_MULW rs2 rs1 rd)  : M (Retired)
    | DIVW (rs2, rs1, rd, s) => (execute_DIVW rs2 rs1 rd s)  : M (Retired)
    | REMW (rs2, rs1, rd, s) => (execute_REMW rs2 rs1 rd s)  : M (Retired)
    | CSR (csr, rs1, rd, is_imm, op) => (execute_CSR csr rs1 rd is_imm op)  : M (Retired)
    | URET arg0 => (execute_URET arg0)  : M (Retired)
    | LOAD_FP (imm, rs1, rd, width) => (execute_LOAD_FP imm rs1 rd width)  : M (Retired)
    | STORE_FP (imm, rs2, rs1, width) => (execute_STORE_FP imm rs2 rs1 width)  : M (Retired)
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, op) =>
       (execute_F_MADD_TYPE_S rs3 rs2 rs1 rm rd op)  : M (Retired)
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, op) =>
       (execute_F_BIN_RM_TYPE_S rs2 rs1 rm rd op)  : M (Retired)
    | F_UN_RM_TYPE_S (rs1, rm, rd, arg3) => (execute_F_UN_RM_TYPE_S rs1 rm rd arg3)  : M (Retired)
    | F_BIN_TYPE_S (rs2, rs1, rd, arg3) => (execute_F_BIN_TYPE_S rs2 rs1 rd arg3)  : M (Retired)
    | F_UN_TYPE_S (rs1, rd, arg2) => (execute_F_UN_TYPE_S rs1 rd arg2)  : M (Retired)
    | RISCV_JALR (imm, rs1, rd) => (execute_RISCV_JALR imm rs1 rd)  : M (Retired)
    | ILLEGAL s => (execute_ILLEGAL s)  : M (Retired)
    | C_ILLEGAL s => (execute_C_ILLEGAL s)  : M (Retired)
    end)
    : M (Retired)
).
Defined.


Definition execute (i : ast) : M (Retired) :=
   (_rec_execute i ((compressed_measure i)  : Z) (Zwf_guarded _))  : M (Retired).

Definition assembly_forwards (arg_ : ast) : M (string) :=
   (match arg_ with
    | UTYPE (imm, rd, op) =>
       (reg_name_forwards rd) >>= fun w__0 : string =>
       returnm (string_append (utype_mnemonic_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__0
                        (string_append (sep_forwards tt)
                           (string_append (decimal_string_of_bits imm) "")))))
    | RISCV_JAL (imm, rd) =>
       (reg_name_forwards rd) >>= fun w__1 : string =>
       returnm (string_append "jal"
                  (string_append (spc_forwards tt)
                     (string_append w__1
                        (string_append (sep_forwards tt)
                           (string_append (decimal_string_of_bits imm) "")))))
    | RISCV_JALR (imm, rs1, rd) =>
       (reg_name_forwards rd) >>= fun w__2 : string =>
       (reg_name_forwards rs1) >>= fun w__3 : string =>
       returnm (string_append "jalr"
                  (string_append (spc_forwards tt)
                     (string_append w__2
                        (string_append (sep_forwards tt)
                           (string_append w__3
                              (string_append (sep_forwards tt)
                                 (string_append (decimal_string_of_bits imm) "")))))))
    | BTYPE (imm, rs2, rs1, op) =>
       (reg_name_forwards rs1) >>= fun w__4 : string =>
       (reg_name_forwards rs2) >>= fun w__5 : string =>
       returnm (string_append (btype_mnemonic_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__4
                        (string_append (sep_forwards tt)
                           (string_append w__5
                              (string_append (sep_forwards tt)
                                 (string_append (decimal_string_of_bits imm) "")))))))
    | ITYPE (imm, rs1, rd, op) =>
       (reg_name_forwards rd) >>= fun w__6 : string =>
       (reg_name_forwards rs1) >>= fun w__7 : string =>
       returnm (string_append (itype_mnemonic_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__6
                        (string_append (sep_forwards tt)
                           (string_append w__7
                              (string_append (sep_forwards tt)
                                 (string_append (decimal_string_of_bits imm) "")))))))
    | SHIFTIOP (shamt, rs1, rd, op) =>
       (reg_name_forwards rd) >>= fun w__8 : string =>
       (reg_name_forwards rs1) >>= fun w__9 : string =>
       returnm (string_append (shiftiop_mnemonic_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__8
                        (string_append (sep_forwards tt)
                           (string_append w__9
                              (string_append (sep_forwards tt)
                                 (string_append (decimal_string_of_bits shamt) "")))))))
    | RTYPE (rs2, rs1, rd, op) =>
       (reg_name_forwards rd) >>= fun w__10 : string =>
       (reg_name_forwards rs1) >>= fun w__11 : string =>
       (reg_name_forwards rs2) >>= fun w__12 : string =>
       returnm (string_append (rtype_mnemonic_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__10
                        (string_append (sep_forwards tt)
                           (string_append w__11
                              (string_append (sep_forwards tt) (string_append w__12 "")))))))
    | LOAD (imm, rs1, rd, is_unsigned, size, aq, rl) =>
       (reg_name_forwards rd) >>= fun w__13 : string =>
       (reg_name_forwards rs1) >>= fun w__14 : string =>
       returnm (string_append "l"
                  (string_append (size_mnemonic_forwards size)
                     (string_append (maybe_u_forwards is_unsigned)
                        (string_append (maybe_aq_forwards aq)
                           (string_append (maybe_rl_forwards rl)
                              (string_append (spc_forwards tt)
                                 (string_append w__13
                                    (string_append (sep_forwards tt)
                                       (string_append (decimal_string_of_bits imm)
                                          (string_append (opt_spc_forwards tt)
                                             (string_append "("
                                                (string_append (opt_spc_forwards tt)
                                                   (string_append w__14
                                                      (string_append (opt_spc_forwards tt)
                                                         (string_append ")" "")))))))))))))))
    | STORE (imm, rs2, rs1, size, aq, rl) =>
       (reg_name_forwards rs2) >>= fun w__15 : string =>
       (reg_name_forwards rs1) >>= fun w__16 : string =>
       returnm (string_append "s"
                  (string_append (size_mnemonic_forwards size)
                     (string_append (maybe_aq_forwards aq)
                        (string_append (maybe_rl_forwards rl)
                           (string_append (spc_forwards tt)
                              (string_append w__15
                                 (string_append (sep_forwards tt)
                                    (string_append (decimal_string_of_bits imm)
                                       (string_append (opt_spc_forwards tt)
                                          (string_append "("
                                             (string_append (opt_spc_forwards tt)
                                                (string_append w__16
                                                   (string_append (opt_spc_forwards tt)
                                                      (string_append ")" ""))))))))))))))
    | ADDIW (imm, rs1, rd) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__17 : string =>
          (reg_name_forwards rs1) >>= fun w__18 : string =>
          returnm (string_append "addiw"
                     (string_append (spc_forwards tt)
                        (string_append w__17
                           (string_append (sep_forwards tt)
                              (string_append w__18
                                 (string_append (sep_forwards tt)
                                    (string_append (decimal_string_of_bits imm) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | SHIFTW (shamt, rs1, rd, op) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__21 : string =>
          (reg_name_forwards rs1) >>= fun w__22 : string =>
          returnm (string_append (shiftw_mnemonic_forwards op)
                     (string_append (spc_forwards tt)
                        (string_append w__21
                           (string_append (sep_forwards tt)
                              (string_append w__22
                                 (string_append (sep_forwards tt)
                                    (string_append (decimal_string_of_bits shamt) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | RTYPEW (rs2, rs1, rd, op) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__25 : string =>
          (reg_name_forwards rs1) >>= fun w__26 : string =>
          (reg_name_forwards rs2) >>= fun w__27 : string =>
          returnm (string_append (rtypew_mnemonic_forwards op)
                     (string_append (spc_forwards tt)
                        (string_append w__25
                           (string_append (sep_forwards tt)
                              (string_append w__26
                                 (string_append (sep_forwards tt) (string_append w__27 "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | SHIFTIWOP (shamt, rs1, rd, op) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__30 : string =>
          (reg_name_forwards rs1) >>= fun w__31 : string =>
          returnm (string_append (shiftiwop_mnemonic_forwards op)
                     (string_append (spc_forwards tt)
                        (string_append w__30
                           (string_append (sep_forwards tt)
                              (string_append w__31
                                 (string_append (sep_forwards tt)
                                    (string_append (decimal_string_of_bits shamt) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | FENCE (pred, succ) =>
       (fence_bits_forwards pred) >>= fun w__34 : string =>
       (fence_bits_forwards succ) >>= fun w__35 : string =>
       returnm (string_append "fence"
                  (string_append (spc_forwards tt)
                     (string_append w__34 (string_append (sep_forwards tt) (string_append w__35 "")))))
    | FENCE_TSO (pred, succ) =>
       (fence_bits_forwards pred) >>= fun w__36 : string =>
       (fence_bits_forwards succ) >>= fun w__37 : string =>
       returnm (string_append "fence.tso"
                  (string_append (spc_forwards tt)
                     (string_append w__36 (string_append (sep_forwards tt) (string_append w__37 "")))))
    | FENCEI tt => returnm "fence.i"
    | ECALL tt => returnm "ecall"
    | MRET tt => returnm "mret"
    | SRET tt => returnm "sret"
    | EBREAK tt => returnm "ebreak"
    | WFI tt => returnm "wfi"
    | SFENCE_VMA (rs1, rs2) =>
       (reg_name_forwards rs1) >>= fun w__38 : string =>
       (reg_name_forwards rs2) >>= fun w__39 : string =>
       returnm (string_append "sfence.vma"
                  (string_append (spc_forwards tt)
                     (string_append w__38 (string_append (sep_forwards tt) (string_append w__39 "")))))
    | LOADRES (aq, rl, rs1, size, rd) =>
       (reg_name_forwards rd) >>= fun w__40 : string =>
       (reg_name_forwards rs1) >>= fun w__41 : string =>
       returnm (string_append "lr."
                  (string_append (size_mnemonic_forwards size)
                     (string_append (maybe_aq_forwards aq)
                        (string_append (maybe_rl_forwards rl)
                           (string_append (spc_forwards tt)
                              (string_append w__40
                                 (string_append (sep_forwards tt) (string_append w__41 ""))))))))
    | STORECON (aq, rl, rs2, rs1, size, rd) =>
       (reg_name_forwards rd) >>= fun w__42 : string =>
       (reg_name_forwards rs1) >>= fun w__43 : string =>
       (reg_name_forwards rs2) >>= fun w__44 : string =>
       returnm (string_append "sc."
                  (string_append (size_mnemonic_forwards size)
                     (string_append (maybe_aq_forwards aq)
                        (string_append (maybe_rl_forwards rl)
                           (string_append (spc_forwards tt)
                              (string_append w__42
                                 (string_append (sep_forwards tt)
                                    (string_append w__43
                                       (string_append (sep_forwards tt) (string_append w__44 ""))))))))))
    | AMO (op, aq, rl, rs2, rs1, width, rd) =>
       (reg_name_forwards rd) >>= fun w__45 : string =>
       (reg_name_forwards rs2) >>= fun w__46 : string =>
       (reg_name_forwards rs1) >>= fun w__47 : string =>
       returnm (string_append (amo_mnemonic_forwards op)
                  (string_append "."
                     (string_append (size_mnemonic_forwards width)
                        (string_append (maybe_aq_forwards aq)
                           (string_append (maybe_rl_forwards rl)
                              (string_append (spc_forwards tt)
                                 (string_append w__45
                                    (string_append (sep_forwards tt)
                                       (string_append w__46
                                          (string_append (sep_forwards tt)
                                             (string_append "("
                                                (string_append w__47 (string_append ")" "")))))))))))))
    | C_NOP tt => returnm "c.nop"
    | C_ADDI4SPN (rdc, nzimm) =>
       (if neq_vec nzimm (Ox"00"  : mword 8) then
          (creg_name_forwards rdc) >>= fun w__48 : string =>
          returnm (string_append "c.addi4spn"
                     (string_append (spc_forwards tt)
                        (string_append w__48
                           (string_append (sep_forwards tt)
                              (string_append
                                 (decimal_string_of_bits
                                    (concat_vec (nzimm  : mword 8) ('b"00"  : mword 2))) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_LW (uimm, rsc, rdc) =>
       (creg_name_forwards rdc) >>= fun w__51 : string =>
       (creg_name_forwards rsc) >>= fun w__52 : string =>
       returnm (string_append "c.lw"
                  (string_append (spc_forwards tt)
                     (string_append w__51
                        (string_append (sep_forwards tt)
                           (string_append w__52
                              (string_append (sep_forwards tt)
                                 (string_append
                                    (decimal_string_of_bits
                                       (concat_vec (uimm  : mword 5) ('b"00"  : mword 2))) "")))))))
    | C_LD (uimm, rsc, rdc) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (creg_name_forwards rdc) >>= fun w__53 : string =>
          (creg_name_forwards rsc) >>= fun w__54 : string =>
          returnm (string_append "c.ld"
                     (string_append (spc_forwards tt)
                        (string_append w__53
                           (string_append (sep_forwards tt)
                              (string_append w__54
                                 (string_append (sep_forwards tt)
                                    (string_append
                                       (decimal_string_of_bits
                                          (concat_vec (uimm  : mword 5) ('b"000"  : mword 3))) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_SW (uimm, rsc1, rsc2) =>
       (creg_name_forwards rsc1) >>= fun w__57 : string =>
       (creg_name_forwards rsc2) >>= fun w__58 : string =>
       returnm (string_append "c.sw"
                  (string_append (spc_forwards tt)
                     (string_append w__57
                        (string_append (sep_forwards tt)
                           (string_append w__58
                              (string_append (sep_forwards tt)
                                 (string_append
                                    (decimal_string_of_bits
                                       (concat_vec (uimm  : mword 5) ('b"00"  : mword 2))) "")))))))
    | C_SD (uimm, rsc1, rsc2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (creg_name_forwards rsc1) >>= fun w__59 : string =>
          (creg_name_forwards rsc2) >>= fun w__60 : string =>
          returnm (string_append "c.sd"
                     (string_append (spc_forwards tt)
                        (string_append w__59
                           (string_append (sep_forwards tt)
                              (string_append w__60
                                 (string_append (sep_forwards tt)
                                    (string_append
                                       (decimal_string_of_bits
                                          (concat_vec (uimm  : mword 5) ('b"000"  : mword 3))) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_ADDI (nzi, rsd) =>
       (if andb (neq_vec nzi ('b"000000"  : mword 6)) (neq_vec rsd zreg) then
          (reg_name_forwards rsd) >>= fun w__63 : string =>
          returnm (string_append "c.addi"
                     (string_append (spc_forwards tt)
                        (string_append w__63
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits nzi) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_JAL imm =>
       (if sumbool_of_bool (Z.eqb 32 32) then
          returnm (string_append "c.jal"
                     (string_append (spc_forwards tt)
                        (string_append
                           (decimal_string_of_bits (concat_vec (imm  : mword 11) ('b"0"  : mword 1)))
                           "")))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_ADDIW (imm, rsd) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rsd) >>= fun w__68 : string =>
          returnm (string_append "c.addiw"
                     (string_append (spc_forwards tt)
                        (string_append w__68
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits imm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_LI (imm, rd) =>
       (if neq_vec rd zreg then
          (reg_name_forwards rd) >>= fun w__71 : string =>
          returnm (string_append "c.li"
                     (string_append (spc_forwards tt)
                        (string_append w__71
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits imm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_ADDI16SP imm =>
       (if neq_vec imm ('b"000000"  : mword 6) then
          returnm (string_append "c.addi16sp"
                     (string_append (spc_forwards tt)
                        (string_append (decimal_string_of_bits imm) "")))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_LUI (imm, rd) =>
       (if andb (neq_vec rd zreg) (andb (neq_vec rd sp) (neq_vec imm ('b"000000"  : mword 6))) then
          (reg_name_forwards rd) >>= fun w__76 : string =>
          returnm (string_append "c.lui"
                     (string_append (spc_forwards tt)
                        (string_append w__76
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits imm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_SRLI (shamt, rsd) =>
       (if neq_vec shamt ('b"000000"  : mword 6) then
          (creg_name_forwards rsd) >>= fun w__79 : string =>
          returnm (string_append "c.srli"
                     (string_append (spc_forwards tt)
                        (string_append w__79
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits shamt) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_SRAI (shamt, rsd) =>
       (if neq_vec shamt ('b"000000"  : mword 6) then
          (creg_name_forwards rsd) >>= fun w__82 : string =>
          returnm (string_append "c.srai"
                     (string_append (spc_forwards tt)
                        (string_append w__82
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits shamt) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_ANDI (imm, rsd) =>
       (creg_name_forwards rsd) >>= fun w__85 : string =>
       returnm (string_append "c.andi"
                  (string_append (spc_forwards tt)
                     (string_append w__85
                        (string_append (sep_forwards tt)
                           (string_append (decimal_string_of_bits imm) "")))))
    | C_SUB (rsd, rs2) =>
       (creg_name_forwards rsd) >>= fun w__86 : string =>
       (creg_name_forwards rs2) >>= fun w__87 : string =>
       returnm (string_append "c.sub"
                  (string_append (spc_forwards tt)
                     (string_append w__86 (string_append (sep_forwards tt) (string_append w__87 "")))))
    | C_XOR (rsd, rs2) =>
       (creg_name_forwards rsd) >>= fun w__88 : string =>
       (creg_name_forwards rs2) >>= fun w__89 : string =>
       returnm (string_append "c.xor"
                  (string_append (spc_forwards tt)
                     (string_append w__88 (string_append (sep_forwards tt) (string_append w__89 "")))))
    | C_OR (rsd, rs2) =>
       (creg_name_forwards rsd) >>= fun w__90 : string =>
       (creg_name_forwards rs2) >>= fun w__91 : string =>
       returnm (string_append "c.or"
                  (string_append (spc_forwards tt)
                     (string_append w__90 (string_append (sep_forwards tt) (string_append w__91 "")))))
    | C_AND (rsd, rs2) =>
       (creg_name_forwards rsd) >>= fun w__92 : string =>
       (creg_name_forwards rs2) >>= fun w__93 : string =>
       returnm (string_append "c.and"
                  (string_append (spc_forwards tt)
                     (string_append w__92 (string_append (sep_forwards tt) (string_append w__93 "")))))
    | C_SUBW (rsd, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (creg_name_forwards rsd) >>= fun w__94 : string =>
          (creg_name_forwards rs2) >>= fun w__95 : string =>
          returnm (string_append "c.subw"
                     (string_append (spc_forwards tt)
                        (string_append w__94
                           (string_append (sep_forwards tt) (string_append w__95 "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_ADDW (rsd, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (creg_name_forwards rsd) >>= fun w__98 : string =>
          (creg_name_forwards rs2) >>= fun w__99 : string =>
          returnm (string_append "c.addw"
                     (string_append (spc_forwards tt)
                        (string_append w__98
                           (string_append (sep_forwards tt) (string_append w__99 "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_J imm =>
       returnm (string_append "c.j"
                  (string_append (spc_forwards tt) (string_append (decimal_string_of_bits imm) "")))
    | C_BEQZ (imm, rs) =>
       (creg_name_forwards rs) >>= fun w__102 : string =>
       returnm (string_append "c.beqz"
                  (string_append (spc_forwards tt)
                     (string_append w__102
                        (string_append (sep_forwards tt)
                           (string_append (decimal_string_of_bits imm) "")))))
    | C_BNEZ (imm, rs) =>
       (creg_name_forwards rs) >>= fun w__103 : string =>
       returnm (string_append "c.bnez"
                  (string_append (spc_forwards tt)
                     (string_append w__103
                        (string_append (sep_forwards tt)
                           (string_append (decimal_string_of_bits imm) "")))))
    | C_SLLI (shamt, rsd) =>
       (if andb (neq_vec shamt ('b"000000"  : mword 6)) (neq_vec rsd zreg) then
          (reg_name_forwards rsd) >>= fun w__104 : string =>
          returnm (string_append "c.slli"
                     (string_append (spc_forwards tt)
                        (string_append w__104
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits shamt) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_LWSP (uimm, rd) =>
       (if neq_vec rd zreg then
          (reg_name_forwards rd) >>= fun w__107 : string =>
          returnm (string_append "c.lwsp"
                     (string_append (spc_forwards tt)
                        (string_append w__107
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits uimm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_LDSP (uimm, rd) =>
       (if sumbool_of_bool (andb (neq_vec rd zreg) (Z.eqb 32 64)) then
          (reg_name_forwards rd) >>= fun w__110 : string =>
          returnm (string_append "c.ldsp"
                     (string_append (spc_forwards tt)
                        (string_append w__110
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits uimm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_SWSP (uimm, rd) =>
       (reg_name_forwards rd) >>= fun w__113 : string =>
       returnm (string_append "c.swsp"
                  (string_append (spc_forwards tt)
                     (string_append w__113
                        (string_append (sep_forwards tt)
                           (string_append (decimal_string_of_bits uimm) "")))))
    | C_SDSP (uimm, rs2) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rs2) >>= fun w__114 : string =>
          returnm (string_append "c.sdsp"
                     (string_append (spc_forwards tt)
                        (string_append w__114
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits uimm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_JR rs1 =>
       (if neq_vec rs1 zreg then
          (reg_name_forwards rs1) >>= fun w__117 : string =>
          returnm (string_append "c.jr" (string_append (spc_forwards tt) (string_append w__117 "")))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_JALR rs1 =>
       (if neq_vec rs1 zreg then
          (reg_name_forwards rs1) >>= fun w__120 : string =>
          returnm (string_append "c.jalr"
                     (string_append (spc_forwards tt) (string_append w__120 "")))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_MV (rd, rs2) =>
       (if andb (neq_vec rd zreg) (neq_vec rs2 zreg) then
          (reg_name_forwards rd) >>= fun w__123 : string =>
          (reg_name_forwards rs2) >>= fun w__124 : string =>
          returnm (string_append "c.mv"
                     (string_append (spc_forwards tt)
                        (string_append w__123
                           (string_append (sep_forwards tt) (string_append w__124 "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_EBREAK tt => returnm "c.ebreak"
    | C_ADD (rsd, rs2) =>
       (if andb (neq_vec rsd zreg) (neq_vec rs2 zreg) then
          (reg_name_forwards rsd) >>= fun w__127 : string =>
          (reg_name_forwards rs2) >>= fun w__128 : string =>
          returnm (string_append "c.add"
                     (string_append (spc_forwards tt)
                        (string_append w__127
                           (string_append (sep_forwards tt) (string_append w__128 "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | MUL (rs2, rs1, rd, high, signed1, signed2) =>
       (mul_mnemonic_forwards (high, signed1, signed2)) >>= fun w__131 : string =>
       (reg_name_forwards rd) >>= fun w__132 : string =>
       (reg_name_forwards rs1) >>= fun w__133 : string =>
       (reg_name_forwards rs2) >>= fun w__134 : string =>
       returnm (string_append w__131
                  (string_append (spc_forwards tt)
                     (string_append w__132
                        (string_append (sep_forwards tt)
                           (string_append w__133
                              (string_append (sep_forwards tt) (string_append w__134 "")))))))
    | DIV (rs2, rs1, rd, s) =>
       (reg_name_forwards rd) >>= fun w__135 : string =>
       (reg_name_forwards rs1) >>= fun w__136 : string =>
       (reg_name_forwards rs2) >>= fun w__137 : string =>
       returnm (string_append "div"
                  (string_append (maybe_not_u_forwards s)
                     (string_append (spc_forwards tt)
                        (string_append w__135
                           (string_append (sep_forwards tt)
                              (string_append w__136
                                 (string_append (sep_forwards tt) (string_append w__137 ""))))))))
    | REM (rs2, rs1, rd, s) =>
       (reg_name_forwards rd) >>= fun w__138 : string =>
       (reg_name_forwards rs1) >>= fun w__139 : string =>
       (reg_name_forwards rs2) >>= fun w__140 : string =>
       returnm (string_append "rem"
                  (string_append (maybe_not_u_forwards s)
                     (string_append (spc_forwards tt)
                        (string_append w__138
                           (string_append (sep_forwards tt)
                              (string_append w__139
                                 (string_append (sep_forwards tt) (string_append w__140 ""))))))))
    | MULW (rs2, rs1, rd) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__141 : string =>
          (reg_name_forwards rs1) >>= fun w__142 : string =>
          (reg_name_forwards rs2) >>= fun w__143 : string =>
          returnm (string_append "mulw"
                     (string_append (spc_forwards tt)
                        (string_append w__141
                           (string_append (sep_forwards tt)
                              (string_append w__142
                                 (string_append (sep_forwards tt) (string_append w__143 "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | DIVW (rs2, rs1, rd, s) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__146 : string =>
          (reg_name_forwards rs1) >>= fun w__147 : string =>
          (reg_name_forwards rs2) >>= fun w__148 : string =>
          returnm (string_append "div"
                     (string_append (maybe_not_u_forwards s)
                        (string_append "w"
                           (string_append (spc_forwards tt)
                              (string_append w__146
                                 (string_append (sep_forwards tt)
                                    (string_append w__147
                                       (string_append (sep_forwards tt) (string_append w__148 "")))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | REMW (rs2, rs1, rd, s) =>
       (if sumbool_of_bool (Z.eqb 32 64) then
          (reg_name_forwards rd) >>= fun w__151 : string =>
          (reg_name_forwards rs1) >>= fun w__152 : string =>
          (reg_name_forwards rs2) >>= fun w__153 : string =>
          returnm (string_append "rem"
                     (string_append (maybe_not_u_forwards s)
                        (string_append "w"
                           (string_append (spc_forwards tt)
                              (string_append w__151
                                 (string_append (sep_forwards tt)
                                    (string_append w__152
                                       (string_append (sep_forwards tt) (string_append w__153 "")))))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | CSR (csr, rs1, rd, true, op) =>
       (reg_name_forwards rd) >>= fun w__156 : string =>
       returnm (string_append (csr_mnemonic_forwards op)
                  (string_append "i"
                     (string_append (spc_forwards tt)
                        (string_append w__156
                           (string_append (sep_forwards tt)
                              (string_append (csr_name_map_forwards csr)
                                 (string_append (sep_forwards tt)
                                    (string_append (decimal_string_of_bits rs1) ""))))))))
    | CSR (csr, rs1, rd, false, op) =>
       (reg_name_forwards rd) >>= fun w__157 : string =>
       (reg_name_forwards rs1) >>= fun w__158 : string =>
       returnm (string_append (csr_mnemonic_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__157
                        (string_append (sep_forwards tt)
                           (string_append (csr_name_map_forwards csr)
                              (string_append (sep_forwards tt) (string_append w__158 "")))))))
    | URET tt => returnm "uret"
    | LOAD_FP (imm, rs1, rd, width) =>
       (freg_name_forwards rd) >>= fun w__159 : string =>
       (reg_name_forwards rs1) >>= fun w__160 : string =>
       returnm (string_append "fl"
                  (string_append (size_mnemonic_forwards width)
                     (string_append (spc_forwards tt)
                        (string_append w__159
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits imm)
                                 (string_append (opt_spc_forwards tt)
                                    (string_append "("
                                       (string_append (opt_spc_forwards tt)
                                          (string_append w__160
                                             (string_append (opt_spc_forwards tt)
                                                (string_append ")" ""))))))))))))
    | STORE_FP (imm, rs2, rs1, width) =>
       (freg_name_forwards rs2) >>= fun w__161 : string =>
       (reg_name_forwards rs1) >>= fun w__162 : string =>
       returnm (string_append "fs"
                  (string_append (size_mnemonic_forwards width)
                     (string_append (spc_forwards tt)
                        (string_append w__161
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits imm)
                                 (string_append (opt_spc_forwards tt)
                                    (string_append "("
                                       (string_append (opt_spc_forwards tt)
                                          (string_append w__162
                                             (string_append (opt_spc_forwards tt)
                                                (string_append ")" ""))))))))))))
    | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, op) =>
       (freg_name_forwards rd) >>= fun w__163 : string =>
       (freg_name_forwards rs1) >>= fun w__164 : string =>
       (freg_name_forwards rs2) >>= fun w__165 : string =>
       (freg_name_forwards rs3) >>= fun w__166 : string =>
       returnm (string_append (f_madd_type_mnemonic_S_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__163
                        (string_append (sep_forwards tt)
                           (string_append w__164
                              (string_append (sep_forwards tt)
                                 (string_append w__165
                                    (string_append (sep_forwards tt)
                                       (string_append w__166
                                          (string_append (sep_forwards tt)
                                             (string_append (frm_mnemonic_forwards rm) "")))))))))))
    | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, op) =>
       (freg_name_forwards rd) >>= fun w__167 : string =>
       (freg_name_forwards rs1) >>= fun w__168 : string =>
       (freg_name_forwards rs2) >>= fun w__169 : string =>
       returnm (string_append (f_bin_rm_type_mnemonic_S_forwards op)
                  (string_append (spc_forwards tt)
                     (string_append w__167
                        (string_append (sep_forwards tt)
                           (string_append w__168
                              (string_append (sep_forwards tt)
                                 (string_append w__169
                                    (string_append (sep_forwards tt)
                                       (string_append (frm_mnemonic_forwards rm) "")))))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S) =>
       (freg_name_forwards rd) >>= fun w__170 : string =>
       (freg_name_forwards rs1) >>= fun w__171 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FSQRT_S)
                  (string_append (spc_forwards tt)
                     (string_append w__170
                        (string_append (sep_forwards tt)
                           (string_append w__171
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S) =>
       (reg_name_forwards rd) >>= fun w__172 : string =>
       (freg_name_forwards rs1) >>= fun w__173 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_W_S)
                  (string_append (spc_forwards tt)
                     (string_append w__172
                        (string_append (sep_forwards tt)
                           (string_append w__173
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S) =>
       (reg_name_forwards rd) >>= fun w__174 : string =>
       (freg_name_forwards rs1) >>= fun w__175 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_WU_S)
                  (string_append (spc_forwards tt)
                     (string_append w__174
                        (string_append (sep_forwards tt)
                           (string_append w__175
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W) =>
       (freg_name_forwards rd) >>= fun w__176 : string =>
       (reg_name_forwards rs1) >>= fun w__177 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_S_W)
                  (string_append (spc_forwards tt)
                     (string_append w__176
                        (string_append (sep_forwards tt)
                           (string_append w__177
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_WU) =>
       (freg_name_forwards rd) >>= fun w__178 : string =>
       (reg_name_forwards rs1) >>= fun w__179 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_S_WU)
                  (string_append (spc_forwards tt)
                     (string_append w__178
                        (string_append (sep_forwards tt)
                           (string_append w__179
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_L_S) =>
       (reg_name_forwards rd) >>= fun w__180 : string =>
       (freg_name_forwards rs1) >>= fun w__181 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_L_S)
                  (string_append (spc_forwards tt)
                     (string_append w__180
                        (string_append (sep_forwards tt)
                           (string_append w__181
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_LU_S) =>
       (reg_name_forwards rd) >>= fun w__182 : string =>
       (freg_name_forwards rs1) >>= fun w__183 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_LU_S)
                  (string_append (spc_forwards tt)
                     (string_append w__182
                        (string_append (sep_forwards tt)
                           (string_append w__183
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_L) =>
       (freg_name_forwards rd) >>= fun w__184 : string =>
       (reg_name_forwards rs1) >>= fun w__185 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_S_L)
                  (string_append (spc_forwards tt)
                     (string_append w__184
                        (string_append (sep_forwards tt)
                           (string_append w__185
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_LU) =>
       (freg_name_forwards rd) >>= fun w__186 : string =>
       (reg_name_forwards rs1) >>= fun w__187 : string =>
       returnm (string_append (f_un_rm_type_mnemonic_S_forwards FCVT_S_LU)
                  (string_append (spc_forwards tt)
                     (string_append w__186
                        (string_append (sep_forwards tt)
                           (string_append w__187
                              (string_append (sep_forwards tt)
                                 (string_append (frm_mnemonic_forwards rm) "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJ_S) =>
       (freg_name_forwards rd) >>= fun w__188 : string =>
       (freg_name_forwards rs1) >>= fun w__189 : string =>
       (freg_name_forwards rs2) >>= fun w__190 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FSGNJ_S)
                  (string_append (spc_forwards tt)
                     (string_append w__188
                        (string_append (sep_forwards tt)
                           (string_append w__189
                              (string_append (sep_forwards tt) (string_append w__190 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJN_S) =>
       (freg_name_forwards rd) >>= fun w__191 : string =>
       (freg_name_forwards rs1) >>= fun w__192 : string =>
       (freg_name_forwards rs2) >>= fun w__193 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FSGNJN_S)
                  (string_append (spc_forwards tt)
                     (string_append w__191
                        (string_append (sep_forwards tt)
                           (string_append w__192
                              (string_append (sep_forwards tt) (string_append w__193 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJX_S) =>
       (freg_name_forwards rd) >>= fun w__194 : string =>
       (freg_name_forwards rs1) >>= fun w__195 : string =>
       (freg_name_forwards rs2) >>= fun w__196 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FSGNJX_S)
                  (string_append (spc_forwards tt)
                     (string_append w__194
                        (string_append (sep_forwards tt)
                           (string_append w__195
                              (string_append (sep_forwards tt) (string_append w__196 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FMIN_S) =>
       (freg_name_forwards rd) >>= fun w__197 : string =>
       (freg_name_forwards rs1) >>= fun w__198 : string =>
       (freg_name_forwards rs2) >>= fun w__199 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FMIN_S)
                  (string_append (spc_forwards tt)
                     (string_append w__197
                        (string_append (sep_forwards tt)
                           (string_append w__198
                              (string_append (sep_forwards tt) (string_append w__199 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FMAX_S) =>
       (freg_name_forwards rd) >>= fun w__200 : string =>
       (freg_name_forwards rs1) >>= fun w__201 : string =>
       (freg_name_forwards rs2) >>= fun w__202 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FMAX_S)
                  (string_append (spc_forwards tt)
                     (string_append w__200
                        (string_append (sep_forwards tt)
                           (string_append w__201
                              (string_append (sep_forwards tt) (string_append w__202 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FEQ_S) =>
       (reg_name_forwards rd) >>= fun w__203 : string =>
       (freg_name_forwards rs1) >>= fun w__204 : string =>
       (freg_name_forwards rs2) >>= fun w__205 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FEQ_S)
                  (string_append (spc_forwards tt)
                     (string_append w__203
                        (string_append (sep_forwards tt)
                           (string_append w__204
                              (string_append (sep_forwards tt) (string_append w__205 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FLT_S) =>
       (reg_name_forwards rd) >>= fun w__206 : string =>
       (freg_name_forwards rs1) >>= fun w__207 : string =>
       (freg_name_forwards rs2) >>= fun w__208 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FLT_S)
                  (string_append (spc_forwards tt)
                     (string_append w__206
                        (string_append (sep_forwards tt)
                           (string_append w__207
                              (string_append (sep_forwards tt) (string_append w__208 "")))))))
    | F_BIN_TYPE_S (rs2, rs1, rd, FLE_S) =>
       (reg_name_forwards rd) >>= fun w__209 : string =>
       (freg_name_forwards rs1) >>= fun w__210 : string =>
       (freg_name_forwards rs2) >>= fun w__211 : string =>
       returnm (string_append (f_bin_type_mnemonic_S_forwards FLE_S)
                  (string_append (spc_forwards tt)
                     (string_append w__209
                        (string_append (sep_forwards tt)
                           (string_append w__210
                              (string_append (sep_forwards tt) (string_append w__211 "")))))))
    | F_UN_TYPE_S (rs1, rd, FMV_X_W) =>
       (reg_name_forwards rd) >>= fun w__212 : string =>
       (freg_name_forwards rs1) >>= fun w__213 : string =>
       returnm (string_append (f_un_type_mnemonic_S_forwards FMV_X_W)
                  (string_append (spc_forwards tt)
                     (string_append w__212
                        (string_append (sep_forwards tt) (string_append w__213 "")))))
    | F_UN_TYPE_S (rs1, rd, FMV_W_X) =>
       (freg_name_forwards rd) >>= fun w__214 : string =>
       (reg_name_forwards rs1) >>= fun w__215 : string =>
       returnm (string_append (f_un_type_mnemonic_S_forwards FMV_W_X)
                  (string_append (spc_forwards tt)
                     (string_append w__214
                        (string_append (sep_forwards tt) (string_append w__215 "")))))
    | F_UN_TYPE_S (rs1, rd, FCLASS_S) =>
       (reg_name_forwards rd) >>= fun w__216 : string =>
       (freg_name_forwards rs1) >>= fun w__217 : string =>
       returnm (string_append (f_un_type_mnemonic_S_forwards FCLASS_S)
                  (string_append (spc_forwards tt)
                     (string_append w__216
                        (string_append (sep_forwards tt) (string_append w__217 "")))))
    | C_FLWSP (imm, rd) =>
       (if sumbool_of_bool (Z.eqb 32 32) then
          (reg_name_forwards rd) >>= fun w__218 : string =>
          returnm (string_append "c.flwsp"
                     (string_append (spc_forwards tt)
                        (string_append w__218
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits imm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_FSWSP (uimm, rd) =>
       (if sumbool_of_bool (Z.eqb 32 32) then
          (reg_name_forwards rd) >>= fun w__221 : string =>
          returnm (string_append "c.fswsp"
                     (string_append (spc_forwards tt)
                        (string_append w__221
                           (string_append (sep_forwards tt)
                              (string_append (decimal_string_of_bits uimm) "")))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_FLW (uimm, rsc, rdc) =>
       (if sumbool_of_bool (Z.eqb 32 32) then
          (creg_name_forwards rdc) >>= fun w__224 : string =>
          (creg_name_forwards rsc) >>= fun w__225 : string =>
          returnm (string_append "c.flw"
                     (string_append (spc_forwards tt)
                        (string_append w__224
                           (string_append (sep_forwards tt)
                              (string_append w__225
                                 (string_append (sep_forwards tt)
                                    (string_append
                                       (decimal_string_of_bits
                                          (concat_vec (uimm  : mword 5) ('b"00"  : mword 2))) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | C_FSW (uimm, rsc1, rsc2) =>
       (if sumbool_of_bool (Z.eqb 32 32) then
          (creg_name_forwards rsc1) >>= fun w__228 : string =>
          (creg_name_forwards rsc2) >>= fun w__229 : string =>
          returnm (string_append "c.fsw"
                     (string_append (spc_forwards tt)
                        (string_append w__228
                           (string_append (sep_forwards tt)
                              (string_append w__229
                                 (string_append (sep_forwards tt)
                                    (string_append
                                       (decimal_string_of_bits
                                          (concat_vec (uimm  : mword 5) ('b"00"  : mword 2))) "")))))))
        else assert_exp' false "Pattern match failure at unknown location" >>= fun _ => exit tt)
        : M (string)
    | ILLEGAL s =>
       returnm (string_append "illegal"
                  (string_append (spc_forwards tt) (string_append (decimal_string_of_bits s) "")))
    | C_ILLEGAL s =>
       returnm (string_append "c.illegal"
                  (string_append (spc_forwards tt) (string_append (decimal_string_of_bits s) "")))
    end)
    : M (string).

Definition _s2554_ (_s2555_ : string) : M (option (mword 16)) :=
   let _s2556_ := _s2555_ in
   (if string_startswith _s2556_ "c.illegal" then
      (match (string_drop _s2556_ (projT1 (string_length "c.illegal"))) with
       | _s2557_ =>
          (spc_matches_prefix _s2557_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s2558_ _) =>
                      match (string_drop _s2557_ _s2558_) with
                      | _s2559_ =>
                         match (hex_bits_16_matches_prefix _s2559_) with
                         | Some (s, existT _ _s2560_ _) =>
                            let p0_ := string_drop _s2559_ _s2560_ in
                            if generic_eq p0_ "" then Some s
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 16))
    else returnm None)
    : M (option (mword 16)).

Definition _s2546_ (_s2547_ : string) : M (option (mword 32)) :=
   let _s2548_ := _s2547_ in
   (if string_startswith _s2548_ "illegal" then
      (match (string_drop _s2548_ (projT1 (string_length "illegal"))) with
       | _s2549_ =>
          (spc_matches_prefix _s2549_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s2550_ _) =>
                      match (string_drop _s2549_ _s2550_) with
                      | _s2551_ =>
                         match (hex_bits_32_matches_prefix _s2551_) with
                         | Some (s, existT _ _s2552_ _) =>
                            let p0_ := string_drop _s2551_ _s2552_ in
                            if generic_eq p0_ "" then Some s
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 32))
    else returnm None)
    : M (option (mword 32)).

Definition _s2530_ (_s2531_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s2532_ := _s2531_ in
   (if string_startswith _s2532_ "c.fsw" then
      (match (string_drop _s2532_ (projT1 (string_length "c.fsw"))) with
       | _s2533_ =>
          (spc_matches_prefix _s2533_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2534_ _) =>
              (match (string_drop _s2533_ _s2534_) with
               | _s2535_ =>
                  (creg_name_matches_prefix _s2535_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s2536_ _) =>
                      (match (string_drop _s2535_ _s2536_) with
                       | _s2537_ =>
                          (sep_matches_prefix _s2537_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2538_ _) =>
                              (match (string_drop _s2537_ _s2538_) with
                               | _s2539_ =>
                                  (creg_name_matches_prefix _s2539_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s2540_ _) =>
                                      (match (string_drop _s2539_ _s2540_) with
                                       | _s2541_ =>
                                          (sep_matches_prefix _s2541_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2542_ _) =>
                                                      match (string_drop _s2541_ _s2542_) with
                                                      | _s2543_ =>
                                                         match (hex_bits_7_matches_prefix _s2543_) with
                                                         | Some (v__1076, existT _ _s2544_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1076 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1076 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1076 6 2 in
                                                              let p0_ := string_drop _s2543_ _s2544_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rsc1, rsc2, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s2514_ (_s2515_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s2516_ := _s2515_ in
   (if string_startswith _s2516_ "c.flw" then
      (match (string_drop _s2516_ (projT1 (string_length "c.flw"))) with
       | _s2517_ =>
          (spc_matches_prefix _s2517_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2518_ _) =>
              (match (string_drop _s2517_ _s2518_) with
               | _s2519_ =>
                  (creg_name_matches_prefix _s2519_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s2520_ _) =>
                      (match (string_drop _s2519_ _s2520_) with
                       | _s2521_ =>
                          (sep_matches_prefix _s2521_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2522_ _) =>
                              (match (string_drop _s2521_ _s2522_) with
                               | _s2523_ =>
                                  (creg_name_matches_prefix _s2523_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s2524_ _) =>
                                      (match (string_drop _s2523_ _s2524_) with
                                       | _s2525_ =>
                                          (sep_matches_prefix _s2525_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2526_ _) =>
                                                      match (string_drop _s2525_ _s2526_) with
                                                      | _s2527_ =>
                                                         match (hex_bits_7_matches_prefix _s2527_) with
                                                         | Some (v__1078, existT _ _s2528_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1078 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1078 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1078 6 2 in
                                                              let p0_ := string_drop _s2527_ _s2528_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rdc, rsc, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s2502_ (_s2503_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s2504_ := _s2503_ in
   (if string_startswith _s2504_ "c.fswsp" then
      (match (string_drop _s2504_ (projT1 (string_length "c.fswsp"))) with
       | _s2505_ =>
          (spc_matches_prefix _s2505_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2506_ _) =>
              (match (string_drop _s2505_ _s2506_) with
               | _s2507_ =>
                  (reg_name_matches_prefix _s2507_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s2508_ _) =>
                      (match (string_drop _s2507_ _s2508_) with
                       | _s2509_ =>
                          (sep_matches_prefix _s2509_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s2510_ _) =>
                                      match (string_drop _s2509_ _s2510_) with
                                      | _s2511_ =>
                                         match (hex_bits_6_matches_prefix _s2511_) with
                                         | Some (uimm, existT _ _s2512_ _) =>
                                            let p0_ := string_drop _s2511_ _s2512_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s2490_ (_s2491_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s2492_ := _s2491_ in
   (if string_startswith _s2492_ "c.flwsp" then
      (match (string_drop _s2492_ (projT1 (string_length "c.flwsp"))) with
       | _s2493_ =>
          (spc_matches_prefix _s2493_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2494_ _) =>
              (match (string_drop _s2493_ _s2494_) with
               | _s2495_ =>
                  (reg_name_matches_prefix _s2495_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s2496_ _) =>
                      (match (string_drop _s2495_ _s2496_) with
                       | _s2497_ =>
                          (sep_matches_prefix _s2497_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s2498_ _) =>
                                      match (string_drop _s2497_ _s2498_) with
                                      | _s2499_ =>
                                         match (hex_bits_6_matches_prefix _s2499_) with
                                         | Some (imm, existT _ _s2500_ _) =>
                                            let p0_ := string_drop _s2499_ _s2500_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s2477_ (_s2478_ : string) : M (option ((f_un_op_S * mword 5 * mword 5))) :=
   (match _s2478_ with
    | _s2479_ =>
       (f_un_type_mnemonic_S_matches_prefix _s2479_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCLASS_S, existT _ _s2480_ _) =>
           (match (string_drop _s2479_ _s2480_) with
            | _s2481_ =>
               (spc_matches_prefix _s2481_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2482_ _) =>
                   (match (string_drop _s2481_ _s2482_) with
                    | _s2483_ =>
                       (reg_name_matches_prefix _s2483_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2484_ _) =>
                           (match (string_drop _s2483_ _s2484_) with
                            | _s2485_ =>
                               (sep_matches_prefix _s2485_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2486_ _) =>
                                   (match (string_drop _s2485_ _s2486_) with
                                    | _s2487_ =>
                                       (freg_name_matches_prefix _s2487_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s2488_ _) =>
                                                   let p0_ := string_drop _s2487_ _s2488_ in
                                                   if generic_eq p0_ "" then
                                                     Some (FCLASS_S, rd, rs1)
                                                   else None
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5))).

Definition _s2464_ (_s2465_ : string) : M (option ((f_un_op_S * mword 5 * mword 5))) :=
   (match _s2465_ with
    | _s2466_ =>
       (f_un_type_mnemonic_S_matches_prefix _s2466_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMV_W_X, existT _ _s2467_ _) =>
           (match (string_drop _s2466_ _s2467_) with
            | _s2468_ =>
               (spc_matches_prefix _s2468_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2469_ _) =>
                   (match (string_drop _s2468_ _s2469_) with
                    | _s2470_ =>
                       (freg_name_matches_prefix _s2470_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2471_ _) =>
                           (match (string_drop _s2470_ _s2471_) with
                            | _s2472_ =>
                               (sep_matches_prefix _s2472_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2473_ _) =>
                                   (match (string_drop _s2472_ _s2473_) with
                                    | _s2474_ =>
                                       (reg_name_matches_prefix _s2474_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s2475_ _) =>
                                                   let p0_ := string_drop _s2474_ _s2475_ in
                                                   if generic_eq p0_ "" then Some (FMV_W_X, rd, rs1)
                                                   else None
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5))).

Definition _s2451_ (_s2452_ : string) : M (option ((f_un_op_S * mword 5 * mword 5))) :=
   (match _s2452_ with
    | _s2453_ =>
       (f_un_type_mnemonic_S_matches_prefix _s2453_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMV_X_W, existT _ _s2454_ _) =>
           (match (string_drop _s2453_ _s2454_) with
            | _s2455_ =>
               (spc_matches_prefix _s2455_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2456_ _) =>
                   (match (string_drop _s2455_ _s2456_) with
                    | _s2457_ =>
                       (reg_name_matches_prefix _s2457_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2458_ _) =>
                           (match (string_drop _s2457_ _s2458_) with
                            | _s2459_ =>
                               (sep_matches_prefix _s2459_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2460_ _) =>
                                   (match (string_drop _s2459_ _s2460_) with
                                    | _s2461_ =>
                                       (freg_name_matches_prefix _s2461_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s2462_ _) =>
                                                   let p0_ := string_drop _s2461_ _s2462_ in
                                                   if generic_eq p0_ "" then Some (FMV_X_W, rd, rs1)
                                                   else None
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5))).

Definition _s2434_ (_s2435_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2435_ with
    | _s2436_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2436_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FLE_S, existT _ _s2437_ _) =>
           (match (string_drop _s2436_ _s2437_) with
            | _s2438_ =>
               (spc_matches_prefix _s2438_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2439_ _) =>
                   (match (string_drop _s2438_ _s2439_) with
                    | _s2440_ =>
                       (reg_name_matches_prefix _s2440_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2441_ _) =>
                           (match (string_drop _s2440_ _s2441_) with
                            | _s2442_ =>
                               (sep_matches_prefix _s2442_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2443_ _) =>
                                   (match (string_drop _s2442_ _s2443_) with
                                    | _s2444_ =>
                                       (freg_name_matches_prefix _s2444_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2445_ _) =>
                                           (match (string_drop _s2444_ _s2445_) with
                                            | _s2446_ =>
                                               (sep_matches_prefix _s2446_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2447_ _) =>
                                                   (match (string_drop _s2446_ _s2447_) with
                                                    | _s2448_ =>
                                                       (freg_name_matches_prefix _s2448_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2449_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2448_ _s2449_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FLE_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2417_ (_s2418_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2418_ with
    | _s2419_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2419_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FLT_S, existT _ _s2420_ _) =>
           (match (string_drop _s2419_ _s2420_) with
            | _s2421_ =>
               (spc_matches_prefix _s2421_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2422_ _) =>
                   (match (string_drop _s2421_ _s2422_) with
                    | _s2423_ =>
                       (reg_name_matches_prefix _s2423_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2424_ _) =>
                           (match (string_drop _s2423_ _s2424_) with
                            | _s2425_ =>
                               (sep_matches_prefix _s2425_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2426_ _) =>
                                   (match (string_drop _s2425_ _s2426_) with
                                    | _s2427_ =>
                                       (freg_name_matches_prefix _s2427_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2428_ _) =>
                                           (match (string_drop _s2427_ _s2428_) with
                                            | _s2429_ =>
                                               (sep_matches_prefix _s2429_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2430_ _) =>
                                                   (match (string_drop _s2429_ _s2430_) with
                                                    | _s2431_ =>
                                                       (freg_name_matches_prefix _s2431_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2432_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2431_ _s2432_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FLT_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2400_ (_s2401_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2401_ with
    | _s2402_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2402_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FEQ_S, existT _ _s2403_ _) =>
           (match (string_drop _s2402_ _s2403_) with
            | _s2404_ =>
               (spc_matches_prefix _s2404_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2405_ _) =>
                   (match (string_drop _s2404_ _s2405_) with
                    | _s2406_ =>
                       (reg_name_matches_prefix _s2406_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2407_ _) =>
                           (match (string_drop _s2406_ _s2407_) with
                            | _s2408_ =>
                               (sep_matches_prefix _s2408_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2409_ _) =>
                                   (match (string_drop _s2408_ _s2409_) with
                                    | _s2410_ =>
                                       (freg_name_matches_prefix _s2410_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2411_ _) =>
                                           (match (string_drop _s2410_ _s2411_) with
                                            | _s2412_ =>
                                               (sep_matches_prefix _s2412_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2413_ _) =>
                                                   (match (string_drop _s2412_ _s2413_) with
                                                    | _s2414_ =>
                                                       (freg_name_matches_prefix _s2414_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2415_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2414_ _s2415_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FEQ_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2383_ (_s2384_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2384_ with
    | _s2385_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2385_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMAX_S, existT _ _s2386_ _) =>
           (match (string_drop _s2385_ _s2386_) with
            | _s2387_ =>
               (spc_matches_prefix _s2387_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2388_ _) =>
                   (match (string_drop _s2387_ _s2388_) with
                    | _s2389_ =>
                       (freg_name_matches_prefix _s2389_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2390_ _) =>
                           (match (string_drop _s2389_ _s2390_) with
                            | _s2391_ =>
                               (sep_matches_prefix _s2391_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2392_ _) =>
                                   (match (string_drop _s2391_ _s2392_) with
                                    | _s2393_ =>
                                       (freg_name_matches_prefix _s2393_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2394_ _) =>
                                           (match (string_drop _s2393_ _s2394_) with
                                            | _s2395_ =>
                                               (sep_matches_prefix _s2395_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2396_ _) =>
                                                   (match (string_drop _s2395_ _s2396_) with
                                                    | _s2397_ =>
                                                       (freg_name_matches_prefix _s2397_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2398_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2397_ _s2398_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FMAX_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2366_ (_s2367_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2367_ with
    | _s2368_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2368_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMIN_S, existT _ _s2369_ _) =>
           (match (string_drop _s2368_ _s2369_) with
            | _s2370_ =>
               (spc_matches_prefix _s2370_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2371_ _) =>
                   (match (string_drop _s2370_ _s2371_) with
                    | _s2372_ =>
                       (freg_name_matches_prefix _s2372_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2373_ _) =>
                           (match (string_drop _s2372_ _s2373_) with
                            | _s2374_ =>
                               (sep_matches_prefix _s2374_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2375_ _) =>
                                   (match (string_drop _s2374_ _s2375_) with
                                    | _s2376_ =>
                                       (freg_name_matches_prefix _s2376_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2377_ _) =>
                                           (match (string_drop _s2376_ _s2377_) with
                                            | _s2378_ =>
                                               (sep_matches_prefix _s2378_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2379_ _) =>
                                                   (match (string_drop _s2378_ _s2379_) with
                                                    | _s2380_ =>
                                                       (freg_name_matches_prefix _s2380_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2381_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2380_ _s2381_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FMIN_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2349_ (_s2350_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2350_ with
    | _s2351_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2351_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJX_S, existT _ _s2352_ _) =>
           (match (string_drop _s2351_ _s2352_) with
            | _s2353_ =>
               (spc_matches_prefix _s2353_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2354_ _) =>
                   (match (string_drop _s2353_ _s2354_) with
                    | _s2355_ =>
                       (freg_name_matches_prefix _s2355_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2356_ _) =>
                           (match (string_drop _s2355_ _s2356_) with
                            | _s2357_ =>
                               (sep_matches_prefix _s2357_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2358_ _) =>
                                   (match (string_drop _s2357_ _s2358_) with
                                    | _s2359_ =>
                                       (freg_name_matches_prefix _s2359_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2360_ _) =>
                                           (match (string_drop _s2359_ _s2360_) with
                                            | _s2361_ =>
                                               (sep_matches_prefix _s2361_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2362_ _) =>
                                                   (match (string_drop _s2361_ _s2362_) with
                                                    | _s2363_ =>
                                                       (freg_name_matches_prefix _s2363_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2364_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2363_ _s2364_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSGNJX_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2332_ (_s2333_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2333_ with
    | _s2334_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2334_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJN_S, existT _ _s2335_ _) =>
           (match (string_drop _s2334_ _s2335_) with
            | _s2336_ =>
               (spc_matches_prefix _s2336_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2337_ _) =>
                   (match (string_drop _s2336_ _s2337_) with
                    | _s2338_ =>
                       (freg_name_matches_prefix _s2338_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2339_ _) =>
                           (match (string_drop _s2338_ _s2339_) with
                            | _s2340_ =>
                               (sep_matches_prefix _s2340_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2341_ _) =>
                                   (match (string_drop _s2340_ _s2341_) with
                                    | _s2342_ =>
                                       (freg_name_matches_prefix _s2342_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2343_ _) =>
                                           (match (string_drop _s2342_ _s2343_) with
                                            | _s2344_ =>
                                               (sep_matches_prefix _s2344_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2345_ _) =>
                                                   (match (string_drop _s2344_ _s2345_) with
                                                    | _s2346_ =>
                                                       (freg_name_matches_prefix _s2346_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2347_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2346_ _s2347_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSGNJN_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2315_ (_s2316_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s2316_ with
    | _s2317_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s2317_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJ_S, existT _ _s2318_ _) =>
           (match (string_drop _s2317_ _s2318_) with
            | _s2319_ =>
               (spc_matches_prefix _s2319_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2320_ _) =>
                   (match (string_drop _s2319_ _s2320_) with
                    | _s2321_ =>
                       (freg_name_matches_prefix _s2321_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2322_ _) =>
                           (match (string_drop _s2321_ _s2322_) with
                            | _s2323_ =>
                               (sep_matches_prefix _s2323_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2324_ _) =>
                                   (match (string_drop _s2323_ _s2324_) with
                                    | _s2325_ =>
                                       (freg_name_matches_prefix _s2325_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2326_ _) =>
                                           (match (string_drop _s2325_ _s2326_) with
                                            | _s2327_ =>
                                               (sep_matches_prefix _s2327_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2328_ _) =>
                                                   (match (string_drop _s2327_ _s2328_) with
                                                    | _s2329_ =>
                                                       (freg_name_matches_prefix _s2329_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2330_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2329_ _s2330_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSGNJ_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s2298_ (_s2299_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2299_ with
    | _s2300_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2300_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_LU, existT _ _s2301_ _) =>
           (match (string_drop _s2300_ _s2301_) with
            | _s2302_ =>
               (spc_matches_prefix _s2302_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2303_ _) =>
                   (match (string_drop _s2302_ _s2303_) with
                    | _s2304_ =>
                       (freg_name_matches_prefix _s2304_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2305_ _) =>
                           (match (string_drop _s2304_ _s2305_) with
                            | _s2306_ =>
                               (sep_matches_prefix _s2306_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2307_ _) =>
                                   (match (string_drop _s2306_ _s2307_) with
                                    | _s2308_ =>
                                       (reg_name_matches_prefix _s2308_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2309_ _) =>
                                           (match (string_drop _s2308_ _s2309_) with
                                            | _s2310_ =>
                                               (sep_matches_prefix _s2310_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2311_ _) =>
                                                   (match (string_drop _s2310_ _s2311_) with
                                                    | _s2312_ =>
                                                       (frm_mnemonic_matches_prefix _s2312_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2313_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2312_ _s2313_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_LU, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2281_ (_s2282_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2282_ with
    | _s2283_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2283_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_L, existT _ _s2284_ _) =>
           (match (string_drop _s2283_ _s2284_) with
            | _s2285_ =>
               (spc_matches_prefix _s2285_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2286_ _) =>
                   (match (string_drop _s2285_ _s2286_) with
                    | _s2287_ =>
                       (freg_name_matches_prefix _s2287_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2288_ _) =>
                           (match (string_drop _s2287_ _s2288_) with
                            | _s2289_ =>
                               (sep_matches_prefix _s2289_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2290_ _) =>
                                   (match (string_drop _s2289_ _s2290_) with
                                    | _s2291_ =>
                                       (reg_name_matches_prefix _s2291_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2292_ _) =>
                                           (match (string_drop _s2291_ _s2292_) with
                                            | _s2293_ =>
                                               (sep_matches_prefix _s2293_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2294_ _) =>
                                                   (match (string_drop _s2293_ _s2294_) with
                                                    | _s2295_ =>
                                                       (frm_mnemonic_matches_prefix _s2295_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2296_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2295_ _s2296_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_L, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2264_ (_s2265_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2265_ with
    | _s2266_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2266_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_LU_S, existT _ _s2267_ _) =>
           (match (string_drop _s2266_ _s2267_) with
            | _s2268_ =>
               (spc_matches_prefix _s2268_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2269_ _) =>
                   (match (string_drop _s2268_ _s2269_) with
                    | _s2270_ =>
                       (reg_name_matches_prefix _s2270_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2271_ _) =>
                           (match (string_drop _s2270_ _s2271_) with
                            | _s2272_ =>
                               (sep_matches_prefix _s2272_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2273_ _) =>
                                   (match (string_drop _s2272_ _s2273_) with
                                    | _s2274_ =>
                                       (freg_name_matches_prefix _s2274_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2275_ _) =>
                                           (match (string_drop _s2274_ _s2275_) with
                                            | _s2276_ =>
                                               (sep_matches_prefix _s2276_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2277_ _) =>
                                                   (match (string_drop _s2276_ _s2277_) with
                                                    | _s2278_ =>
                                                       (frm_mnemonic_matches_prefix _s2278_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2279_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2278_ _s2279_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_LU_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2247_ (_s2248_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2248_ with
    | _s2249_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2249_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_L_S, existT _ _s2250_ _) =>
           (match (string_drop _s2249_ _s2250_) with
            | _s2251_ =>
               (spc_matches_prefix _s2251_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2252_ _) =>
                   (match (string_drop _s2251_ _s2252_) with
                    | _s2253_ =>
                       (reg_name_matches_prefix _s2253_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2254_ _) =>
                           (match (string_drop _s2253_ _s2254_) with
                            | _s2255_ =>
                               (sep_matches_prefix _s2255_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2256_ _) =>
                                   (match (string_drop _s2255_ _s2256_) with
                                    | _s2257_ =>
                                       (freg_name_matches_prefix _s2257_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2258_ _) =>
                                           (match (string_drop _s2257_ _s2258_) with
                                            | _s2259_ =>
                                               (sep_matches_prefix _s2259_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2260_ _) =>
                                                   (match (string_drop _s2259_ _s2260_) with
                                                    | _s2261_ =>
                                                       (frm_mnemonic_matches_prefix _s2261_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2262_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2261_ _s2262_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_L_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2230_ (_s2231_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2231_ with
    | _s2232_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2232_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_WU, existT _ _s2233_ _) =>
           (match (string_drop _s2232_ _s2233_) with
            | _s2234_ =>
               (spc_matches_prefix _s2234_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2235_ _) =>
                   (match (string_drop _s2234_ _s2235_) with
                    | _s2236_ =>
                       (freg_name_matches_prefix _s2236_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2237_ _) =>
                           (match (string_drop _s2236_ _s2237_) with
                            | _s2238_ =>
                               (sep_matches_prefix _s2238_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2239_ _) =>
                                   (match (string_drop _s2238_ _s2239_) with
                                    | _s2240_ =>
                                       (reg_name_matches_prefix _s2240_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2241_ _) =>
                                           (match (string_drop _s2240_ _s2241_) with
                                            | _s2242_ =>
                                               (sep_matches_prefix _s2242_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2243_ _) =>
                                                   (match (string_drop _s2242_ _s2243_) with
                                                    | _s2244_ =>
                                                       (frm_mnemonic_matches_prefix _s2244_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2245_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2244_ _s2245_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_WU, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2213_ (_s2214_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2214_ with
    | _s2215_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2215_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_W, existT _ _s2216_ _) =>
           (match (string_drop _s2215_ _s2216_) with
            | _s2217_ =>
               (spc_matches_prefix _s2217_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2218_ _) =>
                   (match (string_drop _s2217_ _s2218_) with
                    | _s2219_ =>
                       (freg_name_matches_prefix _s2219_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2220_ _) =>
                           (match (string_drop _s2219_ _s2220_) with
                            | _s2221_ =>
                               (sep_matches_prefix _s2221_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2222_ _) =>
                                   (match (string_drop _s2221_ _s2222_) with
                                    | _s2223_ =>
                                       (reg_name_matches_prefix _s2223_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2224_ _) =>
                                           (match (string_drop _s2223_ _s2224_) with
                                            | _s2225_ =>
                                               (sep_matches_prefix _s2225_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2226_ _) =>
                                                   (match (string_drop _s2225_ _s2226_) with
                                                    | _s2227_ =>
                                                       (frm_mnemonic_matches_prefix _s2227_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2228_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2227_ _s2228_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_W, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2196_ (_s2197_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2197_ with
    | _s2198_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2198_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_WU_S, existT _ _s2199_ _) =>
           (match (string_drop _s2198_ _s2199_) with
            | _s2200_ =>
               (spc_matches_prefix _s2200_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2201_ _) =>
                   (match (string_drop _s2200_ _s2201_) with
                    | _s2202_ =>
                       (reg_name_matches_prefix _s2202_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2203_ _) =>
                           (match (string_drop _s2202_ _s2203_) with
                            | _s2204_ =>
                               (sep_matches_prefix _s2204_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2205_ _) =>
                                   (match (string_drop _s2204_ _s2205_) with
                                    | _s2206_ =>
                                       (freg_name_matches_prefix _s2206_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2207_ _) =>
                                           (match (string_drop _s2206_ _s2207_) with
                                            | _s2208_ =>
                                               (sep_matches_prefix _s2208_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2209_ _) =>
                                                   (match (string_drop _s2208_ _s2209_) with
                                                    | _s2210_ =>
                                                       (frm_mnemonic_matches_prefix _s2210_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2211_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2210_ _s2211_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_WU_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2179_ (_s2180_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2180_ with
    | _s2181_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2181_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_W_S, existT _ _s2182_ _) =>
           (match (string_drop _s2181_ _s2182_) with
            | _s2183_ =>
               (spc_matches_prefix _s2183_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2184_ _) =>
                   (match (string_drop _s2183_ _s2184_) with
                    | _s2185_ =>
                       (reg_name_matches_prefix _s2185_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2186_ _) =>
                           (match (string_drop _s2185_ _s2186_) with
                            | _s2187_ =>
                               (sep_matches_prefix _s2187_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2188_ _) =>
                                   (match (string_drop _s2187_ _s2188_) with
                                    | _s2189_ =>
                                       (freg_name_matches_prefix _s2189_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2190_ _) =>
                                           (match (string_drop _s2189_ _s2190_) with
                                            | _s2191_ =>
                                               (sep_matches_prefix _s2191_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2192_ _) =>
                                                   (match (string_drop _s2191_ _s2192_) with
                                                    | _s2193_ =>
                                                       (frm_mnemonic_matches_prefix _s2193_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2194_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2193_ _s2194_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_W_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2162_ (_s2163_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2163_ with
    | _s2164_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s2164_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSQRT_S, existT _ _s2165_ _) =>
           (match (string_drop _s2164_ _s2165_) with
            | _s2166_ =>
               (spc_matches_prefix _s2166_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2167_ _) =>
                   (match (string_drop _s2166_ _s2167_) with
                    | _s2168_ =>
                       (freg_name_matches_prefix _s2168_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2169_ _) =>
                           (match (string_drop _s2168_ _s2169_) with
                            | _s2170_ =>
                               (sep_matches_prefix _s2170_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2171_ _) =>
                                   (match (string_drop _s2170_ _s2171_) with
                                    | _s2172_ =>
                                       (freg_name_matches_prefix _s2172_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2173_ _) =>
                                           (match (string_drop _s2172_ _s2173_) with
                                            | _s2174_ =>
                                               (sep_matches_prefix _s2174_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2175_ _) =>
                                                   (match (string_drop _s2174_ _s2175_) with
                                                    | _s2176_ =>
                                                       (frm_mnemonic_matches_prefix _s2176_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s2177_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2176_ _s2177_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSQRT_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s2141_ (_s2142_ : string)
: M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2142_ with
    | _s2143_ =>
       (f_bin_rm_type_mnemonic_S_matches_prefix _s2143_) >>= fun w__0 : option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2144_ _) =>
           (match (string_drop _s2143_ _s2144_) with
            | _s2145_ =>
               (spc_matches_prefix _s2145_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2146_ _) =>
                   (match (string_drop _s2145_ _s2146_) with
                    | _s2147_ =>
                       (freg_name_matches_prefix _s2147_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2148_ _) =>
                           (match (string_drop _s2147_ _s2148_) with
                            | _s2149_ =>
                               (sep_matches_prefix _s2149_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2150_ _) =>
                                   (match (string_drop _s2149_ _s2150_) with
                                    | _s2151_ =>
                                       (freg_name_matches_prefix _s2151_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2152_ _) =>
                                           (match (string_drop _s2151_ _s2152_) with
                                            | _s2153_ =>
                                               (sep_matches_prefix _s2153_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2154_ _) =>
                                                   (match (string_drop _s2153_ _s2154_) with
                                                    | _s2155_ =>
                                                       (freg_name_matches_prefix _s2155_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       (match w__6 with
                                                        | Some (rs2, existT _ _s2156_ _) =>
                                                           (match (string_drop _s2155_ _s2156_) with
                                                            | _s2157_ =>
                                                               (sep_matches_prefix _s2157_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                 0)})) =>
                                                               (match w__7 with
                                                                | Some (tt, existT _ _s2158_ _) =>
                                                                   (match (string_drop _s2157_
                                                                             _s2158_) with
                                                                    | _s2159_ =>
                                                                       (frm_mnemonic_matches_prefix
                                                                          _s2159_) >>= fun w__8 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                                         0)})) =>
                                                                       returnm (match w__8 with
                                                                                | Some
                                                                                  (rm, existT _ _s2160_ _) =>
                                                                                   let p0_ :=
                                                                                     string_drop
                                                                                       _s2159_
                                                                                       _s2160_ in
                                                                                   if generic_eq p0_
                                                                                        "" then
                                                                                     Some
                                                                                       (op, rd, rs1, rs2, rm)
                                                                                   else None
                                                                                | _ => None
                                                                                end)
                                                                    end)
                                                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                | _ => returnm None
                                                                end)
                                                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                            end)
                                                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                        | _ => returnm None
                                                        end)
                                                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                    end)
                                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode))).

Definition _s2116_ (_s2117_ : string)
: M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode))) :=
   (match _s2117_ with
    | _s2118_ =>
       (f_madd_type_mnemonic_S_matches_prefix _s2118_) >>= fun w__0 : option ((f_madd_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2119_ _) =>
           (match (string_drop _s2118_ _s2119_) with
            | _s2120_ =>
               (spc_matches_prefix _s2120_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2121_ _) =>
                   (match (string_drop _s2120_ _s2121_) with
                    | _s2122_ =>
                       (freg_name_matches_prefix _s2122_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2123_ _) =>
                           (match (string_drop _s2122_ _s2123_) with
                            | _s2124_ =>
                               (sep_matches_prefix _s2124_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2125_ _) =>
                                   (match (string_drop _s2124_ _s2125_) with
                                    | _s2126_ =>
                                       (freg_name_matches_prefix _s2126_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2127_ _) =>
                                           (match (string_drop _s2126_ _s2127_) with
                                            | _s2128_ =>
                                               (sep_matches_prefix _s2128_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2129_ _) =>
                                                   (match (string_drop _s2128_ _s2129_) with
                                                    | _s2130_ =>
                                                       (freg_name_matches_prefix _s2130_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       (match w__6 with
                                                        | Some (rs2, existT _ _s2131_ _) =>
                                                           (match (string_drop _s2130_ _s2131_) with
                                                            | _s2132_ =>
                                                               (sep_matches_prefix _s2132_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                 0)})) =>
                                                               (match w__7 with
                                                                | Some (tt, existT _ _s2133_ _) =>
                                                                   (match (string_drop _s2132_
                                                                             _s2133_) with
                                                                    | _s2134_ =>
                                                                       (freg_name_matches_prefix
                                                                          _s2134_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                         0)})) =>
                                                                       (match w__8 with
                                                                        | Some
                                                                          (rs3, existT _ _s2135_ _) =>
                                                                           (match (string_drop
                                                                                     _s2134_ _s2135_) with
                                                                            | _s2136_ =>
                                                                               (sep_matches_prefix
                                                                                  _s2136_) >>= fun w__9 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                 0)})) =>
                                                                               (match w__9 with
                                                                                | Some
                                                                                  (tt, existT _ _s2137_ _) =>
                                                                                   (match (string_drop
                                                                                             _s2136_
                                                                                             _s2137_) with
                                                                                    | _s2138_ =>
                                                                                       (frm_mnemonic_matches_prefix
                                                                                          _s2138_) >>= fun w__10 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                                                         0)})) =>
                                                                                       returnm (match w__10 with
                                                                                                | Some
                                                                                                  (rm, existT _ _s2139_ _) =>
                                                                                                   let p0_ :=
                                                                                                     string_drop
                                                                                                       _s2138_
                                                                                                       _s2139_ in
                                                                                                   if
                                                                                                     generic_eq
                                                                                                       p0_
                                                                                                       ""
                                                                                                   then
                                                                                                     Some
                                                                                                       (op, rd, rs1, rs2, rs3, rm)
                                                                                                   else
                                                                                                     None
                                                                                                | _ =>
                                                                                                   None
                                                                                                end)
                                                                                    end)
                                                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                                | _ => returnm None
                                                                                end)
                                                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                            end)
                                                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                        | _ => returnm None
                                                                        end)
                                                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                    end)
                                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                | _ => returnm None
                                                                end)
                                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                            end)
                                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                        | _ => returnm None
                                                        end)
                                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                    end)
                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode))).

Definition _s2092_ (_s2093_ : string) : M (option ((word_width * mword 5 * mword 12 * mword 5))) :=
   let _s2094_ := _s2093_ in
   (if string_startswith _s2094_ "fs" then
      (match (string_drop _s2094_ (projT1 (string_length "fs"))) with
       | _s2095_ =>
          (size_mnemonic_matches_prefix _s2095_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (width, existT _ _s2096_ _) =>
              (match (string_drop _s2095_ _s2096_) with
               | _s2097_ =>
                  (spc_matches_prefix _s2097_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s2098_ _) =>
                      (match (string_drop _s2097_ _s2098_) with
                       | _s2099_ =>
                          (freg_name_matches_prefix _s2099_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rs2, existT _ _s2100_ _) =>
                              (match (string_drop _s2099_ _s2100_) with
                               | _s2101_ =>
                                  (sep_matches_prefix _s2101_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s2102_ _) =>
                                      (match (string_drop _s2101_ _s2102_) with
                                       | _s2103_ =>
                                          (match (hex_bits_12_matches_prefix _s2103_) with
                                           | Some (imm, existT _ _s2104_ _) =>
                                              (match (string_drop _s2103_ _s2104_) with
                                               | _s2105_ =>
                                                  (opt_spc_matches_prefix _s2105_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__4 with
                                                   | Some (tt, existT _ _s2106_ _) =>
                                                      let _s2107_ := string_drop _s2105_ _s2106_ in
                                                      (if string_startswith _s2107_ "(" then
                                                         (match (string_drop _s2107_
                                                                   (projT1
                                                                    (string_length "("))) with
                                                          | _s2108_ =>
                                                             (opt_spc_matches_prefix _s2108_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             (match w__5 with
                                                              | Some (tt, existT _ _s2109_ _) =>
                                                                 (match (string_drop _s2108_ _s2109_) with
                                                                  | _s2110_ =>
                                                                     (reg_name_matches_prefix
                                                                        _s2110_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                       0)})) =>
                                                                     (match w__6 with
                                                                      | Some
                                                                        (rs1, existT _ _s2111_ _) =>
                                                                         (match (string_drop _s2110_
                                                                                   _s2111_) with
                                                                          | _s2112_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s2112_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             returnm (match w__7 with
                                                                                      | Some
                                                                                        (tt, existT _ _s2113_ _) =>
                                                                                         let _s2114_ :=
                                                                                           string_drop
                                                                                             _s2112_
                                                                                             _s2113_ in
                                                                                         if string_startswith
                                                                                              _s2114_
                                                                                              ")"
                                                                                         then
                                                                                           let p0_ :=
                                                                                             string_drop
                                                                                               _s2114_
                                                                                               (projT1
                                                                                                (string_length
                                                                                                   ")")) in
                                                                                           if generic_eq
                                                                                                p0_
                                                                                                ""
                                                                                           then
                                                                                             Some
                                                                                               (width, rs2, imm, rs1)
                                                                                           else None
                                                                                         else None
                                                                                      | _ => None
                                                                                      end)
                                                                          end)
                                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                      | _ => returnm None
                                                                      end)
                                                                      : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                  end)
                                                                  : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                              | _ => returnm None
                                                              end)
                                                              : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                          end)
                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                       else returnm None)
                                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * mword 5 * mword 12 * mword 5))).

Definition _s2068_ (_s2069_ : string) : M (option ((word_width * mword 5 * mword 12 * mword 5))) :=
   let _s2070_ := _s2069_ in
   (if string_startswith _s2070_ "fl" then
      (match (string_drop _s2070_ (projT1 (string_length "fl"))) with
       | _s2071_ =>
          (size_mnemonic_matches_prefix _s2071_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (width, existT _ _s2072_ _) =>
              (match (string_drop _s2071_ _s2072_) with
               | _s2073_ =>
                  (spc_matches_prefix _s2073_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s2074_ _) =>
                      (match (string_drop _s2073_ _s2074_) with
                       | _s2075_ =>
                          (freg_name_matches_prefix _s2075_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s2076_ _) =>
                              (match (string_drop _s2075_ _s2076_) with
                               | _s2077_ =>
                                  (sep_matches_prefix _s2077_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s2078_ _) =>
                                      (match (string_drop _s2077_ _s2078_) with
                                       | _s2079_ =>
                                          (match (hex_bits_12_matches_prefix _s2079_) with
                                           | Some (imm, existT _ _s2080_ _) =>
                                              (match (string_drop _s2079_ _s2080_) with
                                               | _s2081_ =>
                                                  (opt_spc_matches_prefix _s2081_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__4 with
                                                   | Some (tt, existT _ _s2082_ _) =>
                                                      let _s2083_ := string_drop _s2081_ _s2082_ in
                                                      (if string_startswith _s2083_ "(" then
                                                         (match (string_drop _s2083_
                                                                   (projT1
                                                                    (string_length "("))) with
                                                          | _s2084_ =>
                                                             (opt_spc_matches_prefix _s2084_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             (match w__5 with
                                                              | Some (tt, existT _ _s2085_ _) =>
                                                                 (match (string_drop _s2084_ _s2085_) with
                                                                  | _s2086_ =>
                                                                     (reg_name_matches_prefix
                                                                        _s2086_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                       0)})) =>
                                                                     (match w__6 with
                                                                      | Some
                                                                        (rs1, existT _ _s2087_ _) =>
                                                                         (match (string_drop _s2086_
                                                                                   _s2087_) with
                                                                          | _s2088_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s2088_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             returnm (match w__7 with
                                                                                      | Some
                                                                                        (tt, existT _ _s2089_ _) =>
                                                                                         let _s2090_ :=
                                                                                           string_drop
                                                                                             _s2088_
                                                                                             _s2089_ in
                                                                                         if string_startswith
                                                                                              _s2090_
                                                                                              ")"
                                                                                         then
                                                                                           let p0_ :=
                                                                                             string_drop
                                                                                               _s2090_
                                                                                               (projT1
                                                                                                (string_length
                                                                                                   ")")) in
                                                                                           if generic_eq
                                                                                                p0_
                                                                                                ""
                                                                                           then
                                                                                             Some
                                                                                               (width, rd, imm, rs1)
                                                                                           else None
                                                                                         else None
                                                                                      | _ => None
                                                                                      end)
                                                                          end)
                                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                      | _ => returnm None
                                                                      end)
                                                                      : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                  end)
                                                                  : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                              | _ => returnm None
                                                              end)
                                                              : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                          end)
                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                       else returnm None)
                                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * mword 5 * mword 12 * mword 5))).

Definition _s2051_ (_s2052_ : string) : M (option ((csrop * mword 5 * mword 12 * mword 5))) :=
   (match _s2052_ with
    | _s2053_ =>
       (csr_mnemonic_matches_prefix _s2053_) >>= fun w__0 : option ((csrop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2054_ _) =>
           (match (string_drop _s2053_ _s2054_) with
            | _s2055_ =>
               (spc_matches_prefix _s2055_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2056_ _) =>
                   (match (string_drop _s2055_ _s2056_) with
                    | _s2057_ =>
                       (reg_name_matches_prefix _s2057_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2058_ _) =>
                           (match (string_drop _s2057_ _s2058_) with
                            | _s2059_ =>
                               (sep_matches_prefix _s2059_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2060_ _) =>
                                   (match (string_drop _s2059_ _s2060_) with
                                    | _s2061_ =>
                                       (csr_name_map_matches_prefix _s2061_) >>= fun w__4 : option ((mword 12 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (csr, existT _ _s2062_ _) =>
                                           (match (string_drop _s2061_ _s2062_) with
                                            | _s2063_ =>
                                               (sep_matches_prefix _s2063_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2064_ _) =>
                                                   (match (string_drop _s2063_ _s2064_) with
                                                    | _s2065_ =>
                                                       (reg_name_matches_prefix _s2065_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs1, existT _ _s2066_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2065_ _s2066_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (op, rd, csr, rs1)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                            end)
                                            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                    end)
                                    : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                            end)
                            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                    end)
                    : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((csrop * mword 5 * mword 12 * mword 5)))
            end)
            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
    end)
    : M (option ((csrop * mword 5 * mword 12 * mword 5))).

Definition _s2033_ (_s2034_ : string) : M (option ((csrop * mword 5 * mword 12 * mword 5))) :=
   (match _s2034_ with
    | _s2035_ =>
       (csr_mnemonic_matches_prefix _s2035_) >>= fun w__0 : option ((csrop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2036_ _) =>
           let _s2037_ := string_drop _s2035_ _s2036_ in
           (if string_startswith _s2037_ "i" then
              (match (string_drop _s2037_ (projT1 (string_length "i"))) with
               | _s2038_ =>
                  (spc_matches_prefix _s2038_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s2039_ _) =>
                      (match (string_drop _s2038_ _s2039_) with
                       | _s2040_ =>
                          (reg_name_matches_prefix _s2040_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s2041_ _) =>
                              (match (string_drop _s2040_ _s2041_) with
                               | _s2042_ =>
                                  (sep_matches_prefix _s2042_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s2043_ _) =>
                                      (match (string_drop _s2042_ _s2043_) with
                                       | _s2044_ =>
                                          (csr_name_map_matches_prefix _s2044_) >>= fun w__4 : option ((mword 12 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (csr, existT _ _s2045_ _) =>
                                              (match (string_drop _s2044_ _s2045_) with
                                               | _s2046_ =>
                                                  (sep_matches_prefix _s2046_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  returnm (match w__5 with
                                                           | Some (tt, existT _ _s2047_ _) =>
                                                              match (string_drop _s2046_ _s2047_) with
                                                              | _s2048_ =>
                                                                 match (hex_bits_5_matches_prefix
                                                                          _s2048_) with
                                                                 | Some (rs1, existT _ _s2049_ _) =>
                                                                    let p0_ :=
                                                                      string_drop _s2048_ _s2049_ in
                                                                    if generic_eq p0_ "" then
                                                                      Some (op, rd, csr, rs1)
                                                                    else None
                                                                 | _ => None
                                                                 end
                                                              end
                                                           | _ => None
                                                           end)
                                               end)
                                               : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((csrop * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((csrop * mword 5 * mword 12 * mword 5)))
            else returnm None)
            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
    end)
    : M (option ((csrop * mword 5 * mword 12 * mword 5))).

Definition _s2014_ (_s2015_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s2016_ := _s2015_ in
   (if string_startswith _s2016_ "rem" then
      (match (string_drop _s2016_ (projT1 (string_length "rem"))) with
       | _s2017_ =>
          (maybe_not_u_matches_prefix _s2017_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s2018_ _) =>
              let _s2019_ := string_drop _s2017_ _s2018_ in
              (if string_startswith _s2019_ "w" then
                 (match (string_drop _s2019_ (projT1 (string_length "w"))) with
                  | _s2020_ =>
                     (spc_matches_prefix _s2020_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                       0)})) =>
                     (match w__1 with
                      | Some (tt, existT _ _s2021_ _) =>
                         (match (string_drop _s2020_ _s2021_) with
                          | _s2022_ =>
                             (reg_name_matches_prefix _s2022_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                               0)})) =>
                             (match w__2 with
                              | Some (rd, existT _ _s2023_ _) =>
                                 (match (string_drop _s2022_ _s2023_) with
                                  | _s2024_ =>
                                     (sep_matches_prefix _s2024_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                       0)})) =>
                                     (match w__3 with
                                      | Some (tt, existT _ _s2025_ _) =>
                                         (match (string_drop _s2024_ _s2025_) with
                                          | _s2026_ =>
                                             (reg_name_matches_prefix _s2026_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                               0)})) =>
                                             (match w__4 with
                                              | Some (rs1, existT _ _s2027_ _) =>
                                                 (match (string_drop _s2026_ _s2027_) with
                                                  | _s2028_ =>
                                                     (sep_matches_prefix _s2028_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                       0)})) =>
                                                     (match w__5 with
                                                      | Some (tt, existT _ _s2029_ _) =>
                                                         (match (string_drop _s2028_ _s2029_) with
                                                          | _s2030_ =>
                                                             (reg_name_matches_prefix _s2030_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             returnm (match w__6 with
                                                                      | Some
                                                                        (rs2, existT _ _s2031_ _) =>
                                                                         let p0_ :=
                                                                           string_drop _s2030_
                                                                             _s2031_ in
                                                                         if generic_eq p0_ "" then
                                                                           Some (s, rd, rs1, rs2)
                                                                         else None
                                                                      | _ => None
                                                                      end)
                                                          end)
                                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                      | _ => returnm None
                                                      end)
                                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                  end)
                                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                              | _ => returnm None
                                              end)
                                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                          end)
                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                      | _ => returnm None
                                      end)
                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                  end)
                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                              | _ => returnm None
                              end)
                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                          end)
                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                      | _ => returnm None
                      end)
                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                  end)
                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
               else returnm None)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s1995_ (_s1996_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s1997_ := _s1996_ in
   (if string_startswith _s1997_ "div" then
      (match (string_drop _s1997_ (projT1 (string_length "div"))) with
       | _s1998_ =>
          (maybe_not_u_matches_prefix _s1998_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s1999_ _) =>
              let _s2000_ := string_drop _s1998_ _s1999_ in
              (if string_startswith _s2000_ "w" then
                 (match (string_drop _s2000_ (projT1 (string_length "w"))) with
                  | _s2001_ =>
                     (spc_matches_prefix _s2001_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                       0)})) =>
                     (match w__1 with
                      | Some (tt, existT _ _s2002_ _) =>
                         (match (string_drop _s2001_ _s2002_) with
                          | _s2003_ =>
                             (reg_name_matches_prefix _s2003_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                               0)})) =>
                             (match w__2 with
                              | Some (rd, existT _ _s2004_ _) =>
                                 (match (string_drop _s2003_ _s2004_) with
                                  | _s2005_ =>
                                     (sep_matches_prefix _s2005_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                       0)})) =>
                                     (match w__3 with
                                      | Some (tt, existT _ _s2006_ _) =>
                                         (match (string_drop _s2005_ _s2006_) with
                                          | _s2007_ =>
                                             (reg_name_matches_prefix _s2007_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                               0)})) =>
                                             (match w__4 with
                                              | Some (rs1, existT _ _s2008_ _) =>
                                                 (match (string_drop _s2007_ _s2008_) with
                                                  | _s2009_ =>
                                                     (sep_matches_prefix _s2009_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                       0)})) =>
                                                     (match w__5 with
                                                      | Some (tt, existT _ _s2010_ _) =>
                                                         (match (string_drop _s2009_ _s2010_) with
                                                          | _s2011_ =>
                                                             (reg_name_matches_prefix _s2011_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             returnm (match w__6 with
                                                                      | Some
                                                                        (rs2, existT _ _s2012_ _) =>
                                                                         let p0_ :=
                                                                           string_drop _s2011_
                                                                             _s2012_ in
                                                                         if generic_eq p0_ "" then
                                                                           Some (s, rd, rs1, rs2)
                                                                         else None
                                                                      | _ => None
                                                                      end)
                                                          end)
                                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                      | _ => returnm None
                                                      end)
                                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                  end)
                                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                              | _ => returnm None
                                              end)
                                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                          end)
                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                      | _ => returnm None
                                      end)
                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                  end)
                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                              | _ => returnm None
                              end)
                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                          end)
                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                      | _ => returnm None
                      end)
                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                  end)
                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
               else returnm None)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s1979_ (_s1980_ : string) : M (option ((mword 5 * mword 5 * mword 5))) :=
   let _s1981_ := _s1980_ in
   (if string_startswith _s1981_ "mulw" then
      (match (string_drop _s1981_ (projT1 (string_length "mulw"))) with
       | _s1982_ =>
          (spc_matches_prefix _s1982_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1983_ _) =>
              (match (string_drop _s1982_ _s1983_) with
               | _s1984_ =>
                  (reg_name_matches_prefix _s1984_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1985_ _) =>
                      (match (string_drop _s1984_ _s1985_) with
                       | _s1986_ =>
                          (sep_matches_prefix _s1986_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1987_ _) =>
                              (match (string_drop _s1986_ _s1987_) with
                               | _s1988_ =>
                                  (reg_name_matches_prefix _s1988_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s1989_ _) =>
                                      (match (string_drop _s1988_ _s1989_) with
                                       | _s1990_ =>
                                          (sep_matches_prefix _s1990_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s1991_ _) =>
                                              (match (string_drop _s1990_ _s1991_) with
                                               | _s1992_ =>
                                                  (reg_name_matches_prefix _s1992_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  returnm (match w__5 with
                                                           | Some (rs2, existT _ _s1993_ _) =>
                                                              let p0_ := string_drop _s1992_ _s1993_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rd, rs1, rs2)
                                                              else None
                                                           | _ => None
                                                           end)
                                               end)
                                               : M (option ((mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 5))).

Definition _s1961_ (_s1962_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s1963_ := _s1962_ in
   (if string_startswith _s1963_ "rem" then
      (match (string_drop _s1963_ (projT1 (string_length "rem"))) with
       | _s1964_ =>
          (maybe_not_u_matches_prefix _s1964_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s1965_ _) =>
              (match (string_drop _s1964_ _s1965_) with
               | _s1966_ =>
                  (spc_matches_prefix _s1966_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s1967_ _) =>
                      (match (string_drop _s1966_ _s1967_) with
                       | _s1968_ =>
                          (reg_name_matches_prefix _s1968_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s1969_ _) =>
                              (match (string_drop _s1968_ _s1969_) with
                               | _s1970_ =>
                                  (sep_matches_prefix _s1970_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s1971_ _) =>
                                      (match (string_drop _s1970_ _s1971_) with
                                       | _s1972_ =>
                                          (reg_name_matches_prefix _s1972_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs1, existT _ _s1973_ _) =>
                                              (match (string_drop _s1972_ _s1973_) with
                                               | _s1974_ =>
                                                  (sep_matches_prefix _s1974_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s1975_ _) =>
                                                      (match (string_drop _s1974_ _s1975_) with
                                                       | _s1976_ =>
                                                          (reg_name_matches_prefix _s1976_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs2, existT _ _s1977_ _) =>
                                                                      let p0_ :=
                                                                        string_drop _s1976_ _s1977_ in
                                                                      if generic_eq p0_ "" then
                                                                        Some (s, rd, rs1, rs2)
                                                                      else None
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s1943_ (_s1944_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s1945_ := _s1944_ in
   (if string_startswith _s1945_ "div" then
      (match (string_drop _s1945_ (projT1 (string_length "div"))) with
       | _s1946_ =>
          (maybe_not_u_matches_prefix _s1946_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s1947_ _) =>
              (match (string_drop _s1946_ _s1947_) with
               | _s1948_ =>
                  (spc_matches_prefix _s1948_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s1949_ _) =>
                      (match (string_drop _s1948_ _s1949_) with
                       | _s1950_ =>
                          (reg_name_matches_prefix _s1950_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s1951_ _) =>
                              (match (string_drop _s1950_ _s1951_) with
                               | _s1952_ =>
                                  (sep_matches_prefix _s1952_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s1953_ _) =>
                                      (match (string_drop _s1952_ _s1953_) with
                                       | _s1954_ =>
                                          (reg_name_matches_prefix _s1954_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs1, existT _ _s1955_ _) =>
                                              (match (string_drop _s1954_ _s1955_) with
                                               | _s1956_ =>
                                                  (sep_matches_prefix _s1956_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s1957_ _) =>
                                                      (match (string_drop _s1956_ _s1957_) with
                                                       | _s1958_ =>
                                                          (reg_name_matches_prefix _s1958_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs2, existT _ _s1959_ _) =>
                                                                      let p0_ :=
                                                                        string_drop _s1958_ _s1959_ in
                                                                      if generic_eq p0_ "" then
                                                                        Some (s, rd, rs1, rs2)
                                                                      else None
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s1926_ (_s1927_ : string)
: M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5))) :=
   (match _s1927_ with
    | _s1928_ =>
       (mul_mnemonic_matches_prefix _s1928_) >>= fun w__0 : option (((bool * bool * bool) * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some ((high, signed1, signed2), existT _ _s1929_ _) =>
           (match (string_drop _s1928_ _s1929_) with
            | _s1930_ =>
               (spc_matches_prefix _s1930_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1931_ _) =>
                   (match (string_drop _s1930_ _s1931_) with
                    | _s1932_ =>
                       (reg_name_matches_prefix _s1932_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1933_ _) =>
                           (match (string_drop _s1932_ _s1933_) with
                            | _s1934_ =>
                               (sep_matches_prefix _s1934_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1935_ _) =>
                                   (match (string_drop _s1934_ _s1935_) with
                                    | _s1936_ =>
                                       (reg_name_matches_prefix _s1936_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1937_ _) =>
                                           (match (string_drop _s1936_ _s1937_) with
                                            | _s1938_ =>
                                               (sep_matches_prefix _s1938_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s1939_ _) =>
                                                   (match (string_drop _s1938_ _s1939_) with
                                                    | _s1940_ =>
                                                       (reg_name_matches_prefix _s1940_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s1941_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s1940_ _s1941_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some
                                                                       (high, signed1, signed2, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5))).

Definition _s1914_ (_s1915_ : string) : M (option ((mword 5 * mword 5))) :=
   let _s1916_ := _s1915_ in
   (if string_startswith _s1916_ "c.add" then
      (match (string_drop _s1916_ (projT1 (string_length "c.add"))) with
       | _s1917_ =>
          (spc_matches_prefix _s1917_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1918_ _) =>
              (match (string_drop _s1917_ _s1918_) with
               | _s1919_ =>
                  (reg_name_matches_prefix _s1919_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1920_ _) =>
                      (match (string_drop _s1919_ _s1920_) with
                       | _s1921_ =>
                          (sep_matches_prefix _s1921_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1922_ _) =>
                              (match (string_drop _s1921_ _s1922_) with
                               | _s1923_ =>
                                  (reg_name_matches_prefix _s1923_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1924_ _) =>
                                              let p0_ := string_drop _s1923_ _s1924_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5))).

Definition _s1902_ (_s1903_ : string) : M (option ((mword 5 * mword 5))) :=
   let _s1904_ := _s1903_ in
   (if string_startswith _s1904_ "c.mv" then
      (match (string_drop _s1904_ (projT1 (string_length "c.mv"))) with
       | _s1905_ =>
          (spc_matches_prefix _s1905_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1906_ _) =>
              (match (string_drop _s1905_ _s1906_) with
               | _s1907_ =>
                  (reg_name_matches_prefix _s1907_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1908_ _) =>
                      (match (string_drop _s1907_ _s1908_) with
                       | _s1909_ =>
                          (sep_matches_prefix _s1909_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1910_ _) =>
                              (match (string_drop _s1909_ _s1910_) with
                               | _s1911_ =>
                                  (reg_name_matches_prefix _s1911_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1912_ _) =>
                                              let p0_ := string_drop _s1911_ _s1912_ in
                                              if generic_eq p0_ "" then Some (rd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5))).

Definition _s1894_ (_s1895_ : string) : M (option (mword 5)) :=
   let _s1896_ := _s1895_ in
   (if string_startswith _s1896_ "c.jalr" then
      (match (string_drop _s1896_ (projT1 (string_length "c.jalr"))) with
       | _s1897_ =>
          (spc_matches_prefix _s1897_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1898_ _) =>
              (match (string_drop _s1897_ _s1898_) with
               | _s1899_ =>
                  (reg_name_matches_prefix _s1899_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (rs1, existT _ _s1900_ _) =>
                              let p0_ := string_drop _s1899_ _s1900_ in
                              if generic_eq p0_ "" then Some rs1
                              else None
                           | _ => None
                           end)
               end)
               : M (option (mword 5))
           | _ => returnm None
           end)
           : M (option (mword 5))
       end)
       : M (option (mword 5))
    else returnm None)
    : M (option (mword 5)).

Definition _s1886_ (_s1887_ : string) : M (option (mword 5)) :=
   let _s1888_ := _s1887_ in
   (if string_startswith _s1888_ "c.jr" then
      (match (string_drop _s1888_ (projT1 (string_length "c.jr"))) with
       | _s1889_ =>
          (spc_matches_prefix _s1889_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1890_ _) =>
              (match (string_drop _s1889_ _s1890_) with
               | _s1891_ =>
                  (reg_name_matches_prefix _s1891_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (rs1, existT _ _s1892_ _) =>
                              let p0_ := string_drop _s1891_ _s1892_ in
                              if generic_eq p0_ "" then Some rs1
                              else None
                           | _ => None
                           end)
               end)
               : M (option (mword 5))
           | _ => returnm None
           end)
           : M (option (mword 5))
       end)
       : M (option (mword 5))
    else returnm None)
    : M (option (mword 5)).

Definition _s1874_ (_s1875_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1876_ := _s1875_ in
   (if string_startswith _s1876_ "c.sdsp" then
      (match (string_drop _s1876_ (projT1 (string_length "c.sdsp"))) with
       | _s1877_ =>
          (spc_matches_prefix _s1877_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1878_ _) =>
              (match (string_drop _s1877_ _s1878_) with
               | _s1879_ =>
                  (reg_name_matches_prefix _s1879_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs2, existT _ _s1880_ _) =>
                      (match (string_drop _s1879_ _s1880_) with
                       | _s1881_ =>
                          (sep_matches_prefix _s1881_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1882_ _) =>
                                      match (string_drop _s1881_ _s1882_) with
                                      | _s1883_ =>
                                         match (hex_bits_6_matches_prefix _s1883_) with
                                         | Some (uimm, existT _ _s1884_ _) =>
                                            let p0_ := string_drop _s1883_ _s1884_ in
                                            if generic_eq p0_ "" then Some (rs2, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1862_ (_s1863_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1864_ := _s1863_ in
   (if string_startswith _s1864_ "c.swsp" then
      (match (string_drop _s1864_ (projT1 (string_length "c.swsp"))) with
       | _s1865_ =>
          (spc_matches_prefix _s1865_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1866_ _) =>
              (match (string_drop _s1865_ _s1866_) with
               | _s1867_ =>
                  (reg_name_matches_prefix _s1867_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1868_ _) =>
                      (match (string_drop _s1867_ _s1868_) with
                       | _s1869_ =>
                          (sep_matches_prefix _s1869_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1870_ _) =>
                                      match (string_drop _s1869_ _s1870_) with
                                      | _s1871_ =>
                                         match (hex_bits_6_matches_prefix _s1871_) with
                                         | Some (uimm, existT _ _s1872_ _) =>
                                            let p0_ := string_drop _s1871_ _s1872_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1850_ (_s1851_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1852_ := _s1851_ in
   (if string_startswith _s1852_ "c.ldsp" then
      (match (string_drop _s1852_ (projT1 (string_length "c.ldsp"))) with
       | _s1853_ =>
          (spc_matches_prefix _s1853_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1854_ _) =>
              (match (string_drop _s1853_ _s1854_) with
               | _s1855_ =>
                  (reg_name_matches_prefix _s1855_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1856_ _) =>
                      (match (string_drop _s1855_ _s1856_) with
                       | _s1857_ =>
                          (sep_matches_prefix _s1857_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1858_ _) =>
                                      match (string_drop _s1857_ _s1858_) with
                                      | _s1859_ =>
                                         match (hex_bits_6_matches_prefix _s1859_) with
                                         | Some (uimm, existT _ _s1860_ _) =>
                                            let p0_ := string_drop _s1859_ _s1860_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1838_ (_s1839_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1840_ := _s1839_ in
   (if string_startswith _s1840_ "c.lwsp" then
      (match (string_drop _s1840_ (projT1 (string_length "c.lwsp"))) with
       | _s1841_ =>
          (spc_matches_prefix _s1841_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1842_ _) =>
              (match (string_drop _s1841_ _s1842_) with
               | _s1843_ =>
                  (reg_name_matches_prefix _s1843_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1844_ _) =>
                      (match (string_drop _s1843_ _s1844_) with
                       | _s1845_ =>
                          (sep_matches_prefix _s1845_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1846_ _) =>
                                      match (string_drop _s1845_ _s1846_) with
                                      | _s1847_ =>
                                         match (hex_bits_6_matches_prefix _s1847_) with
                                         | Some (uimm, existT _ _s1848_ _) =>
                                            let p0_ := string_drop _s1847_ _s1848_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1826_ (_s1827_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1828_ := _s1827_ in
   (if string_startswith _s1828_ "c.slli" then
      (match (string_drop _s1828_ (projT1 (string_length "c.slli"))) with
       | _s1829_ =>
          (spc_matches_prefix _s1829_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1830_ _) =>
              (match (string_drop _s1829_ _s1830_) with
               | _s1831_ =>
                  (reg_name_matches_prefix _s1831_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1832_ _) =>
                      (match (string_drop _s1831_ _s1832_) with
                       | _s1833_ =>
                          (sep_matches_prefix _s1833_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1834_ _) =>
                                      match (string_drop _s1833_ _s1834_) with
                                      | _s1835_ =>
                                         match (hex_bits_6_matches_prefix _s1835_) with
                                         | Some (shamt, existT _ _s1836_ _) =>
                                            let p0_ := string_drop _s1835_ _s1836_ in
                                            if generic_eq p0_ "" then Some (rsd, shamt)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1814_ (_s1815_ : string) : M (option ((mword 3 * mword 8))) :=
   let _s1816_ := _s1815_ in
   (if string_startswith _s1816_ "c.bnez" then
      (match (string_drop _s1816_ (projT1 (string_length "c.bnez"))) with
       | _s1817_ =>
          (spc_matches_prefix _s1817_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1818_ _) =>
              (match (string_drop _s1817_ _s1818_) with
               | _s1819_ =>
                  (creg_name_matches_prefix _s1819_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs, existT _ _s1820_ _) =>
                      (match (string_drop _s1819_ _s1820_) with
                       | _s1821_ =>
                          (sep_matches_prefix _s1821_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1822_ _) =>
                                      match (string_drop _s1821_ _s1822_) with
                                      | _s1823_ =>
                                         match (hex_bits_8_matches_prefix _s1823_) with
                                         | Some (imm, existT _ _s1824_ _) =>
                                            let p0_ := string_drop _s1823_ _s1824_ in
                                            if generic_eq p0_ "" then Some (rs, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8)))
               end)
               : M (option ((mword 3 * mword 8)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8)))
       end)
       : M (option ((mword 3 * mword 8)))
    else returnm None)
    : M (option ((mword 3 * mword 8))).

Definition _s1802_ (_s1803_ : string) : M (option ((mword 3 * mword 8))) :=
   let _s1804_ := _s1803_ in
   (if string_startswith _s1804_ "c.beqz" then
      (match (string_drop _s1804_ (projT1 (string_length "c.beqz"))) with
       | _s1805_ =>
          (spc_matches_prefix _s1805_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1806_ _) =>
              (match (string_drop _s1805_ _s1806_) with
               | _s1807_ =>
                  (creg_name_matches_prefix _s1807_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs, existT _ _s1808_ _) =>
                      (match (string_drop _s1807_ _s1808_) with
                       | _s1809_ =>
                          (sep_matches_prefix _s1809_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1810_ _) =>
                                      match (string_drop _s1809_ _s1810_) with
                                      | _s1811_ =>
                                         match (hex_bits_8_matches_prefix _s1811_) with
                                         | Some (imm, existT _ _s1812_ _) =>
                                            let p0_ := string_drop _s1811_ _s1812_ in
                                            if generic_eq p0_ "" then Some (rs, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8)))
               end)
               : M (option ((mword 3 * mword 8)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8)))
       end)
       : M (option ((mword 3 * mword 8)))
    else returnm None)
    : M (option ((mword 3 * mword 8))).

Definition _s1794_ (_s1795_ : string) : M (option (mword 11)) :=
   let _s1796_ := _s1795_ in
   (if string_startswith _s1796_ "c.j" then
      (match (string_drop _s1796_ (projT1 (string_length "c.j"))) with
       | _s1797_ =>
          (spc_matches_prefix _s1797_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s1798_ _) =>
                      match (string_drop _s1797_ _s1798_) with
                      | _s1799_ =>
                         match (hex_bits_11_matches_prefix _s1799_) with
                         | Some (imm, existT _ _s1800_ _) =>
                            let p0_ := string_drop _s1799_ _s1800_ in
                            if generic_eq p0_ "" then Some imm
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 11))
    else returnm None)
    : M (option (mword 11)).

Definition _s1782_ (_s1783_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s1784_ := _s1783_ in
   (if string_startswith _s1784_ "c.addw" then
      (match (string_drop _s1784_ (projT1 (string_length "c.addw"))) with
       | _s1785_ =>
          (spc_matches_prefix _s1785_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1786_ _) =>
              (match (string_drop _s1785_ _s1786_) with
               | _s1787_ =>
                  (creg_name_matches_prefix _s1787_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1788_ _) =>
                      (match (string_drop _s1787_ _s1788_) with
                       | _s1789_ =>
                          (sep_matches_prefix _s1789_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1790_ _) =>
                              (match (string_drop _s1789_ _s1790_) with
                               | _s1791_ =>
                                  (creg_name_matches_prefix _s1791_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1792_ _) =>
                                              let p0_ := string_drop _s1791_ _s1792_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s1770_ (_s1771_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s1772_ := _s1771_ in
   (if string_startswith _s1772_ "c.subw" then
      (match (string_drop _s1772_ (projT1 (string_length "c.subw"))) with
       | _s1773_ =>
          (spc_matches_prefix _s1773_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1774_ _) =>
              (match (string_drop _s1773_ _s1774_) with
               | _s1775_ =>
                  (creg_name_matches_prefix _s1775_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1776_ _) =>
                      (match (string_drop _s1775_ _s1776_) with
                       | _s1777_ =>
                          (sep_matches_prefix _s1777_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1778_ _) =>
                              (match (string_drop _s1777_ _s1778_) with
                               | _s1779_ =>
                                  (creg_name_matches_prefix _s1779_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1780_ _) =>
                                              let p0_ := string_drop _s1779_ _s1780_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s1758_ (_s1759_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s1760_ := _s1759_ in
   (if string_startswith _s1760_ "c.and" then
      (match (string_drop _s1760_ (projT1 (string_length "c.and"))) with
       | _s1761_ =>
          (spc_matches_prefix _s1761_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1762_ _) =>
              (match (string_drop _s1761_ _s1762_) with
               | _s1763_ =>
                  (creg_name_matches_prefix _s1763_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1764_ _) =>
                      (match (string_drop _s1763_ _s1764_) with
                       | _s1765_ =>
                          (sep_matches_prefix _s1765_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1766_ _) =>
                              (match (string_drop _s1765_ _s1766_) with
                               | _s1767_ =>
                                  (creg_name_matches_prefix _s1767_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1768_ _) =>
                                              let p0_ := string_drop _s1767_ _s1768_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s1746_ (_s1747_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s1748_ := _s1747_ in
   (if string_startswith _s1748_ "c.or" then
      (match (string_drop _s1748_ (projT1 (string_length "c.or"))) with
       | _s1749_ =>
          (spc_matches_prefix _s1749_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1750_ _) =>
              (match (string_drop _s1749_ _s1750_) with
               | _s1751_ =>
                  (creg_name_matches_prefix _s1751_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1752_ _) =>
                      (match (string_drop _s1751_ _s1752_) with
                       | _s1753_ =>
                          (sep_matches_prefix _s1753_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1754_ _) =>
                              (match (string_drop _s1753_ _s1754_) with
                               | _s1755_ =>
                                  (creg_name_matches_prefix _s1755_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1756_ _) =>
                                              let p0_ := string_drop _s1755_ _s1756_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s1734_ (_s1735_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s1736_ := _s1735_ in
   (if string_startswith _s1736_ "c.xor" then
      (match (string_drop _s1736_ (projT1 (string_length "c.xor"))) with
       | _s1737_ =>
          (spc_matches_prefix _s1737_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1738_ _) =>
              (match (string_drop _s1737_ _s1738_) with
               | _s1739_ =>
                  (creg_name_matches_prefix _s1739_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1740_ _) =>
                      (match (string_drop _s1739_ _s1740_) with
                       | _s1741_ =>
                          (sep_matches_prefix _s1741_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1742_ _) =>
                              (match (string_drop _s1741_ _s1742_) with
                               | _s1743_ =>
                                  (creg_name_matches_prefix _s1743_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1744_ _) =>
                                              let p0_ := string_drop _s1743_ _s1744_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s1722_ (_s1723_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s1724_ := _s1723_ in
   (if string_startswith _s1724_ "c.sub" then
      (match (string_drop _s1724_ (projT1 (string_length "c.sub"))) with
       | _s1725_ =>
          (spc_matches_prefix _s1725_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1726_ _) =>
              (match (string_drop _s1725_ _s1726_) with
               | _s1727_ =>
                  (creg_name_matches_prefix _s1727_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1728_ _) =>
                      (match (string_drop _s1727_ _s1728_) with
                       | _s1729_ =>
                          (sep_matches_prefix _s1729_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1730_ _) =>
                              (match (string_drop _s1729_ _s1730_) with
                               | _s1731_ =>
                                  (creg_name_matches_prefix _s1731_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1732_ _) =>
                                              let p0_ := string_drop _s1731_ _s1732_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s1710_ (_s1711_ : string) : M (option ((mword 3 * mword 6))) :=
   let _s1712_ := _s1711_ in
   (if string_startswith _s1712_ "c.andi" then
      (match (string_drop _s1712_ (projT1 (string_length "c.andi"))) with
       | _s1713_ =>
          (spc_matches_prefix _s1713_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1714_ _) =>
              (match (string_drop _s1713_ _s1714_) with
               | _s1715_ =>
                  (creg_name_matches_prefix _s1715_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1716_ _) =>
                      (match (string_drop _s1715_ _s1716_) with
                       | _s1717_ =>
                          (sep_matches_prefix _s1717_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1718_ _) =>
                                      match (string_drop _s1717_ _s1718_) with
                                      | _s1719_ =>
                                         match (hex_bits_6_matches_prefix _s1719_) with
                                         | Some (imm, existT _ _s1720_ _) =>
                                            let p0_ := string_drop _s1719_ _s1720_ in
                                            if generic_eq p0_ "" then Some (rsd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6)))
               end)
               : M (option ((mword 3 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6)))
       end)
       : M (option ((mword 3 * mword 6)))
    else returnm None)
    : M (option ((mword 3 * mword 6))).

Definition _s1698_ (_s1699_ : string) : M (option ((mword 3 * mword 6))) :=
   let _s1700_ := _s1699_ in
   (if string_startswith _s1700_ "c.srai" then
      (match (string_drop _s1700_ (projT1 (string_length "c.srai"))) with
       | _s1701_ =>
          (spc_matches_prefix _s1701_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1702_ _) =>
              (match (string_drop _s1701_ _s1702_) with
               | _s1703_ =>
                  (creg_name_matches_prefix _s1703_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1704_ _) =>
                      (match (string_drop _s1703_ _s1704_) with
                       | _s1705_ =>
                          (sep_matches_prefix _s1705_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1706_ _) =>
                                      match (string_drop _s1705_ _s1706_) with
                                      | _s1707_ =>
                                         match (hex_bits_6_matches_prefix _s1707_) with
                                         | Some (shamt, existT _ _s1708_ _) =>
                                            let p0_ := string_drop _s1707_ _s1708_ in
                                            if generic_eq p0_ "" then Some (rsd, shamt)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6)))
               end)
               : M (option ((mword 3 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6)))
       end)
       : M (option ((mword 3 * mword 6)))
    else returnm None)
    : M (option ((mword 3 * mword 6))).

Definition _s1686_ (_s1687_ : string) : M (option ((mword 3 * mword 6))) :=
   let _s1688_ := _s1687_ in
   (if string_startswith _s1688_ "c.srli" then
      (match (string_drop _s1688_ (projT1 (string_length "c.srli"))) with
       | _s1689_ =>
          (spc_matches_prefix _s1689_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1690_ _) =>
              (match (string_drop _s1689_ _s1690_) with
               | _s1691_ =>
                  (creg_name_matches_prefix _s1691_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1692_ _) =>
                      (match (string_drop _s1691_ _s1692_) with
                       | _s1693_ =>
                          (sep_matches_prefix _s1693_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1694_ _) =>
                                      match (string_drop _s1693_ _s1694_) with
                                      | _s1695_ =>
                                         match (hex_bits_6_matches_prefix _s1695_) with
                                         | Some (shamt, existT _ _s1696_ _) =>
                                            let p0_ := string_drop _s1695_ _s1696_ in
                                            if generic_eq p0_ "" then Some (rsd, shamt)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6)))
               end)
               : M (option ((mword 3 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6)))
       end)
       : M (option ((mword 3 * mword 6)))
    else returnm None)
    : M (option ((mword 3 * mword 6))).

Definition _s1674_ (_s1675_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1676_ := _s1675_ in
   (if string_startswith _s1676_ "c.lui" then
      (match (string_drop _s1676_ (projT1 (string_length "c.lui"))) with
       | _s1677_ =>
          (spc_matches_prefix _s1677_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1678_ _) =>
              (match (string_drop _s1677_ _s1678_) with
               | _s1679_ =>
                  (reg_name_matches_prefix _s1679_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1680_ _) =>
                      (match (string_drop _s1679_ _s1680_) with
                       | _s1681_ =>
                          (sep_matches_prefix _s1681_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1682_ _) =>
                                      match (string_drop _s1681_ _s1682_) with
                                      | _s1683_ =>
                                         match (hex_bits_6_matches_prefix _s1683_) with
                                         | Some (imm, existT _ _s1684_ _) =>
                                            let p0_ := string_drop _s1683_ _s1684_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1666_ (_s1667_ : string) : M (option (mword 6)) :=
   let _s1668_ := _s1667_ in
   (if string_startswith _s1668_ "c.addi16sp" then
      (match (string_drop _s1668_ (projT1 (string_length "c.addi16sp"))) with
       | _s1669_ =>
          (spc_matches_prefix _s1669_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s1670_ _) =>
                      match (string_drop _s1669_ _s1670_) with
                      | _s1671_ =>
                         match (hex_bits_6_matches_prefix _s1671_) with
                         | Some (imm, existT _ _s1672_ _) =>
                            let p0_ := string_drop _s1671_ _s1672_ in
                            if generic_eq p0_ "" then Some imm
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 6))
    else returnm None)
    : M (option (mword 6)).

Definition _s1654_ (_s1655_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1656_ := _s1655_ in
   (if string_startswith _s1656_ "c.li" then
      (match (string_drop _s1656_ (projT1 (string_length "c.li"))) with
       | _s1657_ =>
          (spc_matches_prefix _s1657_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1658_ _) =>
              (match (string_drop _s1657_ _s1658_) with
               | _s1659_ =>
                  (reg_name_matches_prefix _s1659_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1660_ _) =>
                      (match (string_drop _s1659_ _s1660_) with
                       | _s1661_ =>
                          (sep_matches_prefix _s1661_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1662_ _) =>
                                      match (string_drop _s1661_ _s1662_) with
                                      | _s1663_ =>
                                         match (hex_bits_6_matches_prefix _s1663_) with
                                         | Some (imm, existT _ _s1664_ _) =>
                                            let p0_ := string_drop _s1663_ _s1664_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1642_ (_s1643_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1644_ := _s1643_ in
   (if string_startswith _s1644_ "c.addiw" then
      (match (string_drop _s1644_ (projT1 (string_length "c.addiw"))) with
       | _s1645_ =>
          (spc_matches_prefix _s1645_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1646_ _) =>
              (match (string_drop _s1645_ _s1646_) with
               | _s1647_ =>
                  (reg_name_matches_prefix _s1647_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1648_ _) =>
                      (match (string_drop _s1647_ _s1648_) with
                       | _s1649_ =>
                          (sep_matches_prefix _s1649_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1650_ _) =>
                                      match (string_drop _s1649_ _s1650_) with
                                      | _s1651_ =>
                                         match (hex_bits_6_matches_prefix _s1651_) with
                                         | Some (imm, existT _ _s1652_ _) =>
                                            let p0_ := string_drop _s1651_ _s1652_ in
                                            if generic_eq p0_ "" then Some (rsd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1634_ (_s1635_ : string) : M (option (mword 11)) :=
   let _s1636_ := _s1635_ in
   (if string_startswith _s1636_ "c.jal" then
      (match (string_drop _s1636_ (projT1 (string_length "c.jal"))) with
       | _s1637_ =>
          (spc_matches_prefix _s1637_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s1638_ _) =>
                      match (string_drop _s1637_ _s1638_) with
                      | _s1639_ =>
                         match (hex_bits_12_matches_prefix _s1639_) with
                         | Some (v__1080, existT _ _s1640_ _) =>
                            if eq_vec (subrange_vec_dec v__1080 0 0) ('b"0"  : mword (0 - 0 + 1))
                            then
                              let imm : mword 11 := subrange_vec_dec v__1080 11 1 in
                              let imm : mword 11 := subrange_vec_dec v__1080 11 1 in
                              let p0_ := string_drop _s1639_ _s1640_ in
                              if generic_eq p0_ "" then Some imm
                              else None
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 11))
    else returnm None)
    : M (option (mword 11)).

Definition _s1622_ (_s1623_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s1624_ := _s1623_ in
   (if string_startswith _s1624_ "c.addi" then
      (match (string_drop _s1624_ (projT1 (string_length "c.addi"))) with
       | _s1625_ =>
          (spc_matches_prefix _s1625_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1626_ _) =>
              (match (string_drop _s1625_ _s1626_) with
               | _s1627_ =>
                  (reg_name_matches_prefix _s1627_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s1628_ _) =>
                      (match (string_drop _s1627_ _s1628_) with
                       | _s1629_ =>
                          (sep_matches_prefix _s1629_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1630_ _) =>
                                      match (string_drop _s1629_ _s1630_) with
                                      | _s1631_ =>
                                         match (hex_bits_6_matches_prefix _s1631_) with
                                         | Some (nzi, existT _ _s1632_ _) =>
                                            let p0_ := string_drop _s1631_ _s1632_ in
                                            if generic_eq p0_ "" then Some (rsd, nzi)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s1606_ (_s1607_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s1608_ := _s1607_ in
   (if string_startswith _s1608_ "c.sd" then
      (match (string_drop _s1608_ (projT1 (string_length "c.sd"))) with
       | _s1609_ =>
          (spc_matches_prefix _s1609_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1610_ _) =>
              (match (string_drop _s1609_ _s1610_) with
               | _s1611_ =>
                  (creg_name_matches_prefix _s1611_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s1612_ _) =>
                      (match (string_drop _s1611_ _s1612_) with
                       | _s1613_ =>
                          (sep_matches_prefix _s1613_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1614_ _) =>
                              (match (string_drop _s1613_ _s1614_) with
                               | _s1615_ =>
                                  (creg_name_matches_prefix _s1615_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s1616_ _) =>
                                      (match (string_drop _s1615_ _s1616_) with
                                       | _s1617_ =>
                                          (sep_matches_prefix _s1617_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s1618_ _) =>
                                                      match (string_drop _s1617_ _s1618_) with
                                                      | _s1619_ =>
                                                         match (hex_bits_8_matches_prefix _s1619_) with
                                                         | Some (v__1082, existT _ _s1620_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1082 2 0)
                                                                 ('b"000"
                                                                  : mword (2 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1082 7 3 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1082 7 3 in
                                                              let p0_ := string_drop _s1619_ _s1620_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rsc1, rsc2, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s1590_ (_s1591_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s1592_ := _s1591_ in
   (if string_startswith _s1592_ "c.sw" then
      (match (string_drop _s1592_ (projT1 (string_length "c.sw"))) with
       | _s1593_ =>
          (spc_matches_prefix _s1593_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1594_ _) =>
              (match (string_drop _s1593_ _s1594_) with
               | _s1595_ =>
                  (creg_name_matches_prefix _s1595_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s1596_ _) =>
                      (match (string_drop _s1595_ _s1596_) with
                       | _s1597_ =>
                          (sep_matches_prefix _s1597_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1598_ _) =>
                              (match (string_drop _s1597_ _s1598_) with
                               | _s1599_ =>
                                  (creg_name_matches_prefix _s1599_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s1600_ _) =>
                                      (match (string_drop _s1599_ _s1600_) with
                                       | _s1601_ =>
                                          (sep_matches_prefix _s1601_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s1602_ _) =>
                                                      match (string_drop _s1601_ _s1602_) with
                                                      | _s1603_ =>
                                                         match (hex_bits_7_matches_prefix _s1603_) with
                                                         | Some (v__1084, existT _ _s1604_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1084 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1084 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1084 6 2 in
                                                              let p0_ := string_drop _s1603_ _s1604_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rsc1, rsc2, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s1574_ (_s1575_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s1576_ := _s1575_ in
   (if string_startswith _s1576_ "c.ld" then
      (match (string_drop _s1576_ (projT1 (string_length "c.ld"))) with
       | _s1577_ =>
          (spc_matches_prefix _s1577_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1578_ _) =>
              (match (string_drop _s1577_ _s1578_) with
               | _s1579_ =>
                  (creg_name_matches_prefix _s1579_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s1580_ _) =>
                      (match (string_drop _s1579_ _s1580_) with
                       | _s1581_ =>
                          (sep_matches_prefix _s1581_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1582_ _) =>
                              (match (string_drop _s1581_ _s1582_) with
                               | _s1583_ =>
                                  (creg_name_matches_prefix _s1583_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s1584_ _) =>
                                      (match (string_drop _s1583_ _s1584_) with
                                       | _s1585_ =>
                                          (sep_matches_prefix _s1585_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s1586_ _) =>
                                                      match (string_drop _s1585_ _s1586_) with
                                                      | _s1587_ =>
                                                         match (hex_bits_8_matches_prefix _s1587_) with
                                                         | Some (v__1086, existT _ _s1588_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1086 2 0)
                                                                 ('b"000"
                                                                  : mword (2 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1086 7 3 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1086 7 3 in
                                                              let p0_ := string_drop _s1587_ _s1588_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rdc, rsc, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s1558_ (_s1559_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s1560_ := _s1559_ in
   (if string_startswith _s1560_ "c.lw" then
      (match (string_drop _s1560_ (projT1 (string_length "c.lw"))) with
       | _s1561_ =>
          (spc_matches_prefix _s1561_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1562_ _) =>
              (match (string_drop _s1561_ _s1562_) with
               | _s1563_ =>
                  (creg_name_matches_prefix _s1563_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s1564_ _) =>
                      (match (string_drop _s1563_ _s1564_) with
                       | _s1565_ =>
                          (sep_matches_prefix _s1565_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1566_ _) =>
                              (match (string_drop _s1565_ _s1566_) with
                               | _s1567_ =>
                                  (creg_name_matches_prefix _s1567_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s1568_ _) =>
                                      (match (string_drop _s1567_ _s1568_) with
                                       | _s1569_ =>
                                          (sep_matches_prefix _s1569_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s1570_ _) =>
                                                      match (string_drop _s1569_ _s1570_) with
                                                      | _s1571_ =>
                                                         match (hex_bits_7_matches_prefix _s1571_) with
                                                         | Some (v__1088, existT _ _s1572_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1088 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1088 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1088 6 2 in
                                                              let p0_ := string_drop _s1571_ _s1572_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rdc, rsc, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s1546_ (_s1547_ : string) : M (option ((mword 3 * mword 8))) :=
   let _s1548_ := _s1547_ in
   (if string_startswith _s1548_ "c.addi4spn" then
      (match (string_drop _s1548_ (projT1 (string_length "c.addi4spn"))) with
       | _s1549_ =>
          (spc_matches_prefix _s1549_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1550_ _) =>
              (match (string_drop _s1549_ _s1550_) with
               | _s1551_ =>
                  (creg_name_matches_prefix _s1551_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s1552_ _) =>
                      (match (string_drop _s1551_ _s1552_) with
                       | _s1553_ =>
                          (sep_matches_prefix _s1553_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1554_ _) =>
                                      match (string_drop _s1553_ _s1554_) with
                                      | _s1555_ =>
                                         match (hex_bits_10_matches_prefix _s1555_) with
                                         | Some (v__1090, existT _ _s1556_ _) =>
                                            if eq_vec (subrange_vec_dec v__1090 1 0)
                                                 ('b"00"
                                                  : mword (1 - 0 + 1)) then
                                              let nzimm : mword 8 := subrange_vec_dec v__1090 9 2 in
                                              let nzimm : mword 8 := subrange_vec_dec v__1090 9 2 in
                                              let p0_ := string_drop _s1555_ _s1556_ in
                                              if generic_eq p0_ "" then Some (rdc, nzimm)
                                              else None
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8)))
               end)
               : M (option ((mword 3 * mword 8)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8)))
       end)
       : M (option ((mword 3 * mword 8)))
    else returnm None)
    : M (option ((mword 3 * mword 8))).

Definition _s1520_ (_s1521_ : string)
: M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5))) :=
   (match _s1521_ with
    | _s1522_ =>
       (amo_mnemonic_matches_prefix _s1522_) >>= fun w__0 : option ((amoop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1523_ _) =>
           let _s1524_ := string_drop _s1522_ _s1523_ in
           (if string_startswith _s1524_ "." then
              (match (string_drop _s1524_ (projT1 (string_length "."))) with
               | _s1525_ =>
                  (size_mnemonic_matches_prefix _s1525_) >>= fun w__1 : option ((word_width * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (width, existT _ _s1526_ _) =>
                      (match (string_drop _s1525_ _s1526_) with
                       | _s1527_ =>
                          (maybe_aq_matches_prefix _s1527_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (aq, existT _ _s1528_ _) =>
                              (match (string_drop _s1527_ _s1528_) with
                               | _s1529_ =>
                                  (maybe_rl_matches_prefix _s1529_) >>= fun w__3 : option ((bool * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rl, existT _ _s1530_ _) =>
                                      (match (string_drop _s1529_ _s1530_) with
                                       | _s1531_ =>
                                          (spc_matches_prefix _s1531_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s1532_ _) =>
                                              (match (string_drop _s1531_ _s1532_) with
                                               | _s1533_ =>
                                                  (reg_name_matches_prefix _s1533_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (rd, existT _ _s1534_ _) =>
                                                      (match (string_drop _s1533_ _s1534_) with
                                                       | _s1535_ =>
                                                          (sep_matches_prefix _s1535_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (tt, existT _ _s1536_ _) =>
                                                              (match (string_drop _s1535_ _s1536_) with
                                                               | _s1537_ =>
                                                                  (reg_name_matches_prefix _s1537_) >>= fun w__7 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__7 with
                                                                   | Some (rs2, existT _ _s1538_ _) =>
                                                                      (match (string_drop _s1537_
                                                                                _s1538_) with
                                                                       | _s1539_ =>
                                                                          (sep_matches_prefix
                                                                             _s1539_) >>= fun w__8 : option ((unit * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          (match w__8 with
                                                                           | Some
                                                                             (tt, existT _ _s1540_ _) =>
                                                                              let _s1541_ :=
                                                                                string_drop _s1539_
                                                                                  _s1540_ in
                                                                              (if string_startswith
                                                                                    _s1541_ "(" then
                                                                                 (match (string_drop
                                                                                           _s1541_
                                                                                           (projT1
                                                                                            (string_length
                                                                                               "("))) with
                                                                                  | _s1542_ =>
                                                                                     (reg_name_matches_prefix
                                                                                        _s1542_) >>= fun w__9 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     returnm (match w__9 with
                                                                                              | Some
                                                                                                (rs1, existT _ _s1543_ _) =>
                                                                                                 let _s1544_ :=
                                                                                                   string_drop
                                                                                                     _s1542_
                                                                                                     _s1543_ in
                                                                                                 if string_startswith
                                                                                                      _s1544_
                                                                                                      ")"
                                                                                                 then
                                                                                                   let p0_ :=
                                                                                                     string_drop
                                                                                                       _s1544_
                                                                                                       (projT1
                                                                                                        (string_length
                                                                                                           ")")) in
                                                                                                   if
                                                                                                     generic_eq
                                                                                                       p0_
                                                                                                       ""
                                                                                                   then
                                                                                                     Some
                                                                                                       (op, width, aq, rl, rd, rs2, rs1)
                                                                                                   else
                                                                                                     None
                                                                                                 else
                                                                                                   None
                                                                                              | _ =>
                                                                                                 None
                                                                                              end)
                                                                                  end)
                                                                                  : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                               else returnm None)
                                                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                           | _ => returnm None
                                                                           end)
                                                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                       end)
                                                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                               end)
                                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                       end)
                                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
            else returnm None)
            : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5))).

Definition _s1498_ (_s1499_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5))) :=
   let _s1500_ := _s1499_ in
   (if string_startswith _s1500_ "sc." then
      (match (string_drop _s1500_ (projT1 (string_length "sc."))) with
       | _s1501_ =>
          (size_mnemonic_matches_prefix _s1501_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s1502_ _) =>
              (match (string_drop _s1501_ _s1502_) with
               | _s1503_ =>
                  (maybe_aq_matches_prefix _s1503_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s1504_ _) =>
                      (match (string_drop _s1503_ _s1504_) with
                       | _s1505_ =>
                          (maybe_rl_matches_prefix _s1505_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s1506_ _) =>
                              (match (string_drop _s1505_ _s1506_) with
                               | _s1507_ =>
                                  (spc_matches_prefix _s1507_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s1508_ _) =>
                                      (match (string_drop _s1507_ _s1508_) with
                                       | _s1509_ =>
                                          (reg_name_matches_prefix _s1509_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rd, existT _ _s1510_ _) =>
                                              (match (string_drop _s1509_ _s1510_) with
                                               | _s1511_ =>
                                                  (sep_matches_prefix _s1511_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s1512_ _) =>
                                                      (match (string_drop _s1511_ _s1512_) with
                                                       | _s1513_ =>
                                                          (reg_name_matches_prefix _s1513_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (rs1, existT _ _s1514_ _) =>
                                                              (match (string_drop _s1513_ _s1514_) with
                                                               | _s1515_ =>
                                                                  (sep_matches_prefix _s1515_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__7 with
                                                                   | Some (tt, existT _ _s1516_ _) =>
                                                                      (match (string_drop _s1515_
                                                                                _s1516_) with
                                                                       | _s1517_ =>
                                                                          (reg_name_matches_prefix
                                                                             _s1517_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          returnm (match w__8 with
                                                                                   | Some
                                                                                     (rs2, existT _ _s1518_ _) =>
                                                                                      let p0_ :=
                                                                                        string_drop
                                                                                          _s1517_
                                                                                          _s1518_ in
                                                                                      if generic_eq
                                                                                           p0_ ""
                                                                                      then
                                                                                        Some
                                                                                          (size, aq, rl, rd, rs1, rs2)
                                                                                      else None
                                                                                   | _ => None
                                                                                   end)
                                                                       end)
                                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5))).

Definition _s1480_ (_s1481_ : string) : M (option ((word_width * bool * bool * mword 5 * mword 5))) :=
   let _s1482_ := _s1481_ in
   (if string_startswith _s1482_ "lr." then
      (match (string_drop _s1482_ (projT1 (string_length "lr."))) with
       | _s1483_ =>
          (size_mnemonic_matches_prefix _s1483_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s1484_ _) =>
              (match (string_drop _s1483_ _s1484_) with
               | _s1485_ =>
                  (maybe_aq_matches_prefix _s1485_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s1486_ _) =>
                      (match (string_drop _s1485_ _s1486_) with
                       | _s1487_ =>
                          (maybe_rl_matches_prefix _s1487_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s1488_ _) =>
                              (match (string_drop _s1487_ _s1488_) with
                               | _s1489_ =>
                                  (spc_matches_prefix _s1489_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s1490_ _) =>
                                      (match (string_drop _s1489_ _s1490_) with
                                       | _s1491_ =>
                                          (reg_name_matches_prefix _s1491_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rd, existT _ _s1492_ _) =>
                                              (match (string_drop _s1491_ _s1492_) with
                                               | _s1493_ =>
                                                  (sep_matches_prefix _s1493_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s1494_ _) =>
                                                      (match (string_drop _s1493_ _s1494_) with
                                                       | _s1495_ =>
                                                          (reg_name_matches_prefix _s1495_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs1, existT _ _s1496_ _) =>
                                                                      let p0_ :=
                                                                        string_drop _s1495_ _s1496_ in
                                                                      if generic_eq p0_ "" then
                                                                        Some (size, aq, rl, rd, rs1)
                                                                      else None
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 5))).

Definition _s1468_ (_s1469_ : string) : M (option ((mword 5 * mword 5))) :=
   let _s1470_ := _s1469_ in
   (if string_startswith _s1470_ "sfence.vma" then
      (match (string_drop _s1470_ (projT1 (string_length "sfence.vma"))) with
       | _s1471_ =>
          (spc_matches_prefix _s1471_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1472_ _) =>
              (match (string_drop _s1471_ _s1472_) with
               | _s1473_ =>
                  (reg_name_matches_prefix _s1473_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs1, existT _ _s1474_ _) =>
                      (match (string_drop _s1473_ _s1474_) with
                       | _s1475_ =>
                          (sep_matches_prefix _s1475_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1476_ _) =>
                              (match (string_drop _s1475_ _s1476_) with
                               | _s1477_ =>
                                  (reg_name_matches_prefix _s1477_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s1478_ _) =>
                                              let p0_ := string_drop _s1477_ _s1478_ in
                                              if generic_eq p0_ "" then Some (rs1, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5))).

Definition _s1456_ (_s1457_ : string) : M (option ((mword 4 * mword 4))) :=
   let _s1458_ := _s1457_ in
   (if string_startswith _s1458_ "fence.tso" then
      (match (string_drop _s1458_ (projT1 (string_length "fence.tso"))) with
       | _s1459_ =>
          (spc_matches_prefix _s1459_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1460_ _) =>
              (match (string_drop _s1459_ _s1460_) with
               | _s1461_ =>
                  (fence_bits_matches_prefix _s1461_) >>= fun w__1 : option ((mword 4 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (pred, existT _ _s1462_ _) =>
                      (match (string_drop _s1461_ _s1462_) with
                       | _s1463_ =>
                          (sep_matches_prefix _s1463_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1464_ _) =>
                              (match (string_drop _s1463_ _s1464_) with
                               | _s1465_ =>
                                  (fence_bits_matches_prefix _s1465_) >>= fun w__3 : option ((mword 4 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (succ, existT _ _s1466_ _) =>
                                              let p0_ := string_drop _s1465_ _s1466_ in
                                              if generic_eq p0_ "" then Some (pred, succ)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 4 * mword 4)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 4 * mword 4)))
                       end)
                       : M (option ((mword 4 * mword 4)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 4 * mword 4)))
               end)
               : M (option ((mword 4 * mword 4)))
           | _ => returnm None
           end)
           : M (option ((mword 4 * mword 4)))
       end)
       : M (option ((mword 4 * mword 4)))
    else returnm None)
    : M (option ((mword 4 * mword 4))).

Definition _s1444_ (_s1445_ : string) : M (option ((mword 4 * mword 4))) :=
   let _s1446_ := _s1445_ in
   (if string_startswith _s1446_ "fence" then
      (match (string_drop _s1446_ (projT1 (string_length "fence"))) with
       | _s1447_ =>
          (spc_matches_prefix _s1447_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1448_ _) =>
              (match (string_drop _s1447_ _s1448_) with
               | _s1449_ =>
                  (fence_bits_matches_prefix _s1449_) >>= fun w__1 : option ((mword 4 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (pred, existT _ _s1450_ _) =>
                      (match (string_drop _s1449_ _s1450_) with
                       | _s1451_ =>
                          (sep_matches_prefix _s1451_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1452_ _) =>
                              (match (string_drop _s1451_ _s1452_) with
                               | _s1453_ =>
                                  (fence_bits_matches_prefix _s1453_) >>= fun w__3 : option ((mword 4 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (succ, existT _ _s1454_ _) =>
                                              let p0_ := string_drop _s1453_ _s1454_ in
                                              if generic_eq p0_ "" then Some (pred, succ)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 4 * mword 4)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 4 * mword 4)))
                       end)
                       : M (option ((mword 4 * mword 4)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 4 * mword 4)))
               end)
               : M (option ((mword 4 * mword 4)))
           | _ => returnm None
           end)
           : M (option ((mword 4 * mword 4)))
       end)
       : M (option ((mword 4 * mword 4)))
    else returnm None)
    : M (option ((mword 4 * mword 4))).

Definition _s1427_ (_s1428_ : string) : M (option ((sopw * mword 5 * mword 5 * mword 5))) :=
   (match _s1428_ with
    | _s1429_ =>
       (shiftiwop_mnemonic_matches_prefix _s1429_) >>= fun w__0 : option ((sopw * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1430_ _) =>
           (match (string_drop _s1429_ _s1430_) with
            | _s1431_ =>
               (spc_matches_prefix _s1431_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1432_ _) =>
                   (match (string_drop _s1431_ _s1432_) with
                    | _s1433_ =>
                       (reg_name_matches_prefix _s1433_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1434_ _) =>
                           (match (string_drop _s1433_ _s1434_) with
                            | _s1435_ =>
                               (sep_matches_prefix _s1435_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1436_ _) =>
                                   (match (string_drop _s1435_ _s1436_) with
                                    | _s1437_ =>
                                       (reg_name_matches_prefix _s1437_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1438_ _) =>
                                           (match (string_drop _s1437_ _s1438_) with
                                            | _s1439_ =>
                                               (sep_matches_prefix _s1439_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s1440_ _) =>
                                                           match (string_drop _s1439_ _s1440_) with
                                                           | _s1441_ =>
                                                              match (hex_bits_5_matches_prefix
                                                                       _s1441_) with
                                                              | Some (shamt, existT _ _s1442_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s1441_ _s1442_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, shamt)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((sopw * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((sopw * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((sopw * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((sopw * mword 5 * mword 5 * mword 5))).

Definition _s1410_ (_s1411_ : string) : M (option ((ropw * mword 5 * mword 5 * mword 5))) :=
   (match _s1411_ with
    | _s1412_ =>
       (rtypew_mnemonic_matches_prefix _s1412_) >>= fun w__0 : option ((ropw * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1413_ _) =>
           (match (string_drop _s1412_ _s1413_) with
            | _s1414_ =>
               (spc_matches_prefix _s1414_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1415_ _) =>
                   (match (string_drop _s1414_ _s1415_) with
                    | _s1416_ =>
                       (reg_name_matches_prefix _s1416_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1417_ _) =>
                           (match (string_drop _s1416_ _s1417_) with
                            | _s1418_ =>
                               (sep_matches_prefix _s1418_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1419_ _) =>
                                   (match (string_drop _s1418_ _s1419_) with
                                    | _s1420_ =>
                                       (reg_name_matches_prefix _s1420_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1421_ _) =>
                                           (match (string_drop _s1420_ _s1421_) with
                                            | _s1422_ =>
                                               (sep_matches_prefix _s1422_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s1423_ _) =>
                                                   (match (string_drop _s1422_ _s1423_) with
                                                    | _s1424_ =>
                                                       (reg_name_matches_prefix _s1424_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s1425_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s1424_ _s1425_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (op, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((ropw * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((ropw * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((ropw * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((ropw * mword 5 * mword 5 * mword 5))).

Definition _s1393_ (_s1394_ : string) : M (option ((sop * mword 5 * mword 5 * mword 5))) :=
   (match _s1394_ with
    | _s1395_ =>
       (shiftw_mnemonic_matches_prefix _s1395_) >>= fun w__0 : option ((sop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1396_ _) =>
           (match (string_drop _s1395_ _s1396_) with
            | _s1397_ =>
               (spc_matches_prefix _s1397_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1398_ _) =>
                   (match (string_drop _s1397_ _s1398_) with
                    | _s1399_ =>
                       (reg_name_matches_prefix _s1399_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1400_ _) =>
                           (match (string_drop _s1399_ _s1400_) with
                            | _s1401_ =>
                               (sep_matches_prefix _s1401_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1402_ _) =>
                                   (match (string_drop _s1401_ _s1402_) with
                                    | _s1403_ =>
                                       (reg_name_matches_prefix _s1403_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1404_ _) =>
                                           (match (string_drop _s1403_ _s1404_) with
                                            | _s1405_ =>
                                               (sep_matches_prefix _s1405_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s1406_ _) =>
                                                           match (string_drop _s1405_ _s1406_) with
                                                           | _s1407_ =>
                                                              match (hex_bits_5_matches_prefix
                                                                       _s1407_) with
                                                              | Some (shamt, existT _ _s1408_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s1407_ _s1408_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, shamt)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sop * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sop * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((sop * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((sop * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((sop * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((sop * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((sop * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((sop * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((sop * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((sop * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((sop * mword 5 * mword 5 * mword 5))).

Definition _s1377_ (_s1378_ : string) : M (option ((mword 5 * mword 5 * mword 12))) :=
   let _s1379_ := _s1378_ in
   (if string_startswith _s1379_ "addiw" then
      (match (string_drop _s1379_ (projT1 (string_length "addiw"))) with
       | _s1380_ =>
          (spc_matches_prefix _s1380_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1381_ _) =>
              (match (string_drop _s1380_ _s1381_) with
               | _s1382_ =>
                  (reg_name_matches_prefix _s1382_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1383_ _) =>
                      (match (string_drop _s1382_ _s1383_) with
                       | _s1384_ =>
                          (sep_matches_prefix _s1384_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1385_ _) =>
                              (match (string_drop _s1384_ _s1385_) with
                               | _s1386_ =>
                                  (reg_name_matches_prefix _s1386_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s1387_ _) =>
                                      (match (string_drop _s1386_ _s1387_) with
                                       | _s1388_ =>
                                          (sep_matches_prefix _s1388_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s1389_ _) =>
                                                      match (string_drop _s1388_ _s1389_) with
                                                      | _s1390_ =>
                                                         match (hex_bits_12_matches_prefix _s1390_) with
                                                         | Some (imm, existT _ _s1391_ _) =>
                                                            let p0_ := string_drop _s1390_ _s1391_ in
                                                            if generic_eq p0_ "" then
                                                              Some (rd, rs1, imm)
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 12)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 12)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 12)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 12)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 12)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 12)))
               end)
               : M (option ((mword 5 * mword 5 * mword 12)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 12)))
       end)
       : M (option ((mword 5 * mword 5 * mword 12)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 12))).

Definition _s1349_ (_s1350_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5))) :=
   let _s1351_ := _s1350_ in
   (if string_startswith _s1351_ "s" then
      (match (string_drop _s1351_ (projT1 (string_length "s"))) with
       | _s1352_ =>
          (size_mnemonic_matches_prefix _s1352_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s1353_ _) =>
              (match (string_drop _s1352_ _s1353_) with
               | _s1354_ =>
                  (maybe_aq_matches_prefix _s1354_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s1355_ _) =>
                      (match (string_drop _s1354_ _s1355_) with
                       | _s1356_ =>
                          (maybe_rl_matches_prefix _s1356_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s1357_ _) =>
                              (match (string_drop _s1356_ _s1357_) with
                               | _s1358_ =>
                                  (spc_matches_prefix _s1358_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s1359_ _) =>
                                      (match (string_drop _s1358_ _s1359_) with
                                       | _s1360_ =>
                                          (reg_name_matches_prefix _s1360_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs2, existT _ _s1361_ _) =>
                                              (match (string_drop _s1360_ _s1361_) with
                                               | _s1362_ =>
                                                  (sep_matches_prefix _s1362_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s1363_ _) =>
                                                      (match (string_drop _s1362_ _s1363_) with
                                                       | _s1364_ =>
                                                          (match (hex_bits_12_matches_prefix _s1364_) with
                                                           | Some (imm, existT _ _s1365_ _) =>
                                                              (match (string_drop _s1364_ _s1365_) with
                                                               | _s1366_ =>
                                                                  (opt_spc_matches_prefix _s1366_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__6 with
                                                                   | Some (tt, existT _ _s1367_ _) =>
                                                                      let _s1368_ :=
                                                                        string_drop _s1366_ _s1367_ in
                                                                      (if string_startswith _s1368_
                                                                            "(" then
                                                                         (match (string_drop _s1368_
                                                                                   (projT1
                                                                                    (string_length
                                                                                       "("))) with
                                                                          | _s1369_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s1369_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             (match w__7 with
                                                                              | Some
                                                                                (tt, existT _ _s1370_ _) =>
                                                                                 (match (string_drop
                                                                                           _s1369_
                                                                                           _s1370_) with
                                                                                  | _s1371_ =>
                                                                                     (reg_name_matches_prefix
                                                                                        _s1371_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     (match w__8 with
                                                                                      | Some
                                                                                        (rs1, existT _ _s1372_ _) =>
                                                                                         (match (string_drop
                                                                                                   _s1371_
                                                                                                   _s1372_) with
                                                                                          | _s1373_ =>
                                                                                             (opt_spc_matches_prefix
                                                                                                _s1373_) >>= fun w__9 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                               0)})) =>
                                                                                             returnm (match w__9 with
                                                                                                      | Some
                                                                                                        (tt, existT _ _s1374_ _) =>
                                                                                                         let _s1375_ :=
                                                                                                           string_drop
                                                                                                             _s1373_
                                                                                                             _s1374_ in
                                                                                                         if
                                                                                                           string_startswith
                                                                                                             _s1375_
                                                                                                             ")"
                                                                                                         then
                                                                                                           let p0_ :=
                                                                                                             string_drop
                                                                                                               _s1375_
                                                                                                               (projT1
                                                                                                                (string_length
                                                                                                                   ")")) in
                                                                                                           if
                                                                                                             generic_eq
                                                                                                               p0_
                                                                                                               ""
                                                                                                           then
                                                                                                             Some
                                                                                                               (size, aq, rl, rs2, imm, rs1)
                                                                                                           else
                                                                                                             None
                                                                                                         else
                                                                                                           None
                                                                                                      | _ =>
                                                                                                         None
                                                                                                      end)
                                                                                          end)
                                                                                          : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                      | _ =>
                                                                                         returnm None
                                                                                      end)
                                                                                      : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                  end)
                                                                                  : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                              | _ => returnm None
                                                                              end)
                                                                              : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                          end)
                                                                          : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                       else returnm None)
                                                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5))).

Definition _s1319_ (_s1320_ : string)
: M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5))) :=
   let _s1321_ := _s1320_ in
   (if string_startswith _s1321_ "l" then
      (match (string_drop _s1321_ (projT1 (string_length "l"))) with
       | _s1322_ =>
          (size_mnemonic_matches_prefix _s1322_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s1323_ _) =>
              (match (string_drop _s1322_ _s1323_) with
               | _s1324_ =>
                  (maybe_u_matches_prefix _s1324_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (is_unsigned, existT _ _s1325_ _) =>
                      (match (string_drop _s1324_ _s1325_) with
                       | _s1326_ =>
                          (maybe_aq_matches_prefix _s1326_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (aq, existT _ _s1327_ _) =>
                              (match (string_drop _s1326_ _s1327_) with
                               | _s1328_ =>
                                  (maybe_rl_matches_prefix _s1328_) >>= fun w__3 : option ((bool * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rl, existT _ _s1329_ _) =>
                                      (match (string_drop _s1328_ _s1329_) with
                                       | _s1330_ =>
                                          (spc_matches_prefix _s1330_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s1331_ _) =>
                                              (match (string_drop _s1330_ _s1331_) with
                                               | _s1332_ =>
                                                  (reg_name_matches_prefix _s1332_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (rd, existT _ _s1333_ _) =>
                                                      (match (string_drop _s1332_ _s1333_) with
                                                       | _s1334_ =>
                                                          (sep_matches_prefix _s1334_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (tt, existT _ _s1335_ _) =>
                                                              (match (string_drop _s1334_ _s1335_) with
                                                               | _s1336_ =>
                                                                  (match (hex_bits_12_matches_prefix
                                                                            _s1336_) with
                                                                   | Some (imm, existT _ _s1337_ _) =>
                                                                      (match (string_drop _s1336_
                                                                                _s1337_) with
                                                                       | _s1338_ =>
                                                                          (opt_spc_matches_prefix
                                                                             _s1338_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          (match w__7 with
                                                                           | Some
                                                                             (tt, existT _ _s1339_ _) =>
                                                                              let _s1340_ :=
                                                                                string_drop _s1338_
                                                                                  _s1339_ in
                                                                              (if string_startswith
                                                                                    _s1340_ "(" then
                                                                                 (match (string_drop
                                                                                           _s1340_
                                                                                           (projT1
                                                                                            (string_length
                                                                                               "("))) with
                                                                                  | _s1341_ =>
                                                                                     (opt_spc_matches_prefix
                                                                                        _s1341_) >>= fun w__8 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     (match w__8 with
                                                                                      | Some
                                                                                        (tt, existT _ _s1342_ _) =>
                                                                                         (match (string_drop
                                                                                                   _s1341_
                                                                                                   _s1342_) with
                                                                                          | _s1343_ =>
                                                                                             (reg_name_matches_prefix
                                                                                                _s1343_) >>= fun w__9 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                               0)})) =>
                                                                                             (match w__9 with
                                                                                              | Some
                                                                                                (rs1, existT _ _s1344_ _) =>
                                                                                                 (match (string_drop
                                                                                                           _s1343_
                                                                                                           _s1344_) with
                                                                                                  | _s1345_ =>
                                                                                                     (opt_spc_matches_prefix
                                                                                                        _s1345_) >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                                       0)})) =>
                                                                                                     returnm (match w__10 with
                                                                                                              | Some
                                                                                                                (tt, existT _ _s1346_ _) =>
                                                                                                                 let _s1347_ :=
                                                                                                                   string_drop
                                                                                                                     _s1345_
                                                                                                                     _s1346_ in
                                                                                                                 if
                                                                                                                   string_startswith
                                                                                                                     _s1347_
                                                                                                                     ")"
                                                                                                                 then
                                                                                                                   let p0_ :=
                                                                                                                     string_drop
                                                                                                                       _s1347_
                                                                                                                       (projT1
                                                                                                                        (string_length
                                                                                                                           ")")) in
                                                                                                                   if
                                                                                                                     generic_eq
                                                                                                                       p0_
                                                                                                                       ""
                                                                                                                   then
                                                                                                                     Some
                                                                                                                       (size, is_unsigned, aq, rl, rd, imm, rs1)
                                                                                                                   else
                                                                                                                     None
                                                                                                                 else
                                                                                                                   None
                                                                                                              | _ =>
                                                                                                                 None
                                                                                                              end)
                                                                                                  end)
                                                                                                  : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                              | _ =>
                                                                                                 returnm None
                                                                                              end)
                                                                                              : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                          end)
                                                                                          : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                      | _ =>
                                                                                         returnm None
                                                                                      end)
                                                                                      : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                  end)
                                                                                  : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                               else returnm None)
                                                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                           | _ => returnm None
                                                                           end)
                                                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                       end)
                                                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5))).

Definition _s1302_ (_s1303_ : string) : M (option ((rop * mword 5 * mword 5 * mword 5))) :=
   (match _s1303_ with
    | _s1304_ =>
       (rtype_mnemonic_matches_prefix _s1304_) >>= fun w__0 : option ((rop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1305_ _) =>
           (match (string_drop _s1304_ _s1305_) with
            | _s1306_ =>
               (spc_matches_prefix _s1306_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1307_ _) =>
                   (match (string_drop _s1306_ _s1307_) with
                    | _s1308_ =>
                       (reg_name_matches_prefix _s1308_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1309_ _) =>
                           (match (string_drop _s1308_ _s1309_) with
                            | _s1310_ =>
                               (sep_matches_prefix _s1310_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1311_ _) =>
                                   (match (string_drop _s1310_ _s1311_) with
                                    | _s1312_ =>
                                       (reg_name_matches_prefix _s1312_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1313_ _) =>
                                           (match (string_drop _s1312_ _s1313_) with
                                            | _s1314_ =>
                                               (sep_matches_prefix _s1314_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s1315_ _) =>
                                                   (match (string_drop _s1314_ _s1315_) with
                                                    | _s1316_ =>
                                                       (reg_name_matches_prefix _s1316_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s1317_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s1316_ _s1317_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (op, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((rop * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((rop * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((rop * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((rop * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((rop * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((rop * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((rop * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((rop * mword 5 * mword 5 * mword 5))).

Definition _s1285_ (_s1286_ : string) : M (option ((sop * mword 5 * mword 5 * mword 6))) :=
   (match _s1286_ with
    | _s1287_ =>
       (shiftiop_mnemonic_matches_prefix _s1287_) >>= fun w__0 : option ((sop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1288_ _) =>
           (match (string_drop _s1287_ _s1288_) with
            | _s1289_ =>
               (spc_matches_prefix _s1289_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1290_ _) =>
                   (match (string_drop _s1289_ _s1290_) with
                    | _s1291_ =>
                       (reg_name_matches_prefix _s1291_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1292_ _) =>
                           (match (string_drop _s1291_ _s1292_) with
                            | _s1293_ =>
                               (sep_matches_prefix _s1293_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1294_ _) =>
                                   (match (string_drop _s1293_ _s1294_) with
                                    | _s1295_ =>
                                       (reg_name_matches_prefix _s1295_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1296_ _) =>
                                           (match (string_drop _s1295_ _s1296_) with
                                            | _s1297_ =>
                                               (sep_matches_prefix _s1297_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s1298_ _) =>
                                                           match (string_drop _s1297_ _s1298_) with
                                                           | _s1299_ =>
                                                              match (hex_bits_6_matches_prefix
                                                                       _s1299_) with
                                                              | Some (shamt, existT _ _s1300_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s1299_ _s1300_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, shamt)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sop * mword 5 * mword 5 * mword 6)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sop * mword 5 * mword 5 * mword 6)))
                                    end)
                                    : M (option ((sop * mword 5 * mword 5 * mword 6)))
                                | _ => returnm None
                                end)
                                : M (option ((sop * mword 5 * mword 5 * mword 6)))
                            end)
                            : M (option ((sop * mword 5 * mword 5 * mword 6)))
                        | _ => returnm None
                        end)
                        : M (option ((sop * mword 5 * mword 5 * mword 6)))
                    end)
                    : M (option ((sop * mword 5 * mword 5 * mword 6)))
                | _ => returnm None
                end)
                : M (option ((sop * mword 5 * mword 5 * mword 6)))
            end)
            : M (option ((sop * mword 5 * mword 5 * mword 6)))
        | _ => returnm None
        end)
        : M (option ((sop * mword 5 * mword 5 * mword 6)))
    end)
    : M (option ((sop * mword 5 * mword 5 * mword 6))).

Definition _s1268_ (_s1269_ : string) : M (option ((iop * mword 5 * mword 5 * mword 12))) :=
   (match _s1269_ with
    | _s1270_ =>
       (itype_mnemonic_matches_prefix _s1270_) >>= fun w__0 : option ((iop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1271_ _) =>
           (match (string_drop _s1270_ _s1271_) with
            | _s1272_ =>
               (spc_matches_prefix _s1272_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1273_ _) =>
                   (match (string_drop _s1272_ _s1273_) with
                    | _s1274_ =>
                       (reg_name_matches_prefix _s1274_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1275_ _) =>
                           (match (string_drop _s1274_ _s1275_) with
                            | _s1276_ =>
                               (sep_matches_prefix _s1276_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1277_ _) =>
                                   (match (string_drop _s1276_ _s1277_) with
                                    | _s1278_ =>
                                       (reg_name_matches_prefix _s1278_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s1279_ _) =>
                                           (match (string_drop _s1278_ _s1279_) with
                                            | _s1280_ =>
                                               (sep_matches_prefix _s1280_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s1281_ _) =>
                                                           match (string_drop _s1280_ _s1281_) with
                                                           | _s1282_ =>
                                                              match (hex_bits_12_matches_prefix
                                                                       _s1282_) with
                                                              | Some (imm, existT _ _s1283_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s1282_ _s1283_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, imm)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((iop * mword 5 * mword 5 * mword 12)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((iop * mword 5 * mword 5 * mword 12)))
                                    end)
                                    : M (option ((iop * mword 5 * mword 5 * mword 12)))
                                | _ => returnm None
                                end)
                                : M (option ((iop * mword 5 * mword 5 * mword 12)))
                            end)
                            : M (option ((iop * mword 5 * mword 5 * mword 12)))
                        | _ => returnm None
                        end)
                        : M (option ((iop * mword 5 * mword 5 * mword 12)))
                    end)
                    : M (option ((iop * mword 5 * mword 5 * mword 12)))
                | _ => returnm None
                end)
                : M (option ((iop * mword 5 * mword 5 * mword 12)))
            end)
            : M (option ((iop * mword 5 * mword 5 * mword 12)))
        | _ => returnm None
        end)
        : M (option ((iop * mword 5 * mword 5 * mword 12)))
    end)
    : M (option ((iop * mword 5 * mword 5 * mword 12))).

Definition _s1251_ (_s1252_ : string) : M (option ((bop * mword 5 * mword 5 * mword 13))) :=
   (match _s1252_ with
    | _s1253_ =>
       (btype_mnemonic_matches_prefix _s1253_) >>= fun w__0 : option ((bop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1254_ _) =>
           (match (string_drop _s1253_ _s1254_) with
            | _s1255_ =>
               (spc_matches_prefix _s1255_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1256_ _) =>
                   (match (string_drop _s1255_ _s1256_) with
                    | _s1257_ =>
                       (reg_name_matches_prefix _s1257_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rs1, existT _ _s1258_ _) =>
                           (match (string_drop _s1257_ _s1258_) with
                            | _s1259_ =>
                               (sep_matches_prefix _s1259_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s1260_ _) =>
                                   (match (string_drop _s1259_ _s1260_) with
                                    | _s1261_ =>
                                       (reg_name_matches_prefix _s1261_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs2, existT _ _s1262_ _) =>
                                           (match (string_drop _s1261_ _s1262_) with
                                            | _s1263_ =>
                                               (sep_matches_prefix _s1263_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s1264_ _) =>
                                                           match (string_drop _s1263_ _s1264_) with
                                                           | _s1265_ =>
                                                              match (hex_bits_13_matches_prefix
                                                                       _s1265_) with
                                                              | Some (imm, existT _ _s1266_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s1265_ _s1266_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rs1, rs2, imm)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((bop * mword 5 * mword 5 * mword 13)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((bop * mword 5 * mword 5 * mword 13)))
                                    end)
                                    : M (option ((bop * mword 5 * mword 5 * mword 13)))
                                | _ => returnm None
                                end)
                                : M (option ((bop * mword 5 * mword 5 * mword 13)))
                            end)
                            : M (option ((bop * mword 5 * mword 5 * mword 13)))
                        | _ => returnm None
                        end)
                        : M (option ((bop * mword 5 * mword 5 * mword 13)))
                    end)
                    : M (option ((bop * mword 5 * mword 5 * mword 13)))
                | _ => returnm None
                end)
                : M (option ((bop * mword 5 * mword 5 * mword 13)))
            end)
            : M (option ((bop * mword 5 * mword 5 * mword 13)))
        | _ => returnm None
        end)
        : M (option ((bop * mword 5 * mword 5 * mword 13)))
    end)
    : M (option ((bop * mword 5 * mword 5 * mword 13))).

Definition _s1235_ (_s1236_ : string) : M (option ((mword 5 * mword 5 * mword 12))) :=
   let _s1237_ := _s1236_ in
   (if string_startswith _s1237_ "jalr" then
      (match (string_drop _s1237_ (projT1 (string_length "jalr"))) with
       | _s1238_ =>
          (spc_matches_prefix _s1238_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1239_ _) =>
              (match (string_drop _s1238_ _s1239_) with
               | _s1240_ =>
                  (reg_name_matches_prefix _s1240_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1241_ _) =>
                      (match (string_drop _s1240_ _s1241_) with
                       | _s1242_ =>
                          (sep_matches_prefix _s1242_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s1243_ _) =>
                              (match (string_drop _s1242_ _s1243_) with
                               | _s1244_ =>
                                  (reg_name_matches_prefix _s1244_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s1245_ _) =>
                                      (match (string_drop _s1244_ _s1245_) with
                                       | _s1246_ =>
                                          (sep_matches_prefix _s1246_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s1247_ _) =>
                                                      match (string_drop _s1246_ _s1247_) with
                                                      | _s1248_ =>
                                                         match (hex_bits_12_matches_prefix _s1248_) with
                                                         | Some (imm, existT _ _s1249_ _) =>
                                                            let p0_ := string_drop _s1248_ _s1249_ in
                                                            if generic_eq p0_ "" then
                                                              Some (rd, rs1, imm)
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 12)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 12)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 12)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 12)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 12)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 12)))
               end)
               : M (option ((mword 5 * mword 5 * mword 12)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 12)))
       end)
       : M (option ((mword 5 * mword 5 * mword 12)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 12))).

Definition _s1223_ (_s1224_ : string) : M (option ((mword 5 * mword 21))) :=
   let _s1225_ := _s1224_ in
   (if string_startswith _s1225_ "jal" then
      (match (string_drop _s1225_ (projT1 (string_length "jal"))) with
       | _s1226_ =>
          (spc_matches_prefix _s1226_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s1227_ _) =>
              (match (string_drop _s1226_ _s1227_) with
               | _s1228_ =>
                  (reg_name_matches_prefix _s1228_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s1229_ _) =>
                      (match (string_drop _s1228_ _s1229_) with
                       | _s1230_ =>
                          (sep_matches_prefix _s1230_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s1231_ _) =>
                                      match (string_drop _s1230_ _s1231_) with
                                      | _s1232_ =>
                                         match (hex_bits_21_matches_prefix _s1232_) with
                                         | Some (imm, existT _ _s1233_ _) =>
                                            let p0_ := string_drop _s1232_ _s1233_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 21)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 21)))
               end)
               : M (option ((mword 5 * mword 21)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 21)))
       end)
       : M (option ((mword 5 * mword 21)))
    else returnm None)
    : M (option ((mword 5 * mword 21))).

Definition _s1210_ (_s1211_ : string) : M (option ((uop * mword 5 * mword 20))) :=
   (match _s1211_ with
    | _s1212_ =>
       (utype_mnemonic_matches_prefix _s1212_) >>= fun w__0 : option ((uop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s1213_ _) =>
           (match (string_drop _s1212_ _s1213_) with
            | _s1214_ =>
               (spc_matches_prefix _s1214_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s1215_ _) =>
                   (match (string_drop _s1214_ _s1215_) with
                    | _s1216_ =>
                       (reg_name_matches_prefix _s1216_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s1217_ _) =>
                           (match (string_drop _s1216_ _s1217_) with
                            | _s1218_ =>
                               (sep_matches_prefix _s1218_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               returnm (match w__3 with
                                        | Some (tt, existT _ _s1219_ _) =>
                                           match (string_drop _s1218_ _s1219_) with
                                           | _s1220_ =>
                                              match (hex_bits_20_matches_prefix _s1220_) with
                                              | Some (imm, existT _ _s1221_ _) =>
                                                 let p0_ := string_drop _s1220_ _s1221_ in
                                                 if generic_eq p0_ "" then Some (op, rd, imm)
                                                 else None
                                              | _ => None
                                              end
                                           end
                                        | _ => None
                                        end)
                            end)
                            : M (option ((uop * mword 5 * mword 20)))
                        | _ => returnm None
                        end)
                        : M (option ((uop * mword 5 * mword 20)))
                    end)
                    : M (option ((uop * mword 5 * mword 20)))
                | _ => returnm None
                end)
                : M (option ((uop * mword 5 * mword 20)))
            end)
            : M (option ((uop * mword 5 * mword 20)))
        | _ => returnm None
        end)
        : M (option ((uop * mword 5 * mword 20)))
    end)
    : M (option ((uop * mword 5 * mword 20))).

Definition assembly_backwards (arg_ : string) : M (ast) :=
   let _s1222_ := arg_ in
   (_s1210_ _s1222_) >>= fun w__0 : option ((uop * mword 5 * mword 20)) =>
   (if match w__0 with | Some (op, rd, imm) => true | _ => false end then
      (_s1210_ _s1222_) >>= fun w__1 : option ((uop * mword 5 * mword 20)) =>
      (match w__1 with
       | Some (op, rd, imm) => returnm (UTYPE (imm, rd, op))
       | _ => exit tt  : M (ast)
       end)
       : M (ast)
    else
      (_s1223_ _s1222_) >>= fun w__4 : option ((mword 5 * mword 21)) =>
      (if match w__4 with | Some (rd, imm) => true | _ => false end then
         (_s1223_ _s1222_) >>= fun w__5 : option ((mword 5 * mword 21)) =>
         (match w__5 with
          | Some (rd, imm) => returnm (RISCV_JAL (imm, rd))
          | _ => exit tt  : M (ast)
          end)
          : M (ast)
       else
         (_s1235_ _s1222_) >>= fun w__8 : option ((mword 5 * mword 5 * mword 12)) =>
         (if match w__8 with | Some (rd, rs1, imm) => true | _ => false end then
            (_s1235_ _s1222_) >>= fun w__9 : option ((mword 5 * mword 5 * mword 12)) =>
            (match w__9 with
             | Some (rd, rs1, imm) => returnm (RISCV_JALR (imm, rs1, rd))
             | _ => exit tt  : M (ast)
             end)
             : M (ast)
          else
            (_s1251_ _s1222_) >>= fun w__12 : option ((bop * mword 5 * mword 5 * mword 13)) =>
            (if match w__12 with | Some (op, rs1, rs2, imm) => true | _ => false end then
               (_s1251_ _s1222_) >>= fun w__13 : option ((bop * mword 5 * mword 5 * mword 13)) =>
               (match w__13 with
                | Some (op, rs1, rs2, imm) => returnm (BTYPE (imm, rs2, rs1, op))
                | _ => exit tt  : M (ast)
                end)
                : M (ast)
             else
               (_s1268_ _s1222_) >>= fun w__16 : option ((iop * mword 5 * mword 5 * mword 12)) =>
               (if match w__16 with | Some (op, rd, rs1, imm) => true | _ => false end then
                  (_s1268_ _s1222_) >>= fun w__17 : option ((iop * mword 5 * mword 5 * mword 12)) =>
                  (match w__17 with
                   | Some (op, rd, rs1, imm) => returnm (ITYPE (imm, rs1, rd, op))
                   | _ => exit tt  : M (ast)
                   end)
                   : M (ast)
                else
                  (_s1285_ _s1222_) >>= fun w__20 : option ((sop * mword 5 * mword 5 * mword 6)) =>
                  (if match w__20 with | Some (op, rd, rs1, shamt) => true | _ => false end then
                     (_s1285_ _s1222_) >>= fun w__21 : option ((sop * mword 5 * mword 5 * mword 6)) =>
                     (match w__21 with
                      | Some (op, rd, rs1, shamt) => returnm (SHIFTIOP (shamt, rs1, rd, op))
                      | _ => exit tt  : M (ast)
                      end)
                      : M (ast)
                   else
                     (_s1302_ _s1222_) >>= fun w__24 : option ((rop * mword 5 * mword 5 * mword 5)) =>
                     (if match w__24 with | Some (op, rd, rs1, rs2) => true | _ => false end then
                        (_s1302_ _s1222_) >>= fun w__25 : option ((rop * mword 5 * mword 5 * mword 5)) =>
                        (match w__25 with
                         | Some (op, rd, rs1, rs2) => returnm (RTYPE (rs2, rs1, rd, op))
                         | _ => exit tt  : M (ast)
                         end)
                         : M (ast)
                      else
                        (_s1319_ _s1222_) >>= fun w__28 : option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)) =>
                        (if match w__28 with
                            | Some (size, is_unsigned, aq, rl, rd, imm, rs1) => true
                            | _ => false
                            end then
                           (_s1319_ _s1222_) >>= fun w__29 : option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)) =>
                           (match w__29 with
                            | Some (size, is_unsigned, aq, rl, rd, imm, rs1) =>
                               returnm (LOAD (imm, rs1, rd, is_unsigned, size, aq, rl))
                            | _ => exit tt  : M (ast)
                            end)
                            : M (ast)
                         else
                           (_s1349_ _s1222_) >>= fun w__32 : option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)) =>
                           (if match w__32 with
                               | Some (size, aq, rl, rs2, imm, rs1) => true
                               | _ => false
                               end then
                              (_s1349_ _s1222_) >>= fun w__33 : option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)) =>
                              (match w__33 with
                               | Some (size, aq, rl, rs2, imm, rs1) =>
                                  returnm (STORE (imm, rs2, rs1, size, aq, rl))
                               | _ => exit tt  : M (ast)
                               end)
                               : M (ast)
                            else
                              (_s1377_ _s1222_) >>= fun w__36 : option ((mword 5 * mword 5 * mword 12)) =>
                              (if match w__36 with
                                  | Some (rd, rs1, imm) => Z.eqb 32 64
                                  | _ => false
                                  end then
                                 (_s1377_ _s1222_) >>= fun w__37 : option ((mword 5 * mword 5 * mword 12)) =>
                                 (match w__37 with
                                  | Some (rd, rs1, imm) => returnm (ADDIW (imm, rs1, rd))
                                  | _ => exit tt  : M (ast)
                                  end)
                                  : M (ast)
                               else
                                 (_s1393_ _s1222_) >>= fun w__40 : option ((sop * mword 5 * mword 5 * mword 5)) =>
                                 (if match w__40 with
                                     | Some (op, rd, rs1, shamt) => Z.eqb 32 64
                                     | _ => false
                                     end then
                                    (_s1393_ _s1222_) >>= fun w__41 : option ((sop * mword 5 * mword 5 * mword 5)) =>
                                    (match w__41 with
                                     | Some (op, rd, rs1, shamt) =>
                                        returnm (SHIFTW (shamt, rs1, rd, op))
                                     | _ => exit tt  : M (ast)
                                     end)
                                     : M (ast)
                                  else
                                    (_s1410_ _s1222_) >>= fun w__44 : option ((ropw * mword 5 * mword 5 * mword 5)) =>
                                    (if match w__44 with
                                        | Some (op, rd, rs1, rs2) => Z.eqb 32 64
                                        | _ => false
                                        end then
                                       (_s1410_ _s1222_) >>= fun w__45 : option ((ropw * mword 5 * mword 5 * mword 5)) =>
                                       (match w__45 with
                                        | Some (op, rd, rs1, rs2) =>
                                           returnm (RTYPEW (rs2, rs1, rd, op))
                                        | _ => exit tt  : M (ast)
                                        end)
                                        : M (ast)
                                     else
                                       (_s1427_ _s1222_) >>= fun w__48 : option ((sopw * mword 5 * mword 5 * mword 5)) =>
                                       (if match w__48 with
                                           | Some (op, rd, rs1, shamt) => Z.eqb 32 64
                                           | _ => false
                                           end then
                                          (_s1427_ _s1222_) >>= fun w__49 : option ((sopw * mword 5 * mword 5 * mword 5)) =>
                                          (match w__49 with
                                           | Some (op, rd, rs1, shamt) =>
                                              returnm (SHIFTIWOP (shamt, rs1, rd, op))
                                           | _ => exit tt  : M (ast)
                                           end)
                                           : M (ast)
                                        else
                                          (_s1444_ _s1222_) >>= fun w__52 : option ((mword 4 * mword 4)) =>
                                          (if match w__52 with
                                              | Some (pred, succ) => true
                                              | _ => false
                                              end then
                                             (_s1444_ _s1222_) >>= fun w__53 : option ((mword 4 * mword 4)) =>
                                             (match w__53 with
                                              | Some (pred, succ) => returnm (FENCE (pred, succ))
                                              | _ => exit tt  : M (ast)
                                              end)
                                              : M (ast)
                                           else
                                             (_s1456_ _s1222_) >>= fun w__56 : option ((mword 4 * mword 4)) =>
                                             (if match w__56 with
                                                 | Some (pred, succ) => true
                                                 | _ => false
                                                 end then
                                                (_s1456_ _s1222_) >>= fun w__57 : option ((mword 4 * mword 4)) =>
                                                (match w__57 with
                                                 | Some (pred, succ) =>
                                                    returnm (FENCE_TSO (pred, succ))
                                                 | _ => exit tt  : M (ast)
                                                 end)
                                                 : M (ast)
                                              else if generic_eq _s1222_ "fence.i" then
                                                returnm (FENCEI tt)
                                              else if generic_eq _s1222_ "ecall" then
                                                returnm (ECALL tt)
                                              else if generic_eq _s1222_ "mret" then
                                                returnm (MRET tt)
                                              else if generic_eq _s1222_ "sret" then
                                                returnm (SRET tt)
                                              else if generic_eq _s1222_ "ebreak" then
                                                returnm (EBREAK tt)
                                              else if generic_eq _s1222_ "wfi" then returnm (WFI tt)
                                              else
                                                (_s1468_ _s1222_) >>= fun w__60 : option ((mword 5 * mword 5)) =>
                                                (if match w__60 with
                                                    | Some (rs1, rs2) => true
                                                    | _ => false
                                                    end then
                                                   (_s1468_ _s1222_) >>= fun w__61 : option ((mword 5 * mword 5)) =>
                                                   (match w__61 with
                                                    | Some (rs1, rs2) =>
                                                       returnm (SFENCE_VMA (rs1, rs2))
                                                    | _ => exit tt  : M (ast)
                                                    end)
                                                    : M (ast)
                                                 else
                                                   (_s1480_ _s1222_) >>= fun w__64 : option ((word_width * bool * bool * mword 5 * mword 5)) =>
                                                   (if match w__64 with
                                                       | Some (size, aq, rl, rd, rs1) => true
                                                       | _ => false
                                                       end then
                                                      (_s1480_ _s1222_) >>= fun w__65 : option ((word_width * bool * bool * mword 5 * mword 5)) =>
                                                      (match w__65 with
                                                       | Some (size, aq, rl, rd, rs1) =>
                                                          returnm (LOADRES (aq, rl, rs1, size, rd))
                                                       | _ => exit tt  : M (ast)
                                                       end)
                                                       : M (ast)
                                                    else
                                                      (_s1498_ _s1222_) >>= fun w__68 : option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                      (if match w__68 with
                                                          | Some (size, aq, rl, rd, rs1, rs2) =>
                                                             true
                                                          | _ => false
                                                          end then
                                                         (_s1498_ _s1222_) >>= fun w__69 : option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                         (match w__69 with
                                                          | Some (size, aq, rl, rd, rs1, rs2) =>
                                                             returnm (STORECON
                                                                        (aq, rl, rs2, rs1, size, rd))
                                                          | _ => exit tt  : M (ast)
                                                          end)
                                                          : M (ast)
                                                       else
                                                         (_s1520_ _s1222_) >>= fun w__72 : option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                         (if match w__72 with
                                                             | Some
                                                               (op, width, aq, rl, rd, rs2, rs1) =>
                                                                true
                                                             | _ => false
                                                             end then
                                                            (_s1520_ _s1222_) >>= fun w__73 : option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                            (match w__73 with
                                                             | Some
                                                               (op, width, aq, rl, rd, rs2, rs1) =>
                                                                returnm (AMO
                                                                           (op, aq, rl, rs2, rs1, width, rd))
                                                             | _ => exit tt  : M (ast)
                                                             end)
                                                             : M (ast)
                                                          else if generic_eq _s1222_ "c.nop" then
                                                            returnm (C_NOP tt)
                                                          else
                                                            (_s1546_ _s1222_) >>= fun w__76 : option ((mword 3 * mword 8)) =>
                                                            (if match w__76 with
                                                                | Some (rdc, nzimm) =>
                                                                   neq_vec nzimm (Ox"00"  : mword 8)
                                                                | _ => false
                                                                end then
                                                               (_s1546_ _s1222_) >>= fun w__77 : option ((mword 3 * mword 8)) =>
                                                               (match w__77 with
                                                                | Some (rdc, nzimm) =>
                                                                   returnm (C_ADDI4SPN (rdc, nzimm))
                                                                | _ => exit tt  : M (ast)
                                                                end)
                                                                : M (ast)
                                                             else
                                                               (_s1558_ _s1222_) >>= fun w__80 : option ((mword 3 * mword 3 * mword 5)) =>
                                                               (if match w__80 with
                                                                   | Some (rdc, rsc, uimm) => true
                                                                   | _ => false
                                                                   end then
                                                                  (_s1558_ _s1222_) >>= fun w__81 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                  (match w__81 with
                                                                   | Some (rdc, rsc, uimm) =>
                                                                      returnm (C_LW (uimm, rsc, rdc))
                                                                   | _ => exit tt  : M (ast)
                                                                   end)
                                                                   : M (ast)
                                                                else
                                                                  (_s1574_ _s1222_) >>= fun w__84 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                  (if match w__84 with
                                                                      | Some (rdc, rsc, uimm) =>
                                                                         Z.eqb 32 64
                                                                      | _ => false
                                                                      end then
                                                                     (_s1574_ _s1222_) >>= fun w__85 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                     (match w__85 with
                                                                      | Some (rdc, rsc, uimm) =>
                                                                         returnm (C_LD
                                                                                    (uimm, rsc, rdc))
                                                                      | _ => exit tt  : M (ast)
                                                                      end)
                                                                      : M (ast)
                                                                   else
                                                                     (_s1590_ _s1222_) >>= fun w__88 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                     (if match w__88 with
                                                                         | Some (rsc1, rsc2, uimm) =>
                                                                            true
                                                                         | _ => false
                                                                         end then
                                                                        (_s1590_ _s1222_) >>= fun w__89 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                        (match w__89 with
                                                                         | Some (rsc1, rsc2, uimm) =>
                                                                            returnm (C_SW
                                                                                       (uimm, rsc1, rsc2))
                                                                         | _ => exit tt  : M (ast)
                                                                         end)
                                                                         : M (ast)
                                                                      else
                                                                        (_s1606_ _s1222_) >>= fun w__92 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                        (if match w__92 with
                                                                            | Some
                                                                              (rsc1, rsc2, uimm) =>
                                                                               Z.eqb 32 64
                                                                            | _ => false
                                                                            end then
                                                                           (_s1606_ _s1222_) >>= fun w__93 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                           (match w__93 with
                                                                            | Some
                                                                              (rsc1, rsc2, uimm) =>
                                                                               returnm (C_SD
                                                                                          (uimm, rsc1, rsc2))
                                                                            | _ =>
                                                                               exit tt  : M (ast)
                                                                            end)
                                                                            : M (ast)
                                                                         else
                                                                           (_s1622_ _s1222_) >>= fun w__96 : option ((mword 5 * mword 6)) =>
                                                                           (if match w__96 with
                                                                               | Some (rsd, nzi) =>
                                                                                  andb
                                                                                    (neq_vec nzi
                                                                                       ('b"000000"
                                                                                        : mword 6))
                                                                                    (neq_vec rsd
                                                                                       zreg)
                                                                               | _ => false
                                                                               end then
                                                                              (_s1622_ _s1222_) >>= fun w__97 : option ((mword 5 * mword 6)) =>
                                                                              (match w__97 with
                                                                               | Some (rsd, nzi) =>
                                                                                  returnm (C_ADDI
                                                                                             (nzi, rsd))
                                                                               | _ =>
                                                                                  exit tt  : M (ast)
                                                                               end)
                                                                               : M (ast)
                                                                            else
                                                                              (_s1634_ _s1222_) >>= fun w__100 : option (mword 11) =>
                                                                              (if match w__100 with
                                                                                  | Some imm =>
                                                                                     Z.eqb 32 32
                                                                                  | _ => false
                                                                                  end then
                                                                                 (_s1634_ _s1222_) >>= fun w__101 : option (mword 11) =>
                                                                                 (match w__101 with
                                                                                  | Some imm =>
                                                                                     returnm (C_JAL
                                                                                                imm)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M (ast)
                                                                                  end)
                                                                                  : M (ast)
                                                                               else
                                                                                 (_s1642_ _s1222_) >>= fun w__104 : option ((mword 5 * mword 6)) =>
                                                                                 (if match w__104 with
                                                                                     | Some
                                                                                       (rsd, imm) =>
                                                                                        Z.eqb 32 64
                                                                                     | _ => false
                                                                                     end then
                                                                                    (_s1642_ _s1222_) >>= fun w__105 : option ((mword 5 * mword 6)) =>
                                                                                    (match w__105 with
                                                                                     | Some
                                                                                       (rsd, imm) =>
                                                                                        returnm (C_ADDIW
                                                                                                   (imm, rsd))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M (ast)
                                                                                     end)
                                                                                     : M (ast)
                                                                                  else
                                                                                    (_s1654_ _s1222_) >>= fun w__108 : option ((mword 5 * mword 6)) =>
                                                                                    (if match w__108 with
                                                                                        | Some
                                                                                          (rd, imm) =>
                                                                                           neq_vec
                                                                                             rd zreg
                                                                                        | _ => false
                                                                                        end then
                                                                                       (_s1654_
                                                                                          _s1222_) >>= fun w__109 : option ((mword 5 * mword 6)) =>
                                                                                       (match w__109 with
                                                                                        | Some
                                                                                          (rd, imm) =>
                                                                                           returnm (C_LI
                                                                                                      (imm, rd))
                                                                                        | _ =>
                                                                                           exit tt
                                                                                            : M (ast)
                                                                                        end)
                                                                                        : M (ast)
                                                                                     else
                                                                                       (_s1666_
                                                                                          _s1222_) >>= fun w__112 : option (mword 6) =>
                                                                                       (if match w__112 with
                                                                                           | Some
                                                                                             imm =>
                                                                                              neq_vec
                                                                                                imm
                                                                                                ('b"000000"
                                                                                                 : mword 6)
                                                                                           | _ =>
                                                                                              false
                                                                                           end then
                                                                                          (_s1666_
                                                                                             _s1222_) >>= fun w__113 : option (mword 6) =>
                                                                                          (match w__113 with
                                                                                           | Some
                                                                                             imm =>
                                                                                              returnm (C_ADDI16SP
                                                                                                         imm)
                                                                                           | _ =>
                                                                                              exit tt
                                                                                               : M (ast)
                                                                                           end)
                                                                                           : M (ast)
                                                                                        else
                                                                                          (_s1674_
                                                                                             _s1222_) >>= fun w__116 : option ((mword 5 * mword 6)) =>
                                                                                          (if match w__116 with
                                                                                              | Some
                                                                                                (rd, imm) =>
                                                                                                 andb
                                                                                                   (neq_vec
                                                                                                      rd
                                                                                                      zreg)
                                                                                                   (andb
                                                                                                      (neq_vec
                                                                                                         rd
                                                                                                         sp)
                                                                                                      (neq_vec
                                                                                                         imm
                                                                                                         ('b"000000"
                                                                                                          : mword 6)))
                                                                                              | _ =>
                                                                                                 false
                                                                                              end
                                                                                           then
                                                                                             (_s1674_
                                                                                                _s1222_) >>= fun w__117 : option ((mword 5 * mword 6)) =>
                                                                                             (match w__117 with
                                                                                              | Some
                                                                                                (rd, imm) =>
                                                                                                 returnm (C_LUI
                                                                                                            (imm, rd))
                                                                                              | _ =>
                                                                                                 exit tt
                                                                                                  : M (ast)
                                                                                              end)
                                                                                              : M (ast)
                                                                                           else
                                                                                             (_s1686_
                                                                                                _s1222_) >>= fun w__120 : option ((mword 3 * mword 6)) =>
                                                                                             (if match w__120 with
                                                                                                 | Some
                                                                                                   (rsd, shamt) =>
                                                                                                    neq_vec
                                                                                                      shamt
                                                                                                      ('b"000000"
                                                                                                       : mword 6)
                                                                                                 | _ =>
                                                                                                    false
                                                                                                 end
                                                                                              then
                                                                                                (_s1686_
                                                                                                   _s1222_) >>= fun w__121 : option ((mword 3 * mword 6)) =>
                                                                                                (match w__121 with
                                                                                                 | Some
                                                                                                   (rsd, shamt) =>
                                                                                                    returnm (C_SRLI
                                                                                                               (shamt, rsd))
                                                                                                 | _ =>
                                                                                                    exit tt
                                                                                                     : M (ast)
                                                                                                 end)
                                                                                                 : M (ast)
                                                                                              else
                                                                                                (_s1698_
                                                                                                   _s1222_) >>= fun w__124 : option ((mword 3 * mword 6)) =>
                                                                                                (if match w__124 with
                                                                                                    | Some
                                                                                                      (rsd, shamt) =>
                                                                                                       neq_vec
                                                                                                         shamt
                                                                                                         ('b"000000"
                                                                                                          : mword 6)
                                                                                                    | _ =>
                                                                                                       false
                                                                                                    end
                                                                                                 then
                                                                                                   (_s1698_
                                                                                                      _s1222_) >>= fun w__125 : option ((mword 3 * mword 6)) =>
                                                                                                   (match w__125 with
                                                                                                    | Some
                                                                                                      (rsd, shamt) =>
                                                                                                       returnm (C_SRAI
                                                                                                                  (shamt, rsd))
                                                                                                    | _ =>
                                                                                                       exit tt
                                                                                                        : M (ast)
                                                                                                    end)
                                                                                                    : M (ast)
                                                                                                 else
                                                                                                   (_s1710_
                                                                                                      _s1222_) >>= fun w__128 : option ((mword 3 * mword 6)) =>
                                                                                                   (if
                                                                                                      match w__128 with
                                                                                                      | Some
                                                                                                        (rsd, imm) =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                    then
                                                                                                      (_s1710_
                                                                                                         _s1222_) >>= fun w__129 : option ((mword 3 * mword 6)) =>
                                                                                                      (match w__129 with
                                                                                                       | Some
                                                                                                         (rsd, imm) =>
                                                                                                          returnm (C_ANDI
                                                                                                                     (imm, rsd))
                                                                                                       | _ =>
                                                                                                          exit tt
                                                                                                           : M (ast)
                                                                                                       end)
                                                                                                       : M (ast)
                                                                                                    else
                                                                                                      (_s1722_
                                                                                                         _s1222_) >>= fun w__132 : option ((mword 3 * mword 3)) =>
                                                                                                      (if
                                                                                                         match w__132 with
                                                                                                         | Some
                                                                                                           (rsd, rs2) =>
                                                                                                            true
                                                                                                         | _ =>
                                                                                                            false
                                                                                                         end
                                                                                                       then
                                                                                                         (_s1722_
                                                                                                            _s1222_) >>= fun w__133 : option ((mword 3 * mword 3)) =>
                                                                                                         (match w__133 with
                                                                                                          | Some
                                                                                                            (rsd, rs2) =>
                                                                                                             returnm (C_SUB
                                                                                                                        (rsd, rs2))
                                                                                                          | _ =>
                                                                                                             exit tt
                                                                                                              : M (ast)
                                                                                                          end)
                                                                                                          : M (ast)
                                                                                                       else
                                                                                                         (_s1734_
                                                                                                            _s1222_) >>= fun w__136 : option ((mword 3 * mword 3)) =>
                                                                                                         (if
                                                                                                            match w__136 with
                                                                                                            | Some
                                                                                                              (rsd, rs2) =>
                                                                                                               true
                                                                                                            | _ =>
                                                                                                               false
                                                                                                            end
                                                                                                          then
                                                                                                            (_s1734_
                                                                                                               _s1222_) >>= fun w__137 : option ((mword 3 * mword 3)) =>
                                                                                                            (match w__137 with
                                                                                                             | Some
                                                                                                               (rsd, rs2) =>
                                                                                                                returnm (C_XOR
                                                                                                                           (rsd, rs2))
                                                                                                             | _ =>
                                                                                                                exit tt
                                                                                                                 : M (ast)
                                                                                                             end)
                                                                                                             : M (ast)
                                                                                                          else
                                                                                                            (_s1746_
                                                                                                               _s1222_) >>= fun w__140 : option ((mword 3 * mword 3)) =>
                                                                                                            (if
                                                                                                               match w__140 with
                                                                                                               | Some
                                                                                                                 (rsd, rs2) =>
                                                                                                                  true
                                                                                                               | _ =>
                                                                                                                  false
                                                                                                               end
                                                                                                             then
                                                                                                               (_s1746_
                                                                                                                  _s1222_) >>= fun w__141 : option ((mword 3 * mword 3)) =>
                                                                                                               (match w__141 with
                                                                                                                | Some
                                                                                                                  (rsd, rs2) =>
                                                                                                                   returnm (C_OR
                                                                                                                              (rsd, rs2))
                                                                                                                | _ =>
                                                                                                                   exit tt
                                                                                                                    : M (ast)
                                                                                                                end)
                                                                                                                : M (ast)
                                                                                                             else
                                                                                                               (_s1758_
                                                                                                                  _s1222_) >>= fun w__144 : option ((mword 3 * mword 3)) =>
                                                                                                               (if
                                                                                                                  match w__144 with
                                                                                                                  | Some
                                                                                                                    (rsd, rs2) =>
                                                                                                                     true
                                                                                                                  | _ =>
                                                                                                                     false
                                                                                                                  end
                                                                                                                then
                                                                                                                  (_s1758_
                                                                                                                     _s1222_) >>= fun w__145 : option ((mword 3 * mword 3)) =>
                                                                                                                  (match w__145 with
                                                                                                                   | Some
                                                                                                                     (rsd, rs2) =>
                                                                                                                      returnm (C_AND
                                                                                                                                 (rsd, rs2))
                                                                                                                   | _ =>
                                                                                                                      exit tt
                                                                                                                       : M (ast)
                                                                                                                   end)
                                                                                                                   : M (ast)
                                                                                                                else
                                                                                                                  (_s1770_
                                                                                                                     _s1222_) >>= fun w__148 : option ((mword 3 * mword 3)) =>
                                                                                                                  (if
                                                                                                                     match w__148 with
                                                                                                                     | Some
                                                                                                                       (rsd, rs2) =>
                                                                                                                        Z.eqb
                                                                                                                          32
                                                                                                                          64
                                                                                                                     | _ =>
                                                                                                                        false
                                                                                                                     end
                                                                                                                   then
                                                                                                                     (_s1770_
                                                                                                                        _s1222_) >>= fun w__149 : option ((mword 3 * mword 3)) =>
                                                                                                                     (match w__149 with
                                                                                                                      | Some
                                                                                                                        (rsd, rs2) =>
                                                                                                                         returnm (C_SUBW
                                                                                                                                    (rsd, rs2))
                                                                                                                      | _ =>
                                                                                                                         exit tt
                                                                                                                          : M (ast)
                                                                                                                      end)
                                                                                                                      : M (ast)
                                                                                                                   else
                                                                                                                     (_s1782_
                                                                                                                        _s1222_) >>= fun w__152 : option ((mword 3 * mword 3)) =>
                                                                                                                     (if
                                                                                                                        match w__152 with
                                                                                                                        | Some
                                                                                                                          (rsd, rs2) =>
                                                                                                                           Z.eqb
                                                                                                                             32
                                                                                                                             64
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                      then
                                                                                                                        (_s1782_
                                                                                                                           _s1222_) >>= fun w__153 : option ((mword 3 * mword 3)) =>
                                                                                                                        (match w__153 with
                                                                                                                         | Some
                                                                                                                           (rsd, rs2) =>
                                                                                                                            returnm (C_ADDW
                                                                                                                                       (rsd, rs2))
                                                                                                                         | _ =>
                                                                                                                            exit tt
                                                                                                                             : M (ast)
                                                                                                                         end)
                                                                                                                         : M (ast)
                                                                                                                      else
                                                                                                                        (_s1794_
                                                                                                                           _s1222_) >>= fun w__156 : option (mword 11) =>
                                                                                                                        (if
                                                                                                                           match w__156 with
                                                                                                                           | Some
                                                                                                                             imm =>
                                                                                                                              true
                                                                                                                           | _ =>
                                                                                                                              false
                                                                                                                           end
                                                                                                                         then
                                                                                                                           (_s1794_
                                                                                                                              _s1222_) >>= fun w__157 : option (mword 11) =>
                                                                                                                           (match w__157 with
                                                                                                                            | Some
                                                                                                                              imm =>
                                                                                                                               returnm (C_J
                                                                                                                                          imm)
                                                                                                                            | _ =>
                                                                                                                               exit tt
                                                                                                                                : M (ast)
                                                                                                                            end)
                                                                                                                            : M (ast)
                                                                                                                         else
                                                                                                                           (_s1802_
                                                                                                                              _s1222_) >>= fun w__160 : option ((mword 3 * mword 8)) =>
                                                                                                                           (if
                                                                                                                              match w__160 with
                                                                                                                              | Some
                                                                                                                                (rs, imm) =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                            then
                                                                                                                              (_s1802_
                                                                                                                                 _s1222_) >>= fun w__161 : option ((mword 3 * mword 8)) =>
                                                                                                                              (match w__161 with
                                                                                                                               | Some
                                                                                                                                 (rs, imm) =>
                                                                                                                                  returnm (C_BEQZ
                                                                                                                                             (imm, rs))
                                                                                                                               | _ =>
                                                                                                                                  exit tt
                                                                                                                                   : M (ast)
                                                                                                                               end)
                                                                                                                               : M (ast)
                                                                                                                            else
                                                                                                                              (_s1814_
                                                                                                                                 _s1222_) >>= fun w__164 : option ((mword 3 * mword 8)) =>
                                                                                                                              (if
                                                                                                                                 match w__164 with
                                                                                                                                 | Some
                                                                                                                                   (rs, imm) =>
                                                                                                                                    true
                                                                                                                                 | _ =>
                                                                                                                                    false
                                                                                                                                 end
                                                                                                                               then
                                                                                                                                 (_s1814_
                                                                                                                                    _s1222_) >>= fun w__165 : option ((mword 3 * mword 8)) =>
                                                                                                                                 (match w__165 with
                                                                                                                                  | Some
                                                                                                                                    (rs, imm) =>
                                                                                                                                     returnm (C_BNEZ
                                                                                                                                                (imm, rs))
                                                                                                                                  | _ =>
                                                                                                                                     exit tt
                                                                                                                                      : M (ast)
                                                                                                                                  end)
                                                                                                                                  : M (ast)
                                                                                                                               else
                                                                                                                                 (_s1826_
                                                                                                                                    _s1222_) >>= fun w__168 : option ((mword 5 * mword 6)) =>
                                                                                                                                 (if
                                                                                                                                    match w__168 with
                                                                                                                                    | Some
                                                                                                                                      (rsd, shamt) =>
                                                                                                                                       andb
                                                                                                                                         (neq_vec
                                                                                                                                            shamt
                                                                                                                                            ('b"000000"
                                                                                                                                             : mword 6))
                                                                                                                                         (neq_vec
                                                                                                                                            rsd
                                                                                                                                            zreg)
                                                                                                                                    | _ =>
                                                                                                                                       false
                                                                                                                                    end
                                                                                                                                  then
                                                                                                                                    (_s1826_
                                                                                                                                       _s1222_) >>= fun w__169 : option ((mword 5 * mword 6)) =>
                                                                                                                                    (match w__169 with
                                                                                                                                     | Some
                                                                                                                                       (rsd, shamt) =>
                                                                                                                                        returnm (C_SLLI
                                                                                                                                                   (shamt, rsd))
                                                                                                                                     | _ =>
                                                                                                                                        exit tt
                                                                                                                                         : M (ast)
                                                                                                                                     end)
                                                                                                                                     : M (ast)
                                                                                                                                  else
                                                                                                                                    (_s1838_
                                                                                                                                       _s1222_) >>= fun w__172 : option ((mword 5 * mword 6)) =>
                                                                                                                                    (if
                                                                                                                                       match w__172 with
                                                                                                                                       | Some
                                                                                                                                         (rd, uimm) =>
                                                                                                                                          neq_vec
                                                                                                                                            rd
                                                                                                                                            zreg
                                                                                                                                       | _ =>
                                                                                                                                          false
                                                                                                                                       end
                                                                                                                                     then
                                                                                                                                       (_s1838_
                                                                                                                                          _s1222_) >>= fun w__173 : option ((mword 5 * mword 6)) =>
                                                                                                                                       (match w__173 with
                                                                                                                                        | Some
                                                                                                                                          (rd, uimm) =>
                                                                                                                                           returnm (C_LWSP
                                                                                                                                                      (uimm, rd))
                                                                                                                                        | _ =>
                                                                                                                                           exit tt
                                                                                                                                            : M (ast)
                                                                                                                                        end)
                                                                                                                                        : M (ast)
                                                                                                                                     else
                                                                                                                                       (_s1850_
                                                                                                                                          _s1222_) >>= fun w__176 : option ((mword 5 * mword 6)) =>
                                                                                                                                       (if
                                                                                                                                          match w__176 with
                                                                                                                                          | Some
                                                                                                                                            (rd, uimm) =>
                                                                                                                                             andb
                                                                                                                                               (neq_vec
                                                                                                                                                  rd
                                                                                                                                                  zreg)
                                                                                                                                               (Z.eqb
                                                                                                                                                  32
                                                                                                                                                  64)
                                                                                                                                          | _ =>
                                                                                                                                             false
                                                                                                                                          end
                                                                                                                                        then
                                                                                                                                          (_s1850_
                                                                                                                                             _s1222_) >>= fun w__177 : option ((mword 5 * mword 6)) =>
                                                                                                                                          (match w__177 with
                                                                                                                                           | Some
                                                                                                                                             (rd, uimm) =>
                                                                                                                                              returnm (C_LDSP
                                                                                                                                                         (uimm, rd))
                                                                                                                                           | _ =>
                                                                                                                                              exit tt
                                                                                                                                               : M (ast)
                                                                                                                                           end)
                                                                                                                                           : M (ast)
                                                                                                                                        else
                                                                                                                                          (_s1862_
                                                                                                                                             _s1222_) >>= fun w__180 : option ((mword 5 * mword 6)) =>
                                                                                                                                          (if
                                                                                                                                             match w__180 with
                                                                                                                                             | Some
                                                                                                                                               (rd, uimm) =>
                                                                                                                                                true
                                                                                                                                             | _ =>
                                                                                                                                                false
                                                                                                                                             end
                                                                                                                                           then
                                                                                                                                             (_s1862_
                                                                                                                                                _s1222_) >>= fun w__181 : option ((mword 5 * mword 6)) =>
                                                                                                                                             (match w__181 with
                                                                                                                                              | Some
                                                                                                                                                (rd, uimm) =>
                                                                                                                                                 returnm (C_SWSP
                                                                                                                                                            (uimm, rd))
                                                                                                                                              | _ =>
                                                                                                                                                 exit tt
                                                                                                                                                  : M (ast)
                                                                                                                                              end)
                                                                                                                                              : M (ast)
                                                                                                                                           else
                                                                                                                                             (_s1874_
                                                                                                                                                _s1222_) >>= fun w__184 : option ((mword 5 * mword 6)) =>
                                                                                                                                             (if
                                                                                                                                                match w__184 with
                                                                                                                                                | Some
                                                                                                                                                  (rs2, uimm) =>
                                                                                                                                                   Z.eqb
                                                                                                                                                     32
                                                                                                                                                     64
                                                                                                                                                | _ =>
                                                                                                                                                   false
                                                                                                                                                end
                                                                                                                                              then
                                                                                                                                                (_s1874_
                                                                                                                                                   _s1222_) >>= fun w__185 : option ((mword 5 * mword 6)) =>
                                                                                                                                                (match w__185 with
                                                                                                                                                 | Some
                                                                                                                                                   (rs2, uimm) =>
                                                                                                                                                    returnm (C_SDSP
                                                                                                                                                               (uimm, rs2))
                                                                                                                                                 | _ =>
                                                                                                                                                    exit tt
                                                                                                                                                     : M (ast)
                                                                                                                                                 end)
                                                                                                                                                 : M (ast)
                                                                                                                                              else
                                                                                                                                                (_s1886_
                                                                                                                                                   _s1222_) >>= fun w__188 : option (mword 5) =>
                                                                                                                                                (if
                                                                                                                                                   match w__188 with
                                                                                                                                                   | Some
                                                                                                                                                     rs1 =>
                                                                                                                                                      neq_vec
                                                                                                                                                        rs1
                                                                                                                                                        zreg
                                                                                                                                                   | _ =>
                                                                                                                                                      false
                                                                                                                                                   end
                                                                                                                                                 then
                                                                                                                                                   (_s1886_
                                                                                                                                                      _s1222_) >>= fun w__189 : option (mword 5) =>
                                                                                                                                                   (match w__189 with
                                                                                                                                                    | Some
                                                                                                                                                      rs1 =>
                                                                                                                                                       returnm (C_JR
                                                                                                                                                                  rs1)
                                                                                                                                                    | _ =>
                                                                                                                                                       exit tt
                                                                                                                                                        : M (ast)
                                                                                                                                                    end)
                                                                                                                                                    : M (ast)
                                                                                                                                                 else
                                                                                                                                                   (_s1894_
                                                                                                                                                      _s1222_) >>= fun w__192 : option (mword 5) =>
                                                                                                                                                   (if
                                                                                                                                                      match w__192 with
                                                                                                                                                      | Some
                                                                                                                                                        rs1 =>
                                                                                                                                                         neq_vec
                                                                                                                                                           rs1
                                                                                                                                                           zreg
                                                                                                                                                      | _ =>
                                                                                                                                                         false
                                                                                                                                                      end
                                                                                                                                                    then
                                                                                                                                                      (_s1894_
                                                                                                                                                         _s1222_) >>= fun w__193 : option (mword 5) =>
                                                                                                                                                      (match w__193 with
                                                                                                                                                       | Some
                                                                                                                                                         rs1 =>
                                                                                                                                                          returnm (C_JALR
                                                                                                                                                                     rs1)
                                                                                                                                                       | _ =>
                                                                                                                                                          exit tt
                                                                                                                                                           : M (ast)
                                                                                                                                                       end)
                                                                                                                                                       : M (ast)
                                                                                                                                                    else
                                                                                                                                                      (_s1902_
                                                                                                                                                         _s1222_) >>= fun w__196 : option ((mword 5 * mword 5)) =>
                                                                                                                                                      (if
                                                                                                                                                         match w__196 with
                                                                                                                                                         | Some
                                                                                                                                                           (rd, rs2) =>
                                                                                                                                                            andb
                                                                                                                                                              (neq_vec
                                                                                                                                                                 rd
                                                                                                                                                                 zreg)
                                                                                                                                                              (neq_vec
                                                                                                                                                                 rs2
                                                                                                                                                                 zreg)
                                                                                                                                                         | _ =>
                                                                                                                                                            false
                                                                                                                                                         end
                                                                                                                                                       then
                                                                                                                                                         (_s1902_
                                                                                                                                                            _s1222_) >>= fun w__197 : option ((mword 5 * mword 5)) =>
                                                                                                                                                         (match w__197 with
                                                                                                                                                          | Some
                                                                                                                                                            (rd, rs2) =>
                                                                                                                                                             returnm (C_MV
                                                                                                                                                                        (rd, rs2))
                                                                                                                                                          | _ =>
                                                                                                                                                             exit tt
                                                                                                                                                              : M (ast)
                                                                                                                                                          end)
                                                                                                                                                          : M (ast)
                                                                                                                                                       else if
                                                                                                                                                         generic_eq
                                                                                                                                                           _s1222_
                                                                                                                                                           "c.ebreak"
                                                                                                                                                       then
                                                                                                                                                         returnm (C_EBREAK
                                                                                                                                                                    tt)
                                                                                                                                                       else
                                                                                                                                                         (_s1914_
                                                                                                                                                            _s1222_) >>= fun w__200 : option ((mword 5 * mword 5)) =>
                                                                                                                                                         (if
                                                                                                                                                            match w__200 with
                                                                                                                                                            | Some
                                                                                                                                                              (rsd, rs2) =>
                                                                                                                                                               andb
                                                                                                                                                                 (neq_vec
                                                                                                                                                                    rsd
                                                                                                                                                                    zreg)
                                                                                                                                                                 (neq_vec
                                                                                                                                                                    rs2
                                                                                                                                                                    zreg)
                                                                                                                                                            | _ =>
                                                                                                                                                               false
                                                                                                                                                            end
                                                                                                                                                          then
                                                                                                                                                            (_s1914_
                                                                                                                                                               _s1222_) >>= fun w__201 : option ((mword 5 * mword 5)) =>
                                                                                                                                                            (match w__201 with
                                                                                                                                                             | Some
                                                                                                                                                               (rsd, rs2) =>
                                                                                                                                                                returnm (C_ADD
                                                                                                                                                                           (rsd, rs2))
                                                                                                                                                             | _ =>
                                                                                                                                                                exit tt
                                                                                                                                                                 : M (ast)
                                                                                                                                                             end)
                                                                                                                                                             : M (ast)
                                                                                                                                                          else
                                                                                                                                                            (_s1926_
                                                                                                                                                               _s1222_) >>= fun w__204 : option ((bool * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                            (if
                                                                                                                                                               match w__204 with
                                                                                                                                                               | Some
                                                                                                                                                                 (high, signed1, signed2, rd, rs1, rs2) =>
                                                                                                                                                                  true
                                                                                                                                                               | _ =>
                                                                                                                                                                  false
                                                                                                                                                               end
                                                                                                                                                             then
                                                                                                                                                               (_s1926_
                                                                                                                                                                  _s1222_) >>= fun w__205 : option ((bool * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                               (match w__205 with
                                                                                                                                                                | Some
                                                                                                                                                                  (high, signed1, signed2, rd, rs1, rs2) =>
                                                                                                                                                                   returnm (MUL
                                                                                                                                                                              (rs2, rs1, rd, high, signed1, signed2))
                                                                                                                                                                | _ =>
                                                                                                                                                                   exit tt
                                                                                                                                                                    : M (ast)
                                                                                                                                                                end)
                                                                                                                                                                : M (ast)
                                                                                                                                                             else
                                                                                                                                                               (_s1943_
                                                                                                                                                                  _s1222_) >>= fun w__208 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                               (if
                                                                                                                                                                  match w__208 with
                                                                                                                                                                  | Some
                                                                                                                                                                    (s, rd, rs1, rs2) =>
                                                                                                                                                                     true
                                                                                                                                                                  | _ =>
                                                                                                                                                                     false
                                                                                                                                                                  end
                                                                                                                                                                then
                                                                                                                                                                  (_s1943_
                                                                                                                                                                     _s1222_) >>= fun w__209 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                  (match w__209 with
                                                                                                                                                                   | Some
                                                                                                                                                                     (s, rd, rs1, rs2) =>
                                                                                                                                                                      returnm (DIV
                                                                                                                                                                                 (rs2, rs1, rd, s))
                                                                                                                                                                   | _ =>
                                                                                                                                                                      exit tt
                                                                                                                                                                       : M (ast)
                                                                                                                                                                   end)
                                                                                                                                                                   : M (ast)
                                                                                                                                                                else
                                                                                                                                                                  (_s1961_
                                                                                                                                                                     _s1222_) >>= fun w__212 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                  (if
                                                                                                                                                                     match w__212 with
                                                                                                                                                                     | Some
                                                                                                                                                                       (s, rd, rs1, rs2) =>
                                                                                                                                                                        true
                                                                                                                                                                     | _ =>
                                                                                                                                                                        false
                                                                                                                                                                     end
                                                                                                                                                                   then
                                                                                                                                                                     (_s1961_
                                                                                                                                                                        _s1222_) >>= fun w__213 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                     (match w__213 with
                                                                                                                                                                      | Some
                                                                                                                                                                        (s, rd, rs1, rs2) =>
                                                                                                                                                                         returnm (REM
                                                                                                                                                                                    (rs2, rs1, rd, s))
                                                                                                                                                                      | _ =>
                                                                                                                                                                         exit tt
                                                                                                                                                                          : M (ast)
                                                                                                                                                                      end)
                                                                                                                                                                      : M (ast)
                                                                                                                                                                   else
                                                                                                                                                                     (_s1979_
                                                                                                                                                                        _s1222_) >>= fun w__216 : option ((mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                     (if
                                                                                                                                                                        match w__216 with
                                                                                                                                                                        | Some
                                                                                                                                                                          (rd, rs1, rs2) =>
                                                                                                                                                                           Z.eqb
                                                                                                                                                                             32
                                                                                                                                                                             64
                                                                                                                                                                        | _ =>
                                                                                                                                                                           false
                                                                                                                                                                        end
                                                                                                                                                                      then
                                                                                                                                                                        (_s1979_
                                                                                                                                                                           _s1222_) >>= fun w__217 : option ((mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                        (match w__217 with
                                                                                                                                                                         | Some
                                                                                                                                                                           (rd, rs1, rs2) =>
                                                                                                                                                                            returnm (MULW
                                                                                                                                                                                       (rs2, rs1, rd))
                                                                                                                                                                         | _ =>
                                                                                                                                                                            exit tt
                                                                                                                                                                             : M (ast)
                                                                                                                                                                         end)
                                                                                                                                                                         : M (ast)
                                                                                                                                                                      else
                                                                                                                                                                        (_s1995_
                                                                                                                                                                           _s1222_) >>= fun w__220 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                        (if
                                                                                                                                                                           match w__220 with
                                                                                                                                                                           | Some
                                                                                                                                                                             (s, rd, rs1, rs2) =>
                                                                                                                                                                              Z.eqb
                                                                                                                                                                                32
                                                                                                                                                                                64
                                                                                                                                                                           | _ =>
                                                                                                                                                                              false
                                                                                                                                                                           end
                                                                                                                                                                         then
                                                                                                                                                                           (_s1995_
                                                                                                                                                                              _s1222_) >>= fun w__221 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                           (match w__221 with
                                                                                                                                                                            | Some
                                                                                                                                                                              (s, rd, rs1, rs2) =>
                                                                                                                                                                               returnm (DIVW
                                                                                                                                                                                          (rs2, rs1, rd, s))
                                                                                                                                                                            | _ =>
                                                                                                                                                                               exit tt
                                                                                                                                                                                : M (ast)
                                                                                                                                                                            end)
                                                                                                                                                                            : M (ast)
                                                                                                                                                                         else
                                                                                                                                                                           (_s2014_
                                                                                                                                                                              _s1222_) >>= fun w__224 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                           (if
                                                                                                                                                                              match w__224 with
                                                                                                                                                                              | Some
                                                                                                                                                                                (s, rd, rs1, rs2) =>
                                                                                                                                                                                 Z.eqb
                                                                                                                                                                                   32
                                                                                                                                                                                   64
                                                                                                                                                                              | _ =>
                                                                                                                                                                                 false
                                                                                                                                                                              end
                                                                                                                                                                            then
                                                                                                                                                                              (_s2014_
                                                                                                                                                                                 _s1222_) >>= fun w__225 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                              (match w__225 with
                                                                                                                                                                               | Some
                                                                                                                                                                                 (s, rd, rs1, rs2) =>
                                                                                                                                                                                  returnm (REMW
                                                                                                                                                                                             (rs2, rs1, rd, s))
                                                                                                                                                                               | _ =>
                                                                                                                                                                                  exit tt
                                                                                                                                                                                   : M (ast)
                                                                                                                                                                               end)
                                                                                                                                                                               : M (ast)
                                                                                                                                                                            else
                                                                                                                                                                              (_s2033_
                                                                                                                                                                                 _s1222_) >>= fun w__228 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                              (if
                                                                                                                                                                                 match w__228 with
                                                                                                                                                                                 | Some
                                                                                                                                                                                   (op, rd, csr, rs1) =>
                                                                                                                                                                                    true
                                                                                                                                                                                 | _ =>
                                                                                                                                                                                    false
                                                                                                                                                                                 end
                                                                                                                                                                               then
                                                                                                                                                                                 (_s2033_
                                                                                                                                                                                    _s1222_) >>= fun w__229 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                 (match w__229 with
                                                                                                                                                                                  | Some
                                                                                                                                                                                    (op, rd, csr, rs1) =>
                                                                                                                                                                                     returnm (CSR
                                                                                                                                                                                                (csr, rs1, rd, true, op))
                                                                                                                                                                                  | _ =>
                                                                                                                                                                                     exit tt
                                                                                                                                                                                      : M (ast)
                                                                                                                                                                                  end)
                                                                                                                                                                                  : M (ast)
                                                                                                                                                                               else
                                                                                                                                                                                 (_s2051_
                                                                                                                                                                                    _s1222_) >>= fun w__232 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                 (if
                                                                                                                                                                                    match w__232 with
                                                                                                                                                                                    | Some
                                                                                                                                                                                      (op, rd, csr, rs1) =>
                                                                                                                                                                                       true
                                                                                                                                                                                    | _ =>
                                                                                                                                                                                       false
                                                                                                                                                                                    end
                                                                                                                                                                                  then
                                                                                                                                                                                    (_s2051_
                                                                                                                                                                                       _s1222_) >>= fun w__233 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                    (match w__233 with
                                                                                                                                                                                     | Some
                                                                                                                                                                                       (op, rd, csr, rs1) =>
                                                                                                                                                                                        returnm (CSR
                                                                                                                                                                                                   (csr, rs1, rd, false, op))
                                                                                                                                                                                     | _ =>
                                                                                                                                                                                        exit tt
                                                                                                                                                                                         : M (ast)
                                                                                                                                                                                     end)
                                                                                                                                                                                     : M (ast)
                                                                                                                                                                                  else if
                                                                                                                                                                                    generic_eq
                                                                                                                                                                                      _s1222_
                                                                                                                                                                                      "uret"
                                                                                                                                                                                  then
                                                                                                                                                                                    returnm (URET
                                                                                                                                                                                               tt)
                                                                                                                                                                                  else
                                                                                                                                                                                    (_s2068_
                                                                                                                                                                                       _s1222_) >>= fun w__236 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                    (if
                                                                                                                                                                                       match w__236 with
                                                                                                                                                                                       | Some
                                                                                                                                                                                         (width, rd, imm, rs1) =>
                                                                                                                                                                                          true
                                                                                                                                                                                       | _ =>
                                                                                                                                                                                          false
                                                                                                                                                                                       end
                                                                                                                                                                                     then
                                                                                                                                                                                       (_s2068_
                                                                                                                                                                                          _s1222_) >>= fun w__237 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                       (match w__237 with
                                                                                                                                                                                        | Some
                                                                                                                                                                                          (width, rd, imm, rs1) =>
                                                                                                                                                                                           returnm (LOAD_FP
                                                                                                                                                                                                      (imm, rs1, rd, width))
                                                                                                                                                                                        | _ =>
                                                                                                                                                                                           exit tt
                                                                                                                                                                                            : M (ast)
                                                                                                                                                                                        end)
                                                                                                                                                                                        : M (ast)
                                                                                                                                                                                     else
                                                                                                                                                                                       (_s2092_
                                                                                                                                                                                          _s1222_) >>= fun w__240 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                       (if
                                                                                                                                                                                          match w__240 with
                                                                                                                                                                                          | Some
                                                                                                                                                                                            (width, rs2, imm, rs1) =>
                                                                                                                                                                                             true
                                                                                                                                                                                          | _ =>
                                                                                                                                                                                             false
                                                                                                                                                                                          end
                                                                                                                                                                                        then
                                                                                                                                                                                          (_s2092_
                                                                                                                                                                                             _s1222_) >>= fun w__241 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                          (match w__241 with
                                                                                                                                                                                           | Some
                                                                                                                                                                                             (width, rs2, imm, rs1) =>
                                                                                                                                                                                              returnm (STORE_FP
                                                                                                                                                                                                         (imm, rs2, rs1, width))
                                                                                                                                                                                           | _ =>
                                                                                                                                                                                              exit tt
                                                                                                                                                                                               : M (ast)
                                                                                                                                                                                           end)
                                                                                                                                                                                           : M (ast)
                                                                                                                                                                                        else
                                                                                                                                                                                          (_s2116_
                                                                                                                                                                                             _s1222_) >>= fun w__244 : option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                          (if
                                                                                                                                                                                             match w__244 with
                                                                                                                                                                                             | Some
                                                                                                                                                                                               (op, rd, rs1, rs2, rs3, rm) =>
                                                                                                                                                                                                true
                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                false
                                                                                                                                                                                             end
                                                                                                                                                                                           then
                                                                                                                                                                                             (_s2116_
                                                                                                                                                                                                _s1222_) >>= fun w__245 : option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                             (match w__245 with
                                                                                                                                                                                              | Some
                                                                                                                                                                                                (op, rd, rs1, rs2, rs3, rm) =>
                                                                                                                                                                                                 returnm (F_MADD_TYPE_S
                                                                                                                                                                                                            (rs3, rs2, rs1, rm, rd, op))
                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                 exit tt
                                                                                                                                                                                                  : M (ast)
                                                                                                                                                                                              end)
                                                                                                                                                                                              : M (ast)
                                                                                                                                                                                           else
                                                                                                                                                                                             (_s2141_
                                                                                                                                                                                                _s1222_) >>= fun w__248 : option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                             (if
                                                                                                                                                                                                match w__248 with
                                                                                                                                                                                                | Some
                                                                                                                                                                                                  (op, rd, rs1, rs2, rm) =>
                                                                                                                                                                                                   true
                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                   false
                                                                                                                                                                                                end
                                                                                                                                                                                              then
                                                                                                                                                                                                (_s2141_
                                                                                                                                                                                                   _s1222_) >>= fun w__249 : option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                (match w__249 with
                                                                                                                                                                                                 | Some
                                                                                                                                                                                                   (op, rd, rs1, rs2, rm) =>
                                                                                                                                                                                                    returnm (F_BIN_RM_TYPE_S
                                                                                                                                                                                                               (rs2, rs1, rm, rd, op))
                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                    exit tt
                                                                                                                                                                                                     : M (ast)
                                                                                                                                                                                                 end)
                                                                                                                                                                                                 : M (ast)
                                                                                                                                                                                              else
                                                                                                                                                                                                (_s2162_
                                                                                                                                                                                                   _s1222_) >>= fun w__252 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                (if
                                                                                                                                                                                                   match w__252 with
                                                                                                                                                                                                   | Some
                                                                                                                                                                                                     (FSQRT_S, rd, rs1, rm) =>
                                                                                                                                                                                                      true
                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                      false
                                                                                                                                                                                                   end
                                                                                                                                                                                                 then
                                                                                                                                                                                                   (_s2162_
                                                                                                                                                                                                      _s1222_) >>= fun w__253 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                   (match w__253 with
                                                                                                                                                                                                    | Some
                                                                                                                                                                                                      (FSQRT_S, rd, rs1, rm) =>
                                                                                                                                                                                                       returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                  (rs1, rm, rd, FSQRT_S))
                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                       exit tt
                                                                                                                                                                                                        : M (ast)
                                                                                                                                                                                                    end)
                                                                                                                                                                                                    : M (ast)
                                                                                                                                                                                                 else
                                                                                                                                                                                                   (_s2179_
                                                                                                                                                                                                      _s1222_) >>= fun w__256 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                   (if
                                                                                                                                                                                                      match w__256 with
                                                                                                                                                                                                      | Some
                                                                                                                                                                                                        (FCVT_W_S, rd, rs1, rm) =>
                                                                                                                                                                                                         true
                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                         false
                                                                                                                                                                                                      end
                                                                                                                                                                                                    then
                                                                                                                                                                                                      (_s2179_
                                                                                                                                                                                                         _s1222_) >>= fun w__257 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                      (match w__257 with
                                                                                                                                                                                                       | Some
                                                                                                                                                                                                         (FCVT_W_S, rd, rs1, rm) =>
                                                                                                                                                                                                          returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                     (rs1, rm, rd, FCVT_W_S))
                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                          exit tt
                                                                                                                                                                                                           : M (ast)
                                                                                                                                                                                                       end)
                                                                                                                                                                                                       : M (ast)
                                                                                                                                                                                                    else
                                                                                                                                                                                                      (_s2196_
                                                                                                                                                                                                         _s1222_) >>= fun w__260 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                      (if
                                                                                                                                                                                                         match w__260 with
                                                                                                                                                                                                         | Some
                                                                                                                                                                                                           (FCVT_WU_S, rd, rs1, rm) =>
                                                                                                                                                                                                            true
                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                            false
                                                                                                                                                                                                         end
                                                                                                                                                                                                       then
                                                                                                                                                                                                         (_s2196_
                                                                                                                                                                                                            _s1222_) >>= fun w__261 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                         (match w__261 with
                                                                                                                                                                                                          | Some
                                                                                                                                                                                                            (FCVT_WU_S, rd, rs1, rm) =>
                                                                                                                                                                                                             returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                        (rs1, rm, rd, FCVT_WU_S))
                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                             exit tt
                                                                                                                                                                                                              : M (ast)
                                                                                                                                                                                                          end)
                                                                                                                                                                                                          : M (ast)
                                                                                                                                                                                                       else
                                                                                                                                                                                                         (_s2213_
                                                                                                                                                                                                            _s1222_) >>= fun w__264 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                         (if
                                                                                                                                                                                                            match w__264 with
                                                                                                                                                                                                            | Some
                                                                                                                                                                                                              (FCVT_S_W, rd, rs1, rm) =>
                                                                                                                                                                                                               true
                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                               false
                                                                                                                                                                                                            end
                                                                                                                                                                                                          then
                                                                                                                                                                                                            (_s2213_
                                                                                                                                                                                                               _s1222_) >>= fun w__265 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                            (match w__265 with
                                                                                                                                                                                                             | Some
                                                                                                                                                                                                               (FCVT_S_W, rd, rs1, rm) =>
                                                                                                                                                                                                                returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                           (rs1, rm, rd, FCVT_S_W))
                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                exit tt
                                                                                                                                                                                                                 : M (ast)
                                                                                                                                                                                                             end)
                                                                                                                                                                                                             : M (ast)
                                                                                                                                                                                                          else
                                                                                                                                                                                                            (_s2230_
                                                                                                                                                                                                               _s1222_) >>= fun w__268 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                            (if
                                                                                                                                                                                                               match w__268 with
                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                 (FCVT_S_WU, rd, rs1, rm) =>
                                                                                                                                                                                                                  true
                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                  false
                                                                                                                                                                                                               end
                                                                                                                                                                                                             then
                                                                                                                                                                                                               (_s2230_
                                                                                                                                                                                                                  _s1222_) >>= fun w__269 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                               (match w__269 with
                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                  (FCVT_S_WU, rd, rs1, rm) =>
                                                                                                                                                                                                                   returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                              (rs1, rm, rd, FCVT_S_WU))
                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                   exit tt
                                                                                                                                                                                                                    : M (ast)
                                                                                                                                                                                                                end)
                                                                                                                                                                                                                : M (ast)
                                                                                                                                                                                                             else
                                                                                                                                                                                                               (_s2247_
                                                                                                                                                                                                                  _s1222_) >>= fun w__272 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                               (if
                                                                                                                                                                                                                  match w__272 with
                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                    (FCVT_L_S, rd, rs1, rm) =>
                                                                                                                                                                                                                     true
                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                     false
                                                                                                                                                                                                                  end
                                                                                                                                                                                                                then
                                                                                                                                                                                                                  (_s2247_
                                                                                                                                                                                                                     _s1222_) >>= fun w__273 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                  (match w__273 with
                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                     (FCVT_L_S, rd, rs1, rm) =>
                                                                                                                                                                                                                      returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                 (rs1, rm, rd, FCVT_L_S))
                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                      exit tt
                                                                                                                                                                                                                       : M (ast)
                                                                                                                                                                                                                   end)
                                                                                                                                                                                                                   : M (ast)
                                                                                                                                                                                                                else
                                                                                                                                                                                                                  (_s2264_
                                                                                                                                                                                                                     _s1222_) >>= fun w__276 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                  (if
                                                                                                                                                                                                                     match w__276 with
                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                       (FCVT_LU_S, rd, rs1, rm) =>
                                                                                                                                                                                                                        true
                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                        false
                                                                                                                                                                                                                     end
                                                                                                                                                                                                                   then
                                                                                                                                                                                                                     (_s2264_
                                                                                                                                                                                                                        _s1222_) >>= fun w__277 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                     (match w__277 with
                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                        (FCVT_LU_S, rd, rs1, rm) =>
                                                                                                                                                                                                                         returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                    (rs1, rm, rd, FCVT_LU_S))
                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                         exit tt
                                                                                                                                                                                                                          : M (ast)
                                                                                                                                                                                                                      end)
                                                                                                                                                                                                                      : M (ast)
                                                                                                                                                                                                                   else
                                                                                                                                                                                                                     (_s2281_
                                                                                                                                                                                                                        _s1222_) >>= fun w__280 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                     (if
                                                                                                                                                                                                                        match w__280 with
                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                          (FCVT_S_L, rd, rs1, rm) =>
                                                                                                                                                                                                                           true
                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                           false
                                                                                                                                                                                                                        end
                                                                                                                                                                                                                      then
                                                                                                                                                                                                                        (_s2281_
                                                                                                                                                                                                                           _s1222_) >>= fun w__281 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                        (match w__281 with
                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                           (FCVT_S_L, rd, rs1, rm) =>
                                                                                                                                                                                                                            returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                       (rs1, rm, rd, FCVT_S_L))
                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                            exit tt
                                                                                                                                                                                                                             : M (ast)
                                                                                                                                                                                                                         end)
                                                                                                                                                                                                                         : M (ast)
                                                                                                                                                                                                                      else
                                                                                                                                                                                                                        (_s2298_
                                                                                                                                                                                                                           _s1222_) >>= fun w__284 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                        (if
                                                                                                                                                                                                                           match w__284 with
                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                             (FCVT_S_LU, rd, rs1, rm) =>
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                              false
                                                                                                                                                                                                                           end
                                                                                                                                                                                                                         then
                                                                                                                                                                                                                           (_s2298_
                                                                                                                                                                                                                              _s1222_) >>= fun w__285 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                           (match w__285 with
                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                              (FCVT_S_LU, rd, rs1, rm) =>
                                                                                                                                                                                                                               returnm (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                          (rs1, rm, rd, FCVT_S_LU))
                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                               exit tt
                                                                                                                                                                                                                                : M (ast)
                                                                                                                                                                                                                            end)
                                                                                                                                                                                                                            : M (ast)
                                                                                                                                                                                                                         else
                                                                                                                                                                                                                           (_s2315_
                                                                                                                                                                                                                              _s1222_) >>= fun w__288 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                           (if
                                                                                                                                                                                                                              match w__288 with
                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                (FSGNJ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                 true
                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                 false
                                                                                                                                                                                                                              end
                                                                                                                                                                                                                            then
                                                                                                                                                                                                                              (_s2315_
                                                                                                                                                                                                                                 _s1222_) >>= fun w__289 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                              (match w__289 with
                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                 (FSGNJ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                  returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                             (rs2, rs1, rd, FSGNJ_S))
                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                  exit tt
                                                                                                                                                                                                                                   : M (ast)
                                                                                                                                                                                                                               end)
                                                                                                                                                                                                                               : M (ast)
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                              (_s2332_
                                                                                                                                                                                                                                 _s1222_) >>= fun w__292 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                              (if
                                                                                                                                                                                                                                 match w__292 with
                                                                                                                                                                                                                                 | Some
                                                                                                                                                                                                                                   (FSGNJN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                                                    false
                                                                                                                                                                                                                                 end
                                                                                                                                                                                                                               then
                                                                                                                                                                                                                                 (_s2332_
                                                                                                                                                                                                                                    _s1222_) >>= fun w__293 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                 (match w__293 with
                                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                                    (FSGNJN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                     returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                (rs2, rs1, rd, FSGNJN_S))
                                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                                     exit tt
                                                                                                                                                                                                                                      : M (ast)
                                                                                                                                                                                                                                  end)
                                                                                                                                                                                                                                  : M (ast)
                                                                                                                                                                                                                               else
                                                                                                                                                                                                                                 (_s2349_
                                                                                                                                                                                                                                    _s1222_) >>= fun w__296 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                 (if
                                                                                                                                                                                                                                    match w__296 with
                                                                                                                                                                                                                                    | Some
                                                                                                                                                                                                                                      (FSGNJX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                       true
                                                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                                                       false
                                                                                                                                                                                                                                    end
                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                    (_s2349_
                                                                                                                                                                                                                                       _s1222_) >>= fun w__297 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                    (match w__297 with
                                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                                       (FSGNJX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                        returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                   (rs2, rs1, rd, FSGNJX_S))
                                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                                        exit tt
                                                                                                                                                                                                                                         : M (ast)
                                                                                                                                                                                                                                     end)
                                                                                                                                                                                                                                     : M (ast)
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                    (_s2366_
                                                                                                                                                                                                                                       _s1222_) >>= fun w__300 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                    (if
                                                                                                                                                                                                                                       match w__300 with
                                                                                                                                                                                                                                       | Some
                                                                                                                                                                                                                                         (FMIN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                                                          false
                                                                                                                                                                                                                                       end
                                                                                                                                                                                                                                     then
                                                                                                                                                                                                                                       (_s2366_
                                                                                                                                                                                                                                          _s1222_) >>= fun w__301 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                       (match w__301 with
                                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                                          (FMIN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                           returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                      (rs2, rs1, rd, FMIN_S))
                                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                                           exit tt
                                                                                                                                                                                                                                            : M (ast)
                                                                                                                                                                                                                                        end)
                                                                                                                                                                                                                                        : M (ast)
                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                       (_s2383_
                                                                                                                                                                                                                                          _s1222_) >>= fun w__304 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                       (if
                                                                                                                                                                                                                                          match w__304 with
                                                                                                                                                                                                                                          | Some
                                                                                                                                                                                                                                            (FMAX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                             true
                                                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                                                             false
                                                                                                                                                                                                                                          end
                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                          (_s2383_
                                                                                                                                                                                                                                             _s1222_) >>= fun w__305 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                          (match w__305 with
                                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                                             (FMAX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                              returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                         (rs2, rs1, rd, FMAX_S))
                                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                                              exit tt
                                                                                                                                                                                                                                               : M (ast)
                                                                                                                                                                                                                                           end)
                                                                                                                                                                                                                                           : M (ast)
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                          (_s2400_
                                                                                                                                                                                                                                             _s1222_) >>= fun w__308 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                          (if
                                                                                                                                                                                                                                             match w__308 with
                                                                                                                                                                                                                                             | Some
                                                                                                                                                                                                                                               (FEQ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                                                false
                                                                                                                                                                                                                                             end
                                                                                                                                                                                                                                           then
                                                                                                                                                                                                                                             (_s2400_
                                                                                                                                                                                                                                                _s1222_) >>= fun w__309 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                             (match w__309 with
                                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                                (FEQ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                 returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                            (rs2, rs1, rd, FEQ_S))
                                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                                 exit tt
                                                                                                                                                                                                                                                  : M (ast)
                                                                                                                                                                                                                                              end)
                                                                                                                                                                                                                                              : M (ast)
                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                             (_s2417_
                                                                                                                                                                                                                                                _s1222_) >>= fun w__312 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                             (if
                                                                                                                                                                                                                                                match w__312 with
                                                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                                                  (FLT_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                   true
                                                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                                                   false
                                                                                                                                                                                                                                                end
                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                (_s2417_
                                                                                                                                                                                                                                                   _s1222_) >>= fun w__313 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                (match w__313 with
                                                                                                                                                                                                                                                 | Some
                                                                                                                                                                                                                                                   (FLT_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                    returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                               (rs2, rs1, rd, FLT_S))
                                                                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                                                                    exit tt
                                                                                                                                                                                                                                                     : M (ast)
                                                                                                                                                                                                                                                 end)
                                                                                                                                                                                                                                                 : M (ast)
                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                (_s2434_
                                                                                                                                                                                                                                                   _s1222_) >>= fun w__316 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                (if
                                                                                                                                                                                                                                                   match w__316 with
                                                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                                                     (FLE_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                                                      false
                                                                                                                                                                                                                                                   end
                                                                                                                                                                                                                                                 then
                                                                                                                                                                                                                                                   (_s2434_
                                                                                                                                                                                                                                                      _s1222_) >>= fun w__317 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                   (match w__317 with
                                                                                                                                                                                                                                                    | Some
                                                                                                                                                                                                                                                      (FLE_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                       returnm (F_BIN_TYPE_S
                                                                                                                                                                                                                                                                  (rs2, rs1, rd, FLE_S))
                                                                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                                                                       exit tt
                                                                                                                                                                                                                                                        : M (ast)
                                                                                                                                                                                                                                                    end)
                                                                                                                                                                                                                                                    : M (ast)
                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                   (_s2451_
                                                                                                                                                                                                                                                      _s1222_) >>= fun w__320 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                   (if
                                                                                                                                                                                                                                                      match w__320 with
                                                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                                                        (FMV_X_W, rd, rs1) =>
                                                                                                                                                                                                                                                         true
                                                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                                                         false
                                                                                                                                                                                                                                                      end
                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                      (_s2451_
                                                                                                                                                                                                                                                         _s1222_) >>= fun w__321 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                      (match w__321 with
                                                                                                                                                                                                                                                       | Some
                                                                                                                                                                                                                                                         (FMV_X_W, rd, rs1) =>
                                                                                                                                                                                                                                                          returnm (F_UN_TYPE_S
                                                                                                                                                                                                                                                                     (rs1, rd, FMV_X_W))
                                                                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                                                                          exit tt
                                                                                                                                                                                                                                                           : M (ast)
                                                                                                                                                                                                                                                       end)
                                                                                                                                                                                                                                                       : M (ast)
                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                      (_s2464_
                                                                                                                                                                                                                                                         _s1222_) >>= fun w__324 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                      (if
                                                                                                                                                                                                                                                         match w__324 with
                                                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                                                           (FMV_W_X, rd, rs1) =>
                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                                                            false
                                                                                                                                                                                                                                                         end
                                                                                                                                                                                                                                                       then
                                                                                                                                                                                                                                                         (_s2464_
                                                                                                                                                                                                                                                            _s1222_) >>= fun w__325 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                         (match w__325 with
                                                                                                                                                                                                                                                          | Some
                                                                                                                                                                                                                                                            (FMV_W_X, rd, rs1) =>
                                                                                                                                                                                                                                                             returnm (F_UN_TYPE_S
                                                                                                                                                                                                                                                                        (rs1, rd, FMV_W_X))
                                                                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                                                                             exit tt
                                                                                                                                                                                                                                                              : M (ast)
                                                                                                                                                                                                                                                          end)
                                                                                                                                                                                                                                                          : M (ast)
                                                                                                                                                                                                                                                       else
                                                                                                                                                                                                                                                         (_s2477_
                                                                                                                                                                                                                                                            _s1222_) >>= fun w__328 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                         (if
                                                                                                                                                                                                                                                            match w__328 with
                                                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                                                              (FCLASS_S, rd, rs1) =>
                                                                                                                                                                                                                                                               true
                                                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                                                               false
                                                                                                                                                                                                                                                            end
                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                            (_s2477_
                                                                                                                                                                                                                                                               _s1222_) >>= fun w__329 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                            (match w__329 with
                                                                                                                                                                                                                                                             | Some
                                                                                                                                                                                                                                                               (FCLASS_S, rd, rs1) =>
                                                                                                                                                                                                                                                                returnm (F_UN_TYPE_S
                                                                                                                                                                                                                                                                           (rs1, rd, FCLASS_S))
                                                                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                                                                exit tt
                                                                                                                                                                                                                                                                 : M (ast)
                                                                                                                                                                                                                                                             end)
                                                                                                                                                                                                                                                             : M (ast)
                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                            (_s2490_
                                                                                                                                                                                                                                                               _s1222_) >>= fun w__332 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                            (if
                                                                                                                                                                                                                                                               match w__332 with
                                                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                                                 (rd, imm) =>
                                                                                                                                                                                                                                                                  Z.eqb
                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                                                  false
                                                                                                                                                                                                                                                               end
                                                                                                                                                                                                                                                             then
                                                                                                                                                                                                                                                               (_s2490_
                                                                                                                                                                                                                                                                  _s1222_) >>= fun w__333 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                               (match w__333 with
                                                                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                                                                  (rd, imm) =>
                                                                                                                                                                                                                                                                   returnm (C_FLWSP
                                                                                                                                                                                                                                                                              (imm, rd))
                                                                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                                                                   exit tt
                                                                                                                                                                                                                                                                    : M (ast)
                                                                                                                                                                                                                                                                end)
                                                                                                                                                                                                                                                                : M (ast)
                                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                                               (_s2502_
                                                                                                                                                                                                                                                                  _s1222_) >>= fun w__336 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                               (if
                                                                                                                                                                                                                                                                  match w__336 with
                                                                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                                                                    (rd, uimm) =>
                                                                                                                                                                                                                                                                     Z.eqb
                                                                                                                                                                                                                                                                       32
                                                                                                                                                                                                                                                                       32
                                                                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                                                                     false
                                                                                                                                                                                                                                                                  end
                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                  (_s2502_
                                                                                                                                                                                                                                                                     _s1222_) >>= fun w__337 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                                  (match w__337 with
                                                                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                                                                     (rd, uimm) =>
                                                                                                                                                                                                                                                                      returnm (C_FSWSP
                                                                                                                                                                                                                                                                                 (uimm, rd))
                                                                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                                                                      exit tt
                                                                                                                                                                                                                                                                       : M (ast)
                                                                                                                                                                                                                                                                   end)
                                                                                                                                                                                                                                                                   : M (ast)
                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                  (_s2514_
                                                                                                                                                                                                                                                                     _s1222_) >>= fun w__340 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                  (if
                                                                                                                                                                                                                                                                     match w__340 with
                                                                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                                                                       (rdc, rsc, uimm) =>
                                                                                                                                                                                                                                                                        Z.eqb
                                                                                                                                                                                                                                                                          32
                                                                                                                                                                                                                                                                          32
                                                                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                                                                        false
                                                                                                                                                                                                                                                                     end
                                                                                                                                                                                                                                                                   then
                                                                                                                                                                                                                                                                     (_s2514_
                                                                                                                                                                                                                                                                        _s1222_) >>= fun w__341 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                     (match w__341 with
                                                                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                                                                        (rdc, rsc, uimm) =>
                                                                                                                                                                                                                                                                         returnm (C_FLW
                                                                                                                                                                                                                                                                                    (uimm, rsc, rdc))
                                                                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                                                                         exit tt
                                                                                                                                                                                                                                                                          : M (ast)
                                                                                                                                                                                                                                                                      end)
                                                                                                                                                                                                                                                                      : M (ast)
                                                                                                                                                                                                                                                                   else
                                                                                                                                                                                                                                                                     (_s2530_
                                                                                                                                                                                                                                                                        _s1222_) >>= fun w__344 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                     (if
                                                                                                                                                                                                                                                                        match w__344 with
                                                                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                                                                          (rsc1, rsc2, uimm) =>
                                                                                                                                                                                                                                                                           Z.eqb
                                                                                                                                                                                                                                                                             32
                                                                                                                                                                                                                                                                             32
                                                                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                                                                           false
                                                                                                                                                                                                                                                                        end
                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                        (_s2530_
                                                                                                                                                                                                                                                                           _s1222_) >>= fun w__345 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                        (match w__345 with
                                                                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                                                                           (rsc1, rsc2, uimm) =>
                                                                                                                                                                                                                                                                            returnm (C_FSW
                                                                                                                                                                                                                                                                                       (uimm, rsc1, rsc2))
                                                                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                                                                            exit tt
                                                                                                                                                                                                                                                                             : M (ast)
                                                                                                                                                                                                                                                                         end)
                                                                                                                                                                                                                                                                         : M (ast)
                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                        (_s2546_
                                                                                                                                                                                                                                                                           _s1222_) >>= fun w__348 : option (mword 32) =>
                                                                                                                                                                                                                                                                        (if
                                                                                                                                                                                                                                                                           match w__348 with
                                                                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                                                                             s =>
                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                                                                              false
                                                                                                                                                                                                                                                                           end
                                                                                                                                                                                                                                                                         then
                                                                                                                                                                                                                                                                           (_s2546_
                                                                                                                                                                                                                                                                              _s1222_) >>= fun w__349 : option (mword 32) =>
                                                                                                                                                                                                                                                                           (match w__349 with
                                                                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                                                                              s =>
                                                                                                                                                                                                                                                                               returnm (ILLEGAL
                                                                                                                                                                                                                                                                                          s)
                                                                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                                                                               exit tt
                                                                                                                                                                                                                                                                                : M (ast)
                                                                                                                                                                                                                                                                            end)
                                                                                                                                                                                                                                                                            : M (ast)
                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                           (_s2554_
                                                                                                                                                                                                                                                                              _s1222_) >>= fun w__352 : option (mword 16) =>
                                                                                                                                                                                                                                                                           (if
                                                                                                                                                                                                                                                                              match w__352 with
                                                                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                                                                s =>
                                                                                                                                                                                                                                                                                 true
                                                                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                                                                 false
                                                                                                                                                                                                                                                                              end
                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                              (_s2554_
                                                                                                                                                                                                                                                                                 _s1222_) >>= fun w__353 : option (mword 16) =>
                                                                                                                                                                                                                                                                              (match w__353 with
                                                                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                                                                 s =>
                                                                                                                                                                                                                                                                                  returnm (C_ILLEGAL
                                                                                                                                                                                                                                                                                             s)
                                                                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                                                                  exit tt
                                                                                                                                                                                                                                                                                   : M (ast)
                                                                                                                                                                                                                                                                               end)
                                                                                                                                                                                                                                                                               : M (ast)
                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                              assert_exp' false "Pattern match failure at unknown location" >>= fun _ =>
                                                                                                                                                                                                                                                                              exit tt)
                                                                                                                                                                                                                                                                            : M (ast))
                                                                                                                                                                                                                                                                         : M (ast))
                                                                                                                                                                                                                                                                      : M (ast))
                                                                                                                                                                                                                                                                   : M (ast))
                                                                                                                                                                                                                                                                : M (ast))
                                                                                                                                                                                                                                                             : M (ast))
                                                                                                                                                                                                                                                          : M (ast))
                                                                                                                                                                                                                                                       : M (ast))
                                                                                                                                                                                                                                                    : M (ast))
                                                                                                                                                                                                                                                 : M (ast))
                                                                                                                                                                                                                                              : M (ast))
                                                                                                                                                                                                                                           : M (ast))
                                                                                                                                                                                                                                        : M (ast))
                                                                                                                                                                                                                                     : M (ast))
                                                                                                                                                                                                                                  : M (ast))
                                                                                                                                                                                                                               : M (ast))
                                                                                                                                                                                                                            : M (ast))
                                                                                                                                                                                                                         : M (ast))
                                                                                                                                                                                                                      : M (ast))
                                                                                                                                                                                                                   : M (ast))
                                                                                                                                                                                                                : M (ast))
                                                                                                                                                                                                             : M (ast))
                                                                                                                                                                                                          : M (ast))
                                                                                                                                                                                                       : M (ast))
                                                                                                                                                                                                    : M (ast))
                                                                                                                                                                                                 : M (ast))
                                                                                                                                                                                              : M (ast))
                                                                                                                                                                                           : M (ast))
                                                                                                                                                                                        : M (ast))
                                                                                                                                                                                     : M (ast))
                                                                                                                                                                                  : M (ast))
                                                                                                                                                                               : M (ast))
                                                                                                                                                                            : M (ast))
                                                                                                                                                                         : M (ast))
                                                                                                                                                                      : M (ast))
                                                                                                                                                                   : M (ast))
                                                                                                                                                                : M (ast))
                                                                                                                                                             : M (ast))
                                                                                                                                                          : M (ast))
                                                                                                                                                       : M (ast))
                                                                                                                                                    : M (ast))
                                                                                                                                                 : M (ast))
                                                                                                                                              : M (ast))
                                                                                                                                           : M (ast))
                                                                                                                                        : M (ast))
                                                                                                                                     : M (ast))
                                                                                                                                  : M (ast))
                                                                                                                               : M (ast))
                                                                                                                            : M (ast))
                                                                                                                         : M (ast))
                                                                                                                      : M (ast))
                                                                                                                   : M (ast))
                                                                                                                : M (ast))
                                                                                                             : M (ast))
                                                                                                          : M (ast))
                                                                                                       : M (ast))
                                                                                                    : M (ast))
                                                                                                 : M (ast))
                                                                                              : M (ast))
                                                                                           : M (ast))
                                                                                        : M (ast))
                                                                                     : M (ast))
                                                                                  : M (ast))
                                                                               : M (ast))
                                                                            : M (ast))
                                                                         : M (ast))
                                                                      : M (ast))
                                                                   : M (ast))
                                                                : M (ast))
                                                             : M (ast))
                                                          : M (ast))
                                                       : M (ast))
                                                    : M (ast))
                                                 : M (ast))
                                              : M (ast))
                                           : M (ast))
                                        : M (ast))
                                     : M (ast))
                                  : M (ast))
                               : M (ast))
                            : M (ast))
                         : M (ast))
                      : M (ast))
                   : M (ast))
                : M (ast))
             : M (ast))
          : M (ast))
       : M (ast))
    : M (ast).

Definition assembly_forwards_matches (arg_ : ast) : bool :=
   match arg_ with
   | UTYPE (imm, rd, op) => true
   | RISCV_JAL (imm, rd) => true
   | RISCV_JALR (imm, rs1, rd) => true
   | BTYPE (imm, rs2, rs1, op) => true
   | ITYPE (imm, rs1, rd, op) => true
   | SHIFTIOP (shamt, rs1, rd, op) => true
   | RTYPE (rs2, rs1, rd, op) => true
   | LOAD (imm, rs1, rd, is_unsigned, size, aq, rl) => true
   | STORE (imm, rs2, rs1, size, aq, rl) => true
   | ADDIW (imm, rs1, rd) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | SHIFTW (shamt, rs1, rd, op) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | RTYPEW (rs2, rs1, rd, op) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | SHIFTIWOP (shamt, rs1, rd, op) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | FENCE (pred, succ) => true
   | FENCE_TSO (pred, succ) => true
   | FENCEI tt => true
   | ECALL tt => true
   | MRET tt => true
   | SRET tt => true
   | EBREAK tt => true
   | WFI tt => true
   | SFENCE_VMA (rs1, rs2) => true
   | LOADRES (aq, rl, rs1, size, rd) => true
   | STORECON (aq, rl, rs2, rs1, size, rd) => true
   | AMO (op, aq, rl, rs2, rs1, width, rd) => true
   | C_NOP tt => true
   | C_ADDI4SPN (rdc, nzimm) => if neq_vec nzimm (Ox"00"  : mword 8) then true else false
   | C_LW (uimm, rsc, rdc) => true
   | C_LD (uimm, rsc, rdc) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | C_SW (uimm, rsc1, rsc2) => true
   | C_SD (uimm, rsc1, rsc2) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | C_ADDI (nzi, rsd) =>
      if andb (neq_vec nzi ('b"000000"  : mword 6)) (neq_vec rsd zreg) then true else false
   | C_JAL imm => if sumbool_of_bool (Z.eqb 32 32) then true else false
   | C_ADDIW (imm, rsd) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | C_LI (imm, rd) => if neq_vec rd zreg then true else false
   | C_ADDI16SP imm => if neq_vec imm ('b"000000"  : mword 6) then true else false
   | C_LUI (imm, rd) =>
      if andb (neq_vec rd zreg) (andb (neq_vec rd sp) (neq_vec imm ('b"000000"  : mword 6))) then
        true
      else false
   | C_SRLI (shamt, rsd) => if neq_vec shamt ('b"000000"  : mword 6) then true else false
   | C_SRAI (shamt, rsd) => if neq_vec shamt ('b"000000"  : mword 6) then true else false
   | C_ANDI (imm, rsd) => true
   | C_SUB (rsd, rs2) => true
   | C_XOR (rsd, rs2) => true
   | C_OR (rsd, rs2) => true
   | C_AND (rsd, rs2) => true
   | C_SUBW (rsd, rs2) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | C_ADDW (rsd, rs2) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | C_J imm => true
   | C_BEQZ (imm, rs) => true
   | C_BNEZ (imm, rs) => true
   | C_SLLI (shamt, rsd) =>
      if andb (neq_vec shamt ('b"000000"  : mword 6)) (neq_vec rsd zreg) then true else false
   | C_LWSP (uimm, rd) => if neq_vec rd zreg then true else false
   | C_LDSP (uimm, rd) =>
      if sumbool_of_bool (andb (neq_vec rd zreg) (Z.eqb 32 64)) then true else false
   | C_SWSP (uimm, rd) => true
   | C_SDSP (uimm, rs2) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | C_JR rs1 => if neq_vec rs1 zreg then true else false
   | C_JALR rs1 => if neq_vec rs1 zreg then true else false
   | C_MV (rd, rs2) => if andb (neq_vec rd zreg) (neq_vec rs2 zreg) then true else false
   | C_EBREAK tt => true
   | C_ADD (rsd, rs2) => if andb (neq_vec rsd zreg) (neq_vec rs2 zreg) then true else false
   | MUL (rs2, rs1, rd, high, signed1, signed2) => true
   | DIV (rs2, rs1, rd, s) => true
   | REM (rs2, rs1, rd, s) => true
   | MULW (rs2, rs1, rd) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | DIVW (rs2, rs1, rd, s) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | REMW (rs2, rs1, rd, s) => if sumbool_of_bool (Z.eqb 32 64) then true else false
   | CSR (csr, rs1, rd, true, op) => true
   | CSR (csr, rs1, rd, false, op) => true
   | URET tt => true
   | LOAD_FP (imm, rs1, rd, width) => true
   | STORE_FP (imm, rs2, rs1, width) => true
   | F_MADD_TYPE_S (rs3, rs2, rs1, rm, rd, op) => true
   | F_BIN_RM_TYPE_S (rs2, rs1, rm, rd, op) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FSQRT_S) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_W_S) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_WU_S) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_W) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_WU) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_L_S) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_LU_S) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_L) => true
   | F_UN_RM_TYPE_S (rs1, rm, rd, FCVT_S_LU) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJ_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJN_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FSGNJX_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FMIN_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FMAX_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FEQ_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FLT_S) => true
   | F_BIN_TYPE_S (rs2, rs1, rd, FLE_S) => true
   | F_UN_TYPE_S (rs1, rd, FMV_X_W) => true
   | F_UN_TYPE_S (rs1, rd, FMV_W_X) => true
   | F_UN_TYPE_S (rs1, rd, FCLASS_S) => true
   | C_FLWSP (imm, rd) => if sumbool_of_bool (Z.eqb 32 32) then true else false
   | C_FSWSP (uimm, rd) => if sumbool_of_bool (Z.eqb 32 32) then true else false
   | C_FLW (uimm, rsc, rdc) => if sumbool_of_bool (Z.eqb 32 32) then true else false
   | C_FSW (uimm, rsc1, rsc2) => if sumbool_of_bool (Z.eqb 32 32) then true else false
   | ILLEGAL s => true
   | C_ILLEGAL s => true
   end.

Definition _s3906_ (_s3907_ : string) : M (option (mword 16)) :=
   let _s3908_ := _s3907_ in
   (if string_startswith _s3908_ "c.illegal" then
      (match (string_drop _s3908_ (projT1 (string_length "c.illegal"))) with
       | _s3909_ =>
          (spc_matches_prefix _s3909_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s3910_ _) =>
                      match (string_drop _s3909_ _s3910_) with
                      | _s3911_ =>
                         match (hex_bits_16_matches_prefix _s3911_) with
                         | Some (s, existT _ _s3912_ _) =>
                            let p0_ := string_drop _s3911_ _s3912_ in
                            if generic_eq p0_ "" then Some s
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 16))
    else returnm None)
    : M (option (mword 16)).

Definition _s3898_ (_s3899_ : string) : M (option (mword 32)) :=
   let _s3900_ := _s3899_ in
   (if string_startswith _s3900_ "illegal" then
      (match (string_drop _s3900_ (projT1 (string_length "illegal"))) with
       | _s3901_ =>
          (spc_matches_prefix _s3901_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s3902_ _) =>
                      match (string_drop _s3901_ _s3902_) with
                      | _s3903_ =>
                         match (hex_bits_32_matches_prefix _s3903_) with
                         | Some (s, existT _ _s3904_ _) =>
                            let p0_ := string_drop _s3903_ _s3904_ in
                            if generic_eq p0_ "" then Some s
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 32))
    else returnm None)
    : M (option (mword 32)).

Definition _s3882_ (_s3883_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s3884_ := _s3883_ in
   (if string_startswith _s3884_ "c.fsw" then
      (match (string_drop _s3884_ (projT1 (string_length "c.fsw"))) with
       | _s3885_ =>
          (spc_matches_prefix _s3885_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3886_ _) =>
              (match (string_drop _s3885_ _s3886_) with
               | _s3887_ =>
                  (creg_name_matches_prefix _s3887_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s3888_ _) =>
                      (match (string_drop _s3887_ _s3888_) with
                       | _s3889_ =>
                          (sep_matches_prefix _s3889_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3890_ _) =>
                              (match (string_drop _s3889_ _s3890_) with
                               | _s3891_ =>
                                  (creg_name_matches_prefix _s3891_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s3892_ _) =>
                                      (match (string_drop _s3891_ _s3892_) with
                                       | _s3893_ =>
                                          (sep_matches_prefix _s3893_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s3894_ _) =>
                                                      match (string_drop _s3893_ _s3894_) with
                                                      | _s3895_ =>
                                                         match (hex_bits_7_matches_prefix _s3895_) with
                                                         | Some (v__1092, existT _ _s3896_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1092 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1092 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1092 6 2 in
                                                              let p0_ := string_drop _s3895_ _s3896_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rsc1, rsc2, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s3866_ (_s3867_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s3868_ := _s3867_ in
   (if string_startswith _s3868_ "c.flw" then
      (match (string_drop _s3868_ (projT1 (string_length "c.flw"))) with
       | _s3869_ =>
          (spc_matches_prefix _s3869_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3870_ _) =>
              (match (string_drop _s3869_ _s3870_) with
               | _s3871_ =>
                  (creg_name_matches_prefix _s3871_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s3872_ _) =>
                      (match (string_drop _s3871_ _s3872_) with
                       | _s3873_ =>
                          (sep_matches_prefix _s3873_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3874_ _) =>
                              (match (string_drop _s3873_ _s3874_) with
                               | _s3875_ =>
                                  (creg_name_matches_prefix _s3875_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s3876_ _) =>
                                      (match (string_drop _s3875_ _s3876_) with
                                       | _s3877_ =>
                                          (sep_matches_prefix _s3877_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s3878_ _) =>
                                                      match (string_drop _s3877_ _s3878_) with
                                                      | _s3879_ =>
                                                         match (hex_bits_7_matches_prefix _s3879_) with
                                                         | Some (v__1094, existT _ _s3880_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1094 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1094 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1094 6 2 in
                                                              let p0_ := string_drop _s3879_ _s3880_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rdc, rsc, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s3854_ (_s3855_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3856_ := _s3855_ in
   (if string_startswith _s3856_ "c.fswsp" then
      (match (string_drop _s3856_ (projT1 (string_length "c.fswsp"))) with
       | _s3857_ =>
          (spc_matches_prefix _s3857_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3858_ _) =>
              (match (string_drop _s3857_ _s3858_) with
               | _s3859_ =>
                  (reg_name_matches_prefix _s3859_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3860_ _) =>
                      (match (string_drop _s3859_ _s3860_) with
                       | _s3861_ =>
                          (sep_matches_prefix _s3861_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3862_ _) =>
                                      match (string_drop _s3861_ _s3862_) with
                                      | _s3863_ =>
                                         match (hex_bits_6_matches_prefix _s3863_) with
                                         | Some (uimm, existT _ _s3864_ _) =>
                                            let p0_ := string_drop _s3863_ _s3864_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3842_ (_s3843_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3844_ := _s3843_ in
   (if string_startswith _s3844_ "c.flwsp" then
      (match (string_drop _s3844_ (projT1 (string_length "c.flwsp"))) with
       | _s3845_ =>
          (spc_matches_prefix _s3845_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3846_ _) =>
              (match (string_drop _s3845_ _s3846_) with
               | _s3847_ =>
                  (reg_name_matches_prefix _s3847_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3848_ _) =>
                      (match (string_drop _s3847_ _s3848_) with
                       | _s3849_ =>
                          (sep_matches_prefix _s3849_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3850_ _) =>
                                      match (string_drop _s3849_ _s3850_) with
                                      | _s3851_ =>
                                         match (hex_bits_6_matches_prefix _s3851_) with
                                         | Some (imm, existT _ _s3852_ _) =>
                                            let p0_ := string_drop _s3851_ _s3852_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3829_ (_s3830_ : string) : M (option ((f_un_op_S * mword 5 * mword 5))) :=
   (match _s3830_ with
    | _s3831_ =>
       (f_un_type_mnemonic_S_matches_prefix _s3831_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCLASS_S, existT _ _s3832_ _) =>
           (match (string_drop _s3831_ _s3832_) with
            | _s3833_ =>
               (spc_matches_prefix _s3833_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3834_ _) =>
                   (match (string_drop _s3833_ _s3834_) with
                    | _s3835_ =>
                       (reg_name_matches_prefix _s3835_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3836_ _) =>
                           (match (string_drop _s3835_ _s3836_) with
                            | _s3837_ =>
                               (sep_matches_prefix _s3837_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3838_ _) =>
                                   (match (string_drop _s3837_ _s3838_) with
                                    | _s3839_ =>
                                       (freg_name_matches_prefix _s3839_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s3840_ _) =>
                                                   let p0_ := string_drop _s3839_ _s3840_ in
                                                   if generic_eq p0_ "" then
                                                     Some (FCLASS_S, rd, rs1)
                                                   else None
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5))).

Definition _s3816_ (_s3817_ : string) : M (option ((f_un_op_S * mword 5 * mword 5))) :=
   (match _s3817_ with
    | _s3818_ =>
       (f_un_type_mnemonic_S_matches_prefix _s3818_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMV_W_X, existT _ _s3819_ _) =>
           (match (string_drop _s3818_ _s3819_) with
            | _s3820_ =>
               (spc_matches_prefix _s3820_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3821_ _) =>
                   (match (string_drop _s3820_ _s3821_) with
                    | _s3822_ =>
                       (freg_name_matches_prefix _s3822_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3823_ _) =>
                           (match (string_drop _s3822_ _s3823_) with
                            | _s3824_ =>
                               (sep_matches_prefix _s3824_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3825_ _) =>
                                   (match (string_drop _s3824_ _s3825_) with
                                    | _s3826_ =>
                                       (reg_name_matches_prefix _s3826_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s3827_ _) =>
                                                   let p0_ := string_drop _s3826_ _s3827_ in
                                                   if generic_eq p0_ "" then Some (FMV_W_X, rd, rs1)
                                                   else None
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5))).

Definition _s3803_ (_s3804_ : string) : M (option ((f_un_op_S * mword 5 * mword 5))) :=
   (match _s3804_ with
    | _s3805_ =>
       (f_un_type_mnemonic_S_matches_prefix _s3805_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMV_X_W, existT _ _s3806_ _) =>
           (match (string_drop _s3805_ _s3806_) with
            | _s3807_ =>
               (spc_matches_prefix _s3807_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3808_ _) =>
                   (match (string_drop _s3807_ _s3808_) with
                    | _s3809_ =>
                       (reg_name_matches_prefix _s3809_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3810_ _) =>
                           (match (string_drop _s3809_ _s3810_) with
                            | _s3811_ =>
                               (sep_matches_prefix _s3811_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3812_ _) =>
                                   (match (string_drop _s3811_ _s3812_) with
                                    | _s3813_ =>
                                       (freg_name_matches_prefix _s3813_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s3814_ _) =>
                                                   let p0_ := string_drop _s3813_ _s3814_ in
                                                   if generic_eq p0_ "" then Some (FMV_X_W, rd, rs1)
                                                   else None
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5))).

Definition _s3786_ (_s3787_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3787_ with
    | _s3788_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3788_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FLE_S, existT _ _s3789_ _) =>
           (match (string_drop _s3788_ _s3789_) with
            | _s3790_ =>
               (spc_matches_prefix _s3790_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3791_ _) =>
                   (match (string_drop _s3790_ _s3791_) with
                    | _s3792_ =>
                       (reg_name_matches_prefix _s3792_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3793_ _) =>
                           (match (string_drop _s3792_ _s3793_) with
                            | _s3794_ =>
                               (sep_matches_prefix _s3794_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3795_ _) =>
                                   (match (string_drop _s3794_ _s3795_) with
                                    | _s3796_ =>
                                       (freg_name_matches_prefix _s3796_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3797_ _) =>
                                           (match (string_drop _s3796_ _s3797_) with
                                            | _s3798_ =>
                                               (sep_matches_prefix _s3798_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3799_ _) =>
                                                   (match (string_drop _s3798_ _s3799_) with
                                                    | _s3800_ =>
                                                       (freg_name_matches_prefix _s3800_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3801_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3800_ _s3801_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FLE_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3769_ (_s3770_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3770_ with
    | _s3771_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3771_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FLT_S, existT _ _s3772_ _) =>
           (match (string_drop _s3771_ _s3772_) with
            | _s3773_ =>
               (spc_matches_prefix _s3773_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3774_ _) =>
                   (match (string_drop _s3773_ _s3774_) with
                    | _s3775_ =>
                       (reg_name_matches_prefix _s3775_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3776_ _) =>
                           (match (string_drop _s3775_ _s3776_) with
                            | _s3777_ =>
                               (sep_matches_prefix _s3777_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3778_ _) =>
                                   (match (string_drop _s3777_ _s3778_) with
                                    | _s3779_ =>
                                       (freg_name_matches_prefix _s3779_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3780_ _) =>
                                           (match (string_drop _s3779_ _s3780_) with
                                            | _s3781_ =>
                                               (sep_matches_prefix _s3781_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3782_ _) =>
                                                   (match (string_drop _s3781_ _s3782_) with
                                                    | _s3783_ =>
                                                       (freg_name_matches_prefix _s3783_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3784_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3783_ _s3784_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FLT_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3752_ (_s3753_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3753_ with
    | _s3754_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3754_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FEQ_S, existT _ _s3755_ _) =>
           (match (string_drop _s3754_ _s3755_) with
            | _s3756_ =>
               (spc_matches_prefix _s3756_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3757_ _) =>
                   (match (string_drop _s3756_ _s3757_) with
                    | _s3758_ =>
                       (reg_name_matches_prefix _s3758_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3759_ _) =>
                           (match (string_drop _s3758_ _s3759_) with
                            | _s3760_ =>
                               (sep_matches_prefix _s3760_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3761_ _) =>
                                   (match (string_drop _s3760_ _s3761_) with
                                    | _s3762_ =>
                                       (freg_name_matches_prefix _s3762_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3763_ _) =>
                                           (match (string_drop _s3762_ _s3763_) with
                                            | _s3764_ =>
                                               (sep_matches_prefix _s3764_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3765_ _) =>
                                                   (match (string_drop _s3764_ _s3765_) with
                                                    | _s3766_ =>
                                                       (freg_name_matches_prefix _s3766_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3767_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3766_ _s3767_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FEQ_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3735_ (_s3736_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3736_ with
    | _s3737_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3737_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMAX_S, existT _ _s3738_ _) =>
           (match (string_drop _s3737_ _s3738_) with
            | _s3739_ =>
               (spc_matches_prefix _s3739_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3740_ _) =>
                   (match (string_drop _s3739_ _s3740_) with
                    | _s3741_ =>
                       (freg_name_matches_prefix _s3741_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3742_ _) =>
                           (match (string_drop _s3741_ _s3742_) with
                            | _s3743_ =>
                               (sep_matches_prefix _s3743_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3744_ _) =>
                                   (match (string_drop _s3743_ _s3744_) with
                                    | _s3745_ =>
                                       (freg_name_matches_prefix _s3745_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3746_ _) =>
                                           (match (string_drop _s3745_ _s3746_) with
                                            | _s3747_ =>
                                               (sep_matches_prefix _s3747_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3748_ _) =>
                                                   (match (string_drop _s3747_ _s3748_) with
                                                    | _s3749_ =>
                                                       (freg_name_matches_prefix _s3749_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3750_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3749_ _s3750_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FMAX_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3718_ (_s3719_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3719_ with
    | _s3720_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3720_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMIN_S, existT _ _s3721_ _) =>
           (match (string_drop _s3720_ _s3721_) with
            | _s3722_ =>
               (spc_matches_prefix _s3722_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3723_ _) =>
                   (match (string_drop _s3722_ _s3723_) with
                    | _s3724_ =>
                       (freg_name_matches_prefix _s3724_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3725_ _) =>
                           (match (string_drop _s3724_ _s3725_) with
                            | _s3726_ =>
                               (sep_matches_prefix _s3726_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3727_ _) =>
                                   (match (string_drop _s3726_ _s3727_) with
                                    | _s3728_ =>
                                       (freg_name_matches_prefix _s3728_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3729_ _) =>
                                           (match (string_drop _s3728_ _s3729_) with
                                            | _s3730_ =>
                                               (sep_matches_prefix _s3730_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3731_ _) =>
                                                   (match (string_drop _s3730_ _s3731_) with
                                                    | _s3732_ =>
                                                       (freg_name_matches_prefix _s3732_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3733_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3732_ _s3733_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FMIN_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3701_ (_s3702_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3702_ with
    | _s3703_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3703_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJX_S, existT _ _s3704_ _) =>
           (match (string_drop _s3703_ _s3704_) with
            | _s3705_ =>
               (spc_matches_prefix _s3705_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3706_ _) =>
                   (match (string_drop _s3705_ _s3706_) with
                    | _s3707_ =>
                       (freg_name_matches_prefix _s3707_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3708_ _) =>
                           (match (string_drop _s3707_ _s3708_) with
                            | _s3709_ =>
                               (sep_matches_prefix _s3709_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3710_ _) =>
                                   (match (string_drop _s3709_ _s3710_) with
                                    | _s3711_ =>
                                       (freg_name_matches_prefix _s3711_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3712_ _) =>
                                           (match (string_drop _s3711_ _s3712_) with
                                            | _s3713_ =>
                                               (sep_matches_prefix _s3713_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3714_ _) =>
                                                   (match (string_drop _s3713_ _s3714_) with
                                                    | _s3715_ =>
                                                       (freg_name_matches_prefix _s3715_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3716_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3715_ _s3716_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSGNJX_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3684_ (_s3685_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3685_ with
    | _s3686_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3686_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJN_S, existT _ _s3687_ _) =>
           (match (string_drop _s3686_ _s3687_) with
            | _s3688_ =>
               (spc_matches_prefix _s3688_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3689_ _) =>
                   (match (string_drop _s3688_ _s3689_) with
                    | _s3690_ =>
                       (freg_name_matches_prefix _s3690_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3691_ _) =>
                           (match (string_drop _s3690_ _s3691_) with
                            | _s3692_ =>
                               (sep_matches_prefix _s3692_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3693_ _) =>
                                   (match (string_drop _s3692_ _s3693_) with
                                    | _s3694_ =>
                                       (freg_name_matches_prefix _s3694_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3695_ _) =>
                                           (match (string_drop _s3694_ _s3695_) with
                                            | _s3696_ =>
                                               (sep_matches_prefix _s3696_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3697_ _) =>
                                                   (match (string_drop _s3696_ _s3697_) with
                                                    | _s3698_ =>
                                                       (freg_name_matches_prefix _s3698_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3699_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3698_ _s3699_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSGNJN_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3667_ (_s3668_ : string) : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))) :=
   (match _s3668_ with
    | _s3669_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s3669_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJ_S, existT _ _s3670_ _) =>
           (match (string_drop _s3669_ _s3670_) with
            | _s3671_ =>
               (spc_matches_prefix _s3671_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3672_ _) =>
                   (match (string_drop _s3671_ _s3672_) with
                    | _s3673_ =>
                       (freg_name_matches_prefix _s3673_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3674_ _) =>
                           (match (string_drop _s3673_ _s3674_) with
                            | _s3675_ =>
                               (sep_matches_prefix _s3675_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3676_ _) =>
                                   (match (string_drop _s3675_ _s3676_) with
                                    | _s3677_ =>
                                       (freg_name_matches_prefix _s3677_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3678_ _) =>
                                           (match (string_drop _s3677_ _s3678_) with
                                            | _s3679_ =>
                                               (sep_matches_prefix _s3679_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3680_ _) =>
                                                   (match (string_drop _s3679_ _s3680_) with
                                                    | _s3681_ =>
                                                       (freg_name_matches_prefix _s3681_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3682_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3681_ _s3682_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSGNJ_S, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5))).

Definition _s3650_ (_s3651_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3651_ with
    | _s3652_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3652_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_LU, existT _ _s3653_ _) =>
           (match (string_drop _s3652_ _s3653_) with
            | _s3654_ =>
               (spc_matches_prefix _s3654_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3655_ _) =>
                   (match (string_drop _s3654_ _s3655_) with
                    | _s3656_ =>
                       (freg_name_matches_prefix _s3656_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3657_ _) =>
                           (match (string_drop _s3656_ _s3657_) with
                            | _s3658_ =>
                               (sep_matches_prefix _s3658_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3659_ _) =>
                                   (match (string_drop _s3658_ _s3659_) with
                                    | _s3660_ =>
                                       (reg_name_matches_prefix _s3660_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3661_ _) =>
                                           (match (string_drop _s3660_ _s3661_) with
                                            | _s3662_ =>
                                               (sep_matches_prefix _s3662_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3663_ _) =>
                                                   (match (string_drop _s3662_ _s3663_) with
                                                    | _s3664_ =>
                                                       (frm_mnemonic_matches_prefix _s3664_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3665_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3664_ _s3665_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_LU, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3633_ (_s3634_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3634_ with
    | _s3635_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3635_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_L, existT _ _s3636_ _) =>
           (match (string_drop _s3635_ _s3636_) with
            | _s3637_ =>
               (spc_matches_prefix _s3637_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3638_ _) =>
                   (match (string_drop _s3637_ _s3638_) with
                    | _s3639_ =>
                       (freg_name_matches_prefix _s3639_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3640_ _) =>
                           (match (string_drop _s3639_ _s3640_) with
                            | _s3641_ =>
                               (sep_matches_prefix _s3641_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3642_ _) =>
                                   (match (string_drop _s3641_ _s3642_) with
                                    | _s3643_ =>
                                       (reg_name_matches_prefix _s3643_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3644_ _) =>
                                           (match (string_drop _s3643_ _s3644_) with
                                            | _s3645_ =>
                                               (sep_matches_prefix _s3645_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3646_ _) =>
                                                   (match (string_drop _s3645_ _s3646_) with
                                                    | _s3647_ =>
                                                       (frm_mnemonic_matches_prefix _s3647_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3648_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3647_ _s3648_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_L, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3616_ (_s3617_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3617_ with
    | _s3618_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3618_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_LU_S, existT _ _s3619_ _) =>
           (match (string_drop _s3618_ _s3619_) with
            | _s3620_ =>
               (spc_matches_prefix _s3620_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3621_ _) =>
                   (match (string_drop _s3620_ _s3621_) with
                    | _s3622_ =>
                       (reg_name_matches_prefix _s3622_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3623_ _) =>
                           (match (string_drop _s3622_ _s3623_) with
                            | _s3624_ =>
                               (sep_matches_prefix _s3624_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3625_ _) =>
                                   (match (string_drop _s3624_ _s3625_) with
                                    | _s3626_ =>
                                       (freg_name_matches_prefix _s3626_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3627_ _) =>
                                           (match (string_drop _s3626_ _s3627_) with
                                            | _s3628_ =>
                                               (sep_matches_prefix _s3628_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3629_ _) =>
                                                   (match (string_drop _s3628_ _s3629_) with
                                                    | _s3630_ =>
                                                       (frm_mnemonic_matches_prefix _s3630_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3631_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3630_ _s3631_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_LU_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3599_ (_s3600_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3600_ with
    | _s3601_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3601_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_L_S, existT _ _s3602_ _) =>
           (match (string_drop _s3601_ _s3602_) with
            | _s3603_ =>
               (spc_matches_prefix _s3603_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3604_ _) =>
                   (match (string_drop _s3603_ _s3604_) with
                    | _s3605_ =>
                       (reg_name_matches_prefix _s3605_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3606_ _) =>
                           (match (string_drop _s3605_ _s3606_) with
                            | _s3607_ =>
                               (sep_matches_prefix _s3607_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3608_ _) =>
                                   (match (string_drop _s3607_ _s3608_) with
                                    | _s3609_ =>
                                       (freg_name_matches_prefix _s3609_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3610_ _) =>
                                           (match (string_drop _s3609_ _s3610_) with
                                            | _s3611_ =>
                                               (sep_matches_prefix _s3611_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3612_ _) =>
                                                   (match (string_drop _s3611_ _s3612_) with
                                                    | _s3613_ =>
                                                       (frm_mnemonic_matches_prefix _s3613_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3614_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3613_ _s3614_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_L_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3582_ (_s3583_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3583_ with
    | _s3584_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3584_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_WU, existT _ _s3585_ _) =>
           (match (string_drop _s3584_ _s3585_) with
            | _s3586_ =>
               (spc_matches_prefix _s3586_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3587_ _) =>
                   (match (string_drop _s3586_ _s3587_) with
                    | _s3588_ =>
                       (freg_name_matches_prefix _s3588_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3589_ _) =>
                           (match (string_drop _s3588_ _s3589_) with
                            | _s3590_ =>
                               (sep_matches_prefix _s3590_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3591_ _) =>
                                   (match (string_drop _s3590_ _s3591_) with
                                    | _s3592_ =>
                                       (reg_name_matches_prefix _s3592_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3593_ _) =>
                                           (match (string_drop _s3592_ _s3593_) with
                                            | _s3594_ =>
                                               (sep_matches_prefix _s3594_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3595_ _) =>
                                                   (match (string_drop _s3594_ _s3595_) with
                                                    | _s3596_ =>
                                                       (frm_mnemonic_matches_prefix _s3596_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3597_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3596_ _s3597_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_WU, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3565_ (_s3566_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3566_ with
    | _s3567_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3567_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_W, existT _ _s3568_ _) =>
           (match (string_drop _s3567_ _s3568_) with
            | _s3569_ =>
               (spc_matches_prefix _s3569_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3570_ _) =>
                   (match (string_drop _s3569_ _s3570_) with
                    | _s3571_ =>
                       (freg_name_matches_prefix _s3571_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3572_ _) =>
                           (match (string_drop _s3571_ _s3572_) with
                            | _s3573_ =>
                               (sep_matches_prefix _s3573_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3574_ _) =>
                                   (match (string_drop _s3573_ _s3574_) with
                                    | _s3575_ =>
                                       (reg_name_matches_prefix _s3575_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3576_ _) =>
                                           (match (string_drop _s3575_ _s3576_) with
                                            | _s3577_ =>
                                               (sep_matches_prefix _s3577_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3578_ _) =>
                                                   (match (string_drop _s3577_ _s3578_) with
                                                    | _s3579_ =>
                                                       (frm_mnemonic_matches_prefix _s3579_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3580_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3579_ _s3580_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_S_W, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3548_ (_s3549_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3549_ with
    | _s3550_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3550_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_WU_S, existT _ _s3551_ _) =>
           (match (string_drop _s3550_ _s3551_) with
            | _s3552_ =>
               (spc_matches_prefix _s3552_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3553_ _) =>
                   (match (string_drop _s3552_ _s3553_) with
                    | _s3554_ =>
                       (reg_name_matches_prefix _s3554_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3555_ _) =>
                           (match (string_drop _s3554_ _s3555_) with
                            | _s3556_ =>
                               (sep_matches_prefix _s3556_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3557_ _) =>
                                   (match (string_drop _s3556_ _s3557_) with
                                    | _s3558_ =>
                                       (freg_name_matches_prefix _s3558_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3559_ _) =>
                                           (match (string_drop _s3558_ _s3559_) with
                                            | _s3560_ =>
                                               (sep_matches_prefix _s3560_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3561_ _) =>
                                                   (match (string_drop _s3560_ _s3561_) with
                                                    | _s3562_ =>
                                                       (frm_mnemonic_matches_prefix _s3562_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3563_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3562_ _s3563_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_WU_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3531_ (_s3532_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3532_ with
    | _s3533_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3533_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_W_S, existT _ _s3534_ _) =>
           (match (string_drop _s3533_ _s3534_) with
            | _s3535_ =>
               (spc_matches_prefix _s3535_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3536_ _) =>
                   (match (string_drop _s3535_ _s3536_) with
                    | _s3537_ =>
                       (reg_name_matches_prefix _s3537_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3538_ _) =>
                           (match (string_drop _s3537_ _s3538_) with
                            | _s3539_ =>
                               (sep_matches_prefix _s3539_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3540_ _) =>
                                   (match (string_drop _s3539_ _s3540_) with
                                    | _s3541_ =>
                                       (freg_name_matches_prefix _s3541_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3542_ _) =>
                                           (match (string_drop _s3541_ _s3542_) with
                                            | _s3543_ =>
                                               (sep_matches_prefix _s3543_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3544_ _) =>
                                                   (match (string_drop _s3543_ _s3544_) with
                                                    | _s3545_ =>
                                                       (frm_mnemonic_matches_prefix _s3545_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3546_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3545_ _s3546_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FCVT_W_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3514_ (_s3515_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3515_ with
    | _s3516_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s3516_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSQRT_S, existT _ _s3517_ _) =>
           (match (string_drop _s3516_ _s3517_) with
            | _s3518_ =>
               (spc_matches_prefix _s3518_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3519_ _) =>
                   (match (string_drop _s3518_ _s3519_) with
                    | _s3520_ =>
                       (freg_name_matches_prefix _s3520_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3521_ _) =>
                           (match (string_drop _s3520_ _s3521_) with
                            | _s3522_ =>
                               (sep_matches_prefix _s3522_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3523_ _) =>
                                   (match (string_drop _s3522_ _s3523_) with
                                    | _s3524_ =>
                                       (freg_name_matches_prefix _s3524_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3525_ _) =>
                                           (match (string_drop _s3524_ _s3525_) with
                                            | _s3526_ =>
                                               (sep_matches_prefix _s3526_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3527_ _) =>
                                                   (match (string_drop _s3526_ _s3527_) with
                                                    | _s3528_ =>
                                                       (frm_mnemonic_matches_prefix _s3528_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s3529_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3528_ _s3529_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (FSQRT_S, rd, rs1, rm)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode))).

Definition _s3493_ (_s3494_ : string)
: M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3494_ with
    | _s3495_ =>
       (f_bin_rm_type_mnemonic_S_matches_prefix _s3495_) >>= fun w__0 : option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3496_ _) =>
           (match (string_drop _s3495_ _s3496_) with
            | _s3497_ =>
               (spc_matches_prefix _s3497_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3498_ _) =>
                   (match (string_drop _s3497_ _s3498_) with
                    | _s3499_ =>
                       (freg_name_matches_prefix _s3499_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3500_ _) =>
                           (match (string_drop _s3499_ _s3500_) with
                            | _s3501_ =>
                               (sep_matches_prefix _s3501_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3502_ _) =>
                                   (match (string_drop _s3501_ _s3502_) with
                                    | _s3503_ =>
                                       (freg_name_matches_prefix _s3503_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3504_ _) =>
                                           (match (string_drop _s3503_ _s3504_) with
                                            | _s3505_ =>
                                               (sep_matches_prefix _s3505_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3506_ _) =>
                                                   (match (string_drop _s3505_ _s3506_) with
                                                    | _s3507_ =>
                                                       (freg_name_matches_prefix _s3507_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       (match w__6 with
                                                        | Some (rs2, existT _ _s3508_ _) =>
                                                           (match (string_drop _s3507_ _s3508_) with
                                                            | _s3509_ =>
                                                               (sep_matches_prefix _s3509_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                 0)})) =>
                                                               (match w__7 with
                                                                | Some (tt, existT _ _s3510_ _) =>
                                                                   (match (string_drop _s3509_
                                                                             _s3510_) with
                                                                    | _s3511_ =>
                                                                       (frm_mnemonic_matches_prefix
                                                                          _s3511_) >>= fun w__8 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                                         0)})) =>
                                                                       returnm (match w__8 with
                                                                                | Some
                                                                                  (rm, existT _ _s3512_ _) =>
                                                                                   let p0_ :=
                                                                                     string_drop
                                                                                       _s3511_
                                                                                       _s3512_ in
                                                                                   if generic_eq p0_
                                                                                        "" then
                                                                                     Some
                                                                                       (op, rd, rs1, rs2, rm)
                                                                                   else None
                                                                                | _ => None
                                                                                end)
                                                                    end)
                                                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                | _ => returnm None
                                                                end)
                                                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                            end)
                                                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                        | _ => returnm None
                                                        end)
                                                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                    end)
                                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode))).

Definition _s3468_ (_s3469_ : string)
: M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode))) :=
   (match _s3469_ with
    | _s3470_ =>
       (f_madd_type_mnemonic_S_matches_prefix _s3470_) >>= fun w__0 : option ((f_madd_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3471_ _) =>
           (match (string_drop _s3470_ _s3471_) with
            | _s3472_ =>
               (spc_matches_prefix _s3472_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3473_ _) =>
                   (match (string_drop _s3472_ _s3473_) with
                    | _s3474_ =>
                       (freg_name_matches_prefix _s3474_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3475_ _) =>
                           (match (string_drop _s3474_ _s3475_) with
                            | _s3476_ =>
                               (sep_matches_prefix _s3476_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3477_ _) =>
                                   (match (string_drop _s3476_ _s3477_) with
                                    | _s3478_ =>
                                       (freg_name_matches_prefix _s3478_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3479_ _) =>
                                           (match (string_drop _s3478_ _s3479_) with
                                            | _s3480_ =>
                                               (sep_matches_prefix _s3480_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3481_ _) =>
                                                   (match (string_drop _s3480_ _s3481_) with
                                                    | _s3482_ =>
                                                       (freg_name_matches_prefix _s3482_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       (match w__6 with
                                                        | Some (rs2, existT _ _s3483_ _) =>
                                                           (match (string_drop _s3482_ _s3483_) with
                                                            | _s3484_ =>
                                                               (sep_matches_prefix _s3484_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                 0)})) =>
                                                               (match w__7 with
                                                                | Some (tt, existT _ _s3485_ _) =>
                                                                   (match (string_drop _s3484_
                                                                             _s3485_) with
                                                                    | _s3486_ =>
                                                                       (freg_name_matches_prefix
                                                                          _s3486_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                         0)})) =>
                                                                       (match w__8 with
                                                                        | Some
                                                                          (rs3, existT _ _s3487_ _) =>
                                                                           (match (string_drop
                                                                                     _s3486_ _s3487_) with
                                                                            | _s3488_ =>
                                                                               (sep_matches_prefix
                                                                                  _s3488_) >>= fun w__9 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                 0)})) =>
                                                                               (match w__9 with
                                                                                | Some
                                                                                  (tt, existT _ _s3489_ _) =>
                                                                                   (match (string_drop
                                                                                             _s3488_
                                                                                             _s3489_) with
                                                                                    | _s3490_ =>
                                                                                       (frm_mnemonic_matches_prefix
                                                                                          _s3490_) >>= fun w__10 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                                                         0)})) =>
                                                                                       returnm (match w__10 with
                                                                                                | Some
                                                                                                  (rm, existT _ _s3491_ _) =>
                                                                                                   let p0_ :=
                                                                                                     string_drop
                                                                                                       _s3490_
                                                                                                       _s3491_ in
                                                                                                   if
                                                                                                     generic_eq
                                                                                                       p0_
                                                                                                       ""
                                                                                                   then
                                                                                                     Some
                                                                                                       (op, rd, rs1, rs2, rs3, rm)
                                                                                                   else
                                                                                                     None
                                                                                                | _ =>
                                                                                                   None
                                                                                                end)
                                                                                    end)
                                                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                                | _ => returnm None
                                                                                end)
                                                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                            end)
                                                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                        | _ => returnm None
                                                                        end)
                                                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                    end)
                                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                                | _ => returnm None
                                                                end)
                                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                            end)
                                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                        | _ => returnm None
                                                        end)
                                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                    end)
                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                            end)
                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                    end)
                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                                | _ => returnm None
                                end)
                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                            end)
                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                        | _ => returnm None
                        end)
                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                    end)
                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
                | _ => returnm None
                end)
                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
            end)
            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
        | _ => returnm None
        end)
        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)))
    end)
    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode))).

Definition _s3444_ (_s3445_ : string) : M (option ((word_width * mword 5 * mword 12 * mword 5))) :=
   let _s3446_ := _s3445_ in
   (if string_startswith _s3446_ "fs" then
      (match (string_drop _s3446_ (projT1 (string_length "fs"))) with
       | _s3447_ =>
          (size_mnemonic_matches_prefix _s3447_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (width, existT _ _s3448_ _) =>
              (match (string_drop _s3447_ _s3448_) with
               | _s3449_ =>
                  (spc_matches_prefix _s3449_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s3450_ _) =>
                      (match (string_drop _s3449_ _s3450_) with
                       | _s3451_ =>
                          (freg_name_matches_prefix _s3451_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rs2, existT _ _s3452_ _) =>
                              (match (string_drop _s3451_ _s3452_) with
                               | _s3453_ =>
                                  (sep_matches_prefix _s3453_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s3454_ _) =>
                                      (match (string_drop _s3453_ _s3454_) with
                                       | _s3455_ =>
                                          (match (hex_bits_12_matches_prefix _s3455_) with
                                           | Some (imm, existT _ _s3456_ _) =>
                                              (match (string_drop _s3455_ _s3456_) with
                                               | _s3457_ =>
                                                  (opt_spc_matches_prefix _s3457_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__4 with
                                                   | Some (tt, existT _ _s3458_ _) =>
                                                      let _s3459_ := string_drop _s3457_ _s3458_ in
                                                      (if string_startswith _s3459_ "(" then
                                                         (match (string_drop _s3459_
                                                                   (projT1
                                                                    (string_length "("))) with
                                                          | _s3460_ =>
                                                             (opt_spc_matches_prefix _s3460_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             (match w__5 with
                                                              | Some (tt, existT _ _s3461_ _) =>
                                                                 (match (string_drop _s3460_ _s3461_) with
                                                                  | _s3462_ =>
                                                                     (reg_name_matches_prefix
                                                                        _s3462_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                       0)})) =>
                                                                     (match w__6 with
                                                                      | Some
                                                                        (rs1, existT _ _s3463_ _) =>
                                                                         (match (string_drop _s3462_
                                                                                   _s3463_) with
                                                                          | _s3464_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s3464_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             returnm (match w__7 with
                                                                                      | Some
                                                                                        (tt, existT _ _s3465_ _) =>
                                                                                         let _s3466_ :=
                                                                                           string_drop
                                                                                             _s3464_
                                                                                             _s3465_ in
                                                                                         if string_startswith
                                                                                              _s3466_
                                                                                              ")"
                                                                                         then
                                                                                           let p0_ :=
                                                                                             string_drop
                                                                                               _s3466_
                                                                                               (projT1
                                                                                                (string_length
                                                                                                   ")")) in
                                                                                           if generic_eq
                                                                                                p0_
                                                                                                ""
                                                                                           then
                                                                                             Some
                                                                                               (width, rs2, imm, rs1)
                                                                                           else None
                                                                                         else None
                                                                                      | _ => None
                                                                                      end)
                                                                          end)
                                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                      | _ => returnm None
                                                                      end)
                                                                      : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                  end)
                                                                  : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                              | _ => returnm None
                                                              end)
                                                              : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                          end)
                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                       else returnm None)
                                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * mword 5 * mword 12 * mword 5))).

Definition _s3420_ (_s3421_ : string) : M (option ((word_width * mword 5 * mword 12 * mword 5))) :=
   let _s3422_ := _s3421_ in
   (if string_startswith _s3422_ "fl" then
      (match (string_drop _s3422_ (projT1 (string_length "fl"))) with
       | _s3423_ =>
          (size_mnemonic_matches_prefix _s3423_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (width, existT _ _s3424_ _) =>
              (match (string_drop _s3423_ _s3424_) with
               | _s3425_ =>
                  (spc_matches_prefix _s3425_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s3426_ _) =>
                      (match (string_drop _s3425_ _s3426_) with
                       | _s3427_ =>
                          (freg_name_matches_prefix _s3427_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s3428_ _) =>
                              (match (string_drop _s3427_ _s3428_) with
                               | _s3429_ =>
                                  (sep_matches_prefix _s3429_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s3430_ _) =>
                                      (match (string_drop _s3429_ _s3430_) with
                                       | _s3431_ =>
                                          (match (hex_bits_12_matches_prefix _s3431_) with
                                           | Some (imm, existT _ _s3432_ _) =>
                                              (match (string_drop _s3431_ _s3432_) with
                                               | _s3433_ =>
                                                  (opt_spc_matches_prefix _s3433_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__4 with
                                                   | Some (tt, existT _ _s3434_ _) =>
                                                      let _s3435_ := string_drop _s3433_ _s3434_ in
                                                      (if string_startswith _s3435_ "(" then
                                                         (match (string_drop _s3435_
                                                                   (projT1
                                                                    (string_length "("))) with
                                                          | _s3436_ =>
                                                             (opt_spc_matches_prefix _s3436_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             (match w__5 with
                                                              | Some (tt, existT _ _s3437_ _) =>
                                                                 (match (string_drop _s3436_ _s3437_) with
                                                                  | _s3438_ =>
                                                                     (reg_name_matches_prefix
                                                                        _s3438_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                       0)})) =>
                                                                     (match w__6 with
                                                                      | Some
                                                                        (rs1, existT _ _s3439_ _) =>
                                                                         (match (string_drop _s3438_
                                                                                   _s3439_) with
                                                                          | _s3440_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s3440_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             returnm (match w__7 with
                                                                                      | Some
                                                                                        (tt, existT _ _s3441_ _) =>
                                                                                         let _s3442_ :=
                                                                                           string_drop
                                                                                             _s3440_
                                                                                             _s3441_ in
                                                                                         if string_startswith
                                                                                              _s3442_
                                                                                              ")"
                                                                                         then
                                                                                           let p0_ :=
                                                                                             string_drop
                                                                                               _s3442_
                                                                                               (projT1
                                                                                                (string_length
                                                                                                   ")")) in
                                                                                           if generic_eq
                                                                                                p0_
                                                                                                ""
                                                                                           then
                                                                                             Some
                                                                                               (width, rd, imm, rs1)
                                                                                           else None
                                                                                         else None
                                                                                      | _ => None
                                                                                      end)
                                                                          end)
                                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                      | _ => returnm None
                                                                      end)
                                                                      : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                                  end)
                                                                  : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                              | _ => returnm None
                                                              end)
                                                              : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                          end)
                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                       else returnm None)
                                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * mword 5 * mword 12 * mword 5))).

Definition _s3403_ (_s3404_ : string) : M (option ((csrop * mword 5 * mword 12 * mword 5))) :=
   (match _s3404_ with
    | _s3405_ =>
       (csr_mnemonic_matches_prefix _s3405_) >>= fun w__0 : option ((csrop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3406_ _) =>
           (match (string_drop _s3405_ _s3406_) with
            | _s3407_ =>
               (spc_matches_prefix _s3407_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3408_ _) =>
                   (match (string_drop _s3407_ _s3408_) with
                    | _s3409_ =>
                       (reg_name_matches_prefix _s3409_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3410_ _) =>
                           (match (string_drop _s3409_ _s3410_) with
                            | _s3411_ =>
                               (sep_matches_prefix _s3411_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3412_ _) =>
                                   (match (string_drop _s3411_ _s3412_) with
                                    | _s3413_ =>
                                       (csr_name_map_matches_prefix _s3413_) >>= fun w__4 : option ((mword 12 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (csr, existT _ _s3414_ _) =>
                                           (match (string_drop _s3413_ _s3414_) with
                                            | _s3415_ =>
                                               (sep_matches_prefix _s3415_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3416_ _) =>
                                                   (match (string_drop _s3415_ _s3416_) with
                                                    | _s3417_ =>
                                                       (reg_name_matches_prefix _s3417_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs1, existT _ _s3418_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3417_ _s3418_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (op, rd, csr, rs1)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                            end)
                                            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                    end)
                                    : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                            end)
                            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                    end)
                    : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((csrop * mword 5 * mword 12 * mword 5)))
            end)
            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
    end)
    : M (option ((csrop * mword 5 * mword 12 * mword 5))).

Definition _s3385_ (_s3386_ : string) : M (option ((csrop * mword 5 * mword 12 * mword 5))) :=
   (match _s3386_ with
    | _s3387_ =>
       (csr_mnemonic_matches_prefix _s3387_) >>= fun w__0 : option ((csrop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3388_ _) =>
           let _s3389_ := string_drop _s3387_ _s3388_ in
           (if string_startswith _s3389_ "i" then
              (match (string_drop _s3389_ (projT1 (string_length "i"))) with
               | _s3390_ =>
                  (spc_matches_prefix _s3390_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s3391_ _) =>
                      (match (string_drop _s3390_ _s3391_) with
                       | _s3392_ =>
                          (reg_name_matches_prefix _s3392_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s3393_ _) =>
                              (match (string_drop _s3392_ _s3393_) with
                               | _s3394_ =>
                                  (sep_matches_prefix _s3394_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s3395_ _) =>
                                      (match (string_drop _s3394_ _s3395_) with
                                       | _s3396_ =>
                                          (csr_name_map_matches_prefix _s3396_) >>= fun w__4 : option ((mword 12 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (csr, existT _ _s3397_ _) =>
                                              (match (string_drop _s3396_ _s3397_) with
                                               | _s3398_ =>
                                                  (sep_matches_prefix _s3398_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  returnm (match w__5 with
                                                           | Some (tt, existT _ _s3399_ _) =>
                                                              match (string_drop _s3398_ _s3399_) with
                                                              | _s3400_ =>
                                                                 match (hex_bits_5_matches_prefix
                                                                          _s3400_) with
                                                                 | Some (rs1, existT _ _s3401_ _) =>
                                                                    let p0_ :=
                                                                      string_drop _s3400_ _s3401_ in
                                                                    if generic_eq p0_ "" then
                                                                      Some (op, rd, csr, rs1)
                                                                    else None
                                                                 | _ => None
                                                                 end
                                                              end
                                                           | _ => None
                                                           end)
                                               end)
                                               : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((csrop * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((csrop * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((csrop * mword 5 * mword 12 * mword 5)))
            else returnm None)
            : M (option ((csrop * mword 5 * mword 12 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((csrop * mword 5 * mword 12 * mword 5)))
    end)
    : M (option ((csrop * mword 5 * mword 12 * mword 5))).

Definition _s3366_ (_s3367_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s3368_ := _s3367_ in
   (if string_startswith _s3368_ "rem" then
      (match (string_drop _s3368_ (projT1 (string_length "rem"))) with
       | _s3369_ =>
          (maybe_not_u_matches_prefix _s3369_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s3370_ _) =>
              let _s3371_ := string_drop _s3369_ _s3370_ in
              (if string_startswith _s3371_ "w" then
                 (match (string_drop _s3371_ (projT1 (string_length "w"))) with
                  | _s3372_ =>
                     (spc_matches_prefix _s3372_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                       0)})) =>
                     (match w__1 with
                      | Some (tt, existT _ _s3373_ _) =>
                         (match (string_drop _s3372_ _s3373_) with
                          | _s3374_ =>
                             (reg_name_matches_prefix _s3374_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                               0)})) =>
                             (match w__2 with
                              | Some (rd, existT _ _s3375_ _) =>
                                 (match (string_drop _s3374_ _s3375_) with
                                  | _s3376_ =>
                                     (sep_matches_prefix _s3376_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                       0)})) =>
                                     (match w__3 with
                                      | Some (tt, existT _ _s3377_ _) =>
                                         (match (string_drop _s3376_ _s3377_) with
                                          | _s3378_ =>
                                             (reg_name_matches_prefix _s3378_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                               0)})) =>
                                             (match w__4 with
                                              | Some (rs1, existT _ _s3379_ _) =>
                                                 (match (string_drop _s3378_ _s3379_) with
                                                  | _s3380_ =>
                                                     (sep_matches_prefix _s3380_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                       0)})) =>
                                                     (match w__5 with
                                                      | Some (tt, existT _ _s3381_ _) =>
                                                         (match (string_drop _s3380_ _s3381_) with
                                                          | _s3382_ =>
                                                             (reg_name_matches_prefix _s3382_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             returnm (match w__6 with
                                                                      | Some
                                                                        (rs2, existT _ _s3383_ _) =>
                                                                         let p0_ :=
                                                                           string_drop _s3382_
                                                                             _s3383_ in
                                                                         if generic_eq p0_ "" then
                                                                           Some (s, rd, rs1, rs2)
                                                                         else None
                                                                      | _ => None
                                                                      end)
                                                          end)
                                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                      | _ => returnm None
                                                      end)
                                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                  end)
                                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                              | _ => returnm None
                                              end)
                                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                          end)
                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                      | _ => returnm None
                                      end)
                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                  end)
                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                              | _ => returnm None
                              end)
                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                          end)
                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                      | _ => returnm None
                      end)
                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                  end)
                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
               else returnm None)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s3347_ (_s3348_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s3349_ := _s3348_ in
   (if string_startswith _s3349_ "div" then
      (match (string_drop _s3349_ (projT1 (string_length "div"))) with
       | _s3350_ =>
          (maybe_not_u_matches_prefix _s3350_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s3351_ _) =>
              let _s3352_ := string_drop _s3350_ _s3351_ in
              (if string_startswith _s3352_ "w" then
                 (match (string_drop _s3352_ (projT1 (string_length "w"))) with
                  | _s3353_ =>
                     (spc_matches_prefix _s3353_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                       0)})) =>
                     (match w__1 with
                      | Some (tt, existT _ _s3354_ _) =>
                         (match (string_drop _s3353_ _s3354_) with
                          | _s3355_ =>
                             (reg_name_matches_prefix _s3355_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                               0)})) =>
                             (match w__2 with
                              | Some (rd, existT _ _s3356_ _) =>
                                 (match (string_drop _s3355_ _s3356_) with
                                  | _s3357_ =>
                                     (sep_matches_prefix _s3357_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                       0)})) =>
                                     (match w__3 with
                                      | Some (tt, existT _ _s3358_ _) =>
                                         (match (string_drop _s3357_ _s3358_) with
                                          | _s3359_ =>
                                             (reg_name_matches_prefix _s3359_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                               0)})) =>
                                             (match w__4 with
                                              | Some (rs1, existT _ _s3360_ _) =>
                                                 (match (string_drop _s3359_ _s3360_) with
                                                  | _s3361_ =>
                                                     (sep_matches_prefix _s3361_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                       0)})) =>
                                                     (match w__5 with
                                                      | Some (tt, existT _ _s3362_ _) =>
                                                         (match (string_drop _s3361_ _s3362_) with
                                                          | _s3363_ =>
                                                             (reg_name_matches_prefix _s3363_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             returnm (match w__6 with
                                                                      | Some
                                                                        (rs2, existT _ _s3364_ _) =>
                                                                         let p0_ :=
                                                                           string_drop _s3363_
                                                                             _s3364_ in
                                                                         if generic_eq p0_ "" then
                                                                           Some (s, rd, rs1, rs2)
                                                                         else None
                                                                      | _ => None
                                                                      end)
                                                          end)
                                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                      | _ => returnm None
                                                      end)
                                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                  end)
                                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                              | _ => returnm None
                                              end)
                                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                          end)
                                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                      | _ => returnm None
                                      end)
                                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                  end)
                                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
                              | _ => returnm None
                              end)
                              : M (option ((bool * mword 5 * mword 5 * mword 5)))
                          end)
                          : M (option ((bool * mword 5 * mword 5 * mword 5)))
                      | _ => returnm None
                      end)
                      : M (option ((bool * mword 5 * mword 5 * mword 5)))
                  end)
                  : M (option ((bool * mword 5 * mword 5 * mword 5)))
               else returnm None)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s3331_ (_s3332_ : string) : M (option ((mword 5 * mword 5 * mword 5))) :=
   let _s3333_ := _s3332_ in
   (if string_startswith _s3333_ "mulw" then
      (match (string_drop _s3333_ (projT1 (string_length "mulw"))) with
       | _s3334_ =>
          (spc_matches_prefix _s3334_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3335_ _) =>
              (match (string_drop _s3334_ _s3335_) with
               | _s3336_ =>
                  (reg_name_matches_prefix _s3336_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3337_ _) =>
                      (match (string_drop _s3336_ _s3337_) with
                       | _s3338_ =>
                          (sep_matches_prefix _s3338_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3339_ _) =>
                              (match (string_drop _s3338_ _s3339_) with
                               | _s3340_ =>
                                  (reg_name_matches_prefix _s3340_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s3341_ _) =>
                                      (match (string_drop _s3340_ _s3341_) with
                                       | _s3342_ =>
                                          (sep_matches_prefix _s3342_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s3343_ _) =>
                                              (match (string_drop _s3342_ _s3343_) with
                                               | _s3344_ =>
                                                  (reg_name_matches_prefix _s3344_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  returnm (match w__5 with
                                                           | Some (rs2, existT _ _s3345_ _) =>
                                                              let p0_ := string_drop _s3344_ _s3345_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rd, rs1, rs2)
                                                              else None
                                                           | _ => None
                                                           end)
                                               end)
                                               : M (option ((mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 5))).

Definition _s3313_ (_s3314_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s3315_ := _s3314_ in
   (if string_startswith _s3315_ "rem" then
      (match (string_drop _s3315_ (projT1 (string_length "rem"))) with
       | _s3316_ =>
          (maybe_not_u_matches_prefix _s3316_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s3317_ _) =>
              (match (string_drop _s3316_ _s3317_) with
               | _s3318_ =>
                  (spc_matches_prefix _s3318_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s3319_ _) =>
                      (match (string_drop _s3318_ _s3319_) with
                       | _s3320_ =>
                          (reg_name_matches_prefix _s3320_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s3321_ _) =>
                              (match (string_drop _s3320_ _s3321_) with
                               | _s3322_ =>
                                  (sep_matches_prefix _s3322_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s3323_ _) =>
                                      (match (string_drop _s3322_ _s3323_) with
                                       | _s3324_ =>
                                          (reg_name_matches_prefix _s3324_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs1, existT _ _s3325_ _) =>
                                              (match (string_drop _s3324_ _s3325_) with
                                               | _s3326_ =>
                                                  (sep_matches_prefix _s3326_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s3327_ _) =>
                                                      (match (string_drop _s3326_ _s3327_) with
                                                       | _s3328_ =>
                                                          (reg_name_matches_prefix _s3328_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs2, existT _ _s3329_ _) =>
                                                                      let p0_ :=
                                                                        string_drop _s3328_ _s3329_ in
                                                                      if generic_eq p0_ "" then
                                                                        Some (s, rd, rs1, rs2)
                                                                      else None
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s3295_ (_s3296_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5))) :=
   let _s3297_ := _s3296_ in
   (if string_startswith _s3297_ "div" then
      (match (string_drop _s3297_ (projT1 (string_length "div"))) with
       | _s3298_ =>
          (maybe_not_u_matches_prefix _s3298_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s3299_ _) =>
              (match (string_drop _s3298_ _s3299_) with
               | _s3300_ =>
                  (spc_matches_prefix _s3300_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s3301_ _) =>
                      (match (string_drop _s3300_ _s3301_) with
                       | _s3302_ =>
                          (reg_name_matches_prefix _s3302_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s3303_ _) =>
                              (match (string_drop _s3302_ _s3303_) with
                               | _s3304_ =>
                                  (sep_matches_prefix _s3304_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s3305_ _) =>
                                      (match (string_drop _s3304_ _s3305_) with
                                       | _s3306_ =>
                                          (reg_name_matches_prefix _s3306_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs1, existT _ _s3307_ _) =>
                                              (match (string_drop _s3306_ _s3307_) with
                                               | _s3308_ =>
                                                  (sep_matches_prefix _s3308_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s3309_ _) =>
                                                      (match (string_drop _s3308_ _s3309_) with
                                                       | _s3310_ =>
                                                          (reg_name_matches_prefix _s3310_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs2, existT _ _s3311_ _) =>
                                                                      let p0_ :=
                                                                        string_drop _s3310_ _s3311_ in
                                                                      if generic_eq p0_ "" then
                                                                        Some (s, rd, rs1, rs2)
                                                                      else None
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5))).

Definition _s3278_ (_s3279_ : string)
: M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5))) :=
   (match _s3279_ with
    | _s3280_ =>
       (mul_mnemonic_matches_prefix _s3280_) >>= fun w__0 : option (((bool * bool * bool) * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some ((high, signed1, signed2), existT _ _s3281_ _) =>
           (match (string_drop _s3280_ _s3281_) with
            | _s3282_ =>
               (spc_matches_prefix _s3282_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3283_ _) =>
                   (match (string_drop _s3282_ _s3283_) with
                    | _s3284_ =>
                       (reg_name_matches_prefix _s3284_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3285_ _) =>
                           (match (string_drop _s3284_ _s3285_) with
                            | _s3286_ =>
                               (sep_matches_prefix _s3286_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3287_ _) =>
                                   (match (string_drop _s3286_ _s3287_) with
                                    | _s3288_ =>
                                       (reg_name_matches_prefix _s3288_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3289_ _) =>
                                           (match (string_drop _s3288_ _s3289_) with
                                            | _s3290_ =>
                                               (sep_matches_prefix _s3290_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s3291_ _) =>
                                                   (match (string_drop _s3290_ _s3291_) with
                                                    | _s3292_ =>
                                                       (reg_name_matches_prefix _s3292_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s3293_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s3292_ _s3293_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some
                                                                       (high, signed1, signed2, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5))).

Definition _s3266_ (_s3267_ : string) : M (option ((mword 5 * mword 5))) :=
   let _s3268_ := _s3267_ in
   (if string_startswith _s3268_ "c.add" then
      (match (string_drop _s3268_ (projT1 (string_length "c.add"))) with
       | _s3269_ =>
          (spc_matches_prefix _s3269_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3270_ _) =>
              (match (string_drop _s3269_ _s3270_) with
               | _s3271_ =>
                  (reg_name_matches_prefix _s3271_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3272_ _) =>
                      (match (string_drop _s3271_ _s3272_) with
                       | _s3273_ =>
                          (sep_matches_prefix _s3273_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3274_ _) =>
                              (match (string_drop _s3273_ _s3274_) with
                               | _s3275_ =>
                                  (reg_name_matches_prefix _s3275_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3276_ _) =>
                                              let p0_ := string_drop _s3275_ _s3276_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5))).

Definition _s3254_ (_s3255_ : string) : M (option ((mword 5 * mword 5))) :=
   let _s3256_ := _s3255_ in
   (if string_startswith _s3256_ "c.mv" then
      (match (string_drop _s3256_ (projT1 (string_length "c.mv"))) with
       | _s3257_ =>
          (spc_matches_prefix _s3257_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3258_ _) =>
              (match (string_drop _s3257_ _s3258_) with
               | _s3259_ =>
                  (reg_name_matches_prefix _s3259_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3260_ _) =>
                      (match (string_drop _s3259_ _s3260_) with
                       | _s3261_ =>
                          (sep_matches_prefix _s3261_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3262_ _) =>
                              (match (string_drop _s3261_ _s3262_) with
                               | _s3263_ =>
                                  (reg_name_matches_prefix _s3263_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3264_ _) =>
                                              let p0_ := string_drop _s3263_ _s3264_ in
                                              if generic_eq p0_ "" then Some (rd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5))).

Definition _s3246_ (_s3247_ : string) : M (option (mword 5)) :=
   let _s3248_ := _s3247_ in
   (if string_startswith _s3248_ "c.jalr" then
      (match (string_drop _s3248_ (projT1 (string_length "c.jalr"))) with
       | _s3249_ =>
          (spc_matches_prefix _s3249_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3250_ _) =>
              (match (string_drop _s3249_ _s3250_) with
               | _s3251_ =>
                  (reg_name_matches_prefix _s3251_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (rs1, existT _ _s3252_ _) =>
                              let p0_ := string_drop _s3251_ _s3252_ in
                              if generic_eq p0_ "" then Some rs1
                              else None
                           | _ => None
                           end)
               end)
               : M (option (mword 5))
           | _ => returnm None
           end)
           : M (option (mword 5))
       end)
       : M (option (mword 5))
    else returnm None)
    : M (option (mword 5)).

Definition _s3238_ (_s3239_ : string) : M (option (mword 5)) :=
   let _s3240_ := _s3239_ in
   (if string_startswith _s3240_ "c.jr" then
      (match (string_drop _s3240_ (projT1 (string_length "c.jr"))) with
       | _s3241_ =>
          (spc_matches_prefix _s3241_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3242_ _) =>
              (match (string_drop _s3241_ _s3242_) with
               | _s3243_ =>
                  (reg_name_matches_prefix _s3243_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (rs1, existT _ _s3244_ _) =>
                              let p0_ := string_drop _s3243_ _s3244_ in
                              if generic_eq p0_ "" then Some rs1
                              else None
                           | _ => None
                           end)
               end)
               : M (option (mword 5))
           | _ => returnm None
           end)
           : M (option (mword 5))
       end)
       : M (option (mword 5))
    else returnm None)
    : M (option (mword 5)).

Definition _s3226_ (_s3227_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3228_ := _s3227_ in
   (if string_startswith _s3228_ "c.sdsp" then
      (match (string_drop _s3228_ (projT1 (string_length "c.sdsp"))) with
       | _s3229_ =>
          (spc_matches_prefix _s3229_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3230_ _) =>
              (match (string_drop _s3229_ _s3230_) with
               | _s3231_ =>
                  (reg_name_matches_prefix _s3231_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs2, existT _ _s3232_ _) =>
                      (match (string_drop _s3231_ _s3232_) with
                       | _s3233_ =>
                          (sep_matches_prefix _s3233_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3234_ _) =>
                                      match (string_drop _s3233_ _s3234_) with
                                      | _s3235_ =>
                                         match (hex_bits_6_matches_prefix _s3235_) with
                                         | Some (uimm, existT _ _s3236_ _) =>
                                            let p0_ := string_drop _s3235_ _s3236_ in
                                            if generic_eq p0_ "" then Some (rs2, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3214_ (_s3215_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3216_ := _s3215_ in
   (if string_startswith _s3216_ "c.swsp" then
      (match (string_drop _s3216_ (projT1 (string_length "c.swsp"))) with
       | _s3217_ =>
          (spc_matches_prefix _s3217_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3218_ _) =>
              (match (string_drop _s3217_ _s3218_) with
               | _s3219_ =>
                  (reg_name_matches_prefix _s3219_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3220_ _) =>
                      (match (string_drop _s3219_ _s3220_) with
                       | _s3221_ =>
                          (sep_matches_prefix _s3221_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3222_ _) =>
                                      match (string_drop _s3221_ _s3222_) with
                                      | _s3223_ =>
                                         match (hex_bits_6_matches_prefix _s3223_) with
                                         | Some (uimm, existT _ _s3224_ _) =>
                                            let p0_ := string_drop _s3223_ _s3224_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3202_ (_s3203_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3204_ := _s3203_ in
   (if string_startswith _s3204_ "c.ldsp" then
      (match (string_drop _s3204_ (projT1 (string_length "c.ldsp"))) with
       | _s3205_ =>
          (spc_matches_prefix _s3205_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3206_ _) =>
              (match (string_drop _s3205_ _s3206_) with
               | _s3207_ =>
                  (reg_name_matches_prefix _s3207_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3208_ _) =>
                      (match (string_drop _s3207_ _s3208_) with
                       | _s3209_ =>
                          (sep_matches_prefix _s3209_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3210_ _) =>
                                      match (string_drop _s3209_ _s3210_) with
                                      | _s3211_ =>
                                         match (hex_bits_6_matches_prefix _s3211_) with
                                         | Some (uimm, existT _ _s3212_ _) =>
                                            let p0_ := string_drop _s3211_ _s3212_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3190_ (_s3191_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3192_ := _s3191_ in
   (if string_startswith _s3192_ "c.lwsp" then
      (match (string_drop _s3192_ (projT1 (string_length "c.lwsp"))) with
       | _s3193_ =>
          (spc_matches_prefix _s3193_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3194_ _) =>
              (match (string_drop _s3193_ _s3194_) with
               | _s3195_ =>
                  (reg_name_matches_prefix _s3195_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3196_ _) =>
                      (match (string_drop _s3195_ _s3196_) with
                       | _s3197_ =>
                          (sep_matches_prefix _s3197_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3198_ _) =>
                                      match (string_drop _s3197_ _s3198_) with
                                      | _s3199_ =>
                                         match (hex_bits_6_matches_prefix _s3199_) with
                                         | Some (uimm, existT _ _s3200_ _) =>
                                            let p0_ := string_drop _s3199_ _s3200_ in
                                            if generic_eq p0_ "" then Some (rd, uimm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3178_ (_s3179_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3180_ := _s3179_ in
   (if string_startswith _s3180_ "c.slli" then
      (match (string_drop _s3180_ (projT1 (string_length "c.slli"))) with
       | _s3181_ =>
          (spc_matches_prefix _s3181_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3182_ _) =>
              (match (string_drop _s3181_ _s3182_) with
               | _s3183_ =>
                  (reg_name_matches_prefix _s3183_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3184_ _) =>
                      (match (string_drop _s3183_ _s3184_) with
                       | _s3185_ =>
                          (sep_matches_prefix _s3185_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3186_ _) =>
                                      match (string_drop _s3185_ _s3186_) with
                                      | _s3187_ =>
                                         match (hex_bits_6_matches_prefix _s3187_) with
                                         | Some (shamt, existT _ _s3188_ _) =>
                                            let p0_ := string_drop _s3187_ _s3188_ in
                                            if generic_eq p0_ "" then Some (rsd, shamt)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3166_ (_s3167_ : string) : M (option ((mword 3 * mword 8))) :=
   let _s3168_ := _s3167_ in
   (if string_startswith _s3168_ "c.bnez" then
      (match (string_drop _s3168_ (projT1 (string_length "c.bnez"))) with
       | _s3169_ =>
          (spc_matches_prefix _s3169_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3170_ _) =>
              (match (string_drop _s3169_ _s3170_) with
               | _s3171_ =>
                  (creg_name_matches_prefix _s3171_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs, existT _ _s3172_ _) =>
                      (match (string_drop _s3171_ _s3172_) with
                       | _s3173_ =>
                          (sep_matches_prefix _s3173_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3174_ _) =>
                                      match (string_drop _s3173_ _s3174_) with
                                      | _s3175_ =>
                                         match (hex_bits_8_matches_prefix _s3175_) with
                                         | Some (imm, existT _ _s3176_ _) =>
                                            let p0_ := string_drop _s3175_ _s3176_ in
                                            if generic_eq p0_ "" then Some (rs, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8)))
               end)
               : M (option ((mword 3 * mword 8)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8)))
       end)
       : M (option ((mword 3 * mword 8)))
    else returnm None)
    : M (option ((mword 3 * mword 8))).

Definition _s3154_ (_s3155_ : string) : M (option ((mword 3 * mword 8))) :=
   let _s3156_ := _s3155_ in
   (if string_startswith _s3156_ "c.beqz" then
      (match (string_drop _s3156_ (projT1 (string_length "c.beqz"))) with
       | _s3157_ =>
          (spc_matches_prefix _s3157_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3158_ _) =>
              (match (string_drop _s3157_ _s3158_) with
               | _s3159_ =>
                  (creg_name_matches_prefix _s3159_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs, existT _ _s3160_ _) =>
                      (match (string_drop _s3159_ _s3160_) with
                       | _s3161_ =>
                          (sep_matches_prefix _s3161_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3162_ _) =>
                                      match (string_drop _s3161_ _s3162_) with
                                      | _s3163_ =>
                                         match (hex_bits_8_matches_prefix _s3163_) with
                                         | Some (imm, existT _ _s3164_ _) =>
                                            let p0_ := string_drop _s3163_ _s3164_ in
                                            if generic_eq p0_ "" then Some (rs, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8)))
               end)
               : M (option ((mword 3 * mword 8)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8)))
       end)
       : M (option ((mword 3 * mword 8)))
    else returnm None)
    : M (option ((mword 3 * mword 8))).

Definition _s3146_ (_s3147_ : string) : M (option (mword 11)) :=
   let _s3148_ := _s3147_ in
   (if string_startswith _s3148_ "c.j" then
      (match (string_drop _s3148_ (projT1 (string_length "c.j"))) with
       | _s3149_ =>
          (spc_matches_prefix _s3149_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s3150_ _) =>
                      match (string_drop _s3149_ _s3150_) with
                      | _s3151_ =>
                         match (hex_bits_11_matches_prefix _s3151_) with
                         | Some (imm, existT _ _s3152_ _) =>
                            let p0_ := string_drop _s3151_ _s3152_ in
                            if generic_eq p0_ "" then Some imm
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 11))
    else returnm None)
    : M (option (mword 11)).

Definition _s3134_ (_s3135_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s3136_ := _s3135_ in
   (if string_startswith _s3136_ "c.addw" then
      (match (string_drop _s3136_ (projT1 (string_length "c.addw"))) with
       | _s3137_ =>
          (spc_matches_prefix _s3137_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3138_ _) =>
              (match (string_drop _s3137_ _s3138_) with
               | _s3139_ =>
                  (creg_name_matches_prefix _s3139_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3140_ _) =>
                      (match (string_drop _s3139_ _s3140_) with
                       | _s3141_ =>
                          (sep_matches_prefix _s3141_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3142_ _) =>
                              (match (string_drop _s3141_ _s3142_) with
                               | _s3143_ =>
                                  (creg_name_matches_prefix _s3143_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3144_ _) =>
                                              let p0_ := string_drop _s3143_ _s3144_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s3122_ (_s3123_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s3124_ := _s3123_ in
   (if string_startswith _s3124_ "c.subw" then
      (match (string_drop _s3124_ (projT1 (string_length "c.subw"))) with
       | _s3125_ =>
          (spc_matches_prefix _s3125_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3126_ _) =>
              (match (string_drop _s3125_ _s3126_) with
               | _s3127_ =>
                  (creg_name_matches_prefix _s3127_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3128_ _) =>
                      (match (string_drop _s3127_ _s3128_) with
                       | _s3129_ =>
                          (sep_matches_prefix _s3129_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3130_ _) =>
                              (match (string_drop _s3129_ _s3130_) with
                               | _s3131_ =>
                                  (creg_name_matches_prefix _s3131_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3132_ _) =>
                                              let p0_ := string_drop _s3131_ _s3132_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s3110_ (_s3111_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s3112_ := _s3111_ in
   (if string_startswith _s3112_ "c.and" then
      (match (string_drop _s3112_ (projT1 (string_length "c.and"))) with
       | _s3113_ =>
          (spc_matches_prefix _s3113_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3114_ _) =>
              (match (string_drop _s3113_ _s3114_) with
               | _s3115_ =>
                  (creg_name_matches_prefix _s3115_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3116_ _) =>
                      (match (string_drop _s3115_ _s3116_) with
                       | _s3117_ =>
                          (sep_matches_prefix _s3117_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3118_ _) =>
                              (match (string_drop _s3117_ _s3118_) with
                               | _s3119_ =>
                                  (creg_name_matches_prefix _s3119_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3120_ _) =>
                                              let p0_ := string_drop _s3119_ _s3120_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s3098_ (_s3099_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s3100_ := _s3099_ in
   (if string_startswith _s3100_ "c.or" then
      (match (string_drop _s3100_ (projT1 (string_length "c.or"))) with
       | _s3101_ =>
          (spc_matches_prefix _s3101_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3102_ _) =>
              (match (string_drop _s3101_ _s3102_) with
               | _s3103_ =>
                  (creg_name_matches_prefix _s3103_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3104_ _) =>
                      (match (string_drop _s3103_ _s3104_) with
                       | _s3105_ =>
                          (sep_matches_prefix _s3105_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3106_ _) =>
                              (match (string_drop _s3105_ _s3106_) with
                               | _s3107_ =>
                                  (creg_name_matches_prefix _s3107_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3108_ _) =>
                                              let p0_ := string_drop _s3107_ _s3108_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s3086_ (_s3087_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s3088_ := _s3087_ in
   (if string_startswith _s3088_ "c.xor" then
      (match (string_drop _s3088_ (projT1 (string_length "c.xor"))) with
       | _s3089_ =>
          (spc_matches_prefix _s3089_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3090_ _) =>
              (match (string_drop _s3089_ _s3090_) with
               | _s3091_ =>
                  (creg_name_matches_prefix _s3091_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3092_ _) =>
                      (match (string_drop _s3091_ _s3092_) with
                       | _s3093_ =>
                          (sep_matches_prefix _s3093_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3094_ _) =>
                              (match (string_drop _s3093_ _s3094_) with
                               | _s3095_ =>
                                  (creg_name_matches_prefix _s3095_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3096_ _) =>
                                              let p0_ := string_drop _s3095_ _s3096_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s3074_ (_s3075_ : string) : M (option ((mword 3 * mword 3))) :=
   let _s3076_ := _s3075_ in
   (if string_startswith _s3076_ "c.sub" then
      (match (string_drop _s3076_ (projT1 (string_length "c.sub"))) with
       | _s3077_ =>
          (spc_matches_prefix _s3077_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3078_ _) =>
              (match (string_drop _s3077_ _s3078_) with
               | _s3079_ =>
                  (creg_name_matches_prefix _s3079_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3080_ _) =>
                      (match (string_drop _s3079_ _s3080_) with
                       | _s3081_ =>
                          (sep_matches_prefix _s3081_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3082_ _) =>
                              (match (string_drop _s3081_ _s3082_) with
                               | _s3083_ =>
                                  (creg_name_matches_prefix _s3083_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s3084_ _) =>
                                              let p0_ := string_drop _s3083_ _s3084_ in
                                              if generic_eq p0_ "" then Some (rsd, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3)))
                       end)
                       : M (option ((mword 3 * mword 3)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3)))
               end)
               : M (option ((mword 3 * mword 3)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3)))
       end)
       : M (option ((mword 3 * mword 3)))
    else returnm None)
    : M (option ((mword 3 * mword 3))).

Definition _s3062_ (_s3063_ : string) : M (option ((mword 3 * mword 6))) :=
   let _s3064_ := _s3063_ in
   (if string_startswith _s3064_ "c.andi" then
      (match (string_drop _s3064_ (projT1 (string_length "c.andi"))) with
       | _s3065_ =>
          (spc_matches_prefix _s3065_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3066_ _) =>
              (match (string_drop _s3065_ _s3066_) with
               | _s3067_ =>
                  (creg_name_matches_prefix _s3067_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3068_ _) =>
                      (match (string_drop _s3067_ _s3068_) with
                       | _s3069_ =>
                          (sep_matches_prefix _s3069_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3070_ _) =>
                                      match (string_drop _s3069_ _s3070_) with
                                      | _s3071_ =>
                                         match (hex_bits_6_matches_prefix _s3071_) with
                                         | Some (imm, existT _ _s3072_ _) =>
                                            let p0_ := string_drop _s3071_ _s3072_ in
                                            if generic_eq p0_ "" then Some (rsd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6)))
               end)
               : M (option ((mword 3 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6)))
       end)
       : M (option ((mword 3 * mword 6)))
    else returnm None)
    : M (option ((mword 3 * mword 6))).

Definition _s3050_ (_s3051_ : string) : M (option ((mword 3 * mword 6))) :=
   let _s3052_ := _s3051_ in
   (if string_startswith _s3052_ "c.srai" then
      (match (string_drop _s3052_ (projT1 (string_length "c.srai"))) with
       | _s3053_ =>
          (spc_matches_prefix _s3053_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3054_ _) =>
              (match (string_drop _s3053_ _s3054_) with
               | _s3055_ =>
                  (creg_name_matches_prefix _s3055_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3056_ _) =>
                      (match (string_drop _s3055_ _s3056_) with
                       | _s3057_ =>
                          (sep_matches_prefix _s3057_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3058_ _) =>
                                      match (string_drop _s3057_ _s3058_) with
                                      | _s3059_ =>
                                         match (hex_bits_6_matches_prefix _s3059_) with
                                         | Some (shamt, existT _ _s3060_ _) =>
                                            let p0_ := string_drop _s3059_ _s3060_ in
                                            if generic_eq p0_ "" then Some (rsd, shamt)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6)))
               end)
               : M (option ((mword 3 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6)))
       end)
       : M (option ((mword 3 * mword 6)))
    else returnm None)
    : M (option ((mword 3 * mword 6))).

Definition _s3038_ (_s3039_ : string) : M (option ((mword 3 * mword 6))) :=
   let _s3040_ := _s3039_ in
   (if string_startswith _s3040_ "c.srli" then
      (match (string_drop _s3040_ (projT1 (string_length "c.srli"))) with
       | _s3041_ =>
          (spc_matches_prefix _s3041_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3042_ _) =>
              (match (string_drop _s3041_ _s3042_) with
               | _s3043_ =>
                  (creg_name_matches_prefix _s3043_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3044_ _) =>
                      (match (string_drop _s3043_ _s3044_) with
                       | _s3045_ =>
                          (sep_matches_prefix _s3045_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3046_ _) =>
                                      match (string_drop _s3045_ _s3046_) with
                                      | _s3047_ =>
                                         match (hex_bits_6_matches_prefix _s3047_) with
                                         | Some (shamt, existT _ _s3048_ _) =>
                                            let p0_ := string_drop _s3047_ _s3048_ in
                                            if generic_eq p0_ "" then Some (rsd, shamt)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6)))
               end)
               : M (option ((mword 3 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6)))
       end)
       : M (option ((mword 3 * mword 6)))
    else returnm None)
    : M (option ((mword 3 * mword 6))).

Definition _s3026_ (_s3027_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3028_ := _s3027_ in
   (if string_startswith _s3028_ "c.lui" then
      (match (string_drop _s3028_ (projT1 (string_length "c.lui"))) with
       | _s3029_ =>
          (spc_matches_prefix _s3029_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3030_ _) =>
              (match (string_drop _s3029_ _s3030_) with
               | _s3031_ =>
                  (reg_name_matches_prefix _s3031_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3032_ _) =>
                      (match (string_drop _s3031_ _s3032_) with
                       | _s3033_ =>
                          (sep_matches_prefix _s3033_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3034_ _) =>
                                      match (string_drop _s3033_ _s3034_) with
                                      | _s3035_ =>
                                         match (hex_bits_6_matches_prefix _s3035_) with
                                         | Some (imm, existT _ _s3036_ _) =>
                                            let p0_ := string_drop _s3035_ _s3036_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s3018_ (_s3019_ : string) : M (option (mword 6)) :=
   let _s3020_ := _s3019_ in
   (if string_startswith _s3020_ "c.addi16sp" then
      (match (string_drop _s3020_ (projT1 (string_length "c.addi16sp"))) with
       | _s3021_ =>
          (spc_matches_prefix _s3021_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s3022_ _) =>
                      match (string_drop _s3021_ _s3022_) with
                      | _s3023_ =>
                         match (hex_bits_6_matches_prefix _s3023_) with
                         | Some (imm, existT _ _s3024_ _) =>
                            let p0_ := string_drop _s3023_ _s3024_ in
                            if generic_eq p0_ "" then Some imm
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 6))
    else returnm None)
    : M (option (mword 6)).

Definition _s3006_ (_s3007_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s3008_ := _s3007_ in
   (if string_startswith _s3008_ "c.li" then
      (match (string_drop _s3008_ (projT1 (string_length "c.li"))) with
       | _s3009_ =>
          (spc_matches_prefix _s3009_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3010_ _) =>
              (match (string_drop _s3009_ _s3010_) with
               | _s3011_ =>
                  (reg_name_matches_prefix _s3011_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3012_ _) =>
                      (match (string_drop _s3011_ _s3012_) with
                       | _s3013_ =>
                          (sep_matches_prefix _s3013_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3014_ _) =>
                                      match (string_drop _s3013_ _s3014_) with
                                      | _s3015_ =>
                                         match (hex_bits_6_matches_prefix _s3015_) with
                                         | Some (imm, existT _ _s3016_ _) =>
                                            let p0_ := string_drop _s3015_ _s3016_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s2994_ (_s2995_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s2996_ := _s2995_ in
   (if string_startswith _s2996_ "c.addiw" then
      (match (string_drop _s2996_ (projT1 (string_length "c.addiw"))) with
       | _s2997_ =>
          (spc_matches_prefix _s2997_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2998_ _) =>
              (match (string_drop _s2997_ _s2998_) with
               | _s2999_ =>
                  (reg_name_matches_prefix _s2999_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s3000_ _) =>
                      (match (string_drop _s2999_ _s3000_) with
                       | _s3001_ =>
                          (sep_matches_prefix _s3001_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3002_ _) =>
                                      match (string_drop _s3001_ _s3002_) with
                                      | _s3003_ =>
                                         match (hex_bits_6_matches_prefix _s3003_) with
                                         | Some (imm, existT _ _s3004_ _) =>
                                            let p0_ := string_drop _s3003_ _s3004_ in
                                            if generic_eq p0_ "" then Some (rsd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s2986_ (_s2987_ : string) : M (option (mword 11)) :=
   let _s2988_ := _s2987_ in
   (if string_startswith _s2988_ "c.jal" then
      (match (string_drop _s2988_ (projT1 (string_length "c.jal"))) with
       | _s2989_ =>
          (spc_matches_prefix _s2989_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s2990_ _) =>
                      match (string_drop _s2989_ _s2990_) with
                      | _s2991_ =>
                         match (hex_bits_12_matches_prefix _s2991_) with
                         | Some (v__1096, existT _ _s2992_ _) =>
                            if eq_vec (subrange_vec_dec v__1096 0 0) ('b"0"  : mword (0 - 0 + 1))
                            then
                              let imm : mword 11 := subrange_vec_dec v__1096 11 1 in
                              let imm : mword 11 := subrange_vec_dec v__1096 11 1 in
                              let p0_ := string_drop _s2991_ _s2992_ in
                              if generic_eq p0_ "" then Some imm
                              else None
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option (mword 11))
    else returnm None)
    : M (option (mword 11)).

Definition _s2974_ (_s2975_ : string) : M (option ((mword 5 * mword 6))) :=
   let _s2976_ := _s2975_ in
   (if string_startswith _s2976_ "c.addi" then
      (match (string_drop _s2976_ (projT1 (string_length "c.addi"))) with
       | _s2977_ =>
          (spc_matches_prefix _s2977_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2978_ _) =>
              (match (string_drop _s2977_ _s2978_) with
               | _s2979_ =>
                  (reg_name_matches_prefix _s2979_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s2980_ _) =>
                      (match (string_drop _s2979_ _s2980_) with
                       | _s2981_ =>
                          (sep_matches_prefix _s2981_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s2982_ _) =>
                                      match (string_drop _s2981_ _s2982_) with
                                      | _s2983_ =>
                                         match (hex_bits_6_matches_prefix _s2983_) with
                                         | Some (nzi, existT _ _s2984_ _) =>
                                            let p0_ := string_drop _s2983_ _s2984_ in
                                            if generic_eq p0_ "" then Some (rsd, nzi)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6)))
               end)
               : M (option ((mword 5 * mword 6)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6)))
       end)
       : M (option ((mword 5 * mword 6)))
    else returnm None)
    : M (option ((mword 5 * mword 6))).

Definition _s2958_ (_s2959_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s2960_ := _s2959_ in
   (if string_startswith _s2960_ "c.sd" then
      (match (string_drop _s2960_ (projT1 (string_length "c.sd"))) with
       | _s2961_ =>
          (spc_matches_prefix _s2961_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2962_ _) =>
              (match (string_drop _s2961_ _s2962_) with
               | _s2963_ =>
                  (creg_name_matches_prefix _s2963_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s2964_ _) =>
                      (match (string_drop _s2963_ _s2964_) with
                       | _s2965_ =>
                          (sep_matches_prefix _s2965_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2966_ _) =>
                              (match (string_drop _s2965_ _s2966_) with
                               | _s2967_ =>
                                  (creg_name_matches_prefix _s2967_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s2968_ _) =>
                                      (match (string_drop _s2967_ _s2968_) with
                                       | _s2969_ =>
                                          (sep_matches_prefix _s2969_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2970_ _) =>
                                                      match (string_drop _s2969_ _s2970_) with
                                                      | _s2971_ =>
                                                         match (hex_bits_8_matches_prefix _s2971_) with
                                                         | Some (v__1098, existT _ _s2972_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1098 2 0)
                                                                 ('b"000"
                                                                  : mword (2 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1098 7 3 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1098 7 3 in
                                                              let p0_ := string_drop _s2971_ _s2972_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rsc1, rsc2, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s2942_ (_s2943_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s2944_ := _s2943_ in
   (if string_startswith _s2944_ "c.sw" then
      (match (string_drop _s2944_ (projT1 (string_length "c.sw"))) with
       | _s2945_ =>
          (spc_matches_prefix _s2945_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2946_ _) =>
              (match (string_drop _s2945_ _s2946_) with
               | _s2947_ =>
                  (creg_name_matches_prefix _s2947_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s2948_ _) =>
                      (match (string_drop _s2947_ _s2948_) with
                       | _s2949_ =>
                          (sep_matches_prefix _s2949_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2950_ _) =>
                              (match (string_drop _s2949_ _s2950_) with
                               | _s2951_ =>
                                  (creg_name_matches_prefix _s2951_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s2952_ _) =>
                                      (match (string_drop _s2951_ _s2952_) with
                                       | _s2953_ =>
                                          (sep_matches_prefix _s2953_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2954_ _) =>
                                                      match (string_drop _s2953_ _s2954_) with
                                                      | _s2955_ =>
                                                         match (hex_bits_7_matches_prefix _s2955_) with
                                                         | Some (v__1100, existT _ _s2956_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1100 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1100 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1100 6 2 in
                                                              let p0_ := string_drop _s2955_ _s2956_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rsc1, rsc2, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s2926_ (_s2927_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s2928_ := _s2927_ in
   (if string_startswith _s2928_ "c.ld" then
      (match (string_drop _s2928_ (projT1 (string_length "c.ld"))) with
       | _s2929_ =>
          (spc_matches_prefix _s2929_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2930_ _) =>
              (match (string_drop _s2929_ _s2930_) with
               | _s2931_ =>
                  (creg_name_matches_prefix _s2931_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s2932_ _) =>
                      (match (string_drop _s2931_ _s2932_) with
                       | _s2933_ =>
                          (sep_matches_prefix _s2933_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2934_ _) =>
                              (match (string_drop _s2933_ _s2934_) with
                               | _s2935_ =>
                                  (creg_name_matches_prefix _s2935_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s2936_ _) =>
                                      (match (string_drop _s2935_ _s2936_) with
                                       | _s2937_ =>
                                          (sep_matches_prefix _s2937_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2938_ _) =>
                                                      match (string_drop _s2937_ _s2938_) with
                                                      | _s2939_ =>
                                                         match (hex_bits_8_matches_prefix _s2939_) with
                                                         | Some (v__1102, existT _ _s2940_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1102 2 0)
                                                                 ('b"000"
                                                                  : mword (2 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1102 7 3 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1102 7 3 in
                                                              let p0_ := string_drop _s2939_ _s2940_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rdc, rsc, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s2910_ (_s2911_ : string) : M (option ((mword 3 * mword 3 * mword 5))) :=
   let _s2912_ := _s2911_ in
   (if string_startswith _s2912_ "c.lw" then
      (match (string_drop _s2912_ (projT1 (string_length "c.lw"))) with
       | _s2913_ =>
          (spc_matches_prefix _s2913_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2914_ _) =>
              (match (string_drop _s2913_ _s2914_) with
               | _s2915_ =>
                  (creg_name_matches_prefix _s2915_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s2916_ _) =>
                      (match (string_drop _s2915_ _s2916_) with
                       | _s2917_ =>
                          (sep_matches_prefix _s2917_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2918_ _) =>
                              (match (string_drop _s2917_ _s2918_) with
                               | _s2919_ =>
                                  (creg_name_matches_prefix _s2919_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s2920_ _) =>
                                      (match (string_drop _s2919_ _s2920_) with
                                       | _s2921_ =>
                                          (sep_matches_prefix _s2921_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2922_ _) =>
                                                      match (string_drop _s2921_ _s2922_) with
                                                      | _s2923_ =>
                                                         match (hex_bits_7_matches_prefix _s2923_) with
                                                         | Some (v__1104, existT _ _s2924_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1104 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1104 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1104 6 2 in
                                                              let p0_ := string_drop _s2923_ _s2924_ in
                                                              if generic_eq p0_ "" then
                                                                Some (rdc, rsc, uimm)
                                                              else None
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5))).

Definition _s2898_ (_s2899_ : string) : M (option ((mword 3 * mword 8))) :=
   let _s2900_ := _s2899_ in
   (if string_startswith _s2900_ "c.addi4spn" then
      (match (string_drop _s2900_ (projT1 (string_length "c.addi4spn"))) with
       | _s2901_ =>
          (spc_matches_prefix _s2901_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2902_ _) =>
              (match (string_drop _s2901_ _s2902_) with
               | _s2903_ =>
                  (creg_name_matches_prefix _s2903_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s2904_ _) =>
                      (match (string_drop _s2903_ _s2904_) with
                       | _s2905_ =>
                          (sep_matches_prefix _s2905_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s2906_ _) =>
                                      match (string_drop _s2905_ _s2906_) with
                                      | _s2907_ =>
                                         match (hex_bits_10_matches_prefix _s2907_) with
                                         | Some (v__1106, existT _ _s2908_ _) =>
                                            if eq_vec (subrange_vec_dec v__1106 1 0)
                                                 ('b"00"
                                                  : mword (1 - 0 + 1)) then
                                              let nzimm : mword 8 := subrange_vec_dec v__1106 9 2 in
                                              let nzimm : mword 8 := subrange_vec_dec v__1106 9 2 in
                                              let p0_ := string_drop _s2907_ _s2908_ in
                                              if generic_eq p0_ "" then Some (rdc, nzimm)
                                              else None
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8)))
               end)
               : M (option ((mword 3 * mword 8)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8)))
       end)
       : M (option ((mword 3 * mword 8)))
    else returnm None)
    : M (option ((mword 3 * mword 8))).

Definition _s2872_ (_s2873_ : string)
: M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5))) :=
   (match _s2873_ with
    | _s2874_ =>
       (amo_mnemonic_matches_prefix _s2874_) >>= fun w__0 : option ((amoop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2875_ _) =>
           let _s2876_ := string_drop _s2874_ _s2875_ in
           (if string_startswith _s2876_ "." then
              (match (string_drop _s2876_ (projT1 (string_length "."))) with
               | _s2877_ =>
                  (size_mnemonic_matches_prefix _s2877_) >>= fun w__1 : option ((word_width * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (width, existT _ _s2878_ _) =>
                      (match (string_drop _s2877_ _s2878_) with
                       | _s2879_ =>
                          (maybe_aq_matches_prefix _s2879_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (aq, existT _ _s2880_ _) =>
                              (match (string_drop _s2879_ _s2880_) with
                               | _s2881_ =>
                                  (maybe_rl_matches_prefix _s2881_) >>= fun w__3 : option ((bool * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rl, existT _ _s2882_ _) =>
                                      (match (string_drop _s2881_ _s2882_) with
                                       | _s2883_ =>
                                          (spc_matches_prefix _s2883_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s2884_ _) =>
                                              (match (string_drop _s2883_ _s2884_) with
                                               | _s2885_ =>
                                                  (reg_name_matches_prefix _s2885_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (rd, existT _ _s2886_ _) =>
                                                      (match (string_drop _s2885_ _s2886_) with
                                                       | _s2887_ =>
                                                          (sep_matches_prefix _s2887_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (tt, existT _ _s2888_ _) =>
                                                              (match (string_drop _s2887_ _s2888_) with
                                                               | _s2889_ =>
                                                                  (reg_name_matches_prefix _s2889_) >>= fun w__7 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__7 with
                                                                   | Some (rs2, existT _ _s2890_ _) =>
                                                                      (match (string_drop _s2889_
                                                                                _s2890_) with
                                                                       | _s2891_ =>
                                                                          (sep_matches_prefix
                                                                             _s2891_) >>= fun w__8 : option ((unit * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          (match w__8 with
                                                                           | Some
                                                                             (tt, existT _ _s2892_ _) =>
                                                                              let _s2893_ :=
                                                                                string_drop _s2891_
                                                                                  _s2892_ in
                                                                              (if string_startswith
                                                                                    _s2893_ "(" then
                                                                                 (match (string_drop
                                                                                           _s2893_
                                                                                           (projT1
                                                                                            (string_length
                                                                                               "("))) with
                                                                                  | _s2894_ =>
                                                                                     (reg_name_matches_prefix
                                                                                        _s2894_) >>= fun w__9 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     returnm (match w__9 with
                                                                                              | Some
                                                                                                (rs1, existT _ _s2895_ _) =>
                                                                                                 let _s2896_ :=
                                                                                                   string_drop
                                                                                                     _s2894_
                                                                                                     _s2895_ in
                                                                                                 if string_startswith
                                                                                                      _s2896_
                                                                                                      ")"
                                                                                                 then
                                                                                                   let p0_ :=
                                                                                                     string_drop
                                                                                                       _s2896_
                                                                                                       (projT1
                                                                                                        (string_length
                                                                                                           ")")) in
                                                                                                   if
                                                                                                     generic_eq
                                                                                                       p0_
                                                                                                       ""
                                                                                                   then
                                                                                                     Some
                                                                                                       (op, width, aq, rl, rd, rs2, rs1)
                                                                                                   else
                                                                                                     None
                                                                                                 else
                                                                                                   None
                                                                                              | _ =>
                                                                                                 None
                                                                                              end)
                                                                                  end)
                                                                                  : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                               else returnm None)
                                                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                           | _ => returnm None
                                                                           end)
                                                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                       end)
                                                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                               end)
                                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                       end)
                                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
            else returnm None)
            : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5))).

Definition _s2850_ (_s2851_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5))) :=
   let _s2852_ := _s2851_ in
   (if string_startswith _s2852_ "sc." then
      (match (string_drop _s2852_ (projT1 (string_length "sc."))) with
       | _s2853_ =>
          (size_mnemonic_matches_prefix _s2853_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s2854_ _) =>
              (match (string_drop _s2853_ _s2854_) with
               | _s2855_ =>
                  (maybe_aq_matches_prefix _s2855_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s2856_ _) =>
                      (match (string_drop _s2855_ _s2856_) with
                       | _s2857_ =>
                          (maybe_rl_matches_prefix _s2857_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s2858_ _) =>
                              (match (string_drop _s2857_ _s2858_) with
                               | _s2859_ =>
                                  (spc_matches_prefix _s2859_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s2860_ _) =>
                                      (match (string_drop _s2859_ _s2860_) with
                                       | _s2861_ =>
                                          (reg_name_matches_prefix _s2861_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rd, existT _ _s2862_ _) =>
                                              (match (string_drop _s2861_ _s2862_) with
                                               | _s2863_ =>
                                                  (sep_matches_prefix _s2863_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s2864_ _) =>
                                                      (match (string_drop _s2863_ _s2864_) with
                                                       | _s2865_ =>
                                                          (reg_name_matches_prefix _s2865_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (rs1, existT _ _s2866_ _) =>
                                                              (match (string_drop _s2865_ _s2866_) with
                                                               | _s2867_ =>
                                                                  (sep_matches_prefix _s2867_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__7 with
                                                                   | Some (tt, existT _ _s2868_ _) =>
                                                                      (match (string_drop _s2867_
                                                                                _s2868_) with
                                                                       | _s2869_ =>
                                                                          (reg_name_matches_prefix
                                                                             _s2869_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          returnm (match w__8 with
                                                                                   | Some
                                                                                     (rs2, existT _ _s2870_ _) =>
                                                                                      let p0_ :=
                                                                                        string_drop
                                                                                          _s2869_
                                                                                          _s2870_ in
                                                                                      if generic_eq
                                                                                           p0_ ""
                                                                                      then
                                                                                        Some
                                                                                          (size, aq, rl, rd, rs1, rs2)
                                                                                      else None
                                                                                   | _ => None
                                                                                   end)
                                                                       end)
                                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5))).

Definition _s2832_ (_s2833_ : string) : M (option ((word_width * bool * bool * mword 5 * mword 5))) :=
   let _s2834_ := _s2833_ in
   (if string_startswith _s2834_ "lr." then
      (match (string_drop _s2834_ (projT1 (string_length "lr."))) with
       | _s2835_ =>
          (size_mnemonic_matches_prefix _s2835_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s2836_ _) =>
              (match (string_drop _s2835_ _s2836_) with
               | _s2837_ =>
                  (maybe_aq_matches_prefix _s2837_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s2838_ _) =>
                      (match (string_drop _s2837_ _s2838_) with
                       | _s2839_ =>
                          (maybe_rl_matches_prefix _s2839_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s2840_ _) =>
                              (match (string_drop _s2839_ _s2840_) with
                               | _s2841_ =>
                                  (spc_matches_prefix _s2841_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s2842_ _) =>
                                      (match (string_drop _s2841_ _s2842_) with
                                       | _s2843_ =>
                                          (reg_name_matches_prefix _s2843_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rd, existT _ _s2844_ _) =>
                                              (match (string_drop _s2843_ _s2844_) with
                                               | _s2845_ =>
                                                  (sep_matches_prefix _s2845_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s2846_ _) =>
                                                      (match (string_drop _s2845_ _s2846_) with
                                                       | _s2847_ =>
                                                          (reg_name_matches_prefix _s2847_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs1, existT _ _s2848_ _) =>
                                                                      let p0_ :=
                                                                        string_drop _s2847_ _s2848_ in
                                                                      if generic_eq p0_ "" then
                                                                        Some (size, aq, rl, rd, rs1)
                                                                      else None
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 5))).

Definition _s2820_ (_s2821_ : string) : M (option ((mword 5 * mword 5))) :=
   let _s2822_ := _s2821_ in
   (if string_startswith _s2822_ "sfence.vma" then
      (match (string_drop _s2822_ (projT1 (string_length "sfence.vma"))) with
       | _s2823_ =>
          (spc_matches_prefix _s2823_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2824_ _) =>
              (match (string_drop _s2823_ _s2824_) with
               | _s2825_ =>
                  (reg_name_matches_prefix _s2825_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs1, existT _ _s2826_ _) =>
                      (match (string_drop _s2825_ _s2826_) with
                       | _s2827_ =>
                          (sep_matches_prefix _s2827_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2828_ _) =>
                              (match (string_drop _s2827_ _s2828_) with
                               | _s2829_ =>
                                  (reg_name_matches_prefix _s2829_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s2830_ _) =>
                                              let p0_ := string_drop _s2829_ _s2830_ in
                                              if generic_eq p0_ "" then Some (rs1, rs2)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5)))
                       end)
                       : M (option ((mword 5 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5)))
               end)
               : M (option ((mword 5 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5)))
       end)
       : M (option ((mword 5 * mword 5)))
    else returnm None)
    : M (option ((mword 5 * mword 5))).

Definition _s2808_ (_s2809_ : string) : M (option ((mword 4 * mword 4))) :=
   let _s2810_ := _s2809_ in
   (if string_startswith _s2810_ "fence.tso" then
      (match (string_drop _s2810_ (projT1 (string_length "fence.tso"))) with
       | _s2811_ =>
          (spc_matches_prefix _s2811_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2812_ _) =>
              (match (string_drop _s2811_ _s2812_) with
               | _s2813_ =>
                  (fence_bits_matches_prefix _s2813_) >>= fun w__1 : option ((mword 4 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (pred, existT _ _s2814_ _) =>
                      (match (string_drop _s2813_ _s2814_) with
                       | _s2815_ =>
                          (sep_matches_prefix _s2815_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2816_ _) =>
                              (match (string_drop _s2815_ _s2816_) with
                               | _s2817_ =>
                                  (fence_bits_matches_prefix _s2817_) >>= fun w__3 : option ((mword 4 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (succ, existT _ _s2818_ _) =>
                                              let p0_ := string_drop _s2817_ _s2818_ in
                                              if generic_eq p0_ "" then Some (pred, succ)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 4 * mword 4)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 4 * mword 4)))
                       end)
                       : M (option ((mword 4 * mword 4)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 4 * mword 4)))
               end)
               : M (option ((mword 4 * mword 4)))
           | _ => returnm None
           end)
           : M (option ((mword 4 * mword 4)))
       end)
       : M (option ((mword 4 * mword 4)))
    else returnm None)
    : M (option ((mword 4 * mword 4))).

Definition _s2796_ (_s2797_ : string) : M (option ((mword 4 * mword 4))) :=
   let _s2798_ := _s2797_ in
   (if string_startswith _s2798_ "fence" then
      (match (string_drop _s2798_ (projT1 (string_length "fence"))) with
       | _s2799_ =>
          (spc_matches_prefix _s2799_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2800_ _) =>
              (match (string_drop _s2799_ _s2800_) with
               | _s2801_ =>
                  (fence_bits_matches_prefix _s2801_) >>= fun w__1 : option ((mword 4 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (pred, existT _ _s2802_ _) =>
                      (match (string_drop _s2801_ _s2802_) with
                       | _s2803_ =>
                          (sep_matches_prefix _s2803_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2804_ _) =>
                              (match (string_drop _s2803_ _s2804_) with
                               | _s2805_ =>
                                  (fence_bits_matches_prefix _s2805_) >>= fun w__3 : option ((mword 4 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (succ, existT _ _s2806_ _) =>
                                              let p0_ := string_drop _s2805_ _s2806_ in
                                              if generic_eq p0_ "" then Some (pred, succ)
                                              else None
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 4 * mword 4)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 4 * mword 4)))
                       end)
                       : M (option ((mword 4 * mword 4)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 4 * mword 4)))
               end)
               : M (option ((mword 4 * mword 4)))
           | _ => returnm None
           end)
           : M (option ((mword 4 * mword 4)))
       end)
       : M (option ((mword 4 * mword 4)))
    else returnm None)
    : M (option ((mword 4 * mword 4))).

Definition _s2779_ (_s2780_ : string) : M (option ((sopw * mword 5 * mword 5 * mword 5))) :=
   (match _s2780_ with
    | _s2781_ =>
       (shiftiwop_mnemonic_matches_prefix _s2781_) >>= fun w__0 : option ((sopw * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2782_ _) =>
           (match (string_drop _s2781_ _s2782_) with
            | _s2783_ =>
               (spc_matches_prefix _s2783_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2784_ _) =>
                   (match (string_drop _s2783_ _s2784_) with
                    | _s2785_ =>
                       (reg_name_matches_prefix _s2785_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2786_ _) =>
                           (match (string_drop _s2785_ _s2786_) with
                            | _s2787_ =>
                               (sep_matches_prefix _s2787_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2788_ _) =>
                                   (match (string_drop _s2787_ _s2788_) with
                                    | _s2789_ =>
                                       (reg_name_matches_prefix _s2789_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2790_ _) =>
                                           (match (string_drop _s2789_ _s2790_) with
                                            | _s2791_ =>
                                               (sep_matches_prefix _s2791_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s2792_ _) =>
                                                           match (string_drop _s2791_ _s2792_) with
                                                           | _s2793_ =>
                                                              match (hex_bits_5_matches_prefix
                                                                       _s2793_) with
                                                              | Some (shamt, existT _ _s2794_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s2793_ _s2794_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, shamt)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((sopw * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((sopw * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((sopw * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((sopw * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((sopw * mword 5 * mword 5 * mword 5))).

Definition _s2762_ (_s2763_ : string) : M (option ((ropw * mword 5 * mword 5 * mword 5))) :=
   (match _s2763_ with
    | _s2764_ =>
       (rtypew_mnemonic_matches_prefix _s2764_) >>= fun w__0 : option ((ropw * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2765_ _) =>
           (match (string_drop _s2764_ _s2765_) with
            | _s2766_ =>
               (spc_matches_prefix _s2766_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2767_ _) =>
                   (match (string_drop _s2766_ _s2767_) with
                    | _s2768_ =>
                       (reg_name_matches_prefix _s2768_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2769_ _) =>
                           (match (string_drop _s2768_ _s2769_) with
                            | _s2770_ =>
                               (sep_matches_prefix _s2770_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2771_ _) =>
                                   (match (string_drop _s2770_ _s2771_) with
                                    | _s2772_ =>
                                       (reg_name_matches_prefix _s2772_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2773_ _) =>
                                           (match (string_drop _s2772_ _s2773_) with
                                            | _s2774_ =>
                                               (sep_matches_prefix _s2774_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2775_ _) =>
                                                   (match (string_drop _s2774_ _s2775_) with
                                                    | _s2776_ =>
                                                       (reg_name_matches_prefix _s2776_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2777_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2776_ _s2777_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (op, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((ropw * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((ropw * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((ropw * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((ropw * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((ropw * mword 5 * mword 5 * mword 5))).

Definition _s2745_ (_s2746_ : string) : M (option ((sop * mword 5 * mword 5 * mword 5))) :=
   (match _s2746_ with
    | _s2747_ =>
       (shiftw_mnemonic_matches_prefix _s2747_) >>= fun w__0 : option ((sop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2748_ _) =>
           (match (string_drop _s2747_ _s2748_) with
            | _s2749_ =>
               (spc_matches_prefix _s2749_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2750_ _) =>
                   (match (string_drop _s2749_ _s2750_) with
                    | _s2751_ =>
                       (reg_name_matches_prefix _s2751_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2752_ _) =>
                           (match (string_drop _s2751_ _s2752_) with
                            | _s2753_ =>
                               (sep_matches_prefix _s2753_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2754_ _) =>
                                   (match (string_drop _s2753_ _s2754_) with
                                    | _s2755_ =>
                                       (reg_name_matches_prefix _s2755_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2756_ _) =>
                                           (match (string_drop _s2755_ _s2756_) with
                                            | _s2757_ =>
                                               (sep_matches_prefix _s2757_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s2758_ _) =>
                                                           match (string_drop _s2757_ _s2758_) with
                                                           | _s2759_ =>
                                                              match (hex_bits_5_matches_prefix
                                                                       _s2759_) with
                                                              | Some (shamt, existT _ _s2760_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s2759_ _s2760_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, shamt)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sop * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sop * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((sop * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((sop * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((sop * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((sop * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((sop * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((sop * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((sop * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((sop * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((sop * mword 5 * mword 5 * mword 5))).

Definition _s2729_ (_s2730_ : string) : M (option ((mword 5 * mword 5 * mword 12))) :=
   let _s2731_ := _s2730_ in
   (if string_startswith _s2731_ "addiw" then
      (match (string_drop _s2731_ (projT1 (string_length "addiw"))) with
       | _s2732_ =>
          (spc_matches_prefix _s2732_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2733_ _) =>
              (match (string_drop _s2732_ _s2733_) with
               | _s2734_ =>
                  (reg_name_matches_prefix _s2734_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s2735_ _) =>
                      (match (string_drop _s2734_ _s2735_) with
                       | _s2736_ =>
                          (sep_matches_prefix _s2736_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2737_ _) =>
                              (match (string_drop _s2736_ _s2737_) with
                               | _s2738_ =>
                                  (reg_name_matches_prefix _s2738_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s2739_ _) =>
                                      (match (string_drop _s2738_ _s2739_) with
                                       | _s2740_ =>
                                          (sep_matches_prefix _s2740_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2741_ _) =>
                                                      match (string_drop _s2740_ _s2741_) with
                                                      | _s2742_ =>
                                                         match (hex_bits_12_matches_prefix _s2742_) with
                                                         | Some (imm, existT _ _s2743_ _) =>
                                                            let p0_ := string_drop _s2742_ _s2743_ in
                                                            if generic_eq p0_ "" then
                                                              Some (rd, rs1, imm)
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 12)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 12)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 12)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 12)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 12)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 12)))
               end)
               : M (option ((mword 5 * mword 5 * mword 12)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 12)))
       end)
       : M (option ((mword 5 * mword 5 * mword 12)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 12))).

Definition _s2701_ (_s2702_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5))) :=
   let _s2703_ := _s2702_ in
   (if string_startswith _s2703_ "s" then
      (match (string_drop _s2703_ (projT1 (string_length "s"))) with
       | _s2704_ =>
          (size_mnemonic_matches_prefix _s2704_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s2705_ _) =>
              (match (string_drop _s2704_ _s2705_) with
               | _s2706_ =>
                  (maybe_aq_matches_prefix _s2706_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s2707_ _) =>
                      (match (string_drop _s2706_ _s2707_) with
                       | _s2708_ =>
                          (maybe_rl_matches_prefix _s2708_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s2709_ _) =>
                              (match (string_drop _s2708_ _s2709_) with
                               | _s2710_ =>
                                  (spc_matches_prefix _s2710_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s2711_ _) =>
                                      (match (string_drop _s2710_ _s2711_) with
                                       | _s2712_ =>
                                          (reg_name_matches_prefix _s2712_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs2, existT _ _s2713_ _) =>
                                              (match (string_drop _s2712_ _s2713_) with
                                               | _s2714_ =>
                                                  (sep_matches_prefix _s2714_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s2715_ _) =>
                                                      (match (string_drop _s2714_ _s2715_) with
                                                       | _s2716_ =>
                                                          (match (hex_bits_12_matches_prefix _s2716_) with
                                                           | Some (imm, existT _ _s2717_ _) =>
                                                              (match (string_drop _s2716_ _s2717_) with
                                                               | _s2718_ =>
                                                                  (opt_spc_matches_prefix _s2718_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__6 with
                                                                   | Some (tt, existT _ _s2719_ _) =>
                                                                      let _s2720_ :=
                                                                        string_drop _s2718_ _s2719_ in
                                                                      (if string_startswith _s2720_
                                                                            "(" then
                                                                         (match (string_drop _s2720_
                                                                                   (projT1
                                                                                    (string_length
                                                                                       "("))) with
                                                                          | _s2721_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s2721_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             (match w__7 with
                                                                              | Some
                                                                                (tt, existT _ _s2722_ _) =>
                                                                                 (match (string_drop
                                                                                           _s2721_
                                                                                           _s2722_) with
                                                                                  | _s2723_ =>
                                                                                     (reg_name_matches_prefix
                                                                                        _s2723_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     (match w__8 with
                                                                                      | Some
                                                                                        (rs1, existT _ _s2724_ _) =>
                                                                                         (match (string_drop
                                                                                                   _s2723_
                                                                                                   _s2724_) with
                                                                                          | _s2725_ =>
                                                                                             (opt_spc_matches_prefix
                                                                                                _s2725_) >>= fun w__9 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                               0)})) =>
                                                                                             returnm (match w__9 with
                                                                                                      | Some
                                                                                                        (tt, existT _ _s2726_ _) =>
                                                                                                         let _s2727_ :=
                                                                                                           string_drop
                                                                                                             _s2725_
                                                                                                             _s2726_ in
                                                                                                         if
                                                                                                           string_startswith
                                                                                                             _s2727_
                                                                                                             ")"
                                                                                                         then
                                                                                                           let p0_ :=
                                                                                                             string_drop
                                                                                                               _s2727_
                                                                                                               (projT1
                                                                                                                (string_length
                                                                                                                   ")")) in
                                                                                                           if
                                                                                                             generic_eq
                                                                                                               p0_
                                                                                                               ""
                                                                                                           then
                                                                                                             Some
                                                                                                               (size, aq, rl, rs2, imm, rs1)
                                                                                                           else
                                                                                                             None
                                                                                                         else
                                                                                                           None
                                                                                                      | _ =>
                                                                                                         None
                                                                                                      end)
                                                                                          end)
                                                                                          : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                      | _ =>
                                                                                         returnm None
                                                                                      end)
                                                                                      : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                  end)
                                                                                  : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                              | _ => returnm None
                                                                              end)
                                                                              : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                          end)
                                                                          : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                       else returnm None)
                                                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5))).

Definition _s2671_ (_s2672_ : string)
: M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5))) :=
   let _s2673_ := _s2672_ in
   (if string_startswith _s2673_ "l" then
      (match (string_drop _s2673_ (projT1 (string_length "l"))) with
       | _s2674_ =>
          (size_mnemonic_matches_prefix _s2674_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s2675_ _) =>
              (match (string_drop _s2674_ _s2675_) with
               | _s2676_ =>
                  (maybe_u_matches_prefix _s2676_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (is_unsigned, existT _ _s2677_ _) =>
                      (match (string_drop _s2676_ _s2677_) with
                       | _s2678_ =>
                          (maybe_aq_matches_prefix _s2678_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (aq, existT _ _s2679_ _) =>
                              (match (string_drop _s2678_ _s2679_) with
                               | _s2680_ =>
                                  (maybe_rl_matches_prefix _s2680_) >>= fun w__3 : option ((bool * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rl, existT _ _s2681_ _) =>
                                      (match (string_drop _s2680_ _s2681_) with
                                       | _s2682_ =>
                                          (spc_matches_prefix _s2682_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s2683_ _) =>
                                              (match (string_drop _s2682_ _s2683_) with
                                               | _s2684_ =>
                                                  (reg_name_matches_prefix _s2684_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (rd, existT _ _s2685_ _) =>
                                                      (match (string_drop _s2684_ _s2685_) with
                                                       | _s2686_ =>
                                                          (sep_matches_prefix _s2686_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (tt, existT _ _s2687_ _) =>
                                                              (match (string_drop _s2686_ _s2687_) with
                                                               | _s2688_ =>
                                                                  (match (hex_bits_12_matches_prefix
                                                                            _s2688_) with
                                                                   | Some (imm, existT _ _s2689_ _) =>
                                                                      (match (string_drop _s2688_
                                                                                _s2689_) with
                                                                       | _s2690_ =>
                                                                          (opt_spc_matches_prefix
                                                                             _s2690_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          (match w__7 with
                                                                           | Some
                                                                             (tt, existT _ _s2691_ _) =>
                                                                              let _s2692_ :=
                                                                                string_drop _s2690_
                                                                                  _s2691_ in
                                                                              (if string_startswith
                                                                                    _s2692_ "(" then
                                                                                 (match (string_drop
                                                                                           _s2692_
                                                                                           (projT1
                                                                                            (string_length
                                                                                               "("))) with
                                                                                  | _s2693_ =>
                                                                                     (opt_spc_matches_prefix
                                                                                        _s2693_) >>= fun w__8 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     (match w__8 with
                                                                                      | Some
                                                                                        (tt, existT _ _s2694_ _) =>
                                                                                         (match (string_drop
                                                                                                   _s2693_
                                                                                                   _s2694_) with
                                                                                          | _s2695_ =>
                                                                                             (reg_name_matches_prefix
                                                                                                _s2695_) >>= fun w__9 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                               0)})) =>
                                                                                             (match w__9 with
                                                                                              | Some
                                                                                                (rs1, existT _ _s2696_ _) =>
                                                                                                 (match (string_drop
                                                                                                           _s2695_
                                                                                                           _s2696_) with
                                                                                                  | _s2697_ =>
                                                                                                     (opt_spc_matches_prefix
                                                                                                        _s2697_) >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                                       0)})) =>
                                                                                                     returnm (match w__10 with
                                                                                                              | Some
                                                                                                                (tt, existT _ _s2698_ _) =>
                                                                                                                 let _s2699_ :=
                                                                                                                   string_drop
                                                                                                                     _s2697_
                                                                                                                     _s2698_ in
                                                                                                                 if
                                                                                                                   string_startswith
                                                                                                                     _s2699_
                                                                                                                     ")"
                                                                                                                 then
                                                                                                                   let p0_ :=
                                                                                                                     string_drop
                                                                                                                       _s2699_
                                                                                                                       (projT1
                                                                                                                        (string_length
                                                                                                                           ")")) in
                                                                                                                   if
                                                                                                                     generic_eq
                                                                                                                       p0_
                                                                                                                       ""
                                                                                                                   then
                                                                                                                     Some
                                                                                                                       (size, is_unsigned, aq, rl, rd, imm, rs1)
                                                                                                                   else
                                                                                                                     None
                                                                                                                 else
                                                                                                                   None
                                                                                                              | _ =>
                                                                                                                 None
                                                                                                              end)
                                                                                                  end)
                                                                                                  : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                              | _ =>
                                                                                                 returnm None
                                                                                              end)
                                                                                              : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                          end)
                                                                                          : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                      | _ =>
                                                                                         returnm None
                                                                                      end)
                                                                                      : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                                  end)
                                                                                  : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                               else returnm None)
                                                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                           | _ => returnm None
                                                                           end)
                                                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                       end)
                                                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                               end)
                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                       end)
                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                               end)
                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                       end)
                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
               end)
               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
       end)
       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)))
    else returnm None)
    : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5))).

Definition _s2654_ (_s2655_ : string) : M (option ((rop * mword 5 * mword 5 * mword 5))) :=
   (match _s2655_ with
    | _s2656_ =>
       (rtype_mnemonic_matches_prefix _s2656_) >>= fun w__0 : option ((rop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2657_ _) =>
           (match (string_drop _s2656_ _s2657_) with
            | _s2658_ =>
               (spc_matches_prefix _s2658_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2659_ _) =>
                   (match (string_drop _s2658_ _s2659_) with
                    | _s2660_ =>
                       (reg_name_matches_prefix _s2660_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2661_ _) =>
                           (match (string_drop _s2660_ _s2661_) with
                            | _s2662_ =>
                               (sep_matches_prefix _s2662_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2663_ _) =>
                                   (match (string_drop _s2662_ _s2663_) with
                                    | _s2664_ =>
                                       (reg_name_matches_prefix _s2664_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2665_ _) =>
                                           (match (string_drop _s2664_ _s2665_) with
                                            | _s2666_ =>
                                               (sep_matches_prefix _s2666_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s2667_ _) =>
                                                   (match (string_drop _s2666_ _s2667_) with
                                                    | _s2668_ =>
                                                       (reg_name_matches_prefix _s2668_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s2669_ _) =>
                                                                   let p0_ :=
                                                                     string_drop _s2668_ _s2669_ in
                                                                   if generic_eq p0_ "" then
                                                                     Some (op, rd, rs1, rs2)
                                                                   else None
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                            end)
                                            : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                    end)
                                    : M (option ((rop * mword 5 * mword 5 * mword 5)))
                                | _ => returnm None
                                end)
                                : M (option ((rop * mword 5 * mword 5 * mword 5)))
                            end)
                            : M (option ((rop * mword 5 * mword 5 * mword 5)))
                        | _ => returnm None
                        end)
                        : M (option ((rop * mword 5 * mword 5 * mword 5)))
                    end)
                    : M (option ((rop * mword 5 * mword 5 * mword 5)))
                | _ => returnm None
                end)
                : M (option ((rop * mword 5 * mword 5 * mword 5)))
            end)
            : M (option ((rop * mword 5 * mword 5 * mword 5)))
        | _ => returnm None
        end)
        : M (option ((rop * mword 5 * mword 5 * mword 5)))
    end)
    : M (option ((rop * mword 5 * mword 5 * mword 5))).

Definition _s2637_ (_s2638_ : string) : M (option ((sop * mword 5 * mword 5 * mword 6))) :=
   (match _s2638_ with
    | _s2639_ =>
       (shiftiop_mnemonic_matches_prefix _s2639_) >>= fun w__0 : option ((sop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2640_ _) =>
           (match (string_drop _s2639_ _s2640_) with
            | _s2641_ =>
               (spc_matches_prefix _s2641_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2642_ _) =>
                   (match (string_drop _s2641_ _s2642_) with
                    | _s2643_ =>
                       (reg_name_matches_prefix _s2643_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2644_ _) =>
                           (match (string_drop _s2643_ _s2644_) with
                            | _s2645_ =>
                               (sep_matches_prefix _s2645_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2646_ _) =>
                                   (match (string_drop _s2645_ _s2646_) with
                                    | _s2647_ =>
                                       (reg_name_matches_prefix _s2647_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2648_ _) =>
                                           (match (string_drop _s2647_ _s2648_) with
                                            | _s2649_ =>
                                               (sep_matches_prefix _s2649_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s2650_ _) =>
                                                           match (string_drop _s2649_ _s2650_) with
                                                           | _s2651_ =>
                                                              match (hex_bits_6_matches_prefix
                                                                       _s2651_) with
                                                              | Some (shamt, existT _ _s2652_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s2651_ _s2652_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, shamt)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sop * mword 5 * mword 5 * mword 6)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sop * mword 5 * mword 5 * mword 6)))
                                    end)
                                    : M (option ((sop * mword 5 * mword 5 * mword 6)))
                                | _ => returnm None
                                end)
                                : M (option ((sop * mword 5 * mword 5 * mword 6)))
                            end)
                            : M (option ((sop * mword 5 * mword 5 * mword 6)))
                        | _ => returnm None
                        end)
                        : M (option ((sop * mword 5 * mword 5 * mword 6)))
                    end)
                    : M (option ((sop * mword 5 * mword 5 * mword 6)))
                | _ => returnm None
                end)
                : M (option ((sop * mword 5 * mword 5 * mword 6)))
            end)
            : M (option ((sop * mword 5 * mword 5 * mword 6)))
        | _ => returnm None
        end)
        : M (option ((sop * mword 5 * mword 5 * mword 6)))
    end)
    : M (option ((sop * mword 5 * mword 5 * mword 6))).

Definition _s2620_ (_s2621_ : string) : M (option ((iop * mword 5 * mword 5 * mword 12))) :=
   (match _s2621_ with
    | _s2622_ =>
       (itype_mnemonic_matches_prefix _s2622_) >>= fun w__0 : option ((iop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2623_ _) =>
           (match (string_drop _s2622_ _s2623_) with
            | _s2624_ =>
               (spc_matches_prefix _s2624_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2625_ _) =>
                   (match (string_drop _s2624_ _s2625_) with
                    | _s2626_ =>
                       (reg_name_matches_prefix _s2626_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2627_ _) =>
                           (match (string_drop _s2626_ _s2627_) with
                            | _s2628_ =>
                               (sep_matches_prefix _s2628_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2629_ _) =>
                                   (match (string_drop _s2628_ _s2629_) with
                                    | _s2630_ =>
                                       (reg_name_matches_prefix _s2630_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s2631_ _) =>
                                           (match (string_drop _s2630_ _s2631_) with
                                            | _s2632_ =>
                                               (sep_matches_prefix _s2632_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s2633_ _) =>
                                                           match (string_drop _s2632_ _s2633_) with
                                                           | _s2634_ =>
                                                              match (hex_bits_12_matches_prefix
                                                                       _s2634_) with
                                                              | Some (imm, existT _ _s2635_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s2634_ _s2635_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rd, rs1, imm)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((iop * mword 5 * mword 5 * mword 12)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((iop * mword 5 * mword 5 * mword 12)))
                                    end)
                                    : M (option ((iop * mword 5 * mword 5 * mword 12)))
                                | _ => returnm None
                                end)
                                : M (option ((iop * mword 5 * mword 5 * mword 12)))
                            end)
                            : M (option ((iop * mword 5 * mword 5 * mword 12)))
                        | _ => returnm None
                        end)
                        : M (option ((iop * mword 5 * mword 5 * mword 12)))
                    end)
                    : M (option ((iop * mword 5 * mword 5 * mword 12)))
                | _ => returnm None
                end)
                : M (option ((iop * mword 5 * mword 5 * mword 12)))
            end)
            : M (option ((iop * mword 5 * mword 5 * mword 12)))
        | _ => returnm None
        end)
        : M (option ((iop * mword 5 * mword 5 * mword 12)))
    end)
    : M (option ((iop * mword 5 * mword 5 * mword 12))).

Definition _s2603_ (_s2604_ : string) : M (option ((bop * mword 5 * mword 5 * mword 13))) :=
   (match _s2604_ with
    | _s2605_ =>
       (btype_mnemonic_matches_prefix _s2605_) >>= fun w__0 : option ((bop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2606_ _) =>
           (match (string_drop _s2605_ _s2606_) with
            | _s2607_ =>
               (spc_matches_prefix _s2607_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2608_ _) =>
                   (match (string_drop _s2607_ _s2608_) with
                    | _s2609_ =>
                       (reg_name_matches_prefix _s2609_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rs1, existT _ _s2610_ _) =>
                           (match (string_drop _s2609_ _s2610_) with
                            | _s2611_ =>
                               (sep_matches_prefix _s2611_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s2612_ _) =>
                                   (match (string_drop _s2611_ _s2612_) with
                                    | _s2613_ =>
                                       (reg_name_matches_prefix _s2613_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs2, existT _ _s2614_ _) =>
                                           (match (string_drop _s2613_ _s2614_) with
                                            | _s2615_ =>
                                               (sep_matches_prefix _s2615_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s2616_ _) =>
                                                           match (string_drop _s2615_ _s2616_) with
                                                           | _s2617_ =>
                                                              match (hex_bits_13_matches_prefix
                                                                       _s2617_) with
                                                              | Some (imm, existT _ _s2618_ _) =>
                                                                 let p0_ :=
                                                                   string_drop _s2617_ _s2618_ in
                                                                 if generic_eq p0_ "" then
                                                                   Some (op, rs1, rs2, imm)
                                                                 else None
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((bop * mword 5 * mword 5 * mword 13)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((bop * mword 5 * mword 5 * mword 13)))
                                    end)
                                    : M (option ((bop * mword 5 * mword 5 * mword 13)))
                                | _ => returnm None
                                end)
                                : M (option ((bop * mword 5 * mword 5 * mword 13)))
                            end)
                            : M (option ((bop * mword 5 * mword 5 * mword 13)))
                        | _ => returnm None
                        end)
                        : M (option ((bop * mword 5 * mword 5 * mword 13)))
                    end)
                    : M (option ((bop * mword 5 * mword 5 * mword 13)))
                | _ => returnm None
                end)
                : M (option ((bop * mword 5 * mword 5 * mword 13)))
            end)
            : M (option ((bop * mword 5 * mword 5 * mword 13)))
        | _ => returnm None
        end)
        : M (option ((bop * mword 5 * mword 5 * mword 13)))
    end)
    : M (option ((bop * mword 5 * mword 5 * mword 13))).

Definition _s2587_ (_s2588_ : string) : M (option ((mword 5 * mword 5 * mword 12))) :=
   let _s2589_ := _s2588_ in
   (if string_startswith _s2589_ "jalr" then
      (match (string_drop _s2589_ (projT1 (string_length "jalr"))) with
       | _s2590_ =>
          (spc_matches_prefix _s2590_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2591_ _) =>
              (match (string_drop _s2590_ _s2591_) with
               | _s2592_ =>
                  (reg_name_matches_prefix _s2592_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s2593_ _) =>
                      (match (string_drop _s2592_ _s2593_) with
                       | _s2594_ =>
                          (sep_matches_prefix _s2594_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s2595_ _) =>
                              (match (string_drop _s2594_ _s2595_) with
                               | _s2596_ =>
                                  (reg_name_matches_prefix _s2596_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s2597_ _) =>
                                      (match (string_drop _s2596_ _s2597_) with
                                       | _s2598_ =>
                                          (sep_matches_prefix _s2598_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s2599_ _) =>
                                                      match (string_drop _s2598_ _s2599_) with
                                                      | _s2600_ =>
                                                         match (hex_bits_12_matches_prefix _s2600_) with
                                                         | Some (imm, existT _ _s2601_ _) =>
                                                            let p0_ := string_drop _s2600_ _s2601_ in
                                                            if generic_eq p0_ "" then
                                                              Some (rd, rs1, imm)
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 12)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 12)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 12)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 12)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 12)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 12)))
               end)
               : M (option ((mword 5 * mword 5 * mword 12)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 12)))
       end)
       : M (option ((mword 5 * mword 5 * mword 12)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 12))).

Definition _s2575_ (_s2576_ : string) : M (option ((mword 5 * mword 21))) :=
   let _s2577_ := _s2576_ in
   (if string_startswith _s2577_ "jal" then
      (match (string_drop _s2577_ (projT1 (string_length "jal"))) with
       | _s2578_ =>
          (spc_matches_prefix _s2578_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s2579_ _) =>
              (match (string_drop _s2578_ _s2579_) with
               | _s2580_ =>
                  (reg_name_matches_prefix _s2580_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s2581_ _) =>
                      (match (string_drop _s2580_ _s2581_) with
                       | _s2582_ =>
                          (sep_matches_prefix _s2582_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s2583_ _) =>
                                      match (string_drop _s2582_ _s2583_) with
                                      | _s2584_ =>
                                         match (hex_bits_21_matches_prefix _s2584_) with
                                         | Some (imm, existT _ _s2585_ _) =>
                                            let p0_ := string_drop _s2584_ _s2585_ in
                                            if generic_eq p0_ "" then Some (rd, imm)
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 21)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 21)))
               end)
               : M (option ((mword 5 * mword 21)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 21)))
       end)
       : M (option ((mword 5 * mword 21)))
    else returnm None)
    : M (option ((mword 5 * mword 21))).

Definition _s2562_ (_s2563_ : string) : M (option ((uop * mword 5 * mword 20))) :=
   (match _s2563_ with
    | _s2564_ =>
       (utype_mnemonic_matches_prefix _s2564_) >>= fun w__0 : option ((uop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s2565_ _) =>
           (match (string_drop _s2564_ _s2565_) with
            | _s2566_ =>
               (spc_matches_prefix _s2566_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s2567_ _) =>
                   (match (string_drop _s2566_ _s2567_) with
                    | _s2568_ =>
                       (reg_name_matches_prefix _s2568_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s2569_ _) =>
                           (match (string_drop _s2568_ _s2569_) with
                            | _s2570_ =>
                               (sep_matches_prefix _s2570_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               returnm (match w__3 with
                                        | Some (tt, existT _ _s2571_ _) =>
                                           match (string_drop _s2570_ _s2571_) with
                                           | _s2572_ =>
                                              match (hex_bits_20_matches_prefix _s2572_) with
                                              | Some (imm, existT _ _s2573_ _) =>
                                                 let p0_ := string_drop _s2572_ _s2573_ in
                                                 if generic_eq p0_ "" then Some (op, rd, imm)
                                                 else None
                                              | _ => None
                                              end
                                           end
                                        | _ => None
                                        end)
                            end)
                            : M (option ((uop * mword 5 * mword 20)))
                        | _ => returnm None
                        end)
                        : M (option ((uop * mword 5 * mword 20)))
                    end)
                    : M (option ((uop * mword 5 * mword 20)))
                | _ => returnm None
                end)
                : M (option ((uop * mword 5 * mword 20)))
            end)
            : M (option ((uop * mword 5 * mword 20)))
        | _ => returnm None
        end)
        : M (option ((uop * mword 5 * mword 20)))
    end)
    : M (option ((uop * mword 5 * mword 20))).

Definition assembly_backwards_matches (arg_ : string) : M (bool) :=
   let _s2574_ := arg_ in
   (_s2562_ _s2574_) >>= fun w__0 : option ((uop * mword 5 * mword 20)) =>
   (if match w__0 with | Some (op, rd, imm) => true | _ => false end then
      (_s2562_ _s2574_) >>= fun w__1 : option ((uop * mword 5 * mword 20)) =>
      (match w__1 with | Some (op, rd, imm) => returnm true | _ => exit tt  : M (bool) end)
       : M (bool)
    else
      (_s2575_ _s2574_) >>= fun w__4 : option ((mword 5 * mword 21)) =>
      (if match w__4 with | Some (rd, imm) => true | _ => false end then
         (_s2575_ _s2574_) >>= fun w__5 : option ((mword 5 * mword 21)) =>
         (match w__5 with | Some (rd, imm) => returnm true | _ => exit tt  : M (bool) end)
          : M (bool)
       else
         (_s2587_ _s2574_) >>= fun w__8 : option ((mword 5 * mword 5 * mword 12)) =>
         (if match w__8 with | Some (rd, rs1, imm) => true | _ => false end then
            (_s2587_ _s2574_) >>= fun w__9 : option ((mword 5 * mword 5 * mword 12)) =>
            (match w__9 with | Some (rd, rs1, imm) => returnm true | _ => exit tt  : M (bool) end)
             : M (bool)
          else
            (_s2603_ _s2574_) >>= fun w__12 : option ((bop * mword 5 * mword 5 * mword 13)) =>
            (if match w__12 with | Some (op, rs1, rs2, imm) => true | _ => false end then
               (_s2603_ _s2574_) >>= fun w__13 : option ((bop * mword 5 * mword 5 * mword 13)) =>
               (match w__13 with
                | Some (op, rs1, rs2, imm) => returnm true
                | _ => exit tt  : M (bool)
                end)
                : M (bool)
             else
               (_s2620_ _s2574_) >>= fun w__16 : option ((iop * mword 5 * mword 5 * mword 12)) =>
               (if match w__16 with | Some (op, rd, rs1, imm) => true | _ => false end then
                  (_s2620_ _s2574_) >>= fun w__17 : option ((iop * mword 5 * mword 5 * mword 12)) =>
                  (match w__17 with
                   | Some (op, rd, rs1, imm) => returnm true
                   | _ => exit tt  : M (bool)
                   end)
                   : M (bool)
                else
                  (_s2637_ _s2574_) >>= fun w__20 : option ((sop * mword 5 * mword 5 * mword 6)) =>
                  (if match w__20 with | Some (op, rd, rs1, shamt) => true | _ => false end then
                     (_s2637_ _s2574_) >>= fun w__21 : option ((sop * mword 5 * mword 5 * mword 6)) =>
                     (match w__21 with
                      | Some (op, rd, rs1, shamt) => returnm true
                      | _ => exit tt  : M (bool)
                      end)
                      : M (bool)
                   else
                     (_s2654_ _s2574_) >>= fun w__24 : option ((rop * mword 5 * mword 5 * mword 5)) =>
                     (if match w__24 with | Some (op, rd, rs1, rs2) => true | _ => false end then
                        (_s2654_ _s2574_) >>= fun w__25 : option ((rop * mword 5 * mword 5 * mword 5)) =>
                        (match w__25 with
                         | Some (op, rd, rs1, rs2) => returnm true
                         | _ => exit tt  : M (bool)
                         end)
                         : M (bool)
                      else
                        (_s2671_ _s2574_) >>= fun w__28 : option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)) =>
                        (if match w__28 with
                            | Some (size, is_unsigned, aq, rl, rd, imm, rs1) => true
                            | _ => false
                            end then
                           (_s2671_ _s2574_) >>= fun w__29 : option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5)) =>
                           (match w__29 with
                            | Some (size, is_unsigned, aq, rl, rd, imm, rs1) => returnm true
                            | _ => exit tt  : M (bool)
                            end)
                            : M (bool)
                         else
                           (_s2701_ _s2574_) >>= fun w__32 : option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)) =>
                           (if match w__32 with
                               | Some (size, aq, rl, rs2, imm, rs1) => true
                               | _ => false
                               end then
                              (_s2701_ _s2574_) >>= fun w__33 : option ((word_width * bool * bool * mword 5 * mword 12 * mword 5)) =>
                              (match w__33 with
                               | Some (size, aq, rl, rs2, imm, rs1) => returnm true
                               | _ => exit tt  : M (bool)
                               end)
                               : M (bool)
                            else
                              (_s2729_ _s2574_) >>= fun w__36 : option ((mword 5 * mword 5 * mword 12)) =>
                              (if match w__36 with
                                  | Some (rd, rs1, imm) => Z.eqb 32 64
                                  | _ => false
                                  end then
                                 (_s2729_ _s2574_) >>= fun w__37 : option ((mword 5 * mword 5 * mword 12)) =>
                                 (match w__37 with
                                  | Some (rd, rs1, imm) => returnm true
                                  | _ => exit tt  : M (bool)
                                  end)
                                  : M (bool)
                               else
                                 (_s2745_ _s2574_) >>= fun w__40 : option ((sop * mword 5 * mword 5 * mword 5)) =>
                                 (if match w__40 with
                                     | Some (op, rd, rs1, shamt) => Z.eqb 32 64
                                     | _ => false
                                     end then
                                    (_s2745_ _s2574_) >>= fun w__41 : option ((sop * mword 5 * mword 5 * mword 5)) =>
                                    (match w__41 with
                                     | Some (op, rd, rs1, shamt) => returnm true
                                     | _ => exit tt  : M (bool)
                                     end)
                                     : M (bool)
                                  else
                                    (_s2762_ _s2574_) >>= fun w__44 : option ((ropw * mword 5 * mword 5 * mword 5)) =>
                                    (if match w__44 with
                                        | Some (op, rd, rs1, rs2) => Z.eqb 32 64
                                        | _ => false
                                        end then
                                       (_s2762_ _s2574_) >>= fun w__45 : option ((ropw * mword 5 * mword 5 * mword 5)) =>
                                       (match w__45 with
                                        | Some (op, rd, rs1, rs2) => returnm true
                                        | _ => exit tt  : M (bool)
                                        end)
                                        : M (bool)
                                     else
                                       (_s2779_ _s2574_) >>= fun w__48 : option ((sopw * mword 5 * mword 5 * mword 5)) =>
                                       (if match w__48 with
                                           | Some (op, rd, rs1, shamt) => Z.eqb 32 64
                                           | _ => false
                                           end then
                                          (_s2779_ _s2574_) >>= fun w__49 : option ((sopw * mword 5 * mword 5 * mword 5)) =>
                                          (match w__49 with
                                           | Some (op, rd, rs1, shamt) => returnm true
                                           | _ => exit tt  : M (bool)
                                           end)
                                           : M (bool)
                                        else
                                          (_s2796_ _s2574_) >>= fun w__52 : option ((mword 4 * mword 4)) =>
                                          (if match w__52 with
                                              | Some (pred, succ) => true
                                              | _ => false
                                              end then
                                             (_s2796_ _s2574_) >>= fun w__53 : option ((mword 4 * mword 4)) =>
                                             (match w__53 with
                                              | Some (pred, succ) => returnm true
                                              | _ => exit tt  : M (bool)
                                              end)
                                              : M (bool)
                                           else
                                             (_s2808_ _s2574_) >>= fun w__56 : option ((mword 4 * mword 4)) =>
                                             (if match w__56 with
                                                 | Some (pred, succ) => true
                                                 | _ => false
                                                 end then
                                                (_s2808_ _s2574_) >>= fun w__57 : option ((mword 4 * mword 4)) =>
                                                (match w__57 with
                                                 | Some (pred, succ) => returnm true
                                                 | _ => exit tt  : M (bool)
                                                 end)
                                                 : M (bool)
                                              else if generic_eq _s2574_ "fence.i" then returnm true
                                              else if generic_eq _s2574_ "ecall" then returnm true
                                              else if generic_eq _s2574_ "mret" then returnm true
                                              else if generic_eq _s2574_ "sret" then returnm true
                                              else if generic_eq _s2574_ "ebreak" then returnm true
                                              else if generic_eq _s2574_ "wfi" then returnm true
                                              else
                                                (_s2820_ _s2574_) >>= fun w__60 : option ((mword 5 * mword 5)) =>
                                                (if match w__60 with
                                                    | Some (rs1, rs2) => true
                                                    | _ => false
                                                    end then
                                                   (_s2820_ _s2574_) >>= fun w__61 : option ((mword 5 * mword 5)) =>
                                                   (match w__61 with
                                                    | Some (rs1, rs2) => returnm true
                                                    | _ => exit tt  : M (bool)
                                                    end)
                                                    : M (bool)
                                                 else
                                                   (_s2832_ _s2574_) >>= fun w__64 : option ((word_width * bool * bool * mword 5 * mword 5)) =>
                                                   (if match w__64 with
                                                       | Some (size, aq, rl, rd, rs1) => true
                                                       | _ => false
                                                       end then
                                                      (_s2832_ _s2574_) >>= fun w__65 : option ((word_width * bool * bool * mword 5 * mword 5)) =>
                                                      (match w__65 with
                                                       | Some (size, aq, rl, rd, rs1) =>
                                                          returnm true
                                                       | _ => exit tt  : M (bool)
                                                       end)
                                                       : M (bool)
                                                    else
                                                      (_s2850_ _s2574_) >>= fun w__68 : option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                      (if match w__68 with
                                                          | Some (size, aq, rl, rd, rs1, rs2) =>
                                                             true
                                                          | _ => false
                                                          end then
                                                         (_s2850_ _s2574_) >>= fun w__69 : option ((word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                         (match w__69 with
                                                          | Some (size, aq, rl, rd, rs1, rs2) =>
                                                             returnm true
                                                          | _ => exit tt  : M (bool)
                                                          end)
                                                          : M (bool)
                                                       else
                                                         (_s2872_ _s2574_) >>= fun w__72 : option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                         (if match w__72 with
                                                             | Some
                                                               (op, width, aq, rl, rd, rs2, rs1) =>
                                                                true
                                                             | _ => false
                                                             end then
                                                            (_s2872_ _s2574_) >>= fun w__73 : option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                            (match w__73 with
                                                             | Some
                                                               (op, width, aq, rl, rd, rs2, rs1) =>
                                                                returnm true
                                                             | _ => exit tt  : M (bool)
                                                             end)
                                                             : M (bool)
                                                          else if generic_eq _s2574_ "c.nop" then
                                                            returnm true
                                                          else
                                                            (_s2898_ _s2574_) >>= fun w__76 : option ((mword 3 * mword 8)) =>
                                                            (if match w__76 with
                                                                | Some (rdc, nzimm) =>
                                                                   neq_vec nzimm (Ox"00"  : mword 8)
                                                                | _ => false
                                                                end then
                                                               (_s2898_ _s2574_) >>= fun w__77 : option ((mword 3 * mword 8)) =>
                                                               (match w__77 with
                                                                | Some (rdc, nzimm) => returnm true
                                                                | _ => exit tt  : M (bool)
                                                                end)
                                                                : M (bool)
                                                             else
                                                               (_s2910_ _s2574_) >>= fun w__80 : option ((mword 3 * mword 3 * mword 5)) =>
                                                               (if match w__80 with
                                                                   | Some (rdc, rsc, uimm) => true
                                                                   | _ => false
                                                                   end then
                                                                  (_s2910_ _s2574_) >>= fun w__81 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                  (match w__81 with
                                                                   | Some (rdc, rsc, uimm) =>
                                                                      returnm true
                                                                   | _ => exit tt  : M (bool)
                                                                   end)
                                                                   : M (bool)
                                                                else
                                                                  (_s2926_ _s2574_) >>= fun w__84 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                  (if match w__84 with
                                                                      | Some (rdc, rsc, uimm) =>
                                                                         Z.eqb 32 64
                                                                      | _ => false
                                                                      end then
                                                                     (_s2926_ _s2574_) >>= fun w__85 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                     (match w__85 with
                                                                      | Some (rdc, rsc, uimm) =>
                                                                         returnm true
                                                                      | _ => exit tt  : M (bool)
                                                                      end)
                                                                      : M (bool)
                                                                   else
                                                                     (_s2942_ _s2574_) >>= fun w__88 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                     (if match w__88 with
                                                                         | Some (rsc1, rsc2, uimm) =>
                                                                            true
                                                                         | _ => false
                                                                         end then
                                                                        (_s2942_ _s2574_) >>= fun w__89 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                        (match w__89 with
                                                                         | Some (rsc1, rsc2, uimm) =>
                                                                            returnm true
                                                                         | _ => exit tt  : M (bool)
                                                                         end)
                                                                         : M (bool)
                                                                      else
                                                                        (_s2958_ _s2574_) >>= fun w__92 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                        (if match w__92 with
                                                                            | Some
                                                                              (rsc1, rsc2, uimm) =>
                                                                               Z.eqb 32 64
                                                                            | _ => false
                                                                            end then
                                                                           (_s2958_ _s2574_) >>= fun w__93 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                           (match w__93 with
                                                                            | Some
                                                                              (rsc1, rsc2, uimm) =>
                                                                               returnm true
                                                                            | _ =>
                                                                               exit tt  : M (bool)
                                                                            end)
                                                                            : M (bool)
                                                                         else
                                                                           (_s2974_ _s2574_) >>= fun w__96 : option ((mword 5 * mword 6)) =>
                                                                           (if match w__96 with
                                                                               | Some (rsd, nzi) =>
                                                                                  andb
                                                                                    (neq_vec nzi
                                                                                       ('b"000000"
                                                                                        : mword 6))
                                                                                    (neq_vec rsd
                                                                                       zreg)
                                                                               | _ => false
                                                                               end then
                                                                              (_s2974_ _s2574_) >>= fun w__97 : option ((mword 5 * mword 6)) =>
                                                                              (match w__97 with
                                                                               | Some (rsd, nzi) =>
                                                                                  returnm true
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M (bool)
                                                                               end)
                                                                               : M (bool)
                                                                            else
                                                                              (_s2986_ _s2574_) >>= fun w__100 : option (mword 11) =>
                                                                              (if match w__100 with
                                                                                  | Some imm =>
                                                                                     Z.eqb 32 32
                                                                                  | _ => false
                                                                                  end then
                                                                                 (_s2986_ _s2574_) >>= fun w__101 : option (mword 11) =>
                                                                                 (match w__101 with
                                                                                  | Some imm =>
                                                                                     returnm true
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M (bool)
                                                                                  end)
                                                                                  : M (bool)
                                                                               else
                                                                                 (_s2994_ _s2574_) >>= fun w__104 : option ((mword 5 * mword 6)) =>
                                                                                 (if match w__104 with
                                                                                     | Some
                                                                                       (rsd, imm) =>
                                                                                        Z.eqb 32 64
                                                                                     | _ => false
                                                                                     end then
                                                                                    (_s2994_ _s2574_) >>= fun w__105 : option ((mword 5 * mword 6)) =>
                                                                                    (match w__105 with
                                                                                     | Some
                                                                                       (rsd, imm) =>
                                                                                        returnm true
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M (bool)
                                                                                     end)
                                                                                     : M (bool)
                                                                                  else
                                                                                    (_s3006_ _s2574_) >>= fun w__108 : option ((mword 5 * mword 6)) =>
                                                                                    (if match w__108 with
                                                                                        | Some
                                                                                          (rd, imm) =>
                                                                                           neq_vec
                                                                                             rd zreg
                                                                                        | _ => false
                                                                                        end then
                                                                                       (_s3006_
                                                                                          _s2574_) >>= fun w__109 : option ((mword 5 * mword 6)) =>
                                                                                       (match w__109 with
                                                                                        | Some
                                                                                          (rd, imm) =>
                                                                                           returnm true
                                                                                        | _ =>
                                                                                           exit tt
                                                                                            : M (bool)
                                                                                        end)
                                                                                        : M (bool)
                                                                                     else
                                                                                       (_s3018_
                                                                                          _s2574_) >>= fun w__112 : option (mword 6) =>
                                                                                       (if match w__112 with
                                                                                           | Some
                                                                                             imm =>
                                                                                              neq_vec
                                                                                                imm
                                                                                                ('b"000000"
                                                                                                 : mword 6)
                                                                                           | _ =>
                                                                                              false
                                                                                           end then
                                                                                          (_s3018_
                                                                                             _s2574_) >>= fun w__113 : option (mword 6) =>
                                                                                          (match w__113 with
                                                                                           | Some
                                                                                             imm =>
                                                                                              returnm true
                                                                                           | _ =>
                                                                                              exit tt
                                                                                               : M (bool)
                                                                                           end)
                                                                                           : M (bool)
                                                                                        else
                                                                                          (_s3026_
                                                                                             _s2574_) >>= fun w__116 : option ((mword 5 * mword 6)) =>
                                                                                          (if match w__116 with
                                                                                              | Some
                                                                                                (rd, imm) =>
                                                                                                 andb
                                                                                                   (neq_vec
                                                                                                      rd
                                                                                                      zreg)
                                                                                                   (andb
                                                                                                      (neq_vec
                                                                                                         rd
                                                                                                         sp)
                                                                                                      (neq_vec
                                                                                                         imm
                                                                                                         ('b"000000"
                                                                                                          : mword 6)))
                                                                                              | _ =>
                                                                                                 false
                                                                                              end
                                                                                           then
                                                                                             (_s3026_
                                                                                                _s2574_) >>= fun w__117 : option ((mword 5 * mword 6)) =>
                                                                                             (match w__117 with
                                                                                              | Some
                                                                                                (rd, imm) =>
                                                                                                 returnm true
                                                                                              | _ =>
                                                                                                 exit tt
                                                                                                  : M (bool)
                                                                                              end)
                                                                                              : M (bool)
                                                                                           else
                                                                                             (_s3038_
                                                                                                _s2574_) >>= fun w__120 : option ((mword 3 * mword 6)) =>
                                                                                             (if match w__120 with
                                                                                                 | Some
                                                                                                   (rsd, shamt) =>
                                                                                                    neq_vec
                                                                                                      shamt
                                                                                                      ('b"000000"
                                                                                                       : mword 6)
                                                                                                 | _ =>
                                                                                                    false
                                                                                                 end
                                                                                              then
                                                                                                (_s3038_
                                                                                                   _s2574_) >>= fun w__121 : option ((mword 3 * mword 6)) =>
                                                                                                (match w__121 with
                                                                                                 | Some
                                                                                                   (rsd, shamt) =>
                                                                                                    returnm true
                                                                                                 | _ =>
                                                                                                    exit tt
                                                                                                     : M (bool)
                                                                                                 end)
                                                                                                 : M (bool)
                                                                                              else
                                                                                                (_s3050_
                                                                                                   _s2574_) >>= fun w__124 : option ((mword 3 * mword 6)) =>
                                                                                                (if match w__124 with
                                                                                                    | Some
                                                                                                      (rsd, shamt) =>
                                                                                                       neq_vec
                                                                                                         shamt
                                                                                                         ('b"000000"
                                                                                                          : mword 6)
                                                                                                    | _ =>
                                                                                                       false
                                                                                                    end
                                                                                                 then
                                                                                                   (_s3050_
                                                                                                      _s2574_) >>= fun w__125 : option ((mword 3 * mword 6)) =>
                                                                                                   (match w__125 with
                                                                                                    | Some
                                                                                                      (rsd, shamt) =>
                                                                                                       returnm true
                                                                                                    | _ =>
                                                                                                       exit tt
                                                                                                        : M (bool)
                                                                                                    end)
                                                                                                    : M (bool)
                                                                                                 else
                                                                                                   (_s3062_
                                                                                                      _s2574_) >>= fun w__128 : option ((mword 3 * mword 6)) =>
                                                                                                   (if
                                                                                                      match w__128 with
                                                                                                      | Some
                                                                                                        (rsd, imm) =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                    then
                                                                                                      (_s3062_
                                                                                                         _s2574_) >>= fun w__129 : option ((mword 3 * mword 6)) =>
                                                                                                      (match w__129 with
                                                                                                       | Some
                                                                                                         (rsd, imm) =>
                                                                                                          returnm true
                                                                                                       | _ =>
                                                                                                          exit tt
                                                                                                           : M (bool)
                                                                                                       end)
                                                                                                       : M (bool)
                                                                                                    else
                                                                                                      (_s3074_
                                                                                                         _s2574_) >>= fun w__132 : option ((mword 3 * mword 3)) =>
                                                                                                      (if
                                                                                                         match w__132 with
                                                                                                         | Some
                                                                                                           (rsd, rs2) =>
                                                                                                            true
                                                                                                         | _ =>
                                                                                                            false
                                                                                                         end
                                                                                                       then
                                                                                                         (_s3074_
                                                                                                            _s2574_) >>= fun w__133 : option ((mword 3 * mword 3)) =>
                                                                                                         (match w__133 with
                                                                                                          | Some
                                                                                                            (rsd, rs2) =>
                                                                                                             returnm true
                                                                                                          | _ =>
                                                                                                             exit tt
                                                                                                              : M (bool)
                                                                                                          end)
                                                                                                          : M (bool)
                                                                                                       else
                                                                                                         (_s3086_
                                                                                                            _s2574_) >>= fun w__136 : option ((mword 3 * mword 3)) =>
                                                                                                         (if
                                                                                                            match w__136 with
                                                                                                            | Some
                                                                                                              (rsd, rs2) =>
                                                                                                               true
                                                                                                            | _ =>
                                                                                                               false
                                                                                                            end
                                                                                                          then
                                                                                                            (_s3086_
                                                                                                               _s2574_) >>= fun w__137 : option ((mword 3 * mword 3)) =>
                                                                                                            (match w__137 with
                                                                                                             | Some
                                                                                                               (rsd, rs2) =>
                                                                                                                returnm true
                                                                                                             | _ =>
                                                                                                                exit tt
                                                                                                                 : M (bool)
                                                                                                             end)
                                                                                                             : M (bool)
                                                                                                          else
                                                                                                            (_s3098_
                                                                                                               _s2574_) >>= fun w__140 : option ((mword 3 * mword 3)) =>
                                                                                                            (if
                                                                                                               match w__140 with
                                                                                                               | Some
                                                                                                                 (rsd, rs2) =>
                                                                                                                  true
                                                                                                               | _ =>
                                                                                                                  false
                                                                                                               end
                                                                                                             then
                                                                                                               (_s3098_
                                                                                                                  _s2574_) >>= fun w__141 : option ((mword 3 * mword 3)) =>
                                                                                                               (match w__141 with
                                                                                                                | Some
                                                                                                                  (rsd, rs2) =>
                                                                                                                   returnm true
                                                                                                                | _ =>
                                                                                                                   exit tt
                                                                                                                    : M (bool)
                                                                                                                end)
                                                                                                                : M (bool)
                                                                                                             else
                                                                                                               (_s3110_
                                                                                                                  _s2574_) >>= fun w__144 : option ((mword 3 * mword 3)) =>
                                                                                                               (if
                                                                                                                  match w__144 with
                                                                                                                  | Some
                                                                                                                    (rsd, rs2) =>
                                                                                                                     true
                                                                                                                  | _ =>
                                                                                                                     false
                                                                                                                  end
                                                                                                                then
                                                                                                                  (_s3110_
                                                                                                                     _s2574_) >>= fun w__145 : option ((mword 3 * mword 3)) =>
                                                                                                                  (match w__145 with
                                                                                                                   | Some
                                                                                                                     (rsd, rs2) =>
                                                                                                                      returnm true
                                                                                                                   | _ =>
                                                                                                                      exit tt
                                                                                                                       : M (bool)
                                                                                                                   end)
                                                                                                                   : M (bool)
                                                                                                                else
                                                                                                                  (_s3122_
                                                                                                                     _s2574_) >>= fun w__148 : option ((mword 3 * mword 3)) =>
                                                                                                                  (if
                                                                                                                     match w__148 with
                                                                                                                     | Some
                                                                                                                       (rsd, rs2) =>
                                                                                                                        Z.eqb
                                                                                                                          32
                                                                                                                          64
                                                                                                                     | _ =>
                                                                                                                        false
                                                                                                                     end
                                                                                                                   then
                                                                                                                     (_s3122_
                                                                                                                        _s2574_) >>= fun w__149 : option ((mword 3 * mword 3)) =>
                                                                                                                     (match w__149 with
                                                                                                                      | Some
                                                                                                                        (rsd, rs2) =>
                                                                                                                         returnm true
                                                                                                                      | _ =>
                                                                                                                         exit tt
                                                                                                                          : M (bool)
                                                                                                                      end)
                                                                                                                      : M (bool)
                                                                                                                   else
                                                                                                                     (_s3134_
                                                                                                                        _s2574_) >>= fun w__152 : option ((mword 3 * mword 3)) =>
                                                                                                                     (if
                                                                                                                        match w__152 with
                                                                                                                        | Some
                                                                                                                          (rsd, rs2) =>
                                                                                                                           Z.eqb
                                                                                                                             32
                                                                                                                             64
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                      then
                                                                                                                        (_s3134_
                                                                                                                           _s2574_) >>= fun w__153 : option ((mword 3 * mword 3)) =>
                                                                                                                        (match w__153 with
                                                                                                                         | Some
                                                                                                                           (rsd, rs2) =>
                                                                                                                            returnm true
                                                                                                                         | _ =>
                                                                                                                            exit tt
                                                                                                                             : M (bool)
                                                                                                                         end)
                                                                                                                         : M (bool)
                                                                                                                      else
                                                                                                                        (_s3146_
                                                                                                                           _s2574_) >>= fun w__156 : option (mword 11) =>
                                                                                                                        (if
                                                                                                                           match w__156 with
                                                                                                                           | Some
                                                                                                                             imm =>
                                                                                                                              true
                                                                                                                           | _ =>
                                                                                                                              false
                                                                                                                           end
                                                                                                                         then
                                                                                                                           (_s3146_
                                                                                                                              _s2574_) >>= fun w__157 : option (mword 11) =>
                                                                                                                           (match w__157 with
                                                                                                                            | Some
                                                                                                                              imm =>
                                                                                                                               returnm true
                                                                                                                            | _ =>
                                                                                                                               exit tt
                                                                                                                                : M (bool)
                                                                                                                            end)
                                                                                                                            : M (bool)
                                                                                                                         else
                                                                                                                           (_s3154_
                                                                                                                              _s2574_) >>= fun w__160 : option ((mword 3 * mword 8)) =>
                                                                                                                           (if
                                                                                                                              match w__160 with
                                                                                                                              | Some
                                                                                                                                (rs, imm) =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                            then
                                                                                                                              (_s3154_
                                                                                                                                 _s2574_) >>= fun w__161 : option ((mword 3 * mword 8)) =>
                                                                                                                              (match w__161 with
                                                                                                                               | Some
                                                                                                                                 (rs, imm) =>
                                                                                                                                  returnm true
                                                                                                                               | _ =>
                                                                                                                                  exit tt
                                                                                                                                   : M (bool)
                                                                                                                               end)
                                                                                                                               : M (bool)
                                                                                                                            else
                                                                                                                              (_s3166_
                                                                                                                                 _s2574_) >>= fun w__164 : option ((mword 3 * mword 8)) =>
                                                                                                                              (if
                                                                                                                                 match w__164 with
                                                                                                                                 | Some
                                                                                                                                   (rs, imm) =>
                                                                                                                                    true
                                                                                                                                 | _ =>
                                                                                                                                    false
                                                                                                                                 end
                                                                                                                               then
                                                                                                                                 (_s3166_
                                                                                                                                    _s2574_) >>= fun w__165 : option ((mword 3 * mword 8)) =>
                                                                                                                                 (match w__165 with
                                                                                                                                  | Some
                                                                                                                                    (rs, imm) =>
                                                                                                                                     returnm true
                                                                                                                                  | _ =>
                                                                                                                                     exit tt
                                                                                                                                      : M (bool)
                                                                                                                                  end)
                                                                                                                                  : M (bool)
                                                                                                                               else
                                                                                                                                 (_s3178_
                                                                                                                                    _s2574_) >>= fun w__168 : option ((mword 5 * mword 6)) =>
                                                                                                                                 (if
                                                                                                                                    match w__168 with
                                                                                                                                    | Some
                                                                                                                                      (rsd, shamt) =>
                                                                                                                                       andb
                                                                                                                                         (neq_vec
                                                                                                                                            shamt
                                                                                                                                            ('b"000000"
                                                                                                                                             : mword 6))
                                                                                                                                         (neq_vec
                                                                                                                                            rsd
                                                                                                                                            zreg)
                                                                                                                                    | _ =>
                                                                                                                                       false
                                                                                                                                    end
                                                                                                                                  then
                                                                                                                                    (_s3178_
                                                                                                                                       _s2574_) >>= fun w__169 : option ((mword 5 * mword 6)) =>
                                                                                                                                    (match w__169 with
                                                                                                                                     | Some
                                                                                                                                       (rsd, shamt) =>
                                                                                                                                        returnm true
                                                                                                                                     | _ =>
                                                                                                                                        exit tt
                                                                                                                                         : M (bool)
                                                                                                                                     end)
                                                                                                                                     : M (bool)
                                                                                                                                  else
                                                                                                                                    (_s3190_
                                                                                                                                       _s2574_) >>= fun w__172 : option ((mword 5 * mword 6)) =>
                                                                                                                                    (if
                                                                                                                                       match w__172 with
                                                                                                                                       | Some
                                                                                                                                         (rd, uimm) =>
                                                                                                                                          neq_vec
                                                                                                                                            rd
                                                                                                                                            zreg
                                                                                                                                       | _ =>
                                                                                                                                          false
                                                                                                                                       end
                                                                                                                                     then
                                                                                                                                       (_s3190_
                                                                                                                                          _s2574_) >>= fun w__173 : option ((mword 5 * mword 6)) =>
                                                                                                                                       (match w__173 with
                                                                                                                                        | Some
                                                                                                                                          (rd, uimm) =>
                                                                                                                                           returnm true
                                                                                                                                        | _ =>
                                                                                                                                           exit tt
                                                                                                                                            : M (bool)
                                                                                                                                        end)
                                                                                                                                        : M (bool)
                                                                                                                                     else
                                                                                                                                       (_s3202_
                                                                                                                                          _s2574_) >>= fun w__176 : option ((mword 5 * mword 6)) =>
                                                                                                                                       (if
                                                                                                                                          match w__176 with
                                                                                                                                          | Some
                                                                                                                                            (rd, uimm) =>
                                                                                                                                             andb
                                                                                                                                               (neq_vec
                                                                                                                                                  rd
                                                                                                                                                  zreg)
                                                                                                                                               (Z.eqb
                                                                                                                                                  32
                                                                                                                                                  64)
                                                                                                                                          | _ =>
                                                                                                                                             false
                                                                                                                                          end
                                                                                                                                        then
                                                                                                                                          (_s3202_
                                                                                                                                             _s2574_) >>= fun w__177 : option ((mword 5 * mword 6)) =>
                                                                                                                                          (match w__177 with
                                                                                                                                           | Some
                                                                                                                                             (rd, uimm) =>
                                                                                                                                              returnm true
                                                                                                                                           | _ =>
                                                                                                                                              exit tt
                                                                                                                                               : M (bool)
                                                                                                                                           end)
                                                                                                                                           : M (bool)
                                                                                                                                        else
                                                                                                                                          (_s3214_
                                                                                                                                             _s2574_) >>= fun w__180 : option ((mword 5 * mword 6)) =>
                                                                                                                                          (if
                                                                                                                                             match w__180 with
                                                                                                                                             | Some
                                                                                                                                               (rd, uimm) =>
                                                                                                                                                true
                                                                                                                                             | _ =>
                                                                                                                                                false
                                                                                                                                             end
                                                                                                                                           then
                                                                                                                                             (_s3214_
                                                                                                                                                _s2574_) >>= fun w__181 : option ((mword 5 * mword 6)) =>
                                                                                                                                             (match w__181 with
                                                                                                                                              | Some
                                                                                                                                                (rd, uimm) =>
                                                                                                                                                 returnm true
                                                                                                                                              | _ =>
                                                                                                                                                 exit tt
                                                                                                                                                  : M (bool)
                                                                                                                                              end)
                                                                                                                                              : M (bool)
                                                                                                                                           else
                                                                                                                                             (_s3226_
                                                                                                                                                _s2574_) >>= fun w__184 : option ((mword 5 * mword 6)) =>
                                                                                                                                             (if
                                                                                                                                                match w__184 with
                                                                                                                                                | Some
                                                                                                                                                  (rs2, uimm) =>
                                                                                                                                                   Z.eqb
                                                                                                                                                     32
                                                                                                                                                     64
                                                                                                                                                | _ =>
                                                                                                                                                   false
                                                                                                                                                end
                                                                                                                                              then
                                                                                                                                                (_s3226_
                                                                                                                                                   _s2574_) >>= fun w__185 : option ((mword 5 * mword 6)) =>
                                                                                                                                                (match w__185 with
                                                                                                                                                 | Some
                                                                                                                                                   (rs2, uimm) =>
                                                                                                                                                    returnm true
                                                                                                                                                 | _ =>
                                                                                                                                                    exit tt
                                                                                                                                                     : M (bool)
                                                                                                                                                 end)
                                                                                                                                                 : M (bool)
                                                                                                                                              else
                                                                                                                                                (_s3238_
                                                                                                                                                   _s2574_) >>= fun w__188 : option (mword 5) =>
                                                                                                                                                (if
                                                                                                                                                   match w__188 with
                                                                                                                                                   | Some
                                                                                                                                                     rs1 =>
                                                                                                                                                      neq_vec
                                                                                                                                                        rs1
                                                                                                                                                        zreg
                                                                                                                                                   | _ =>
                                                                                                                                                      false
                                                                                                                                                   end
                                                                                                                                                 then
                                                                                                                                                   (_s3238_
                                                                                                                                                      _s2574_) >>= fun w__189 : option (mword 5) =>
                                                                                                                                                   (match w__189 with
                                                                                                                                                    | Some
                                                                                                                                                      rs1 =>
                                                                                                                                                       returnm true
                                                                                                                                                    | _ =>
                                                                                                                                                       exit tt
                                                                                                                                                        : M (bool)
                                                                                                                                                    end)
                                                                                                                                                    : M (bool)
                                                                                                                                                 else
                                                                                                                                                   (_s3246_
                                                                                                                                                      _s2574_) >>= fun w__192 : option (mword 5) =>
                                                                                                                                                   (if
                                                                                                                                                      match w__192 with
                                                                                                                                                      | Some
                                                                                                                                                        rs1 =>
                                                                                                                                                         neq_vec
                                                                                                                                                           rs1
                                                                                                                                                           zreg
                                                                                                                                                      | _ =>
                                                                                                                                                         false
                                                                                                                                                      end
                                                                                                                                                    then
                                                                                                                                                      (_s3246_
                                                                                                                                                         _s2574_) >>= fun w__193 : option (mword 5) =>
                                                                                                                                                      (match w__193 with
                                                                                                                                                       | Some
                                                                                                                                                         rs1 =>
                                                                                                                                                          returnm true
                                                                                                                                                       | _ =>
                                                                                                                                                          exit tt
                                                                                                                                                           : M (bool)
                                                                                                                                                       end)
                                                                                                                                                       : M (bool)
                                                                                                                                                    else
                                                                                                                                                      (_s3254_
                                                                                                                                                         _s2574_) >>= fun w__196 : option ((mword 5 * mword 5)) =>
                                                                                                                                                      (if
                                                                                                                                                         match w__196 with
                                                                                                                                                         | Some
                                                                                                                                                           (rd, rs2) =>
                                                                                                                                                            andb
                                                                                                                                                              (neq_vec
                                                                                                                                                                 rd
                                                                                                                                                                 zreg)
                                                                                                                                                              (neq_vec
                                                                                                                                                                 rs2
                                                                                                                                                                 zreg)
                                                                                                                                                         | _ =>
                                                                                                                                                            false
                                                                                                                                                         end
                                                                                                                                                       then
                                                                                                                                                         (_s3254_
                                                                                                                                                            _s2574_) >>= fun w__197 : option ((mword 5 * mword 5)) =>
                                                                                                                                                         (match w__197 with
                                                                                                                                                          | Some
                                                                                                                                                            (rd, rs2) =>
                                                                                                                                                             returnm true
                                                                                                                                                          | _ =>
                                                                                                                                                             exit tt
                                                                                                                                                              : M (bool)
                                                                                                                                                          end)
                                                                                                                                                          : M (bool)
                                                                                                                                                       else if
                                                                                                                                                         generic_eq
                                                                                                                                                           _s2574_
                                                                                                                                                           "c.ebreak"
                                                                                                                                                       then
                                                                                                                                                         returnm true
                                                                                                                                                       else
                                                                                                                                                         (_s3266_
                                                                                                                                                            _s2574_) >>= fun w__200 : option ((mword 5 * mword 5)) =>
                                                                                                                                                         (if
                                                                                                                                                            match w__200 with
                                                                                                                                                            | Some
                                                                                                                                                              (rsd, rs2) =>
                                                                                                                                                               andb
                                                                                                                                                                 (neq_vec
                                                                                                                                                                    rsd
                                                                                                                                                                    zreg)
                                                                                                                                                                 (neq_vec
                                                                                                                                                                    rs2
                                                                                                                                                                    zreg)
                                                                                                                                                            | _ =>
                                                                                                                                                               false
                                                                                                                                                            end
                                                                                                                                                          then
                                                                                                                                                            (_s3266_
                                                                                                                                                               _s2574_) >>= fun w__201 : option ((mword 5 * mword 5)) =>
                                                                                                                                                            (match w__201 with
                                                                                                                                                             | Some
                                                                                                                                                               (rsd, rs2) =>
                                                                                                                                                                returnm true
                                                                                                                                                             | _ =>
                                                                                                                                                                exit tt
                                                                                                                                                                 : M (bool)
                                                                                                                                                             end)
                                                                                                                                                             : M (bool)
                                                                                                                                                          else
                                                                                                                                                            (_s3278_
                                                                                                                                                               _s2574_) >>= fun w__204 : option ((bool * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                            (if
                                                                                                                                                               match w__204 with
                                                                                                                                                               | Some
                                                                                                                                                                 (high, signed1, signed2, rd, rs1, rs2) =>
                                                                                                                                                                  true
                                                                                                                                                               | _ =>
                                                                                                                                                                  false
                                                                                                                                                               end
                                                                                                                                                             then
                                                                                                                                                               (_s3278_
                                                                                                                                                                  _s2574_) >>= fun w__205 : option ((bool * bool * bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                               (match w__205 with
                                                                                                                                                                | Some
                                                                                                                                                                  (high, signed1, signed2, rd, rs1, rs2) =>
                                                                                                                                                                   returnm true
                                                                                                                                                                | _ =>
                                                                                                                                                                   exit tt
                                                                                                                                                                    : M (bool)
                                                                                                                                                                end)
                                                                                                                                                                : M (bool)
                                                                                                                                                             else
                                                                                                                                                               (_s3295_
                                                                                                                                                                  _s2574_) >>= fun w__208 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                               (if
                                                                                                                                                                  match w__208 with
                                                                                                                                                                  | Some
                                                                                                                                                                    (s, rd, rs1, rs2) =>
                                                                                                                                                                     true
                                                                                                                                                                  | _ =>
                                                                                                                                                                     false
                                                                                                                                                                  end
                                                                                                                                                                then
                                                                                                                                                                  (_s3295_
                                                                                                                                                                     _s2574_) >>= fun w__209 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                  (match w__209 with
                                                                                                                                                                   | Some
                                                                                                                                                                     (s, rd, rs1, rs2) =>
                                                                                                                                                                      returnm true
                                                                                                                                                                   | _ =>
                                                                                                                                                                      exit tt
                                                                                                                                                                       : M (bool)
                                                                                                                                                                   end)
                                                                                                                                                                   : M (bool)
                                                                                                                                                                else
                                                                                                                                                                  (_s3313_
                                                                                                                                                                     _s2574_) >>= fun w__212 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                  (if
                                                                                                                                                                     match w__212 with
                                                                                                                                                                     | Some
                                                                                                                                                                       (s, rd, rs1, rs2) =>
                                                                                                                                                                        true
                                                                                                                                                                     | _ =>
                                                                                                                                                                        false
                                                                                                                                                                     end
                                                                                                                                                                   then
                                                                                                                                                                     (_s3313_
                                                                                                                                                                        _s2574_) >>= fun w__213 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                     (match w__213 with
                                                                                                                                                                      | Some
                                                                                                                                                                        (s, rd, rs1, rs2) =>
                                                                                                                                                                         returnm true
                                                                                                                                                                      | _ =>
                                                                                                                                                                         exit tt
                                                                                                                                                                          : M (bool)
                                                                                                                                                                      end)
                                                                                                                                                                      : M (bool)
                                                                                                                                                                   else
                                                                                                                                                                     (_s3331_
                                                                                                                                                                        _s2574_) >>= fun w__216 : option ((mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                     (if
                                                                                                                                                                        match w__216 with
                                                                                                                                                                        | Some
                                                                                                                                                                          (rd, rs1, rs2) =>
                                                                                                                                                                           Z.eqb
                                                                                                                                                                             32
                                                                                                                                                                             64
                                                                                                                                                                        | _ =>
                                                                                                                                                                           false
                                                                                                                                                                        end
                                                                                                                                                                      then
                                                                                                                                                                        (_s3331_
                                                                                                                                                                           _s2574_) >>= fun w__217 : option ((mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                        (match w__217 with
                                                                                                                                                                         | Some
                                                                                                                                                                           (rd, rs1, rs2) =>
                                                                                                                                                                            returnm true
                                                                                                                                                                         | _ =>
                                                                                                                                                                            exit tt
                                                                                                                                                                             : M (bool)
                                                                                                                                                                         end)
                                                                                                                                                                         : M (bool)
                                                                                                                                                                      else
                                                                                                                                                                        (_s3347_
                                                                                                                                                                           _s2574_) >>= fun w__220 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                        (if
                                                                                                                                                                           match w__220 with
                                                                                                                                                                           | Some
                                                                                                                                                                             (s, rd, rs1, rs2) =>
                                                                                                                                                                              Z.eqb
                                                                                                                                                                                32
                                                                                                                                                                                64
                                                                                                                                                                           | _ =>
                                                                                                                                                                              false
                                                                                                                                                                           end
                                                                                                                                                                         then
                                                                                                                                                                           (_s3347_
                                                                                                                                                                              _s2574_) >>= fun w__221 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                           (match w__221 with
                                                                                                                                                                            | Some
                                                                                                                                                                              (s, rd, rs1, rs2) =>
                                                                                                                                                                               returnm true
                                                                                                                                                                            | _ =>
                                                                                                                                                                               exit tt
                                                                                                                                                                                : M (bool)
                                                                                                                                                                            end)
                                                                                                                                                                            : M (bool)
                                                                                                                                                                         else
                                                                                                                                                                           (_s3366_
                                                                                                                                                                              _s2574_) >>= fun w__224 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                           (if
                                                                                                                                                                              match w__224 with
                                                                                                                                                                              | Some
                                                                                                                                                                                (s, rd, rs1, rs2) =>
                                                                                                                                                                                 Z.eqb
                                                                                                                                                                                   32
                                                                                                                                                                                   64
                                                                                                                                                                              | _ =>
                                                                                                                                                                                 false
                                                                                                                                                                              end
                                                                                                                                                                            then
                                                                                                                                                                              (_s3366_
                                                                                                                                                                                 _s2574_) >>= fun w__225 : option ((bool * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                              (match w__225 with
                                                                                                                                                                               | Some
                                                                                                                                                                                 (s, rd, rs1, rs2) =>
                                                                                                                                                                                  returnm true
                                                                                                                                                                               | _ =>
                                                                                                                                                                                  exit tt
                                                                                                                                                                                   : M (bool)
                                                                                                                                                                               end)
                                                                                                                                                                               : M (bool)
                                                                                                                                                                            else
                                                                                                                                                                              (_s3385_
                                                                                                                                                                                 _s2574_) >>= fun w__228 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                              (if
                                                                                                                                                                                 match w__228 with
                                                                                                                                                                                 | Some
                                                                                                                                                                                   (op, rd, csr, rs1) =>
                                                                                                                                                                                    true
                                                                                                                                                                                 | _ =>
                                                                                                                                                                                    false
                                                                                                                                                                                 end
                                                                                                                                                                               then
                                                                                                                                                                                 (_s3385_
                                                                                                                                                                                    _s2574_) >>= fun w__229 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                 (match w__229 with
                                                                                                                                                                                  | Some
                                                                                                                                                                                    (op, rd, csr, rs1) =>
                                                                                                                                                                                     returnm true
                                                                                                                                                                                  | _ =>
                                                                                                                                                                                     exit tt
                                                                                                                                                                                      : M (bool)
                                                                                                                                                                                  end)
                                                                                                                                                                                  : M (bool)
                                                                                                                                                                               else
                                                                                                                                                                                 (_s3403_
                                                                                                                                                                                    _s2574_) >>= fun w__232 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                 (if
                                                                                                                                                                                    match w__232 with
                                                                                                                                                                                    | Some
                                                                                                                                                                                      (op, rd, csr, rs1) =>
                                                                                                                                                                                       true
                                                                                                                                                                                    | _ =>
                                                                                                                                                                                       false
                                                                                                                                                                                    end
                                                                                                                                                                                  then
                                                                                                                                                                                    (_s3403_
                                                                                                                                                                                       _s2574_) >>= fun w__233 : option ((csrop * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                    (match w__233 with
                                                                                                                                                                                     | Some
                                                                                                                                                                                       (op, rd, csr, rs1) =>
                                                                                                                                                                                        returnm true
                                                                                                                                                                                     | _ =>
                                                                                                                                                                                        exit tt
                                                                                                                                                                                         : M (bool)
                                                                                                                                                                                     end)
                                                                                                                                                                                     : M (bool)
                                                                                                                                                                                  else if
                                                                                                                                                                                    generic_eq
                                                                                                                                                                                      _s2574_
                                                                                                                                                                                      "uret"
                                                                                                                                                                                  then
                                                                                                                                                                                    returnm true
                                                                                                                                                                                  else
                                                                                                                                                                                    (_s3420_
                                                                                                                                                                                       _s2574_) >>= fun w__236 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                    (if
                                                                                                                                                                                       match w__236 with
                                                                                                                                                                                       | Some
                                                                                                                                                                                         (width, rd, imm, rs1) =>
                                                                                                                                                                                          true
                                                                                                                                                                                       | _ =>
                                                                                                                                                                                          false
                                                                                                                                                                                       end
                                                                                                                                                                                     then
                                                                                                                                                                                       (_s3420_
                                                                                                                                                                                          _s2574_) >>= fun w__237 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                       (match w__237 with
                                                                                                                                                                                        | Some
                                                                                                                                                                                          (width, rd, imm, rs1) =>
                                                                                                                                                                                           returnm true
                                                                                                                                                                                        | _ =>
                                                                                                                                                                                           exit tt
                                                                                                                                                                                            : M (bool)
                                                                                                                                                                                        end)
                                                                                                                                                                                        : M (bool)
                                                                                                                                                                                     else
                                                                                                                                                                                       (_s3444_
                                                                                                                                                                                          _s2574_) >>= fun w__240 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                       (if
                                                                                                                                                                                          match w__240 with
                                                                                                                                                                                          | Some
                                                                                                                                                                                            (width, rs2, imm, rs1) =>
                                                                                                                                                                                             true
                                                                                                                                                                                          | _ =>
                                                                                                                                                                                             false
                                                                                                                                                                                          end
                                                                                                                                                                                        then
                                                                                                                                                                                          (_s3444_
                                                                                                                                                                                             _s2574_) >>= fun w__241 : option ((word_width * mword 5 * mword 12 * mword 5)) =>
                                                                                                                                                                                          (match w__241 with
                                                                                                                                                                                           | Some
                                                                                                                                                                                             (width, rs2, imm, rs1) =>
                                                                                                                                                                                              returnm true
                                                                                                                                                                                           | _ =>
                                                                                                                                                                                              exit tt
                                                                                                                                                                                               : M (bool)
                                                                                                                                                                                           end)
                                                                                                                                                                                           : M (bool)
                                                                                                                                                                                        else
                                                                                                                                                                                          (_s3468_
                                                                                                                                                                                             _s2574_) >>= fun w__244 : option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                          (if
                                                                                                                                                                                             match w__244 with
                                                                                                                                                                                             | Some
                                                                                                                                                                                               (op, rd, rs1, rs2, rs3, rm) =>
                                                                                                                                                                                                true
                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                false
                                                                                                                                                                                             end
                                                                                                                                                                                           then
                                                                                                                                                                                             (_s3468_
                                                                                                                                                                                                _s2574_) >>= fun w__245 : option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                             (match w__245 with
                                                                                                                                                                                              | Some
                                                                                                                                                                                                (op, rd, rs1, rs2, rs3, rm) =>
                                                                                                                                                                                                 returnm true
                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                 exit tt
                                                                                                                                                                                                  : M (bool)
                                                                                                                                                                                              end)
                                                                                                                                                                                              : M (bool)
                                                                                                                                                                                           else
                                                                                                                                                                                             (_s3493_
                                                                                                                                                                                                _s2574_) >>= fun w__248 : option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                             (if
                                                                                                                                                                                                match w__248 with
                                                                                                                                                                                                | Some
                                                                                                                                                                                                  (op, rd, rs1, rs2, rm) =>
                                                                                                                                                                                                   true
                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                   false
                                                                                                                                                                                                end
                                                                                                                                                                                              then
                                                                                                                                                                                                (_s3493_
                                                                                                                                                                                                   _s2574_) >>= fun w__249 : option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                (match w__249 with
                                                                                                                                                                                                 | Some
                                                                                                                                                                                                   (op, rd, rs1, rs2, rm) =>
                                                                                                                                                                                                    returnm true
                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                    exit tt
                                                                                                                                                                                                     : M (bool)
                                                                                                                                                                                                 end)
                                                                                                                                                                                                 : M (bool)
                                                                                                                                                                                              else
                                                                                                                                                                                                (_s3514_
                                                                                                                                                                                                   _s2574_) >>= fun w__252 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                (if
                                                                                                                                                                                                   match w__252 with
                                                                                                                                                                                                   | Some
                                                                                                                                                                                                     (FSQRT_S, rd, rs1, rm) =>
                                                                                                                                                                                                      true
                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                      false
                                                                                                                                                                                                   end
                                                                                                                                                                                                 then
                                                                                                                                                                                                   (_s3514_
                                                                                                                                                                                                      _s2574_) >>= fun w__253 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                   (match w__253 with
                                                                                                                                                                                                    | Some
                                                                                                                                                                                                      (FSQRT_S, rd, rs1, rm) =>
                                                                                                                                                                                                       returnm true
                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                       exit tt
                                                                                                                                                                                                        : M (bool)
                                                                                                                                                                                                    end)
                                                                                                                                                                                                    : M (bool)
                                                                                                                                                                                                 else
                                                                                                                                                                                                   (_s3531_
                                                                                                                                                                                                      _s2574_) >>= fun w__256 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                   (if
                                                                                                                                                                                                      match w__256 with
                                                                                                                                                                                                      | Some
                                                                                                                                                                                                        (FCVT_W_S, rd, rs1, rm) =>
                                                                                                                                                                                                         true
                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                         false
                                                                                                                                                                                                      end
                                                                                                                                                                                                    then
                                                                                                                                                                                                      (_s3531_
                                                                                                                                                                                                         _s2574_) >>= fun w__257 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                      (match w__257 with
                                                                                                                                                                                                       | Some
                                                                                                                                                                                                         (FCVT_W_S, rd, rs1, rm) =>
                                                                                                                                                                                                          returnm true
                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                          exit tt
                                                                                                                                                                                                           : M (bool)
                                                                                                                                                                                                       end)
                                                                                                                                                                                                       : M (bool)
                                                                                                                                                                                                    else
                                                                                                                                                                                                      (_s3548_
                                                                                                                                                                                                         _s2574_) >>= fun w__260 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                      (if
                                                                                                                                                                                                         match w__260 with
                                                                                                                                                                                                         | Some
                                                                                                                                                                                                           (FCVT_WU_S, rd, rs1, rm) =>
                                                                                                                                                                                                            true
                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                            false
                                                                                                                                                                                                         end
                                                                                                                                                                                                       then
                                                                                                                                                                                                         (_s3548_
                                                                                                                                                                                                            _s2574_) >>= fun w__261 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                         (match w__261 with
                                                                                                                                                                                                          | Some
                                                                                                                                                                                                            (FCVT_WU_S, rd, rs1, rm) =>
                                                                                                                                                                                                             returnm true
                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                             exit tt
                                                                                                                                                                                                              : M (bool)
                                                                                                                                                                                                          end)
                                                                                                                                                                                                          : M (bool)
                                                                                                                                                                                                       else
                                                                                                                                                                                                         (_s3565_
                                                                                                                                                                                                            _s2574_) >>= fun w__264 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                         (if
                                                                                                                                                                                                            match w__264 with
                                                                                                                                                                                                            | Some
                                                                                                                                                                                                              (FCVT_S_W, rd, rs1, rm) =>
                                                                                                                                                                                                               true
                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                               false
                                                                                                                                                                                                            end
                                                                                                                                                                                                          then
                                                                                                                                                                                                            (_s3565_
                                                                                                                                                                                                               _s2574_) >>= fun w__265 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                            (match w__265 with
                                                                                                                                                                                                             | Some
                                                                                                                                                                                                               (FCVT_S_W, rd, rs1, rm) =>
                                                                                                                                                                                                                returnm true
                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                exit tt
                                                                                                                                                                                                                 : M (bool)
                                                                                                                                                                                                             end)
                                                                                                                                                                                                             : M (bool)
                                                                                                                                                                                                          else
                                                                                                                                                                                                            (_s3582_
                                                                                                                                                                                                               _s2574_) >>= fun w__268 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                            (if
                                                                                                                                                                                                               match w__268 with
                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                 (FCVT_S_WU, rd, rs1, rm) =>
                                                                                                                                                                                                                  true
                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                  false
                                                                                                                                                                                                               end
                                                                                                                                                                                                             then
                                                                                                                                                                                                               (_s3582_
                                                                                                                                                                                                                  _s2574_) >>= fun w__269 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                               (match w__269 with
                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                  (FCVT_S_WU, rd, rs1, rm) =>
                                                                                                                                                                                                                   returnm true
                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                   exit tt
                                                                                                                                                                                                                    : M (bool)
                                                                                                                                                                                                                end)
                                                                                                                                                                                                                : M (bool)
                                                                                                                                                                                                             else
                                                                                                                                                                                                               (_s3599_
                                                                                                                                                                                                                  _s2574_) >>= fun w__272 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                               (if
                                                                                                                                                                                                                  match w__272 with
                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                    (FCVT_L_S, rd, rs1, rm) =>
                                                                                                                                                                                                                     true
                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                     false
                                                                                                                                                                                                                  end
                                                                                                                                                                                                                then
                                                                                                                                                                                                                  (_s3599_
                                                                                                                                                                                                                     _s2574_) >>= fun w__273 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                  (match w__273 with
                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                     (FCVT_L_S, rd, rs1, rm) =>
                                                                                                                                                                                                                      returnm true
                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                      exit tt
                                                                                                                                                                                                                       : M (bool)
                                                                                                                                                                                                                   end)
                                                                                                                                                                                                                   : M (bool)
                                                                                                                                                                                                                else
                                                                                                                                                                                                                  (_s3616_
                                                                                                                                                                                                                     _s2574_) >>= fun w__276 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                  (if
                                                                                                                                                                                                                     match w__276 with
                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                       (FCVT_LU_S, rd, rs1, rm) =>
                                                                                                                                                                                                                        true
                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                        false
                                                                                                                                                                                                                     end
                                                                                                                                                                                                                   then
                                                                                                                                                                                                                     (_s3616_
                                                                                                                                                                                                                        _s2574_) >>= fun w__277 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                     (match w__277 with
                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                        (FCVT_LU_S, rd, rs1, rm) =>
                                                                                                                                                                                                                         returnm true
                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                         exit tt
                                                                                                                                                                                                                          : M (bool)
                                                                                                                                                                                                                      end)
                                                                                                                                                                                                                      : M (bool)
                                                                                                                                                                                                                   else
                                                                                                                                                                                                                     (_s3633_
                                                                                                                                                                                                                        _s2574_) >>= fun w__280 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                     (if
                                                                                                                                                                                                                        match w__280 with
                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                          (FCVT_S_L, rd, rs1, rm) =>
                                                                                                                                                                                                                           true
                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                           false
                                                                                                                                                                                                                        end
                                                                                                                                                                                                                      then
                                                                                                                                                                                                                        (_s3633_
                                                                                                                                                                                                                           _s2574_) >>= fun w__281 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                        (match w__281 with
                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                           (FCVT_S_L, rd, rs1, rm) =>
                                                                                                                                                                                                                            returnm true
                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                            exit tt
                                                                                                                                                                                                                             : M (bool)
                                                                                                                                                                                                                         end)
                                                                                                                                                                                                                         : M (bool)
                                                                                                                                                                                                                      else
                                                                                                                                                                                                                        (_s3650_
                                                                                                                                                                                                                           _s2574_) >>= fun w__284 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                        (if
                                                                                                                                                                                                                           match w__284 with
                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                             (FCVT_S_LU, rd, rs1, rm) =>
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                              false
                                                                                                                                                                                                                           end
                                                                                                                                                                                                                         then
                                                                                                                                                                                                                           (_s3650_
                                                                                                                                                                                                                              _s2574_) >>= fun w__285 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode)) =>
                                                                                                                                                                                                                           (match w__285 with
                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                              (FCVT_S_LU, rd, rs1, rm) =>
                                                                                                                                                                                                                               returnm true
                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                               exit tt
                                                                                                                                                                                                                                : M (bool)
                                                                                                                                                                                                                            end)
                                                                                                                                                                                                                            : M (bool)
                                                                                                                                                                                                                         else
                                                                                                                                                                                                                           (_s3667_
                                                                                                                                                                                                                              _s2574_) >>= fun w__288 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                           (if
                                                                                                                                                                                                                              match w__288 with
                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                (FSGNJ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                 true
                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                 false
                                                                                                                                                                                                                              end
                                                                                                                                                                                                                            then
                                                                                                                                                                                                                              (_s3667_
                                                                                                                                                                                                                                 _s2574_) >>= fun w__289 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                              (match w__289 with
                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                 (FSGNJ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                  returnm true
                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                  exit tt
                                                                                                                                                                                                                                   : M (bool)
                                                                                                                                                                                                                               end)
                                                                                                                                                                                                                               : M (bool)
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                              (_s3684_
                                                                                                                                                                                                                                 _s2574_) >>= fun w__292 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                              (if
                                                                                                                                                                                                                                 match w__292 with
                                                                                                                                                                                                                                 | Some
                                                                                                                                                                                                                                   (FSGNJN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                                                    false
                                                                                                                                                                                                                                 end
                                                                                                                                                                                                                               then
                                                                                                                                                                                                                                 (_s3684_
                                                                                                                                                                                                                                    _s2574_) >>= fun w__293 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                 (match w__293 with
                                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                                    (FSGNJN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                     returnm true
                                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                                     exit tt
                                                                                                                                                                                                                                      : M (bool)
                                                                                                                                                                                                                                  end)
                                                                                                                                                                                                                                  : M (bool)
                                                                                                                                                                                                                               else
                                                                                                                                                                                                                                 (_s3701_
                                                                                                                                                                                                                                    _s2574_) >>= fun w__296 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                 (if
                                                                                                                                                                                                                                    match w__296 with
                                                                                                                                                                                                                                    | Some
                                                                                                                                                                                                                                      (FSGNJX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                       true
                                                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                                                       false
                                                                                                                                                                                                                                    end
                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                    (_s3701_
                                                                                                                                                                                                                                       _s2574_) >>= fun w__297 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                    (match w__297 with
                                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                                       (FSGNJX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                        returnm true
                                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                                        exit tt
                                                                                                                                                                                                                                         : M (bool)
                                                                                                                                                                                                                                     end)
                                                                                                                                                                                                                                     : M (bool)
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                    (_s3718_
                                                                                                                                                                                                                                       _s2574_) >>= fun w__300 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                    (if
                                                                                                                                                                                                                                       match w__300 with
                                                                                                                                                                                                                                       | Some
                                                                                                                                                                                                                                         (FMIN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                                                          false
                                                                                                                                                                                                                                       end
                                                                                                                                                                                                                                     then
                                                                                                                                                                                                                                       (_s3718_
                                                                                                                                                                                                                                          _s2574_) >>= fun w__301 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                       (match w__301 with
                                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                                          (FMIN_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                           returnm true
                                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                                           exit tt
                                                                                                                                                                                                                                            : M (bool)
                                                                                                                                                                                                                                        end)
                                                                                                                                                                                                                                        : M (bool)
                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                       (_s3735_
                                                                                                                                                                                                                                          _s2574_) >>= fun w__304 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                       (if
                                                                                                                                                                                                                                          match w__304 with
                                                                                                                                                                                                                                          | Some
                                                                                                                                                                                                                                            (FMAX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                             true
                                                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                                                             false
                                                                                                                                                                                                                                          end
                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                          (_s3735_
                                                                                                                                                                                                                                             _s2574_) >>= fun w__305 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                          (match w__305 with
                                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                                             (FMAX_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                              returnm true
                                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                                              exit tt
                                                                                                                                                                                                                                               : M (bool)
                                                                                                                                                                                                                                           end)
                                                                                                                                                                                                                                           : M (bool)
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                          (_s3752_
                                                                                                                                                                                                                                             _s2574_) >>= fun w__308 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                          (if
                                                                                                                                                                                                                                             match w__308 with
                                                                                                                                                                                                                                             | Some
                                                                                                                                                                                                                                               (FEQ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                                                false
                                                                                                                                                                                                                                             end
                                                                                                                                                                                                                                           then
                                                                                                                                                                                                                                             (_s3752_
                                                                                                                                                                                                                                                _s2574_) >>= fun w__309 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                             (match w__309 with
                                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                                (FEQ_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                 returnm true
                                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                                 exit tt
                                                                                                                                                                                                                                                  : M (bool)
                                                                                                                                                                                                                                              end)
                                                                                                                                                                                                                                              : M (bool)
                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                             (_s3769_
                                                                                                                                                                                                                                                _s2574_) >>= fun w__312 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                             (if
                                                                                                                                                                                                                                                match w__312 with
                                                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                                                  (FLT_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                   true
                                                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                                                   false
                                                                                                                                                                                                                                                end
                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                (_s3769_
                                                                                                                                                                                                                                                   _s2574_) >>= fun w__313 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                (match w__313 with
                                                                                                                                                                                                                                                 | Some
                                                                                                                                                                                                                                                   (FLT_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                    returnm true
                                                                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                                                                    exit tt
                                                                                                                                                                                                                                                     : M (bool)
                                                                                                                                                                                                                                                 end)
                                                                                                                                                                                                                                                 : M (bool)
                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                (_s3786_
                                                                                                                                                                                                                                                   _s2574_) >>= fun w__316 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                (if
                                                                                                                                                                                                                                                   match w__316 with
                                                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                                                     (FLE_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                                                      false
                                                                                                                                                                                                                                                   end
                                                                                                                                                                                                                                                 then
                                                                                                                                                                                                                                                   (_s3786_
                                                                                                                                                                                                                                                      _s2574_) >>= fun w__317 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                   (match w__317 with
                                                                                                                                                                                                                                                    | Some
                                                                                                                                                                                                                                                      (FLE_S, rd, rs1, rs2) =>
                                                                                                                                                                                                                                                       returnm true
                                                                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                                                                       exit tt
                                                                                                                                                                                                                                                        : M (bool)
                                                                                                                                                                                                                                                    end)
                                                                                                                                                                                                                                                    : M (bool)
                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                   (_s3803_
                                                                                                                                                                                                                                                      _s2574_) >>= fun w__320 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                   (if
                                                                                                                                                                                                                                                      match w__320 with
                                                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                                                        (FMV_X_W, rd, rs1) =>
                                                                                                                                                                                                                                                         true
                                                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                                                         false
                                                                                                                                                                                                                                                      end
                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                      (_s3803_
                                                                                                                                                                                                                                                         _s2574_) >>= fun w__321 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                      (match w__321 with
                                                                                                                                                                                                                                                       | Some
                                                                                                                                                                                                                                                         (FMV_X_W, rd, rs1) =>
                                                                                                                                                                                                                                                          returnm true
                                                                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                                                                          exit tt
                                                                                                                                                                                                                                                           : M (bool)
                                                                                                                                                                                                                                                       end)
                                                                                                                                                                                                                                                       : M (bool)
                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                      (_s3816_
                                                                                                                                                                                                                                                         _s2574_) >>= fun w__324 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                      (if
                                                                                                                                                                                                                                                         match w__324 with
                                                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                                                           (FMV_W_X, rd, rs1) =>
                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                                                            false
                                                                                                                                                                                                                                                         end
                                                                                                                                                                                                                                                       then
                                                                                                                                                                                                                                                         (_s3816_
                                                                                                                                                                                                                                                            _s2574_) >>= fun w__325 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                         (match w__325 with
                                                                                                                                                                                                                                                          | Some
                                                                                                                                                                                                                                                            (FMV_W_X, rd, rs1) =>
                                                                                                                                                                                                                                                             returnm true
                                                                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                                                                             exit tt
                                                                                                                                                                                                                                                              : M (bool)
                                                                                                                                                                                                                                                          end)
                                                                                                                                                                                                                                                          : M (bool)
                                                                                                                                                                                                                                                       else
                                                                                                                                                                                                                                                         (_s3829_
                                                                                                                                                                                                                                                            _s2574_) >>= fun w__328 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                         (if
                                                                                                                                                                                                                                                            match w__328 with
                                                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                                                              (FCLASS_S, rd, rs1) =>
                                                                                                                                                                                                                                                               true
                                                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                                                               false
                                                                                                                                                                                                                                                            end
                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                            (_s3829_
                                                                                                                                                                                                                                                               _s2574_) >>= fun w__329 : option ((f_un_op_S * mword 5 * mword 5)) =>
                                                                                                                                                                                                                                                            (match w__329 with
                                                                                                                                                                                                                                                             | Some
                                                                                                                                                                                                                                                               (FCLASS_S, rd, rs1) =>
                                                                                                                                                                                                                                                                returnm true
                                                                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                                                                exit tt
                                                                                                                                                                                                                                                                 : M (bool)
                                                                                                                                                                                                                                                             end)
                                                                                                                                                                                                                                                             : M (bool)
                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                            (_s3842_
                                                                                                                                                                                                                                                               _s2574_) >>= fun w__332 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                            (if
                                                                                                                                                                                                                                                               match w__332 with
                                                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                                                 (rd, imm) =>
                                                                                                                                                                                                                                                                  Z.eqb
                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                                                  false
                                                                                                                                                                                                                                                               end
                                                                                                                                                                                                                                                             then
                                                                                                                                                                                                                                                               (_s3842_
                                                                                                                                                                                                                                                                  _s2574_) >>= fun w__333 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                               (match w__333 with
                                                                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                                                                  (rd, imm) =>
                                                                                                                                                                                                                                                                   returnm true
                                                                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                                                                   exit tt
                                                                                                                                                                                                                                                                    : M (bool)
                                                                                                                                                                                                                                                                end)
                                                                                                                                                                                                                                                                : M (bool)
                                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                                               (_s3854_
                                                                                                                                                                                                                                                                  _s2574_) >>= fun w__336 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                               (if
                                                                                                                                                                                                                                                                  match w__336 with
                                                                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                                                                    (rd, uimm) =>
                                                                                                                                                                                                                                                                     Z.eqb
                                                                                                                                                                                                                                                                       32
                                                                                                                                                                                                                                                                       32
                                                                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                                                                     false
                                                                                                                                                                                                                                                                  end
                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                  (_s3854_
                                                                                                                                                                                                                                                                     _s2574_) >>= fun w__337 : option ((mword 5 * mword 6)) =>
                                                                                                                                                                                                                                                                  (match w__337 with
                                                                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                                                                     (rd, uimm) =>
                                                                                                                                                                                                                                                                      returnm true
                                                                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                                                                      exit tt
                                                                                                                                                                                                                                                                       : M (bool)
                                                                                                                                                                                                                                                                   end)
                                                                                                                                                                                                                                                                   : M (bool)
                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                  (_s3866_
                                                                                                                                                                                                                                                                     _s2574_) >>= fun w__340 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                  (if
                                                                                                                                                                                                                                                                     match w__340 with
                                                                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                                                                       (rdc, rsc, uimm) =>
                                                                                                                                                                                                                                                                        Z.eqb
                                                                                                                                                                                                                                                                          32
                                                                                                                                                                                                                                                                          32
                                                                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                                                                        false
                                                                                                                                                                                                                                                                     end
                                                                                                                                                                                                                                                                   then
                                                                                                                                                                                                                                                                     (_s3866_
                                                                                                                                                                                                                                                                        _s2574_) >>= fun w__341 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                     (match w__341 with
                                                                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                                                                        (rdc, rsc, uimm) =>
                                                                                                                                                                                                                                                                         returnm true
                                                                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                                                                         exit tt
                                                                                                                                                                                                                                                                          : M (bool)
                                                                                                                                                                                                                                                                      end)
                                                                                                                                                                                                                                                                      : M (bool)
                                                                                                                                                                                                                                                                   else
                                                                                                                                                                                                                                                                     (_s3882_
                                                                                                                                                                                                                                                                        _s2574_) >>= fun w__344 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                     (if
                                                                                                                                                                                                                                                                        match w__344 with
                                                                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                                                                          (rsc1, rsc2, uimm) =>
                                                                                                                                                                                                                                                                           Z.eqb
                                                                                                                                                                                                                                                                             32
                                                                                                                                                                                                                                                                             32
                                                                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                                                                           false
                                                                                                                                                                                                                                                                        end
                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                        (_s3882_
                                                                                                                                                                                                                                                                           _s2574_) >>= fun w__345 : option ((mword 3 * mword 3 * mword 5)) =>
                                                                                                                                                                                                                                                                        (match w__345 with
                                                                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                                                                           (rsc1, rsc2, uimm) =>
                                                                                                                                                                                                                                                                            returnm true
                                                                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                                                                            exit tt
                                                                                                                                                                                                                                                                             : M (bool)
                                                                                                                                                                                                                                                                         end)
                                                                                                                                                                                                                                                                         : M (bool)
                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                        (_s3898_
                                                                                                                                                                                                                                                                           _s2574_) >>= fun w__348 : option (mword 32) =>
                                                                                                                                                                                                                                                                        (if
                                                                                                                                                                                                                                                                           match w__348 with
                                                                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                                                                             s =>
                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                                                                              false
                                                                                                                                                                                                                                                                           end
                                                                                                                                                                                                                                                                         then
                                                                                                                                                                                                                                                                           (_s3898_
                                                                                                                                                                                                                                                                              _s2574_) >>= fun w__349 : option (mword 32) =>
                                                                                                                                                                                                                                                                           (match w__349 with
                                                                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                                                                              s =>
                                                                                                                                                                                                                                                                               returnm true
                                                                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                                                                               exit tt
                                                                                                                                                                                                                                                                                : M (bool)
                                                                                                                                                                                                                                                                            end)
                                                                                                                                                                                                                                                                            : M (bool)
                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                           (_s3906_
                                                                                                                                                                                                                                                                              _s2574_) >>= fun w__352 : option (mword 16) =>
                                                                                                                                                                                                                                                                           (if
                                                                                                                                                                                                                                                                              match w__352 with
                                                                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                                                                s =>
                                                                                                                                                                                                                                                                                 true
                                                                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                                                                 false
                                                                                                                                                                                                                                                                              end
                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                              (_s3906_
                                                                                                                                                                                                                                                                                 _s2574_) >>= fun w__353 : option (mword 16) =>
                                                                                                                                                                                                                                                                              (match w__353 with
                                                                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                                                                 s =>
                                                                                                                                                                                                                                                                                  returnm true
                                                                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                                                                  exit tt
                                                                                                                                                                                                                                                                                   : M (bool)
                                                                                                                                                                                                                                                                               end)
                                                                                                                                                                                                                                                                               : M (bool)
                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                              returnm false)
                                                                                                                                                                                                                                                                            : M (bool))
                                                                                                                                                                                                                                                                         : M (bool))
                                                                                                                                                                                                                                                                      : M (bool))
                                                                                                                                                                                                                                                                   : M (bool))
                                                                                                                                                                                                                                                                : M (bool))
                                                                                                                                                                                                                                                             : M (bool))
                                                                                                                                                                                                                                                          : M (bool))
                                                                                                                                                                                                                                                       : M (bool))
                                                                                                                                                                                                                                                    : M (bool))
                                                                                                                                                                                                                                                 : M (bool))
                                                                                                                                                                                                                                              : M (bool))
                                                                                                                                                                                                                                           : M (bool))
                                                                                                                                                                                                                                        : M (bool))
                                                                                                                                                                                                                                     : M (bool))
                                                                                                                                                                                                                                  : M (bool))
                                                                                                                                                                                                                               : M (bool))
                                                                                                                                                                                                                            : M (bool))
                                                                                                                                                                                                                         : M (bool))
                                                                                                                                                                                                                      : M (bool))
                                                                                                                                                                                                                   : M (bool))
                                                                                                                                                                                                                : M (bool))
                                                                                                                                                                                                             : M (bool))
                                                                                                                                                                                                          : M (bool))
                                                                                                                                                                                                       : M (bool))
                                                                                                                                                                                                    : M (bool))
                                                                                                                                                                                                 : M (bool))
                                                                                                                                                                                              : M (bool))
                                                                                                                                                                                           : M (bool))
                                                                                                                                                                                        : M (bool))
                                                                                                                                                                                     : M (bool))
                                                                                                                                                                                  : M (bool))
                                                                                                                                                                               : M (bool))
                                                                                                                                                                            : M (bool))
                                                                                                                                                                         : M (bool))
                                                                                                                                                                      : M (bool))
                                                                                                                                                                   : M (bool))
                                                                                                                                                                : M (bool))
                                                                                                                                                             : M (bool))
                                                                                                                                                          : M (bool))
                                                                                                                                                       : M (bool))
                                                                                                                                                    : M (bool))
                                                                                                                                                 : M (bool))
                                                                                                                                              : M (bool))
                                                                                                                                           : M (bool))
                                                                                                                                        : M (bool))
                                                                                                                                     : M (bool))
                                                                                                                                  : M (bool))
                                                                                                                               : M (bool))
                                                                                                                            : M (bool))
                                                                                                                         : M (bool))
                                                                                                                      : M (bool))
                                                                                                                   : M (bool))
                                                                                                                : M (bool))
                                                                                                             : M (bool))
                                                                                                          : M (bool))
                                                                                                       : M (bool))
                                                                                                    : M (bool))
                                                                                                 : M (bool))
                                                                                              : M (bool))
                                                                                           : M (bool))
                                                                                        : M (bool))
                                                                                     : M (bool))
                                                                                  : M (bool))
                                                                               : M (bool))
                                                                            : M (bool))
                                                                         : M (bool))
                                                                      : M (bool))
                                                                   : M (bool))
                                                                : M (bool))
                                                             : M (bool))
                                                          : M (bool))
                                                       : M (bool))
                                                    : M (bool))
                                                 : M (bool))
                                              : M (bool))
                                           : M (bool))
                                        : M (bool))
                                     : M (bool))
                                  : M (bool))
                               : M (bool))
                            : M (bool))
                         : M (bool))
                      : M (bool))
                   : M (bool))
                : M (bool))
             : M (bool))
          : M (bool))
       : M (bool))
    : M (bool).

Definition _s5294_ (_s5295_ : string) : M (option ((mword 16 * string))) :=
   let _s5296_ := _s5295_ in
   (if string_startswith _s5296_ "c.illegal" then
      (match (string_drop _s5296_ (projT1 (string_length "c.illegal"))) with
       | _s5297_ =>
          (spc_matches_prefix _s5297_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s5298_ _) =>
                      match (string_drop _s5297_ _s5298_) with
                      | _s5299_ =>
                         match (hex_bits_16_matches_prefix _s5299_) with
                         | Some (s, existT _ _s5300_ _) =>
                            match (string_drop _s5299_ _s5300_) with | s_ => Some (s, s_) end
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option ((mword 16 * string)))
    else returnm None)
    : M (option ((mword 16 * string))).

Definition _s5286_ (_s5287_ : string) : M (option ((mword 32 * string))) :=
   let _s5288_ := _s5287_ in
   (if string_startswith _s5288_ "illegal" then
      (match (string_drop _s5288_ (projT1 (string_length "illegal"))) with
       | _s5289_ =>
          (spc_matches_prefix _s5289_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s5290_ _) =>
                      match (string_drop _s5289_ _s5290_) with
                      | _s5291_ =>
                         match (hex_bits_32_matches_prefix _s5291_) with
                         | Some (s, existT _ _s5292_ _) =>
                            match (string_drop _s5291_ _s5292_) with | s_ => Some (s, s_) end
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option ((mword 32 * string)))
    else returnm None)
    : M (option ((mword 32 * string))).

Definition _s5270_ (_s5271_ : string) : M (option ((mword 3 * mword 3 * mword 5 * string))) :=
   let _s5272_ := _s5271_ in
   (if string_startswith _s5272_ "c.fsw" then
      (match (string_drop _s5272_ (projT1 (string_length "c.fsw"))) with
       | _s5273_ =>
          (spc_matches_prefix _s5273_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s5274_ _) =>
              (match (string_drop _s5273_ _s5274_) with
               | _s5275_ =>
                  (creg_name_matches_prefix _s5275_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s5276_ _) =>
                      (match (string_drop _s5275_ _s5276_) with
                       | _s5277_ =>
                          (sep_matches_prefix _s5277_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s5278_ _) =>
                              (match (string_drop _s5277_ _s5278_) with
                               | _s5279_ =>
                                  (creg_name_matches_prefix _s5279_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s5280_ _) =>
                                      (match (string_drop _s5279_ _s5280_) with
                                       | _s5281_ =>
                                          (sep_matches_prefix _s5281_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s5282_ _) =>
                                                      match (string_drop _s5281_ _s5282_) with
                                                      | _s5283_ =>
                                                         match (hex_bits_7_matches_prefix _s5283_) with
                                                         | Some (v__1108, existT _ _s5284_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1108 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1108 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1108 6 2 in
                                                              match (string_drop _s5283_ _s5284_) with
                                                              | s_ => Some (rsc1, rsc2, uimm, s_)
                                                              end
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5 * string)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5 * string))).

Definition _s5254_ (_s5255_ : string) : M (option ((mword 3 * mword 3 * mword 5 * string))) :=
   let _s5256_ := _s5255_ in
   (if string_startswith _s5256_ "c.flw" then
      (match (string_drop _s5256_ (projT1 (string_length "c.flw"))) with
       | _s5257_ =>
          (spc_matches_prefix _s5257_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s5258_ _) =>
              (match (string_drop _s5257_ _s5258_) with
               | _s5259_ =>
                  (creg_name_matches_prefix _s5259_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s5260_ _) =>
                      (match (string_drop _s5259_ _s5260_) with
                       | _s5261_ =>
                          (sep_matches_prefix _s5261_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s5262_ _) =>
                              (match (string_drop _s5261_ _s5262_) with
                               | _s5263_ =>
                                  (creg_name_matches_prefix _s5263_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s5264_ _) =>
                                      (match (string_drop _s5263_ _s5264_) with
                                       | _s5265_ =>
                                          (sep_matches_prefix _s5265_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s5266_ _) =>
                                                      match (string_drop _s5265_ _s5266_) with
                                                      | _s5267_ =>
                                                         match (hex_bits_7_matches_prefix _s5267_) with
                                                         | Some (v__1110, existT _ _s5268_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1110 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1110 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1110 6 2 in
                                                              match (string_drop _s5267_ _s5268_) with
                                                              | s_ => Some (rdc, rsc, uimm, s_)
                                                              end
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5 * string)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5 * string))).

Definition _s5242_ (_s5243_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s5244_ := _s5243_ in
   (if string_startswith _s5244_ "c.fswsp" then
      (match (string_drop _s5244_ (projT1 (string_length "c.fswsp"))) with
       | _s5245_ =>
          (spc_matches_prefix _s5245_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s5246_ _) =>
              (match (string_drop _s5245_ _s5246_) with
               | _s5247_ =>
                  (reg_name_matches_prefix _s5247_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s5248_ _) =>
                      (match (string_drop _s5247_ _s5248_) with
                       | _s5249_ =>
                          (sep_matches_prefix _s5249_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s5250_ _) =>
                                      match (string_drop _s5249_ _s5250_) with
                                      | _s5251_ =>
                                         match (hex_bits_6_matches_prefix _s5251_) with
                                         | Some (uimm, existT _ _s5252_ _) =>
                                            match (string_drop _s5251_ _s5252_) with
                                            | s_ => Some (rd, uimm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s5230_ (_s5231_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s5232_ := _s5231_ in
   (if string_startswith _s5232_ "c.flwsp" then
      (match (string_drop _s5232_ (projT1 (string_length "c.flwsp"))) with
       | _s5233_ =>
          (spc_matches_prefix _s5233_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s5234_ _) =>
              (match (string_drop _s5233_ _s5234_) with
               | _s5235_ =>
                  (reg_name_matches_prefix _s5235_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s5236_ _) =>
                      (match (string_drop _s5235_ _s5236_) with
                       | _s5237_ =>
                          (sep_matches_prefix _s5237_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s5238_ _) =>
                                      match (string_drop _s5237_ _s5238_) with
                                      | _s5239_ =>
                                         match (hex_bits_6_matches_prefix _s5239_) with
                                         | Some (imm, existT _ _s5240_ _) =>
                                            match (string_drop _s5239_ _s5240_) with
                                            | s_ => Some (rd, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s5217_ (_s5218_ : string) : M (option ((f_un_op_S * mword 5 * mword 5 * string))) :=
   (match _s5218_ with
    | _s5219_ =>
       (f_un_type_mnemonic_S_matches_prefix _s5219_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCLASS_S, existT _ _s5220_ _) =>
           (match (string_drop _s5219_ _s5220_) with
            | _s5221_ =>
               (spc_matches_prefix _s5221_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5222_ _) =>
                   (match (string_drop _s5221_ _s5222_) with
                    | _s5223_ =>
                       (reg_name_matches_prefix _s5223_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5224_ _) =>
                           (match (string_drop _s5223_ _s5224_) with
                            | _s5225_ =>
                               (sep_matches_prefix _s5225_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5226_ _) =>
                                   (match (string_drop _s5225_ _s5226_) with
                                    | _s5227_ =>
                                       (freg_name_matches_prefix _s5227_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s5228_ _) =>
                                                   match (string_drop _s5227_ _s5228_) with
                                                   | s_ => Some (FCLASS_S, rd, rs1, s_)
                                                   end
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5 * string))).

Definition _s5204_ (_s5205_ : string) : M (option ((f_un_op_S * mword 5 * mword 5 * string))) :=
   (match _s5205_ with
    | _s5206_ =>
       (f_un_type_mnemonic_S_matches_prefix _s5206_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMV_W_X, existT _ _s5207_ _) =>
           (match (string_drop _s5206_ _s5207_) with
            | _s5208_ =>
               (spc_matches_prefix _s5208_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5209_ _) =>
                   (match (string_drop _s5208_ _s5209_) with
                    | _s5210_ =>
                       (freg_name_matches_prefix _s5210_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5211_ _) =>
                           (match (string_drop _s5210_ _s5211_) with
                            | _s5212_ =>
                               (sep_matches_prefix _s5212_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5213_ _) =>
                                   (match (string_drop _s5212_ _s5213_) with
                                    | _s5214_ =>
                                       (reg_name_matches_prefix _s5214_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s5215_ _) =>
                                                   match (string_drop _s5214_ _s5215_) with
                                                   | s_ => Some (FMV_W_X, rd, rs1, s_)
                                                   end
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5 * string))).

Definition _s5191_ (_s5192_ : string) : M (option ((f_un_op_S * mword 5 * mword 5 * string))) :=
   (match _s5192_ with
    | _s5193_ =>
       (f_un_type_mnemonic_S_matches_prefix _s5193_) >>= fun w__0 : option ((f_un_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMV_X_W, existT _ _s5194_ _) =>
           (match (string_drop _s5193_ _s5194_) with
            | _s5195_ =>
               (spc_matches_prefix _s5195_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5196_ _) =>
                   (match (string_drop _s5195_ _s5196_) with
                    | _s5197_ =>
                       (reg_name_matches_prefix _s5197_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5198_ _) =>
                           (match (string_drop _s5197_ _s5198_) with
                            | _s5199_ =>
                               (sep_matches_prefix _s5199_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5200_ _) =>
                                   (match (string_drop _s5199_ _s5200_) with
                                    | _s5201_ =>
                                       (freg_name_matches_prefix _s5201_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       returnm (match w__4 with
                                                | Some (rs1, existT _ _s5202_ _) =>
                                                   match (string_drop _s5201_ _s5202_) with
                                                   | s_ => Some (FMV_X_W, rd, rs1, s_)
                                                   end
                                                | _ => None
                                                end)
                                    end)
                                    : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_op_S * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_un_op_S * mword 5 * mword 5 * string))).

Definition _s5174_ (_s5175_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5175_ with
    | _s5176_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5176_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FLE_S, existT _ _s5177_ _) =>
           (match (string_drop _s5176_ _s5177_) with
            | _s5178_ =>
               (spc_matches_prefix _s5178_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5179_ _) =>
                   (match (string_drop _s5178_ _s5179_) with
                    | _s5180_ =>
                       (reg_name_matches_prefix _s5180_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5181_ _) =>
                           (match (string_drop _s5180_ _s5181_) with
                            | _s5182_ =>
                               (sep_matches_prefix _s5182_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5183_ _) =>
                                   (match (string_drop _s5182_ _s5183_) with
                                    | _s5184_ =>
                                       (freg_name_matches_prefix _s5184_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5185_ _) =>
                                           (match (string_drop _s5184_ _s5185_) with
                                            | _s5186_ =>
                                               (sep_matches_prefix _s5186_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5187_ _) =>
                                                   (match (string_drop _s5186_ _s5187_) with
                                                    | _s5188_ =>
                                                       (freg_name_matches_prefix _s5188_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5189_ _) =>
                                                                   match (string_drop _s5188_
                                                                            _s5189_) with
                                                                   | s_ =>
                                                                      Some (FLE_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5157_ (_s5158_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5158_ with
    | _s5159_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5159_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FLT_S, existT _ _s5160_ _) =>
           (match (string_drop _s5159_ _s5160_) with
            | _s5161_ =>
               (spc_matches_prefix _s5161_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5162_ _) =>
                   (match (string_drop _s5161_ _s5162_) with
                    | _s5163_ =>
                       (reg_name_matches_prefix _s5163_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5164_ _) =>
                           (match (string_drop _s5163_ _s5164_) with
                            | _s5165_ =>
                               (sep_matches_prefix _s5165_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5166_ _) =>
                                   (match (string_drop _s5165_ _s5166_) with
                                    | _s5167_ =>
                                       (freg_name_matches_prefix _s5167_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5168_ _) =>
                                           (match (string_drop _s5167_ _s5168_) with
                                            | _s5169_ =>
                                               (sep_matches_prefix _s5169_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5170_ _) =>
                                                   (match (string_drop _s5169_ _s5170_) with
                                                    | _s5171_ =>
                                                       (freg_name_matches_prefix _s5171_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5172_ _) =>
                                                                   match (string_drop _s5171_
                                                                            _s5172_) with
                                                                   | s_ =>
                                                                      Some (FLT_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5140_ (_s5141_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5141_ with
    | _s5142_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5142_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FEQ_S, existT _ _s5143_ _) =>
           (match (string_drop _s5142_ _s5143_) with
            | _s5144_ =>
               (spc_matches_prefix _s5144_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5145_ _) =>
                   (match (string_drop _s5144_ _s5145_) with
                    | _s5146_ =>
                       (reg_name_matches_prefix _s5146_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5147_ _) =>
                           (match (string_drop _s5146_ _s5147_) with
                            | _s5148_ =>
                               (sep_matches_prefix _s5148_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5149_ _) =>
                                   (match (string_drop _s5148_ _s5149_) with
                                    | _s5150_ =>
                                       (freg_name_matches_prefix _s5150_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5151_ _) =>
                                           (match (string_drop _s5150_ _s5151_) with
                                            | _s5152_ =>
                                               (sep_matches_prefix _s5152_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5153_ _) =>
                                                   (match (string_drop _s5152_ _s5153_) with
                                                    | _s5154_ =>
                                                       (freg_name_matches_prefix _s5154_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5155_ _) =>
                                                                   match (string_drop _s5154_
                                                                            _s5155_) with
                                                                   | s_ =>
                                                                      Some (FEQ_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5123_ (_s5124_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5124_ with
    | _s5125_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5125_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMAX_S, existT _ _s5126_ _) =>
           (match (string_drop _s5125_ _s5126_) with
            | _s5127_ =>
               (spc_matches_prefix _s5127_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5128_ _) =>
                   (match (string_drop _s5127_ _s5128_) with
                    | _s5129_ =>
                       (freg_name_matches_prefix _s5129_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5130_ _) =>
                           (match (string_drop _s5129_ _s5130_) with
                            | _s5131_ =>
                               (sep_matches_prefix _s5131_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5132_ _) =>
                                   (match (string_drop _s5131_ _s5132_) with
                                    | _s5133_ =>
                                       (freg_name_matches_prefix _s5133_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5134_ _) =>
                                           (match (string_drop _s5133_ _s5134_) with
                                            | _s5135_ =>
                                               (sep_matches_prefix _s5135_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5136_ _) =>
                                                   (match (string_drop _s5135_ _s5136_) with
                                                    | _s5137_ =>
                                                       (freg_name_matches_prefix _s5137_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5138_ _) =>
                                                                   match (string_drop _s5137_
                                                                            _s5138_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FMAX_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5106_ (_s5107_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5107_ with
    | _s5108_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5108_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FMIN_S, existT _ _s5109_ _) =>
           (match (string_drop _s5108_ _s5109_) with
            | _s5110_ =>
               (spc_matches_prefix _s5110_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5111_ _) =>
                   (match (string_drop _s5110_ _s5111_) with
                    | _s5112_ =>
                       (freg_name_matches_prefix _s5112_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5113_ _) =>
                           (match (string_drop _s5112_ _s5113_) with
                            | _s5114_ =>
                               (sep_matches_prefix _s5114_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5115_ _) =>
                                   (match (string_drop _s5114_ _s5115_) with
                                    | _s5116_ =>
                                       (freg_name_matches_prefix _s5116_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5117_ _) =>
                                           (match (string_drop _s5116_ _s5117_) with
                                            | _s5118_ =>
                                               (sep_matches_prefix _s5118_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5119_ _) =>
                                                   (match (string_drop _s5118_ _s5119_) with
                                                    | _s5120_ =>
                                                       (freg_name_matches_prefix _s5120_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5121_ _) =>
                                                                   match (string_drop _s5120_
                                                                            _s5121_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FMIN_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5089_ (_s5090_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5090_ with
    | _s5091_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5091_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJX_S, existT _ _s5092_ _) =>
           (match (string_drop _s5091_ _s5092_) with
            | _s5093_ =>
               (spc_matches_prefix _s5093_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5094_ _) =>
                   (match (string_drop _s5093_ _s5094_) with
                    | _s5095_ =>
                       (freg_name_matches_prefix _s5095_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5096_ _) =>
                           (match (string_drop _s5095_ _s5096_) with
                            | _s5097_ =>
                               (sep_matches_prefix _s5097_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5098_ _) =>
                                   (match (string_drop _s5097_ _s5098_) with
                                    | _s5099_ =>
                                       (freg_name_matches_prefix _s5099_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5100_ _) =>
                                           (match (string_drop _s5099_ _s5100_) with
                                            | _s5101_ =>
                                               (sep_matches_prefix _s5101_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5102_ _) =>
                                                   (match (string_drop _s5101_ _s5102_) with
                                                    | _s5103_ =>
                                                       (freg_name_matches_prefix _s5103_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5104_ _) =>
                                                                   match (string_drop _s5103_
                                                                            _s5104_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FSGNJX_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5072_ (_s5073_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5073_ with
    | _s5074_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5074_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJN_S, existT _ _s5075_ _) =>
           (match (string_drop _s5074_ _s5075_) with
            | _s5076_ =>
               (spc_matches_prefix _s5076_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5077_ _) =>
                   (match (string_drop _s5076_ _s5077_) with
                    | _s5078_ =>
                       (freg_name_matches_prefix _s5078_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5079_ _) =>
                           (match (string_drop _s5078_ _s5079_) with
                            | _s5080_ =>
                               (sep_matches_prefix _s5080_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5081_ _) =>
                                   (match (string_drop _s5080_ _s5081_) with
                                    | _s5082_ =>
                                       (freg_name_matches_prefix _s5082_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5083_ _) =>
                                           (match (string_drop _s5082_ _s5083_) with
                                            | _s5084_ =>
                                               (sep_matches_prefix _s5084_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5085_ _) =>
                                                   (match (string_drop _s5084_ _s5085_) with
                                                    | _s5086_ =>
                                                       (freg_name_matches_prefix _s5086_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5087_ _) =>
                                                                   match (string_drop _s5086_
                                                                            _s5087_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FSGNJN_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5055_ (_s5056_ : string)
: M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s5056_ with
    | _s5057_ =>
       (f_bin_type_mnemonic_S_matches_prefix _s5057_) >>= fun w__0 : option ((f_bin_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSGNJ_S, existT _ _s5058_ _) =>
           (match (string_drop _s5057_ _s5058_) with
            | _s5059_ =>
               (spc_matches_prefix _s5059_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5060_ _) =>
                   (match (string_drop _s5059_ _s5060_) with
                    | _s5061_ =>
                       (freg_name_matches_prefix _s5061_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5062_ _) =>
                           (match (string_drop _s5061_ _s5062_) with
                            | _s5063_ =>
                               (sep_matches_prefix _s5063_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5064_ _) =>
                                   (match (string_drop _s5063_ _s5064_) with
                                    | _s5065_ =>
                                       (freg_name_matches_prefix _s5065_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5066_ _) =>
                                           (match (string_drop _s5065_ _s5066_) with
                                            | _s5067_ =>
                                               (sep_matches_prefix _s5067_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5068_ _) =>
                                                   (match (string_drop _s5067_ _s5068_) with
                                                    | _s5069_ =>
                                                       (freg_name_matches_prefix _s5069_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s5070_ _) =>
                                                                   match (string_drop _s5069_
                                                                            _s5070_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FSGNJ_S, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string))).

Definition _s5038_ (_s5039_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s5039_ with
    | _s5040_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s5040_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_LU, existT _ _s5041_ _) =>
           (match (string_drop _s5040_ _s5041_) with
            | _s5042_ =>
               (spc_matches_prefix _s5042_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5043_ _) =>
                   (match (string_drop _s5042_ _s5043_) with
                    | _s5044_ =>
                       (freg_name_matches_prefix _s5044_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5045_ _) =>
                           (match (string_drop _s5044_ _s5045_) with
                            | _s5046_ =>
                               (sep_matches_prefix _s5046_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5047_ _) =>
                                   (match (string_drop _s5046_ _s5047_) with
                                    | _s5048_ =>
                                       (reg_name_matches_prefix _s5048_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5049_ _) =>
                                           (match (string_drop _s5048_ _s5049_) with
                                            | _s5050_ =>
                                               (sep_matches_prefix _s5050_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5051_ _) =>
                                                   (match (string_drop _s5050_ _s5051_) with
                                                    | _s5052_ =>
                                                       (frm_mnemonic_matches_prefix _s5052_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s5053_ _) =>
                                                                   match (string_drop _s5052_
                                                                            _s5053_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_S_LU, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s5021_ (_s5022_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s5022_ with
    | _s5023_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s5023_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_L, existT _ _s5024_ _) =>
           (match (string_drop _s5023_ _s5024_) with
            | _s5025_ =>
               (spc_matches_prefix _s5025_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5026_ _) =>
                   (match (string_drop _s5025_ _s5026_) with
                    | _s5027_ =>
                       (freg_name_matches_prefix _s5027_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5028_ _) =>
                           (match (string_drop _s5027_ _s5028_) with
                            | _s5029_ =>
                               (sep_matches_prefix _s5029_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5030_ _) =>
                                   (match (string_drop _s5029_ _s5030_) with
                                    | _s5031_ =>
                                       (reg_name_matches_prefix _s5031_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5032_ _) =>
                                           (match (string_drop _s5031_ _s5032_) with
                                            | _s5033_ =>
                                               (sep_matches_prefix _s5033_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5034_ _) =>
                                                   (match (string_drop _s5033_ _s5034_) with
                                                    | _s5035_ =>
                                                       (frm_mnemonic_matches_prefix _s5035_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s5036_ _) =>
                                                                   match (string_drop _s5035_
                                                                            _s5036_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_S_L, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s5004_ (_s5005_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s5005_ with
    | _s5006_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s5006_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_LU_S, existT _ _s5007_ _) =>
           (match (string_drop _s5006_ _s5007_) with
            | _s5008_ =>
               (spc_matches_prefix _s5008_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s5009_ _) =>
                   (match (string_drop _s5008_ _s5009_) with
                    | _s5010_ =>
                       (reg_name_matches_prefix _s5010_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s5011_ _) =>
                           (match (string_drop _s5010_ _s5011_) with
                            | _s5012_ =>
                               (sep_matches_prefix _s5012_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s5013_ _) =>
                                   (match (string_drop _s5012_ _s5013_) with
                                    | _s5014_ =>
                                       (freg_name_matches_prefix _s5014_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s5015_ _) =>
                                           (match (string_drop _s5014_ _s5015_) with
                                            | _s5016_ =>
                                               (sep_matches_prefix _s5016_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5017_ _) =>
                                                   (match (string_drop _s5016_ _s5017_) with
                                                    | _s5018_ =>
                                                       (frm_mnemonic_matches_prefix _s5018_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s5019_ _) =>
                                                                   match (string_drop _s5018_
                                                                            _s5019_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_LU_S, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4987_ (_s4988_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4988_ with
    | _s4989_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s4989_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_L_S, existT _ _s4990_ _) =>
           (match (string_drop _s4989_ _s4990_) with
            | _s4991_ =>
               (spc_matches_prefix _s4991_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4992_ _) =>
                   (match (string_drop _s4991_ _s4992_) with
                    | _s4993_ =>
                       (reg_name_matches_prefix _s4993_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4994_ _) =>
                           (match (string_drop _s4993_ _s4994_) with
                            | _s4995_ =>
                               (sep_matches_prefix _s4995_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4996_ _) =>
                                   (match (string_drop _s4995_ _s4996_) with
                                    | _s4997_ =>
                                       (freg_name_matches_prefix _s4997_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4998_ _) =>
                                           (match (string_drop _s4997_ _s4998_) with
                                            | _s4999_ =>
                                               (sep_matches_prefix _s4999_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s5000_ _) =>
                                                   (match (string_drop _s4999_ _s5000_) with
                                                    | _s5001_ =>
                                                       (frm_mnemonic_matches_prefix _s5001_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s5002_ _) =>
                                                                   match (string_drop _s5001_
                                                                            _s5002_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_L_S, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4970_ (_s4971_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4971_ with
    | _s4972_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s4972_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_WU, existT _ _s4973_ _) =>
           (match (string_drop _s4972_ _s4973_) with
            | _s4974_ =>
               (spc_matches_prefix _s4974_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4975_ _) =>
                   (match (string_drop _s4974_ _s4975_) with
                    | _s4976_ =>
                       (freg_name_matches_prefix _s4976_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4977_ _) =>
                           (match (string_drop _s4976_ _s4977_) with
                            | _s4978_ =>
                               (sep_matches_prefix _s4978_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4979_ _) =>
                                   (match (string_drop _s4978_ _s4979_) with
                                    | _s4980_ =>
                                       (reg_name_matches_prefix _s4980_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4981_ _) =>
                                           (match (string_drop _s4980_ _s4981_) with
                                            | _s4982_ =>
                                               (sep_matches_prefix _s4982_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4983_ _) =>
                                                   (match (string_drop _s4982_ _s4983_) with
                                                    | _s4984_ =>
                                                       (frm_mnemonic_matches_prefix _s4984_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s4985_ _) =>
                                                                   match (string_drop _s4984_
                                                                            _s4985_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_S_WU, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4953_ (_s4954_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4954_ with
    | _s4955_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s4955_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_S_W, existT _ _s4956_ _) =>
           (match (string_drop _s4955_ _s4956_) with
            | _s4957_ =>
               (spc_matches_prefix _s4957_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4958_ _) =>
                   (match (string_drop _s4957_ _s4958_) with
                    | _s4959_ =>
                       (freg_name_matches_prefix _s4959_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4960_ _) =>
                           (match (string_drop _s4959_ _s4960_) with
                            | _s4961_ =>
                               (sep_matches_prefix _s4961_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4962_ _) =>
                                   (match (string_drop _s4961_ _s4962_) with
                                    | _s4963_ =>
                                       (reg_name_matches_prefix _s4963_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4964_ _) =>
                                           (match (string_drop _s4963_ _s4964_) with
                                            | _s4965_ =>
                                               (sep_matches_prefix _s4965_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4966_ _) =>
                                                   (match (string_drop _s4965_ _s4966_) with
                                                    | _s4967_ =>
                                                       (frm_mnemonic_matches_prefix _s4967_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s4968_ _) =>
                                                                   match (string_drop _s4967_
                                                                            _s4968_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_S_W, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4936_ (_s4937_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4937_ with
    | _s4938_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s4938_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_WU_S, existT _ _s4939_ _) =>
           (match (string_drop _s4938_ _s4939_) with
            | _s4940_ =>
               (spc_matches_prefix _s4940_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4941_ _) =>
                   (match (string_drop _s4940_ _s4941_) with
                    | _s4942_ =>
                       (reg_name_matches_prefix _s4942_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4943_ _) =>
                           (match (string_drop _s4942_ _s4943_) with
                            | _s4944_ =>
                               (sep_matches_prefix _s4944_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4945_ _) =>
                                   (match (string_drop _s4944_ _s4945_) with
                                    | _s4946_ =>
                                       (freg_name_matches_prefix _s4946_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4947_ _) =>
                                           (match (string_drop _s4946_ _s4947_) with
                                            | _s4948_ =>
                                               (sep_matches_prefix _s4948_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4949_ _) =>
                                                   (match (string_drop _s4948_ _s4949_) with
                                                    | _s4950_ =>
                                                       (frm_mnemonic_matches_prefix _s4950_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s4951_ _) =>
                                                                   match (string_drop _s4950_
                                                                            _s4951_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_WU_S, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4919_ (_s4920_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4920_ with
    | _s4921_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s4921_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FCVT_W_S, existT _ _s4922_ _) =>
           (match (string_drop _s4921_ _s4922_) with
            | _s4923_ =>
               (spc_matches_prefix _s4923_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4924_ _) =>
                   (match (string_drop _s4923_ _s4924_) with
                    | _s4925_ =>
                       (reg_name_matches_prefix _s4925_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4926_ _) =>
                           (match (string_drop _s4925_ _s4926_) with
                            | _s4927_ =>
                               (sep_matches_prefix _s4927_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4928_ _) =>
                                   (match (string_drop _s4927_ _s4928_) with
                                    | _s4929_ =>
                                       (freg_name_matches_prefix _s4929_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4930_ _) =>
                                           (match (string_drop _s4929_ _s4930_) with
                                            | _s4931_ =>
                                               (sep_matches_prefix _s4931_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4932_ _) =>
                                                   (match (string_drop _s4931_ _s4932_) with
                                                    | _s4933_ =>
                                                       (frm_mnemonic_matches_prefix _s4933_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s4934_ _) =>
                                                                   match (string_drop _s4933_
                                                                            _s4934_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FCVT_W_S, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4902_ (_s4903_ : string)
: M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4903_ with
    | _s4904_ =>
       (f_un_rm_type_mnemonic_S_matches_prefix _s4904_) >>= fun w__0 : option ((f_un_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (FSQRT_S, existT _ _s4905_ _) =>
           (match (string_drop _s4904_ _s4905_) with
            | _s4906_ =>
               (spc_matches_prefix _s4906_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4907_ _) =>
                   (match (string_drop _s4906_ _s4907_) with
                    | _s4908_ =>
                       (freg_name_matches_prefix _s4908_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4909_ _) =>
                           (match (string_drop _s4908_ _s4909_) with
                            | _s4910_ =>
                               (sep_matches_prefix _s4910_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4911_ _) =>
                                   (match (string_drop _s4910_ _s4911_) with
                                    | _s4912_ =>
                                       (freg_name_matches_prefix _s4912_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4913_ _) =>
                                           (match (string_drop _s4912_ _s4913_) with
                                            | _s4914_ =>
                                               (sep_matches_prefix _s4914_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4915_ _) =>
                                                   (match (string_drop _s4914_ _s4915_) with
                                                    | _s4916_ =>
                                                       (frm_mnemonic_matches_prefix _s4916_) >>= fun w__6 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rm, existT _ _s4917_ _) =>
                                                                   match (string_drop _s4916_
                                                                            _s4917_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (FSQRT_S, rd, rs1, rm, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4881_ (_s4882_ : string)
: M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4882_ with
    | _s4883_ =>
       (f_bin_rm_type_mnemonic_S_matches_prefix _s4883_) >>= fun w__0 : option ((f_bin_rm_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4884_ _) =>
           (match (string_drop _s4883_ _s4884_) with
            | _s4885_ =>
               (spc_matches_prefix _s4885_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4886_ _) =>
                   (match (string_drop _s4885_ _s4886_) with
                    | _s4887_ =>
                       (freg_name_matches_prefix _s4887_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4888_ _) =>
                           (match (string_drop _s4887_ _s4888_) with
                            | _s4889_ =>
                               (sep_matches_prefix _s4889_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4890_ _) =>
                                   (match (string_drop _s4889_ _s4890_) with
                                    | _s4891_ =>
                                       (freg_name_matches_prefix _s4891_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4892_ _) =>
                                           (match (string_drop _s4891_ _s4892_) with
                                            | _s4893_ =>
                                               (sep_matches_prefix _s4893_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4894_ _) =>
                                                   (match (string_drop _s4893_ _s4894_) with
                                                    | _s4895_ =>
                                                       (freg_name_matches_prefix _s4895_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       (match w__6 with
                                                        | Some (rs2, existT _ _s4896_ _) =>
                                                           (match (string_drop _s4895_ _s4896_) with
                                                            | _s4897_ =>
                                                               (sep_matches_prefix _s4897_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                 0)})) =>
                                                               (match w__7 with
                                                                | Some (tt, existT _ _s4898_ _) =>
                                                                   (match (string_drop _s4897_
                                                                             _s4898_) with
                                                                    | _s4899_ =>
                                                                       (frm_mnemonic_matches_prefix
                                                                          _s4899_) >>= fun w__8 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                                         0)})) =>
                                                                       returnm (match w__8 with
                                                                                | Some
                                                                                  (rm, existT _ _s4900_ _) =>
                                                                                   match (string_drop
                                                                                            _s4899_
                                                                                            _s4900_) with
                                                                                   | s_ =>
                                                                                      Some
                                                                                        (op, rd, rs1, rs2, rm, s_)
                                                                                   end
                                                                                | _ => None
                                                                                end)
                                                                    end)
                                                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                                | _ => returnm None
                                                                end)
                                                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                            end)
                                                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                        | _ => returnm None
                                                        end)
                                                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                    end)
                                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4856_ (_s4857_ : string)
: M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string))) :=
   (match _s4857_ with
    | _s4858_ =>
       (f_madd_type_mnemonic_S_matches_prefix _s4858_) >>= fun w__0 : option ((f_madd_op_S * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4859_ _) =>
           (match (string_drop _s4858_ _s4859_) with
            | _s4860_ =>
               (spc_matches_prefix _s4860_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4861_ _) =>
                   (match (string_drop _s4860_ _s4861_) with
                    | _s4862_ =>
                       (freg_name_matches_prefix _s4862_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4863_ _) =>
                           (match (string_drop _s4862_ _s4863_) with
                            | _s4864_ =>
                               (sep_matches_prefix _s4864_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4865_ _) =>
                                   (match (string_drop _s4864_ _s4865_) with
                                    | _s4866_ =>
                                       (freg_name_matches_prefix _s4866_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4867_ _) =>
                                           (match (string_drop _s4866_ _s4867_) with
                                            | _s4868_ =>
                                               (sep_matches_prefix _s4868_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4869_ _) =>
                                                   (match (string_drop _s4868_ _s4869_) with
                                                    | _s4870_ =>
                                                       (freg_name_matches_prefix _s4870_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       (match w__6 with
                                                        | Some (rs2, existT _ _s4871_ _) =>
                                                           (match (string_drop _s4870_ _s4871_) with
                                                            | _s4872_ =>
                                                               (sep_matches_prefix _s4872_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                 0)})) =>
                                                               (match w__7 with
                                                                | Some (tt, existT _ _s4873_ _) =>
                                                                   (match (string_drop _s4872_
                                                                             _s4873_) with
                                                                    | _s4874_ =>
                                                                       (freg_name_matches_prefix
                                                                          _s4874_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                         0)})) =>
                                                                       (match w__8 with
                                                                        | Some
                                                                          (rs3, existT _ _s4875_ _) =>
                                                                           (match (string_drop
                                                                                     _s4874_ _s4875_) with
                                                                            | _s4876_ =>
                                                                               (sep_matches_prefix
                                                                                  _s4876_) >>= fun w__9 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                 0)})) =>
                                                                               (match w__9 with
                                                                                | Some
                                                                                  (tt, existT _ _s4877_ _) =>
                                                                                   (match (string_drop
                                                                                             _s4876_
                                                                                             _s4877_) with
                                                                                    | _s4878_ =>
                                                                                       (frm_mnemonic_matches_prefix
                                                                                          _s4878_) >>= fun w__10 : option ((rounding_mode * {n : Z & ArithFact (n >=?
                                                                                         0)})) =>
                                                                                       returnm (match w__10 with
                                                                                                | Some
                                                                                                  (rm, existT _ _s4879_ _) =>
                                                                                                   match (string_drop
                                                                                                            _s4878_
                                                                                                            _s4879_) with
                                                                                                   | s_ =>
                                                                                                      Some
                                                                                                        (op, rd, rs1, rs2, rs3, rm, s_)
                                                                                                   end
                                                                                                | _ =>
                                                                                                   None
                                                                                                end)
                                                                                    end)
                                                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                                                | _ => returnm None
                                                                                end)
                                                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                                            end)
                                                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                                        | _ => returnm None
                                                                        end)
                                                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                                    end)
                                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                                | _ => returnm None
                                                                end)
                                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                            end)
                                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                        | _ => returnm None
                                                        end)
                                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                    end)
                                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                            end)
                                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                    end)
                                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                                | _ => returnm None
                                end)
                                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                            end)
                            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                        | _ => returnm None
                        end)
                        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                    end)
                    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
                | _ => returnm None
                end)
                : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
            end)
            : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
        | _ => returnm None
        end)
        : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)))
    end)
    : M (option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string))).

Definition _s4832_ (_s4833_ : string)
: M (option ((word_width * mword 5 * mword 12 * mword 5 * string))) :=
   let _s4834_ := _s4833_ in
   (if string_startswith _s4834_ "fs" then
      (match (string_drop _s4834_ (projT1 (string_length "fs"))) with
       | _s4835_ =>
          (size_mnemonic_matches_prefix _s4835_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (width, existT _ _s4836_ _) =>
              (match (string_drop _s4835_ _s4836_) with
               | _s4837_ =>
                  (spc_matches_prefix _s4837_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s4838_ _) =>
                      (match (string_drop _s4837_ _s4838_) with
                       | _s4839_ =>
                          (freg_name_matches_prefix _s4839_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rs2, existT _ _s4840_ _) =>
                              (match (string_drop _s4839_ _s4840_) with
                               | _s4841_ =>
                                  (sep_matches_prefix _s4841_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4842_ _) =>
                                      (match (string_drop _s4841_ _s4842_) with
                                       | _s4843_ =>
                                          (match (hex_bits_12_matches_prefix _s4843_) with
                                           | Some (imm, existT _ _s4844_ _) =>
                                              (match (string_drop _s4843_ _s4844_) with
                                               | _s4845_ =>
                                                  (opt_spc_matches_prefix _s4845_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__4 with
                                                   | Some (tt, existT _ _s4846_ _) =>
                                                      let _s4847_ := string_drop _s4845_ _s4846_ in
                                                      (if string_startswith _s4847_ "(" then
                                                         (match (string_drop _s4847_
                                                                   (projT1
                                                                    (string_length "("))) with
                                                          | _s4848_ =>
                                                             (opt_spc_matches_prefix _s4848_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             (match w__5 with
                                                              | Some (tt, existT _ _s4849_ _) =>
                                                                 (match (string_drop _s4848_ _s4849_) with
                                                                  | _s4850_ =>
                                                                     (reg_name_matches_prefix
                                                                        _s4850_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                       0)})) =>
                                                                     (match w__6 with
                                                                      | Some
                                                                        (rs1, existT _ _s4851_ _) =>
                                                                         (match (string_drop _s4850_
                                                                                   _s4851_) with
                                                                          | _s4852_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s4852_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             returnm (match w__7 with
                                                                                      | Some
                                                                                        (tt, existT _ _s4853_ _) =>
                                                                                         let _s4854_ :=
                                                                                           string_drop
                                                                                             _s4852_
                                                                                             _s4853_ in
                                                                                         if string_startswith
                                                                                              _s4854_
                                                                                              ")"
                                                                                         then
                                                                                           match (string_drop
                                                                                                    _s4854_
                                                                                                    (projT1
                                                                                                     (string_length
                                                                                                        ")"))) with
                                                                                           | s_ =>
                                                                                              Some
                                                                                                (width, rs2, imm, rs1, s_)
                                                                                           end
                                                                                         else None
                                                                                      | _ => None
                                                                                      end)
                                                                          end)
                                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                                      | _ => returnm None
                                                                      end)
                                                                      : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                                  end)
                                                                  : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                              | _ => returnm None
                                                              end)
                                                              : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                          end)
                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                       else returnm None)
                                                       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                               end)
                                               : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                       end)
                                       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                               end)
                               : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                       end)
                       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
               end)
               : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
       end)
       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
    else returnm None)
    : M (option ((word_width * mword 5 * mword 12 * mword 5 * string))).

Definition _s4808_ (_s4809_ : string)
: M (option ((word_width * mword 5 * mword 12 * mword 5 * string))) :=
   let _s4810_ := _s4809_ in
   (if string_startswith _s4810_ "fl" then
      (match (string_drop _s4810_ (projT1 (string_length "fl"))) with
       | _s4811_ =>
          (size_mnemonic_matches_prefix _s4811_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (width, existT _ _s4812_ _) =>
              (match (string_drop _s4811_ _s4812_) with
               | _s4813_ =>
                  (spc_matches_prefix _s4813_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s4814_ _) =>
                      (match (string_drop _s4813_ _s4814_) with
                       | _s4815_ =>
                          (freg_name_matches_prefix _s4815_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s4816_ _) =>
                              (match (string_drop _s4815_ _s4816_) with
                               | _s4817_ =>
                                  (sep_matches_prefix _s4817_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4818_ _) =>
                                      (match (string_drop _s4817_ _s4818_) with
                                       | _s4819_ =>
                                          (match (hex_bits_12_matches_prefix _s4819_) with
                                           | Some (imm, existT _ _s4820_ _) =>
                                              (match (string_drop _s4819_ _s4820_) with
                                               | _s4821_ =>
                                                  (opt_spc_matches_prefix _s4821_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__4 with
                                                   | Some (tt, existT _ _s4822_ _) =>
                                                      let _s4823_ := string_drop _s4821_ _s4822_ in
                                                      (if string_startswith _s4823_ "(" then
                                                         (match (string_drop _s4823_
                                                                   (projT1
                                                                    (string_length "("))) with
                                                          | _s4824_ =>
                                                             (opt_spc_matches_prefix _s4824_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             (match w__5 with
                                                              | Some (tt, existT _ _s4825_ _) =>
                                                                 (match (string_drop _s4824_ _s4825_) with
                                                                  | _s4826_ =>
                                                                     (reg_name_matches_prefix
                                                                        _s4826_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                       0)})) =>
                                                                     (match w__6 with
                                                                      | Some
                                                                        (rs1, existT _ _s4827_ _) =>
                                                                         (match (string_drop _s4826_
                                                                                   _s4827_) with
                                                                          | _s4828_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s4828_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             returnm (match w__7 with
                                                                                      | Some
                                                                                        (tt, existT _ _s4829_ _) =>
                                                                                         let _s4830_ :=
                                                                                           string_drop
                                                                                             _s4828_
                                                                                             _s4829_ in
                                                                                         if string_startswith
                                                                                              _s4830_
                                                                                              ")"
                                                                                         then
                                                                                           match (string_drop
                                                                                                    _s4830_
                                                                                                    (projT1
                                                                                                     (string_length
                                                                                                        ")"))) with
                                                                                           | s_ =>
                                                                                              Some
                                                                                                (width, rd, imm, rs1, s_)
                                                                                           end
                                                                                         else None
                                                                                      | _ => None
                                                                                      end)
                                                                          end)
                                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                                      | _ => returnm None
                                                                      end)
                                                                      : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                                  end)
                                                                  : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                              | _ => returnm None
                                                              end)
                                                              : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                          end)
                                                          : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                       else returnm None)
                                                       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                               end)
                                               : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                       end)
                                       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                               end)
                               : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                       end)
                       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
               end)
               : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
       end)
       : M (option ((word_width * mword 5 * mword 12 * mword 5 * string)))
    else returnm None)
    : M (option ((word_width * mword 5 * mword 12 * mword 5 * string))).

Definition _s4804_ (_s4805_ : string) : option string :=
   let _s4806_ := _s4805_ in
   if string_startswith _s4806_ "uret" then
     match (string_drop _s4806_ (projT1 (string_length "uret"))) with | s_ => Some s_ end
   else None.

Definition _s4787_ (_s4788_ : string) : M (option ((csrop * mword 5 * mword 12 * mword 5 * string))) :=
   (match _s4788_ with
    | _s4789_ =>
       (csr_mnemonic_matches_prefix _s4789_) >>= fun w__0 : option ((csrop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4790_ _) =>
           (match (string_drop _s4789_ _s4790_) with
            | _s4791_ =>
               (spc_matches_prefix _s4791_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4792_ _) =>
                   (match (string_drop _s4791_ _s4792_) with
                    | _s4793_ =>
                       (reg_name_matches_prefix _s4793_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4794_ _) =>
                           (match (string_drop _s4793_ _s4794_) with
                            | _s4795_ =>
                               (sep_matches_prefix _s4795_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4796_ _) =>
                                   (match (string_drop _s4795_ _s4796_) with
                                    | _s4797_ =>
                                       (csr_name_map_matches_prefix _s4797_) >>= fun w__4 : option ((mword 12 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (csr, existT _ _s4798_ _) =>
                                           (match (string_drop _s4797_ _s4798_) with
                                            | _s4799_ =>
                                               (sep_matches_prefix _s4799_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4800_ _) =>
                                                   (match (string_drop _s4799_ _s4800_) with
                                                    | _s4801_ =>
                                                       (reg_name_matches_prefix _s4801_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs1, existT _ _s4802_ _) =>
                                                                   match (string_drop _s4801_
                                                                            _s4802_) with
                                                                   | s_ =>
                                                                      Some (op, rd, csr, rs1, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                            end)
                                            : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                    end)
                                    : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                            end)
                            : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                    end)
                    : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
            end)
            : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
    end)
    : M (option ((csrop * mword 5 * mword 12 * mword 5 * string))).

Definition _s4769_ (_s4770_ : string) : M (option ((csrop * mword 5 * mword 12 * mword 5 * string))) :=
   (match _s4770_ with
    | _s4771_ =>
       (csr_mnemonic_matches_prefix _s4771_) >>= fun w__0 : option ((csrop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4772_ _) =>
           let _s4773_ := string_drop _s4771_ _s4772_ in
           (if string_startswith _s4773_ "i" then
              (match (string_drop _s4773_ (projT1 (string_length "i"))) with
               | _s4774_ =>
                  (spc_matches_prefix _s4774_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s4775_ _) =>
                      (match (string_drop _s4774_ _s4775_) with
                       | _s4776_ =>
                          (reg_name_matches_prefix _s4776_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s4777_ _) =>
                              (match (string_drop _s4776_ _s4777_) with
                               | _s4778_ =>
                                  (sep_matches_prefix _s4778_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4779_ _) =>
                                      (match (string_drop _s4778_ _s4779_) with
                                       | _s4780_ =>
                                          (csr_name_map_matches_prefix _s4780_) >>= fun w__4 : option ((mword 12 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (csr, existT _ _s4781_ _) =>
                                              (match (string_drop _s4780_ _s4781_) with
                                               | _s4782_ =>
                                                  (sep_matches_prefix _s4782_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  returnm (match w__5 with
                                                           | Some (tt, existT _ _s4783_ _) =>
                                                              match (string_drop _s4782_ _s4783_) with
                                                              | _s4784_ =>
                                                                 match (hex_bits_5_matches_prefix
                                                                          _s4784_) with
                                                                 | Some (rs1, existT _ _s4785_ _) =>
                                                                    match (string_drop _s4784_
                                                                             _s4785_) with
                                                                    | s_ =>
                                                                       Some (op, rd, csr, rs1, s_)
                                                                    end
                                                                 | _ => None
                                                                 end
                                                              end
                                                           | _ => None
                                                           end)
                                               end)
                                               : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                       end)
                                       : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                               end)
                               : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                       end)
                       : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
               end)
               : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
            else returnm None)
            : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((csrop * mword 5 * mword 12 * mword 5 * string)))
    end)
    : M (option ((csrop * mword 5 * mword 12 * mword 5 * string))).

Definition _s4750_ (_s4751_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5 * string))) :=
   let _s4752_ := _s4751_ in
   (if string_startswith _s4752_ "rem" then
      (match (string_drop _s4752_ (projT1 (string_length "rem"))) with
       | _s4753_ =>
          (maybe_not_u_matches_prefix _s4753_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s4754_ _) =>
              let _s4755_ := string_drop _s4753_ _s4754_ in
              (if string_startswith _s4755_ "w" then
                 (match (string_drop _s4755_ (projT1 (string_length "w"))) with
                  | _s4756_ =>
                     (spc_matches_prefix _s4756_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                       0)})) =>
                     (match w__1 with
                      | Some (tt, existT _ _s4757_ _) =>
                         (match (string_drop _s4756_ _s4757_) with
                          | _s4758_ =>
                             (reg_name_matches_prefix _s4758_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                               0)})) =>
                             (match w__2 with
                              | Some (rd, existT _ _s4759_ _) =>
                                 (match (string_drop _s4758_ _s4759_) with
                                  | _s4760_ =>
                                     (sep_matches_prefix _s4760_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                       0)})) =>
                                     (match w__3 with
                                      | Some (tt, existT _ _s4761_ _) =>
                                         (match (string_drop _s4760_ _s4761_) with
                                          | _s4762_ =>
                                             (reg_name_matches_prefix _s4762_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                               0)})) =>
                                             (match w__4 with
                                              | Some (rs1, existT _ _s4763_ _) =>
                                                 (match (string_drop _s4762_ _s4763_) with
                                                  | _s4764_ =>
                                                     (sep_matches_prefix _s4764_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                       0)})) =>
                                                     (match w__5 with
                                                      | Some (tt, existT _ _s4765_ _) =>
                                                         (match (string_drop _s4764_ _s4765_) with
                                                          | _s4766_ =>
                                                             (reg_name_matches_prefix _s4766_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             returnm (match w__6 with
                                                                      | Some
                                                                        (rs2, existT _ _s4767_ _) =>
                                                                         match (string_drop _s4766_
                                                                                  _s4767_) with
                                                                         | s_ =>
                                                                            Some
                                                                              (s, rd, rs1, rs2, s_)
                                                                         end
                                                                      | _ => None
                                                                      end)
                                                          end)
                                                          : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                                      | _ => returnm None
                                                      end)
                                                      : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                                  end)
                                                  : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                              | _ => returnm None
                                              end)
                                              : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                          end)
                                          : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                      | _ => returnm None
                                      end)
                                      : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                  end)
                                  : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                              | _ => returnm None
                              end)
                              : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                          end)
                          : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                      | _ => returnm None
                      end)
                      : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                  end)
                  : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
               else returnm None)
               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4731_ (_s4732_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5 * string))) :=
   let _s4733_ := _s4732_ in
   (if string_startswith _s4733_ "div" then
      (match (string_drop _s4733_ (projT1 (string_length "div"))) with
       | _s4734_ =>
          (maybe_not_u_matches_prefix _s4734_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s4735_ _) =>
              let _s4736_ := string_drop _s4734_ _s4735_ in
              (if string_startswith _s4736_ "w" then
                 (match (string_drop _s4736_ (projT1 (string_length "w"))) with
                  | _s4737_ =>
                     (spc_matches_prefix _s4737_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                       0)})) =>
                     (match w__1 with
                      | Some (tt, existT _ _s4738_ _) =>
                         (match (string_drop _s4737_ _s4738_) with
                          | _s4739_ =>
                             (reg_name_matches_prefix _s4739_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                               0)})) =>
                             (match w__2 with
                              | Some (rd, existT _ _s4740_ _) =>
                                 (match (string_drop _s4739_ _s4740_) with
                                  | _s4741_ =>
                                     (sep_matches_prefix _s4741_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                       0)})) =>
                                     (match w__3 with
                                      | Some (tt, existT _ _s4742_ _) =>
                                         (match (string_drop _s4741_ _s4742_) with
                                          | _s4743_ =>
                                             (reg_name_matches_prefix _s4743_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                               0)})) =>
                                             (match w__4 with
                                              | Some (rs1, existT _ _s4744_ _) =>
                                                 (match (string_drop _s4743_ _s4744_) with
                                                  | _s4745_ =>
                                                     (sep_matches_prefix _s4745_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                       0)})) =>
                                                     (match w__5 with
                                                      | Some (tt, existT _ _s4746_ _) =>
                                                         (match (string_drop _s4745_ _s4746_) with
                                                          | _s4747_ =>
                                                             (reg_name_matches_prefix _s4747_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                               0)})) =>
                                                             returnm (match w__6 with
                                                                      | Some
                                                                        (rs2, existT _ _s4748_ _) =>
                                                                         match (string_drop _s4747_
                                                                                  _s4748_) with
                                                                         | s_ =>
                                                                            Some
                                                                              (s, rd, rs1, rs2, s_)
                                                                         end
                                                                      | _ => None
                                                                      end)
                                                          end)
                                                          : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                                      | _ => returnm None
                                                      end)
                                                      : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                                  end)
                                                  : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                              | _ => returnm None
                                              end)
                                              : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                          end)
                                          : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                      | _ => returnm None
                                      end)
                                      : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                  end)
                                  : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                              | _ => returnm None
                              end)
                              : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                          end)
                          : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                      | _ => returnm None
                      end)
                      : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                  end)
                  : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
               else returnm None)
               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4715_ (_s4716_ : string) : M (option ((mword 5 * mword 5 * mword 5 * string))) :=
   let _s4717_ := _s4716_ in
   (if string_startswith _s4717_ "mulw" then
      (match (string_drop _s4717_ (projT1 (string_length "mulw"))) with
       | _s4718_ =>
          (spc_matches_prefix _s4718_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4719_ _) =>
              (match (string_drop _s4718_ _s4719_) with
               | _s4720_ =>
                  (reg_name_matches_prefix _s4720_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4721_ _) =>
                      (match (string_drop _s4720_ _s4721_) with
                       | _s4722_ =>
                          (sep_matches_prefix _s4722_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4723_ _) =>
                              (match (string_drop _s4722_ _s4723_) with
                               | _s4724_ =>
                                  (reg_name_matches_prefix _s4724_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s4725_ _) =>
                                      (match (string_drop _s4724_ _s4725_) with
                                       | _s4726_ =>
                                          (sep_matches_prefix _s4726_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s4727_ _) =>
                                              (match (string_drop _s4726_ _s4727_) with
                                               | _s4728_ =>
                                                  (reg_name_matches_prefix _s4728_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  returnm (match w__5 with
                                                           | Some (rs2, existT _ _s4729_ _) =>
                                                              match (string_drop _s4728_ _s4729_) with
                                                              | s_ => Some (rd, rs1, rs2, s_)
                                                              end
                                                           | _ => None
                                                           end)
                                               end)
                                               : M (option ((mword 5 * mword 5 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((mword 5 * mword 5 * mword 5 * string)))
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 5 * string)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 5 * string)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 5 * string)))
               end)
               : M (option ((mword 5 * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 5 * string)))
       end)
       : M (option ((mword 5 * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 5 * string))).

Definition _s4697_ (_s4698_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5 * string))) :=
   let _s4699_ := _s4698_ in
   (if string_startswith _s4699_ "rem" then
      (match (string_drop _s4699_ (projT1 (string_length "rem"))) with
       | _s4700_ =>
          (maybe_not_u_matches_prefix _s4700_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s4701_ _) =>
              (match (string_drop _s4700_ _s4701_) with
               | _s4702_ =>
                  (spc_matches_prefix _s4702_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s4703_ _) =>
                      (match (string_drop _s4702_ _s4703_) with
                       | _s4704_ =>
                          (reg_name_matches_prefix _s4704_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s4705_ _) =>
                              (match (string_drop _s4704_ _s4705_) with
                               | _s4706_ =>
                                  (sep_matches_prefix _s4706_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4707_ _) =>
                                      (match (string_drop _s4706_ _s4707_) with
                                       | _s4708_ =>
                                          (reg_name_matches_prefix _s4708_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs1, existT _ _s4709_ _) =>
                                              (match (string_drop _s4708_ _s4709_) with
                                               | _s4710_ =>
                                                  (sep_matches_prefix _s4710_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s4711_ _) =>
                                                      (match (string_drop _s4710_ _s4711_) with
                                                       | _s4712_ =>
                                                          (reg_name_matches_prefix _s4712_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs2, existT _ _s4713_ _) =>
                                                                      match (string_drop _s4712_
                                                                               _s4713_) with
                                                                      | s_ =>
                                                                         Some (s, rd, rs1, rs2, s_)
                                                                      end
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                               end)
                                               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                       end)
                                       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                               end)
                               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                       end)
                       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
               end)
               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4679_ (_s4680_ : string) : M (option ((bool * mword 5 * mword 5 * mword 5 * string))) :=
   let _s4681_ := _s4680_ in
   (if string_startswith _s4681_ "div" then
      (match (string_drop _s4681_ (projT1 (string_length "div"))) with
       | _s4682_ =>
          (maybe_not_u_matches_prefix _s4682_) >>= fun w__0 : option ((bool * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (s, existT _ _s4683_ _) =>
              (match (string_drop _s4682_ _s4683_) with
               | _s4684_ =>
                  (spc_matches_prefix _s4684_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (tt, existT _ _s4685_ _) =>
                      (match (string_drop _s4684_ _s4685_) with
                       | _s4686_ =>
                          (reg_name_matches_prefix _s4686_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rd, existT _ _s4687_ _) =>
                              (match (string_drop _s4686_ _s4687_) with
                               | _s4688_ =>
                                  (sep_matches_prefix _s4688_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4689_ _) =>
                                      (match (string_drop _s4688_ _s4689_) with
                                       | _s4690_ =>
                                          (reg_name_matches_prefix _s4690_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs1, existT _ _s4691_ _) =>
                                              (match (string_drop _s4690_ _s4691_) with
                                               | _s4692_ =>
                                                  (sep_matches_prefix _s4692_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s4693_ _) =>
                                                      (match (string_drop _s4692_ _s4693_) with
                                                       | _s4694_ =>
                                                          (reg_name_matches_prefix _s4694_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs2, existT _ _s4695_ _) =>
                                                                      match (string_drop _s4694_
                                                                               _s4695_) with
                                                                      | s_ =>
                                                                         Some (s, rd, rs1, rs2, s_)
                                                                      end
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                               end)
                                               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                       end)
                                       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                               end)
                               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                       end)
                       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
               end)
               : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
       end)
       : M (option ((bool * mword 5 * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4662_ (_s4663_ : string)
: M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s4663_ with
    | _s4664_ =>
       (mul_mnemonic_matches_prefix _s4664_) >>= fun w__0 : option (((bool * bool * bool) * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some ((high, signed1, signed2), existT _ _s4665_ _) =>
           (match (string_drop _s4664_ _s4665_) with
            | _s4666_ =>
               (spc_matches_prefix _s4666_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4667_ _) =>
                   (match (string_drop _s4666_ _s4667_) with
                    | _s4668_ =>
                       (reg_name_matches_prefix _s4668_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4669_ _) =>
                           (match (string_drop _s4668_ _s4669_) with
                            | _s4670_ =>
                               (sep_matches_prefix _s4670_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4671_ _) =>
                                   (match (string_drop _s4670_ _s4671_) with
                                    | _s4672_ =>
                                       (reg_name_matches_prefix _s4672_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4673_ _) =>
                                           (match (string_drop _s4672_ _s4673_) with
                                            | _s4674_ =>
                                               (sep_matches_prefix _s4674_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4675_ _) =>
                                                   (match (string_drop _s4674_ _s4675_) with
                                                    | _s4676_ =>
                                                       (reg_name_matches_prefix _s4676_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s4677_ _) =>
                                                                   match (string_drop _s4676_
                                                                            _s4677_) with
                                                                   | s_ =>
                                                                      Some
                                                                        (high, signed1, signed2, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4650_ (_s4651_ : string) : M (option ((mword 5 * mword 5 * string))) :=
   let _s4652_ := _s4651_ in
   (if string_startswith _s4652_ "c.add" then
      (match (string_drop _s4652_ (projT1 (string_length "c.add"))) with
       | _s4653_ =>
          (spc_matches_prefix _s4653_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4654_ _) =>
              (match (string_drop _s4653_ _s4654_) with
               | _s4655_ =>
                  (reg_name_matches_prefix _s4655_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4656_ _) =>
                      (match (string_drop _s4655_ _s4656_) with
                       | _s4657_ =>
                          (sep_matches_prefix _s4657_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4658_ _) =>
                              (match (string_drop _s4657_ _s4658_) with
                               | _s4659_ =>
                                  (reg_name_matches_prefix _s4659_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4660_ _) =>
                                              match (string_drop _s4659_ _s4660_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * string)))
                       end)
                       : M (option ((mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * string)))
               end)
               : M (option ((mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * string)))
       end)
       : M (option ((mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * string))).

Definition _s4646_ (_s4647_ : string) : option string :=
   let _s4648_ := _s4647_ in
   if string_startswith _s4648_ "c.ebreak" then
     match (string_drop _s4648_ (projT1 (string_length "c.ebreak"))) with | s_ => Some s_ end
   else None.

Definition _s4634_ (_s4635_ : string) : M (option ((mword 5 * mword 5 * string))) :=
   let _s4636_ := _s4635_ in
   (if string_startswith _s4636_ "c.mv" then
      (match (string_drop _s4636_ (projT1 (string_length "c.mv"))) with
       | _s4637_ =>
          (spc_matches_prefix _s4637_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4638_ _) =>
              (match (string_drop _s4637_ _s4638_) with
               | _s4639_ =>
                  (reg_name_matches_prefix _s4639_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4640_ _) =>
                      (match (string_drop _s4639_ _s4640_) with
                       | _s4641_ =>
                          (sep_matches_prefix _s4641_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4642_ _) =>
                              (match (string_drop _s4641_ _s4642_) with
                               | _s4643_ =>
                                  (reg_name_matches_prefix _s4643_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4644_ _) =>
                                              match (string_drop _s4643_ _s4644_) with
                                              | s_ => Some (rd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * string)))
                       end)
                       : M (option ((mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * string)))
               end)
               : M (option ((mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * string)))
       end)
       : M (option ((mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * string))).

Definition _s4626_ (_s4627_ : string) : M (option ((mword 5 * string))) :=
   let _s4628_ := _s4627_ in
   (if string_startswith _s4628_ "c.jalr" then
      (match (string_drop _s4628_ (projT1 (string_length "c.jalr"))) with
       | _s4629_ =>
          (spc_matches_prefix _s4629_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4630_ _) =>
              (match (string_drop _s4629_ _s4630_) with
               | _s4631_ =>
                  (reg_name_matches_prefix _s4631_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (rs1, existT _ _s4632_ _) =>
                              match (string_drop _s4631_ _s4632_) with | s_ => Some (rs1, s_) end
                           | _ => None
                           end)
               end)
               : M (option ((mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * string)))
       end)
       : M (option ((mword 5 * string)))
    else returnm None)
    : M (option ((mword 5 * string))).

Definition _s4618_ (_s4619_ : string) : M (option ((mword 5 * string))) :=
   let _s4620_ := _s4619_ in
   (if string_startswith _s4620_ "c.jr" then
      (match (string_drop _s4620_ (projT1 (string_length "c.jr"))) with
       | _s4621_ =>
          (spc_matches_prefix _s4621_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4622_ _) =>
              (match (string_drop _s4621_ _s4622_) with
               | _s4623_ =>
                  (reg_name_matches_prefix _s4623_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  returnm (match w__1 with
                           | Some (rs1, existT _ _s4624_ _) =>
                              match (string_drop _s4623_ _s4624_) with | s_ => Some (rs1, s_) end
                           | _ => None
                           end)
               end)
               : M (option ((mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * string)))
       end)
       : M (option ((mword 5 * string)))
    else returnm None)
    : M (option ((mword 5 * string))).

Definition _s4606_ (_s4607_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4608_ := _s4607_ in
   (if string_startswith _s4608_ "c.sdsp" then
      (match (string_drop _s4608_ (projT1 (string_length "c.sdsp"))) with
       | _s4609_ =>
          (spc_matches_prefix _s4609_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4610_ _) =>
              (match (string_drop _s4609_ _s4610_) with
               | _s4611_ =>
                  (reg_name_matches_prefix _s4611_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs2, existT _ _s4612_ _) =>
                      (match (string_drop _s4611_ _s4612_) with
                       | _s4613_ =>
                          (sep_matches_prefix _s4613_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4614_ _) =>
                                      match (string_drop _s4613_ _s4614_) with
                                      | _s4615_ =>
                                         match (hex_bits_6_matches_prefix _s4615_) with
                                         | Some (uimm, existT _ _s4616_ _) =>
                                            match (string_drop _s4615_ _s4616_) with
                                            | s_ => Some (rs2, uimm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4594_ (_s4595_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4596_ := _s4595_ in
   (if string_startswith _s4596_ "c.swsp" then
      (match (string_drop _s4596_ (projT1 (string_length "c.swsp"))) with
       | _s4597_ =>
          (spc_matches_prefix _s4597_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4598_ _) =>
              (match (string_drop _s4597_ _s4598_) with
               | _s4599_ =>
                  (reg_name_matches_prefix _s4599_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4600_ _) =>
                      (match (string_drop _s4599_ _s4600_) with
                       | _s4601_ =>
                          (sep_matches_prefix _s4601_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4602_ _) =>
                                      match (string_drop _s4601_ _s4602_) with
                                      | _s4603_ =>
                                         match (hex_bits_6_matches_prefix _s4603_) with
                                         | Some (uimm, existT _ _s4604_ _) =>
                                            match (string_drop _s4603_ _s4604_) with
                                            | s_ => Some (rd, uimm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4582_ (_s4583_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4584_ := _s4583_ in
   (if string_startswith _s4584_ "c.ldsp" then
      (match (string_drop _s4584_ (projT1 (string_length "c.ldsp"))) with
       | _s4585_ =>
          (spc_matches_prefix _s4585_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4586_ _) =>
              (match (string_drop _s4585_ _s4586_) with
               | _s4587_ =>
                  (reg_name_matches_prefix _s4587_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4588_ _) =>
                      (match (string_drop _s4587_ _s4588_) with
                       | _s4589_ =>
                          (sep_matches_prefix _s4589_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4590_ _) =>
                                      match (string_drop _s4589_ _s4590_) with
                                      | _s4591_ =>
                                         match (hex_bits_6_matches_prefix _s4591_) with
                                         | Some (uimm, existT _ _s4592_ _) =>
                                            match (string_drop _s4591_ _s4592_) with
                                            | s_ => Some (rd, uimm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4570_ (_s4571_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4572_ := _s4571_ in
   (if string_startswith _s4572_ "c.lwsp" then
      (match (string_drop _s4572_ (projT1 (string_length "c.lwsp"))) with
       | _s4573_ =>
          (spc_matches_prefix _s4573_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4574_ _) =>
              (match (string_drop _s4573_ _s4574_) with
               | _s4575_ =>
                  (reg_name_matches_prefix _s4575_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4576_ _) =>
                      (match (string_drop _s4575_ _s4576_) with
                       | _s4577_ =>
                          (sep_matches_prefix _s4577_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4578_ _) =>
                                      match (string_drop _s4577_ _s4578_) with
                                      | _s4579_ =>
                                         match (hex_bits_6_matches_prefix _s4579_) with
                                         | Some (uimm, existT _ _s4580_ _) =>
                                            match (string_drop _s4579_ _s4580_) with
                                            | s_ => Some (rd, uimm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4558_ (_s4559_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4560_ := _s4559_ in
   (if string_startswith _s4560_ "c.slli" then
      (match (string_drop _s4560_ (projT1 (string_length "c.slli"))) with
       | _s4561_ =>
          (spc_matches_prefix _s4561_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4562_ _) =>
              (match (string_drop _s4561_ _s4562_) with
               | _s4563_ =>
                  (reg_name_matches_prefix _s4563_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4564_ _) =>
                      (match (string_drop _s4563_ _s4564_) with
                       | _s4565_ =>
                          (sep_matches_prefix _s4565_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4566_ _) =>
                                      match (string_drop _s4565_ _s4566_) with
                                      | _s4567_ =>
                                         match (hex_bits_6_matches_prefix _s4567_) with
                                         | Some (shamt, existT _ _s4568_ _) =>
                                            match (string_drop _s4567_ _s4568_) with
                                            | s_ => Some (rsd, shamt, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4546_ (_s4547_ : string) : M (option ((mword 3 * mword 8 * string))) :=
   let _s4548_ := _s4547_ in
   (if string_startswith _s4548_ "c.bnez" then
      (match (string_drop _s4548_ (projT1 (string_length "c.bnez"))) with
       | _s4549_ =>
          (spc_matches_prefix _s4549_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4550_ _) =>
              (match (string_drop _s4549_ _s4550_) with
               | _s4551_ =>
                  (creg_name_matches_prefix _s4551_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs, existT _ _s4552_ _) =>
                      (match (string_drop _s4551_ _s4552_) with
                       | _s4553_ =>
                          (sep_matches_prefix _s4553_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4554_ _) =>
                                      match (string_drop _s4553_ _s4554_) with
                                      | _s4555_ =>
                                         match (hex_bits_8_matches_prefix _s4555_) with
                                         | Some (imm, existT _ _s4556_ _) =>
                                            match (string_drop _s4555_ _s4556_) with
                                            | s_ => Some (rs, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8 * string)))
               end)
               : M (option ((mword 3 * mword 8 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8 * string)))
       end)
       : M (option ((mword 3 * mword 8 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 8 * string))).

Definition _s4534_ (_s4535_ : string) : M (option ((mword 3 * mword 8 * string))) :=
   let _s4536_ := _s4535_ in
   (if string_startswith _s4536_ "c.beqz" then
      (match (string_drop _s4536_ (projT1 (string_length "c.beqz"))) with
       | _s4537_ =>
          (spc_matches_prefix _s4537_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4538_ _) =>
              (match (string_drop _s4537_ _s4538_) with
               | _s4539_ =>
                  (creg_name_matches_prefix _s4539_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs, existT _ _s4540_ _) =>
                      (match (string_drop _s4539_ _s4540_) with
                       | _s4541_ =>
                          (sep_matches_prefix _s4541_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4542_ _) =>
                                      match (string_drop _s4541_ _s4542_) with
                                      | _s4543_ =>
                                         match (hex_bits_8_matches_prefix _s4543_) with
                                         | Some (imm, existT _ _s4544_ _) =>
                                            match (string_drop _s4543_ _s4544_) with
                                            | s_ => Some (rs, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8 * string)))
               end)
               : M (option ((mword 3 * mword 8 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8 * string)))
       end)
       : M (option ((mword 3 * mword 8 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 8 * string))).

Definition _s4526_ (_s4527_ : string) : M (option ((mword 11 * string))) :=
   let _s4528_ := _s4527_ in
   (if string_startswith _s4528_ "c.j" then
      (match (string_drop _s4528_ (projT1 (string_length "c.j"))) with
       | _s4529_ =>
          (spc_matches_prefix _s4529_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s4530_ _) =>
                      match (string_drop _s4529_ _s4530_) with
                      | _s4531_ =>
                         match (hex_bits_11_matches_prefix _s4531_) with
                         | Some (imm, existT _ _s4532_ _) =>
                            match (string_drop _s4531_ _s4532_) with | s_ => Some (imm, s_) end
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option ((mword 11 * string)))
    else returnm None)
    : M (option ((mword 11 * string))).

Definition _s4514_ (_s4515_ : string) : M (option ((mword 3 * mword 3 * string))) :=
   let _s4516_ := _s4515_ in
   (if string_startswith _s4516_ "c.addw" then
      (match (string_drop _s4516_ (projT1 (string_length "c.addw"))) with
       | _s4517_ =>
          (spc_matches_prefix _s4517_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4518_ _) =>
              (match (string_drop _s4517_ _s4518_) with
               | _s4519_ =>
                  (creg_name_matches_prefix _s4519_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4520_ _) =>
                      (match (string_drop _s4519_ _s4520_) with
                       | _s4521_ =>
                          (sep_matches_prefix _s4521_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4522_ _) =>
                              (match (string_drop _s4521_ _s4522_) with
                               | _s4523_ =>
                                  (creg_name_matches_prefix _s4523_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4524_ _) =>
                                              match (string_drop _s4523_ _s4524_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * string)))
               end)
               : M (option ((mword 3 * mword 3 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * string)))
       end)
       : M (option ((mword 3 * mword 3 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * string))).

Definition _s4502_ (_s4503_ : string) : M (option ((mword 3 * mword 3 * string))) :=
   let _s4504_ := _s4503_ in
   (if string_startswith _s4504_ "c.subw" then
      (match (string_drop _s4504_ (projT1 (string_length "c.subw"))) with
       | _s4505_ =>
          (spc_matches_prefix _s4505_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4506_ _) =>
              (match (string_drop _s4505_ _s4506_) with
               | _s4507_ =>
                  (creg_name_matches_prefix _s4507_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4508_ _) =>
                      (match (string_drop _s4507_ _s4508_) with
                       | _s4509_ =>
                          (sep_matches_prefix _s4509_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4510_ _) =>
                              (match (string_drop _s4509_ _s4510_) with
                               | _s4511_ =>
                                  (creg_name_matches_prefix _s4511_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4512_ _) =>
                                              match (string_drop _s4511_ _s4512_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * string)))
               end)
               : M (option ((mword 3 * mword 3 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * string)))
       end)
       : M (option ((mword 3 * mword 3 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * string))).

Definition _s4490_ (_s4491_ : string) : M (option ((mword 3 * mword 3 * string))) :=
   let _s4492_ := _s4491_ in
   (if string_startswith _s4492_ "c.and" then
      (match (string_drop _s4492_ (projT1 (string_length "c.and"))) with
       | _s4493_ =>
          (spc_matches_prefix _s4493_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4494_ _) =>
              (match (string_drop _s4493_ _s4494_) with
               | _s4495_ =>
                  (creg_name_matches_prefix _s4495_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4496_ _) =>
                      (match (string_drop _s4495_ _s4496_) with
                       | _s4497_ =>
                          (sep_matches_prefix _s4497_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4498_ _) =>
                              (match (string_drop _s4497_ _s4498_) with
                               | _s4499_ =>
                                  (creg_name_matches_prefix _s4499_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4500_ _) =>
                                              match (string_drop _s4499_ _s4500_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * string)))
               end)
               : M (option ((mword 3 * mword 3 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * string)))
       end)
       : M (option ((mword 3 * mword 3 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * string))).

Definition _s4478_ (_s4479_ : string) : M (option ((mword 3 * mword 3 * string))) :=
   let _s4480_ := _s4479_ in
   (if string_startswith _s4480_ "c.or" then
      (match (string_drop _s4480_ (projT1 (string_length "c.or"))) with
       | _s4481_ =>
          (spc_matches_prefix _s4481_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4482_ _) =>
              (match (string_drop _s4481_ _s4482_) with
               | _s4483_ =>
                  (creg_name_matches_prefix _s4483_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4484_ _) =>
                      (match (string_drop _s4483_ _s4484_) with
                       | _s4485_ =>
                          (sep_matches_prefix _s4485_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4486_ _) =>
                              (match (string_drop _s4485_ _s4486_) with
                               | _s4487_ =>
                                  (creg_name_matches_prefix _s4487_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4488_ _) =>
                                              match (string_drop _s4487_ _s4488_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * string)))
               end)
               : M (option ((mword 3 * mword 3 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * string)))
       end)
       : M (option ((mword 3 * mword 3 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * string))).

Definition _s4466_ (_s4467_ : string) : M (option ((mword 3 * mword 3 * string))) :=
   let _s4468_ := _s4467_ in
   (if string_startswith _s4468_ "c.xor" then
      (match (string_drop _s4468_ (projT1 (string_length "c.xor"))) with
       | _s4469_ =>
          (spc_matches_prefix _s4469_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4470_ _) =>
              (match (string_drop _s4469_ _s4470_) with
               | _s4471_ =>
                  (creg_name_matches_prefix _s4471_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4472_ _) =>
                      (match (string_drop _s4471_ _s4472_) with
                       | _s4473_ =>
                          (sep_matches_prefix _s4473_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4474_ _) =>
                              (match (string_drop _s4473_ _s4474_) with
                               | _s4475_ =>
                                  (creg_name_matches_prefix _s4475_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4476_ _) =>
                                              match (string_drop _s4475_ _s4476_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * string)))
               end)
               : M (option ((mword 3 * mword 3 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * string)))
       end)
       : M (option ((mword 3 * mword 3 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * string))).

Definition _s4454_ (_s4455_ : string) : M (option ((mword 3 * mword 3 * string))) :=
   let _s4456_ := _s4455_ in
   (if string_startswith _s4456_ "c.sub" then
      (match (string_drop _s4456_ (projT1 (string_length "c.sub"))) with
       | _s4457_ =>
          (spc_matches_prefix _s4457_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4458_ _) =>
              (match (string_drop _s4457_ _s4458_) with
               | _s4459_ =>
                  (creg_name_matches_prefix _s4459_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4460_ _) =>
                      (match (string_drop _s4459_ _s4460_) with
                       | _s4461_ =>
                          (sep_matches_prefix _s4461_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4462_ _) =>
                              (match (string_drop _s4461_ _s4462_) with
                               | _s4463_ =>
                                  (creg_name_matches_prefix _s4463_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4464_ _) =>
                                              match (string_drop _s4463_ _s4464_) with
                                              | s_ => Some (rsd, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 3 * mword 3 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * string)))
               end)
               : M (option ((mword 3 * mword 3 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * string)))
       end)
       : M (option ((mword 3 * mword 3 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * string))).

Definition _s4442_ (_s4443_ : string) : M (option ((mword 3 * mword 6 * string))) :=
   let _s4444_ := _s4443_ in
   (if string_startswith _s4444_ "c.andi" then
      (match (string_drop _s4444_ (projT1 (string_length "c.andi"))) with
       | _s4445_ =>
          (spc_matches_prefix _s4445_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4446_ _) =>
              (match (string_drop _s4445_ _s4446_) with
               | _s4447_ =>
                  (creg_name_matches_prefix _s4447_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4448_ _) =>
                      (match (string_drop _s4447_ _s4448_) with
                       | _s4449_ =>
                          (sep_matches_prefix _s4449_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4450_ _) =>
                                      match (string_drop _s4449_ _s4450_) with
                                      | _s4451_ =>
                                         match (hex_bits_6_matches_prefix _s4451_) with
                                         | Some (imm, existT _ _s4452_ _) =>
                                            match (string_drop _s4451_ _s4452_) with
                                            | s_ => Some (rsd, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6 * string)))
               end)
               : M (option ((mword 3 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6 * string)))
       end)
       : M (option ((mword 3 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 6 * string))).

Definition _s4430_ (_s4431_ : string) : M (option ((mword 3 * mword 6 * string))) :=
   let _s4432_ := _s4431_ in
   (if string_startswith _s4432_ "c.srai" then
      (match (string_drop _s4432_ (projT1 (string_length "c.srai"))) with
       | _s4433_ =>
          (spc_matches_prefix _s4433_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4434_ _) =>
              (match (string_drop _s4433_ _s4434_) with
               | _s4435_ =>
                  (creg_name_matches_prefix _s4435_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4436_ _) =>
                      (match (string_drop _s4435_ _s4436_) with
                       | _s4437_ =>
                          (sep_matches_prefix _s4437_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4438_ _) =>
                                      match (string_drop _s4437_ _s4438_) with
                                      | _s4439_ =>
                                         match (hex_bits_6_matches_prefix _s4439_) with
                                         | Some (shamt, existT _ _s4440_ _) =>
                                            match (string_drop _s4439_ _s4440_) with
                                            | s_ => Some (rsd, shamt, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6 * string)))
               end)
               : M (option ((mword 3 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6 * string)))
       end)
       : M (option ((mword 3 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 6 * string))).

Definition _s4418_ (_s4419_ : string) : M (option ((mword 3 * mword 6 * string))) :=
   let _s4420_ := _s4419_ in
   (if string_startswith _s4420_ "c.srli" then
      (match (string_drop _s4420_ (projT1 (string_length "c.srli"))) with
       | _s4421_ =>
          (spc_matches_prefix _s4421_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4422_ _) =>
              (match (string_drop _s4421_ _s4422_) with
               | _s4423_ =>
                  (creg_name_matches_prefix _s4423_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4424_ _) =>
                      (match (string_drop _s4423_ _s4424_) with
                       | _s4425_ =>
                          (sep_matches_prefix _s4425_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4426_ _) =>
                                      match (string_drop _s4425_ _s4426_) with
                                      | _s4427_ =>
                                         match (hex_bits_6_matches_prefix _s4427_) with
                                         | Some (shamt, existT _ _s4428_ _) =>
                                            match (string_drop _s4427_ _s4428_) with
                                            | s_ => Some (rsd, shamt, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 6 * string)))
               end)
               : M (option ((mword 3 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 6 * string)))
       end)
       : M (option ((mword 3 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 6 * string))).

Definition _s4406_ (_s4407_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4408_ := _s4407_ in
   (if string_startswith _s4408_ "c.lui" then
      (match (string_drop _s4408_ (projT1 (string_length "c.lui"))) with
       | _s4409_ =>
          (spc_matches_prefix _s4409_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4410_ _) =>
              (match (string_drop _s4409_ _s4410_) with
               | _s4411_ =>
                  (reg_name_matches_prefix _s4411_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4412_ _) =>
                      (match (string_drop _s4411_ _s4412_) with
                       | _s4413_ =>
                          (sep_matches_prefix _s4413_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4414_ _) =>
                                      match (string_drop _s4413_ _s4414_) with
                                      | _s4415_ =>
                                         match (hex_bits_6_matches_prefix _s4415_) with
                                         | Some (imm, existT _ _s4416_ _) =>
                                            match (string_drop _s4415_ _s4416_) with
                                            | s_ => Some (rd, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4398_ (_s4399_ : string) : M (option ((mword 6 * string))) :=
   let _s4400_ := _s4399_ in
   (if string_startswith _s4400_ "c.addi16sp" then
      (match (string_drop _s4400_ (projT1 (string_length "c.addi16sp"))) with
       | _s4401_ =>
          (spc_matches_prefix _s4401_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s4402_ _) =>
                      match (string_drop _s4401_ _s4402_) with
                      | _s4403_ =>
                         match (hex_bits_6_matches_prefix _s4403_) with
                         | Some (imm, existT _ _s4404_ _) =>
                            match (string_drop _s4403_ _s4404_) with | s_ => Some (imm, s_) end
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option ((mword 6 * string)))
    else returnm None)
    : M (option ((mword 6 * string))).

Definition _s4386_ (_s4387_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4388_ := _s4387_ in
   (if string_startswith _s4388_ "c.li" then
      (match (string_drop _s4388_ (projT1 (string_length "c.li"))) with
       | _s4389_ =>
          (spc_matches_prefix _s4389_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4390_ _) =>
              (match (string_drop _s4389_ _s4390_) with
               | _s4391_ =>
                  (reg_name_matches_prefix _s4391_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4392_ _) =>
                      (match (string_drop _s4391_ _s4392_) with
                       | _s4393_ =>
                          (sep_matches_prefix _s4393_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4394_ _) =>
                                      match (string_drop _s4393_ _s4394_) with
                                      | _s4395_ =>
                                         match (hex_bits_6_matches_prefix _s4395_) with
                                         | Some (imm, existT _ _s4396_ _) =>
                                            match (string_drop _s4395_ _s4396_) with
                                            | s_ => Some (rd, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4374_ (_s4375_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4376_ := _s4375_ in
   (if string_startswith _s4376_ "c.addiw" then
      (match (string_drop _s4376_ (projT1 (string_length "c.addiw"))) with
       | _s4377_ =>
          (spc_matches_prefix _s4377_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4378_ _) =>
              (match (string_drop _s4377_ _s4378_) with
               | _s4379_ =>
                  (reg_name_matches_prefix _s4379_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4380_ _) =>
                      (match (string_drop _s4379_ _s4380_) with
                       | _s4381_ =>
                          (sep_matches_prefix _s4381_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4382_ _) =>
                                      match (string_drop _s4381_ _s4382_) with
                                      | _s4383_ =>
                                         match (hex_bits_6_matches_prefix _s4383_) with
                                         | Some (imm, existT _ _s4384_ _) =>
                                            match (string_drop _s4383_ _s4384_) with
                                            | s_ => Some (rsd, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4366_ (_s4367_ : string) : M (option ((mword 11 * string))) :=
   let _s4368_ := _s4367_ in
   (if string_startswith _s4368_ "c.jal" then
      (match (string_drop _s4368_ (projT1 (string_length "c.jal"))) with
       | _s4369_ =>
          (spc_matches_prefix _s4369_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          returnm (match w__0 with
                   | Some (tt, existT _ _s4370_ _) =>
                      match (string_drop _s4369_ _s4370_) with
                      | _s4371_ =>
                         match (hex_bits_12_matches_prefix _s4371_) with
                         | Some (v__1112, existT _ _s4372_ _) =>
                            if eq_vec (subrange_vec_dec v__1112 0 0) ('b"0"  : mword (0 - 0 + 1))
                            then
                              let imm : mword 11 := subrange_vec_dec v__1112 11 1 in
                              let imm : mword 11 := subrange_vec_dec v__1112 11 1 in
                              match (string_drop _s4371_ _s4372_) with | s_ => Some (imm, s_) end
                            else None
                         | _ => None
                         end
                      end
                   | _ => None
                   end)
       end)
       : M (option ((mword 11 * string)))
    else returnm None)
    : M (option ((mword 11 * string))).

Definition _s4354_ (_s4355_ : string) : M (option ((mword 5 * mword 6 * string))) :=
   let _s4356_ := _s4355_ in
   (if string_startswith _s4356_ "c.addi" then
      (match (string_drop _s4356_ (projT1 (string_length "c.addi"))) with
       | _s4357_ =>
          (spc_matches_prefix _s4357_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4358_ _) =>
              (match (string_drop _s4357_ _s4358_) with
               | _s4359_ =>
                  (reg_name_matches_prefix _s4359_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsd, existT _ _s4360_ _) =>
                      (match (string_drop _s4359_ _s4360_) with
                       | _s4361_ =>
                          (sep_matches_prefix _s4361_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4362_ _) =>
                                      match (string_drop _s4361_ _s4362_) with
                                      | _s4363_ =>
                                         match (hex_bits_6_matches_prefix _s4363_) with
                                         | Some (nzi, existT _ _s4364_ _) =>
                                            match (string_drop _s4363_ _s4364_) with
                                            | s_ => Some (rsd, nzi, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 6 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 6 * string)))
               end)
               : M (option ((mword 5 * mword 6 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 6 * string)))
       end)
       : M (option ((mword 5 * mword 6 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 6 * string))).

Definition _s4338_ (_s4339_ : string) : M (option ((mword 3 * mword 3 * mword 5 * string))) :=
   let _s4340_ := _s4339_ in
   (if string_startswith _s4340_ "c.sd" then
      (match (string_drop _s4340_ (projT1 (string_length "c.sd"))) with
       | _s4341_ =>
          (spc_matches_prefix _s4341_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4342_ _) =>
              (match (string_drop _s4341_ _s4342_) with
               | _s4343_ =>
                  (creg_name_matches_prefix _s4343_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s4344_ _) =>
                      (match (string_drop _s4343_ _s4344_) with
                       | _s4345_ =>
                          (sep_matches_prefix _s4345_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4346_ _) =>
                              (match (string_drop _s4345_ _s4346_) with
                               | _s4347_ =>
                                  (creg_name_matches_prefix _s4347_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s4348_ _) =>
                                      (match (string_drop _s4347_ _s4348_) with
                                       | _s4349_ =>
                                          (sep_matches_prefix _s4349_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s4350_ _) =>
                                                      match (string_drop _s4349_ _s4350_) with
                                                      | _s4351_ =>
                                                         match (hex_bits_8_matches_prefix _s4351_) with
                                                         | Some (v__1114, existT _ _s4352_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1114 2 0)
                                                                 ('b"000"
                                                                  : mword (2 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1114 7 3 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1114 7 3 in
                                                              match (string_drop _s4351_ _s4352_) with
                                                              | s_ => Some (rsc1, rsc2, uimm, s_)
                                                              end
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5 * string)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5 * string))).

Definition _s4322_ (_s4323_ : string) : M (option ((mword 3 * mword 3 * mword 5 * string))) :=
   let _s4324_ := _s4323_ in
   (if string_startswith _s4324_ "c.sw" then
      (match (string_drop _s4324_ (projT1 (string_length "c.sw"))) with
       | _s4325_ =>
          (spc_matches_prefix _s4325_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4326_ _) =>
              (match (string_drop _s4325_ _s4326_) with
               | _s4327_ =>
                  (creg_name_matches_prefix _s4327_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rsc1, existT _ _s4328_ _) =>
                      (match (string_drop _s4327_ _s4328_) with
                       | _s4329_ =>
                          (sep_matches_prefix _s4329_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4330_ _) =>
                              (match (string_drop _s4329_ _s4330_) with
                               | _s4331_ =>
                                  (creg_name_matches_prefix _s4331_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc2, existT _ _s4332_ _) =>
                                      (match (string_drop _s4331_ _s4332_) with
                                       | _s4333_ =>
                                          (sep_matches_prefix _s4333_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s4334_ _) =>
                                                      match (string_drop _s4333_ _s4334_) with
                                                      | _s4335_ =>
                                                         match (hex_bits_7_matches_prefix _s4335_) with
                                                         | Some (v__1116, existT _ _s4336_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1116 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1116 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1116 6 2 in
                                                              match (string_drop _s4335_ _s4336_) with
                                                              | s_ => Some (rsc1, rsc2, uimm, s_)
                                                              end
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5 * string)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5 * string))).

Definition _s4306_ (_s4307_ : string) : M (option ((mword 3 * mword 3 * mword 5 * string))) :=
   let _s4308_ := _s4307_ in
   (if string_startswith _s4308_ "c.ld" then
      (match (string_drop _s4308_ (projT1 (string_length "c.ld"))) with
       | _s4309_ =>
          (spc_matches_prefix _s4309_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4310_ _) =>
              (match (string_drop _s4309_ _s4310_) with
               | _s4311_ =>
                  (creg_name_matches_prefix _s4311_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s4312_ _) =>
                      (match (string_drop _s4311_ _s4312_) with
                       | _s4313_ =>
                          (sep_matches_prefix _s4313_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4314_ _) =>
                              (match (string_drop _s4313_ _s4314_) with
                               | _s4315_ =>
                                  (creg_name_matches_prefix _s4315_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s4316_ _) =>
                                      (match (string_drop _s4315_ _s4316_) with
                                       | _s4317_ =>
                                          (sep_matches_prefix _s4317_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s4318_ _) =>
                                                      match (string_drop _s4317_ _s4318_) with
                                                      | _s4319_ =>
                                                         match (hex_bits_8_matches_prefix _s4319_) with
                                                         | Some (v__1118, existT _ _s4320_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1118 2 0)
                                                                 ('b"000"
                                                                  : mword (2 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1118 7 3 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1118 7 3 in
                                                              match (string_drop _s4319_ _s4320_) with
                                                              | s_ => Some (rdc, rsc, uimm, s_)
                                                              end
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5 * string)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5 * string))).

Definition _s4290_ (_s4291_ : string) : M (option ((mword 3 * mword 3 * mword 5 * string))) :=
   let _s4292_ := _s4291_ in
   (if string_startswith _s4292_ "c.lw" then
      (match (string_drop _s4292_ (projT1 (string_length "c.lw"))) with
       | _s4293_ =>
          (spc_matches_prefix _s4293_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4294_ _) =>
              (match (string_drop _s4293_ _s4294_) with
               | _s4295_ =>
                  (creg_name_matches_prefix _s4295_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s4296_ _) =>
                      (match (string_drop _s4295_ _s4296_) with
                       | _s4297_ =>
                          (sep_matches_prefix _s4297_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4298_ _) =>
                              (match (string_drop _s4297_ _s4298_) with
                               | _s4299_ =>
                                  (creg_name_matches_prefix _s4299_) >>= fun w__3 : option ((mword 3 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rsc, existT _ _s4300_ _) =>
                                      (match (string_drop _s4299_ _s4300_) with
                                       | _s4301_ =>
                                          (sep_matches_prefix _s4301_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s4302_ _) =>
                                                      match (string_drop _s4301_ _s4302_) with
                                                      | _s4303_ =>
                                                         match (hex_bits_7_matches_prefix _s4303_) with
                                                         | Some (v__1120, existT _ _s4304_ _) =>
                                                            if eq_vec (subrange_vec_dec v__1120 1 0)
                                                                 ('b"00"
                                                                  : mword (1 - 0 + 1)) then
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1120 6 2 in
                                                              let uimm : mword 5 :=
                                                                subrange_vec_dec v__1120 6 2 in
                                                              match (string_drop _s4303_ _s4304_) with
                                                              | s_ => Some (rdc, rsc, uimm, s_)
                                                              end
                                                            else None
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
                               end)
                               : M (option ((mword 3 * mword 3 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 3 * mword 3 * mword 5 * string)))
                       end)
                       : M (option ((mword 3 * mword 3 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 3 * mword 5 * string)))
               end)
               : M (option ((mword 3 * mword 3 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 3 * mword 5 * string)))
       end)
       : M (option ((mword 3 * mword 3 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 3 * mword 5 * string))).

Definition _s4278_ (_s4279_ : string) : M (option ((mword 3 * mword 8 * string))) :=
   let _s4280_ := _s4279_ in
   (if string_startswith _s4280_ "c.addi4spn" then
      (match (string_drop _s4280_ (projT1 (string_length "c.addi4spn"))) with
       | _s4281_ =>
          (spc_matches_prefix _s4281_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4282_ _) =>
              (match (string_drop _s4281_ _s4282_) with
               | _s4283_ =>
                  (creg_name_matches_prefix _s4283_) >>= fun w__1 : option ((mword 3 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rdc, existT _ _s4284_ _) =>
                      (match (string_drop _s4283_ _s4284_) with
                       | _s4285_ =>
                          (sep_matches_prefix _s4285_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s4286_ _) =>
                                      match (string_drop _s4285_ _s4286_) with
                                      | _s4287_ =>
                                         match (hex_bits_10_matches_prefix _s4287_) with
                                         | Some (v__1122, existT _ _s4288_ _) =>
                                            if eq_vec (subrange_vec_dec v__1122 1 0)
                                                 ('b"00"
                                                  : mword (1 - 0 + 1)) then
                                              let nzimm : mword 8 := subrange_vec_dec v__1122 9 2 in
                                              let nzimm : mword 8 := subrange_vec_dec v__1122 9 2 in
                                              match (string_drop _s4287_ _s4288_) with
                                              | s_ => Some (rdc, nzimm, s_)
                                              end
                                            else None
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 3 * mword 8 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 3 * mword 8 * string)))
               end)
               : M (option ((mword 3 * mword 8 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 3 * mword 8 * string)))
       end)
       : M (option ((mword 3 * mword 8 * string)))
    else returnm None)
    : M (option ((mword 3 * mword 8 * string))).

Definition _s4274_ (_s4275_ : string) : option string :=
   let _s4276_ := _s4275_ in
   if string_startswith _s4276_ "c.nop" then
     match (string_drop _s4276_ (projT1 (string_length "c.nop"))) with | s_ => Some s_ end
   else None.

Definition _s4248_ (_s4249_ : string)
: M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s4249_ with
    | _s4250_ =>
       (amo_mnemonic_matches_prefix _s4250_) >>= fun w__0 : option ((amoop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4251_ _) =>
           let _s4252_ := string_drop _s4250_ _s4251_ in
           (if string_startswith _s4252_ "." then
              (match (string_drop _s4252_ (projT1 (string_length "."))) with
               | _s4253_ =>
                  (size_mnemonic_matches_prefix _s4253_) >>= fun w__1 : option ((word_width * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (width, existT _ _s4254_ _) =>
                      (match (string_drop _s4253_ _s4254_) with
                       | _s4255_ =>
                          (maybe_aq_matches_prefix _s4255_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (aq, existT _ _s4256_ _) =>
                              (match (string_drop _s4255_ _s4256_) with
                               | _s4257_ =>
                                  (maybe_rl_matches_prefix _s4257_) >>= fun w__3 : option ((bool * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rl, existT _ _s4258_ _) =>
                                      (match (string_drop _s4257_ _s4258_) with
                                       | _s4259_ =>
                                          (spc_matches_prefix _s4259_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s4260_ _) =>
                                              (match (string_drop _s4259_ _s4260_) with
                                               | _s4261_ =>
                                                  (reg_name_matches_prefix _s4261_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (rd, existT _ _s4262_ _) =>
                                                      (match (string_drop _s4261_ _s4262_) with
                                                       | _s4263_ =>
                                                          (sep_matches_prefix _s4263_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (tt, existT _ _s4264_ _) =>
                                                              (match (string_drop _s4263_ _s4264_) with
                                                               | _s4265_ =>
                                                                  (reg_name_matches_prefix _s4265_) >>= fun w__7 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__7 with
                                                                   | Some (rs2, existT _ _s4266_ _) =>
                                                                      (match (string_drop _s4265_
                                                                                _s4266_) with
                                                                       | _s4267_ =>
                                                                          (sep_matches_prefix
                                                                             _s4267_) >>= fun w__8 : option ((unit * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          (match w__8 with
                                                                           | Some
                                                                             (tt, existT _ _s4268_ _) =>
                                                                              let _s4269_ :=
                                                                                string_drop _s4267_
                                                                                  _s4268_ in
                                                                              (if string_startswith
                                                                                    _s4269_ "(" then
                                                                                 (match (string_drop
                                                                                           _s4269_
                                                                                           (projT1
                                                                                            (string_length
                                                                                               "("))) with
                                                                                  | _s4270_ =>
                                                                                     (reg_name_matches_prefix
                                                                                        _s4270_) >>= fun w__9 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     returnm (match w__9 with
                                                                                              | Some
                                                                                                (rs1, existT _ _s4271_ _) =>
                                                                                                 let _s4272_ :=
                                                                                                   string_drop
                                                                                                     _s4270_
                                                                                                     _s4271_ in
                                                                                                 if string_startswith
                                                                                                      _s4272_
                                                                                                      ")"
                                                                                                 then
                                                                                                   match (string_drop
                                                                                                            _s4272_
                                                                                                            (projT1
                                                                                                             (string_length
                                                                                                                ")"))) with
                                                                                                   | s_ =>
                                                                                                      Some
                                                                                                        (op, width, aq, rl, rd, rs2, rs1, s_)
                                                                                                   end
                                                                                                 else
                                                                                                   None
                                                                                              | _ =>
                                                                                                 None
                                                                                              end)
                                                                                  end)
                                                                                  : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                                               else returnm None)
                                                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                                           | _ => returnm None
                                                                           end)
                                                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                                       end)
                                                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                               end)
                                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                       end)
                                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                               end)
                                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                       end)
                                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                               end)
                               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                       end)
                       : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
               end)
               : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
            else returnm None)
            : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4226_ (_s4227_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string))) :=
   let _s4228_ := _s4227_ in
   (if string_startswith _s4228_ "sc." then
      (match (string_drop _s4228_ (projT1 (string_length "sc."))) with
       | _s4229_ =>
          (size_mnemonic_matches_prefix _s4229_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s4230_ _) =>
              (match (string_drop _s4229_ _s4230_) with
               | _s4231_ =>
                  (maybe_aq_matches_prefix _s4231_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s4232_ _) =>
                      (match (string_drop _s4231_ _s4232_) with
                       | _s4233_ =>
                          (maybe_rl_matches_prefix _s4233_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s4234_ _) =>
                              (match (string_drop _s4233_ _s4234_) with
                               | _s4235_ =>
                                  (spc_matches_prefix _s4235_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4236_ _) =>
                                      (match (string_drop _s4235_ _s4236_) with
                                       | _s4237_ =>
                                          (reg_name_matches_prefix _s4237_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rd, existT _ _s4238_ _) =>
                                              (match (string_drop _s4237_ _s4238_) with
                                               | _s4239_ =>
                                                  (sep_matches_prefix _s4239_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s4240_ _) =>
                                                      (match (string_drop _s4239_ _s4240_) with
                                                       | _s4241_ =>
                                                          (reg_name_matches_prefix _s4241_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (rs1, existT _ _s4242_ _) =>
                                                              (match (string_drop _s4241_ _s4242_) with
                                                               | _s4243_ =>
                                                                  (sep_matches_prefix _s4243_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__7 with
                                                                   | Some (tt, existT _ _s4244_ _) =>
                                                                      (match (string_drop _s4243_
                                                                                _s4244_) with
                                                                       | _s4245_ =>
                                                                          (reg_name_matches_prefix
                                                                             _s4245_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          returnm (match w__8 with
                                                                                   | Some
                                                                                     (rs2, existT _ _s4246_ _) =>
                                                                                      match (string_drop
                                                                                               _s4245_
                                                                                               _s4246_) with
                                                                                      | s_ =>
                                                                                         Some
                                                                                           (size, aq, rl, rd, rs1, rs2, s_)
                                                                                      end
                                                                                   | _ => None
                                                                                   end)
                                                                       end)
                                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string))).

Definition _s4208_ (_s4209_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 5 * string))) :=
   let _s4210_ := _s4209_ in
   (if string_startswith _s4210_ "lr." then
      (match (string_drop _s4210_ (projT1 (string_length "lr."))) with
       | _s4211_ =>
          (size_mnemonic_matches_prefix _s4211_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s4212_ _) =>
              (match (string_drop _s4211_ _s4212_) with
               | _s4213_ =>
                  (maybe_aq_matches_prefix _s4213_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s4214_ _) =>
                      (match (string_drop _s4213_ _s4214_) with
                       | _s4215_ =>
                          (maybe_rl_matches_prefix _s4215_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s4216_ _) =>
                              (match (string_drop _s4215_ _s4216_) with
                               | _s4217_ =>
                                  (spc_matches_prefix _s4217_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4218_ _) =>
                                      (match (string_drop _s4217_ _s4218_) with
                                       | _s4219_ =>
                                          (reg_name_matches_prefix _s4219_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rd, existT _ _s4220_ _) =>
                                              (match (string_drop _s4219_ _s4220_) with
                                               | _s4221_ =>
                                                  (sep_matches_prefix _s4221_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s4222_ _) =>
                                                      (match (string_drop _s4221_ _s4222_) with
                                                       | _s4223_ =>
                                                          (reg_name_matches_prefix _s4223_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          returnm (match w__6 with
                                                                   | Some (rs1, existT _ _s4224_ _) =>
                                                                      match (string_drop _s4223_
                                                                               _s4224_) with
                                                                      | s_ =>
                                                                         Some
                                                                           (size, aq, rl, rd, rs1, s_)
                                                                      end
                                                                   | _ => None
                                                                   end)
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 5 * string))).

Definition _s4196_ (_s4197_ : string) : M (option ((mword 5 * mword 5 * string))) :=
   let _s4198_ := _s4197_ in
   (if string_startswith _s4198_ "sfence.vma" then
      (match (string_drop _s4198_ (projT1 (string_length "sfence.vma"))) with
       | _s4199_ =>
          (spc_matches_prefix _s4199_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4200_ _) =>
              (match (string_drop _s4199_ _s4200_) with
               | _s4201_ =>
                  (reg_name_matches_prefix _s4201_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rs1, existT _ _s4202_ _) =>
                      (match (string_drop _s4201_ _s4202_) with
                       | _s4203_ =>
                          (sep_matches_prefix _s4203_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4204_ _) =>
                              (match (string_drop _s4203_ _s4204_) with
                               | _s4205_ =>
                                  (reg_name_matches_prefix _s4205_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (rs2, existT _ _s4206_ _) =>
                                              match (string_drop _s4205_ _s4206_) with
                                              | s_ => Some (rs1, rs2, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 5 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * string)))
                       end)
                       : M (option ((mword 5 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * string)))
               end)
               : M (option ((mword 5 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * string)))
       end)
       : M (option ((mword 5 * mword 5 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * string))).

Definition _s4192_ (_s4193_ : string) : option string :=
   let _s4194_ := _s4193_ in
   if string_startswith _s4194_ "wfi" then
     match (string_drop _s4194_ (projT1 (string_length "wfi"))) with | s_ => Some s_ end
   else None.

Definition _s4188_ (_s4189_ : string) : option string :=
   let _s4190_ := _s4189_ in
   if string_startswith _s4190_ "ebreak" then
     match (string_drop _s4190_ (projT1 (string_length "ebreak"))) with | s_ => Some s_ end
   else None.

Definition _s4184_ (_s4185_ : string) : option string :=
   let _s4186_ := _s4185_ in
   if string_startswith _s4186_ "sret" then
     match (string_drop _s4186_ (projT1 (string_length "sret"))) with | s_ => Some s_ end
   else None.

Definition _s4180_ (_s4181_ : string) : option string :=
   let _s4182_ := _s4181_ in
   if string_startswith _s4182_ "mret" then
     match (string_drop _s4182_ (projT1 (string_length "mret"))) with | s_ => Some s_ end
   else None.

Definition _s4176_ (_s4177_ : string) : option string :=
   let _s4178_ := _s4177_ in
   if string_startswith _s4178_ "ecall" then
     match (string_drop _s4178_ (projT1 (string_length "ecall"))) with | s_ => Some s_ end
   else None.

Definition _s4172_ (_s4173_ : string) : option string :=
   let _s4174_ := _s4173_ in
   if string_startswith _s4174_ "fence.i" then
     match (string_drop _s4174_ (projT1 (string_length "fence.i"))) with | s_ => Some s_ end
   else None.

Definition _s4160_ (_s4161_ : string) : M (option ((mword 4 * mword 4 * string))) :=
   let _s4162_ := _s4161_ in
   (if string_startswith _s4162_ "fence.tso" then
      (match (string_drop _s4162_ (projT1 (string_length "fence.tso"))) with
       | _s4163_ =>
          (spc_matches_prefix _s4163_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4164_ _) =>
              (match (string_drop _s4163_ _s4164_) with
               | _s4165_ =>
                  (fence_bits_matches_prefix _s4165_) >>= fun w__1 : option ((mword 4 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (pred, existT _ _s4166_ _) =>
                      (match (string_drop _s4165_ _s4166_) with
                       | _s4167_ =>
                          (sep_matches_prefix _s4167_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4168_ _) =>
                              (match (string_drop _s4167_ _s4168_) with
                               | _s4169_ =>
                                  (fence_bits_matches_prefix _s4169_) >>= fun w__3 : option ((mword 4 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (succ, existT _ _s4170_ _) =>
                                              match (string_drop _s4169_ _s4170_) with
                                              | s_ => Some (pred, succ, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 4 * mword 4 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 4 * mword 4 * string)))
                       end)
                       : M (option ((mword 4 * mword 4 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 4 * mword 4 * string)))
               end)
               : M (option ((mword 4 * mword 4 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 4 * mword 4 * string)))
       end)
       : M (option ((mword 4 * mword 4 * string)))
    else returnm None)
    : M (option ((mword 4 * mword 4 * string))).

Definition _s4148_ (_s4149_ : string) : M (option ((mword 4 * mword 4 * string))) :=
   let _s4150_ := _s4149_ in
   (if string_startswith _s4150_ "fence" then
      (match (string_drop _s4150_ (projT1 (string_length "fence"))) with
       | _s4151_ =>
          (spc_matches_prefix _s4151_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4152_ _) =>
              (match (string_drop _s4151_ _s4152_) with
               | _s4153_ =>
                  (fence_bits_matches_prefix _s4153_) >>= fun w__1 : option ((mword 4 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (pred, existT _ _s4154_ _) =>
                      (match (string_drop _s4153_ _s4154_) with
                       | _s4155_ =>
                          (sep_matches_prefix _s4155_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4156_ _) =>
                              (match (string_drop _s4155_ _s4156_) with
                               | _s4157_ =>
                                  (fence_bits_matches_prefix _s4157_) >>= fun w__3 : option ((mword 4 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  returnm (match w__3 with
                                           | Some (succ, existT _ _s4158_ _) =>
                                              match (string_drop _s4157_ _s4158_) with
                                              | s_ => Some (pred, succ, s_)
                                              end
                                           | _ => None
                                           end)
                               end)
                               : M (option ((mword 4 * mword 4 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 4 * mword 4 * string)))
                       end)
                       : M (option ((mword 4 * mword 4 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 4 * mword 4 * string)))
               end)
               : M (option ((mword 4 * mword 4 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 4 * mword 4 * string)))
       end)
       : M (option ((mword 4 * mword 4 * string)))
    else returnm None)
    : M (option ((mword 4 * mword 4 * string))).

Definition _s4131_ (_s4132_ : string) : M (option ((sopw * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s4132_ with
    | _s4133_ =>
       (shiftiwop_mnemonic_matches_prefix _s4133_) >>= fun w__0 : option ((sopw * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4134_ _) =>
           (match (string_drop _s4133_ _s4134_) with
            | _s4135_ =>
               (spc_matches_prefix _s4135_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4136_ _) =>
                   (match (string_drop _s4135_ _s4136_) with
                    | _s4137_ =>
                       (reg_name_matches_prefix _s4137_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4138_ _) =>
                           (match (string_drop _s4137_ _s4138_) with
                            | _s4139_ =>
                               (sep_matches_prefix _s4139_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4140_ _) =>
                                   (match (string_drop _s4139_ _s4140_) with
                                    | _s4141_ =>
                                       (reg_name_matches_prefix _s4141_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4142_ _) =>
                                           (match (string_drop _s4141_ _s4142_) with
                                            | _s4143_ =>
                                               (sep_matches_prefix _s4143_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s4144_ _) =>
                                                           match (string_drop _s4143_ _s4144_) with
                                                           | _s4145_ =>
                                                              match (hex_bits_5_matches_prefix
                                                                       _s4145_) with
                                                              | Some (shamt, existT _ _s4146_ _) =>
                                                                 match (string_drop _s4145_ _s4146_) with
                                                                 | s_ =>
                                                                    Some (op, rd, rs1, shamt, s_)
                                                                 end
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((sopw * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((sopw * mword 5 * mword 5 * mword 5 * string))).

Definition _s4114_ (_s4115_ : string) : M (option ((ropw * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s4115_ with
    | _s4116_ =>
       (rtypew_mnemonic_matches_prefix _s4116_) >>= fun w__0 : option ((ropw * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4117_ _) =>
           (match (string_drop _s4116_ _s4117_) with
            | _s4118_ =>
               (spc_matches_prefix _s4118_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4119_ _) =>
                   (match (string_drop _s4118_ _s4119_) with
                    | _s4120_ =>
                       (reg_name_matches_prefix _s4120_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4121_ _) =>
                           (match (string_drop _s4120_ _s4121_) with
                            | _s4122_ =>
                               (sep_matches_prefix _s4122_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4123_ _) =>
                                   (match (string_drop _s4122_ _s4123_) with
                                    | _s4124_ =>
                                       (reg_name_matches_prefix _s4124_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4125_ _) =>
                                           (match (string_drop _s4124_ _s4125_) with
                                            | _s4126_ =>
                                               (sep_matches_prefix _s4126_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4127_ _) =>
                                                   (match (string_drop _s4126_ _s4127_) with
                                                    | _s4128_ =>
                                                       (reg_name_matches_prefix _s4128_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s4129_ _) =>
                                                                   match (string_drop _s4128_
                                                                            _s4129_) with
                                                                   | s_ =>
                                                                      Some (op, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((ropw * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((ropw * mword 5 * mword 5 * mword 5 * string))).

Definition _s4097_ (_s4098_ : string) : M (option ((sop * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s4098_ with
    | _s4099_ =>
       (shiftw_mnemonic_matches_prefix _s4099_) >>= fun w__0 : option ((sop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4100_ _) =>
           (match (string_drop _s4099_ _s4100_) with
            | _s4101_ =>
               (spc_matches_prefix _s4101_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4102_ _) =>
                   (match (string_drop _s4101_ _s4102_) with
                    | _s4103_ =>
                       (reg_name_matches_prefix _s4103_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4104_ _) =>
                           (match (string_drop _s4103_ _s4104_) with
                            | _s4105_ =>
                               (sep_matches_prefix _s4105_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4106_ _) =>
                                   (match (string_drop _s4105_ _s4106_) with
                                    | _s4107_ =>
                                       (reg_name_matches_prefix _s4107_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4108_ _) =>
                                           (match (string_drop _s4107_ _s4108_) with
                                            | _s4109_ =>
                                               (sep_matches_prefix _s4109_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s4110_ _) =>
                                                           match (string_drop _s4109_ _s4110_) with
                                                           | _s4111_ =>
                                                              match (hex_bits_5_matches_prefix
                                                                       _s4111_) with
                                                              | Some (shamt, existT _ _s4112_ _) =>
                                                                 match (string_drop _s4111_ _s4112_) with
                                                                 | s_ =>
                                                                    Some (op, rd, rs1, shamt, s_)
                                                                 end
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((sop * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((sop * mword 5 * mword 5 * mword 5 * string))).

Definition _s4081_ (_s4082_ : string) : M (option ((mword 5 * mword 5 * mword 12 * string))) :=
   let _s4083_ := _s4082_ in
   (if string_startswith _s4083_ "addiw" then
      (match (string_drop _s4083_ (projT1 (string_length "addiw"))) with
       | _s4084_ =>
          (spc_matches_prefix _s4084_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s4085_ _) =>
              (match (string_drop _s4084_ _s4085_) with
               | _s4086_ =>
                  (reg_name_matches_prefix _s4086_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s4087_ _) =>
                      (match (string_drop _s4086_ _s4087_) with
                       | _s4088_ =>
                          (sep_matches_prefix _s4088_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s4089_ _) =>
                              (match (string_drop _s4088_ _s4089_) with
                               | _s4090_ =>
                                  (reg_name_matches_prefix _s4090_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s4091_ _) =>
                                      (match (string_drop _s4090_ _s4091_) with
                                       | _s4092_ =>
                                          (sep_matches_prefix _s4092_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s4093_ _) =>
                                                      match (string_drop _s4092_ _s4093_) with
                                                      | _s4094_ =>
                                                         match (hex_bits_12_matches_prefix _s4094_) with
                                                         | Some (imm, existT _ _s4095_ _) =>
                                                            match (string_drop _s4094_ _s4095_) with
                                                            | s_ => Some (rd, rs1, imm, s_)
                                                            end
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 12 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 12 * string)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 12 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 12 * string)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 12 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 12 * string)))
               end)
               : M (option ((mword 5 * mword 5 * mword 12 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 12 * string)))
       end)
       : M (option ((mword 5 * mword 5 * mword 12 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 12 * string))).

Definition _s4053_ (_s4054_ : string)
: M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string))) :=
   let _s4055_ := _s4054_ in
   (if string_startswith _s4055_ "s" then
      (match (string_drop _s4055_ (projT1 (string_length "s"))) with
       | _s4056_ =>
          (size_mnemonic_matches_prefix _s4056_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s4057_ _) =>
              (match (string_drop _s4056_ _s4057_) with
               | _s4058_ =>
                  (maybe_aq_matches_prefix _s4058_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (aq, existT _ _s4059_ _) =>
                      (match (string_drop _s4058_ _s4059_) with
                       | _s4060_ =>
                          (maybe_rl_matches_prefix _s4060_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (rl, existT _ _s4061_ _) =>
                              (match (string_drop _s4060_ _s4061_) with
                               | _s4062_ =>
                                  (spc_matches_prefix _s4062_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (tt, existT _ _s4063_ _) =>
                                      (match (string_drop _s4062_ _s4063_) with
                                       | _s4064_ =>
                                          (reg_name_matches_prefix _s4064_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (rs2, existT _ _s4065_ _) =>
                                              (match (string_drop _s4064_ _s4065_) with
                                               | _s4066_ =>
                                                  (sep_matches_prefix _s4066_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (tt, existT _ _s4067_ _) =>
                                                      (match (string_drop _s4066_ _s4067_) with
                                                       | _s4068_ =>
                                                          (match (hex_bits_12_matches_prefix _s4068_) with
                                                           | Some (imm, existT _ _s4069_ _) =>
                                                              (match (string_drop _s4068_ _s4069_) with
                                                               | _s4070_ =>
                                                                  (opt_spc_matches_prefix _s4070_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                                    0)})) =>
                                                                  (match w__6 with
                                                                   | Some (tt, existT _ _s4071_ _) =>
                                                                      let _s4072_ :=
                                                                        string_drop _s4070_ _s4071_ in
                                                                      (if string_startswith _s4072_
                                                                            "(" then
                                                                         (match (string_drop _s4072_
                                                                                   (projT1
                                                                                    (string_length
                                                                                       "("))) with
                                                                          | _s4073_ =>
                                                                             (opt_spc_matches_prefix
                                                                                _s4073_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                               0)})) =>
                                                                             (match w__7 with
                                                                              | Some
                                                                                (tt, existT _ _s4074_ _) =>
                                                                                 (match (string_drop
                                                                                           _s4073_
                                                                                           _s4074_) with
                                                                                  | _s4075_ =>
                                                                                     (reg_name_matches_prefix
                                                                                        _s4075_) >>= fun w__8 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     (match w__8 with
                                                                                      | Some
                                                                                        (rs1, existT _ _s4076_ _) =>
                                                                                         (match (string_drop
                                                                                                   _s4075_
                                                                                                   _s4076_) with
                                                                                          | _s4077_ =>
                                                                                             (opt_spc_matches_prefix
                                                                                                _s4077_) >>= fun w__9 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                               0)})) =>
                                                                                             returnm (match w__9 with
                                                                                                      | Some
                                                                                                        (tt, existT _ _s4078_ _) =>
                                                                                                         let _s4079_ :=
                                                                                                           string_drop
                                                                                                             _s4077_
                                                                                                             _s4078_ in
                                                                                                         if
                                                                                                           string_startswith
                                                                                                             _s4079_
                                                                                                             ")"
                                                                                                         then
                                                                                                           match (string_drop
                                                                                                                    _s4079_
                                                                                                                    (projT1
                                                                                                                     (string_length
                                                                                                                        ")"))) with
                                                                                                           | s_ =>
                                                                                                              Some
                                                                                                                (size, aq, rl, rs2, imm, rs1, s_)
                                                                                                           end
                                                                                                         else
                                                                                                           None
                                                                                                      | _ =>
                                                                                                         None
                                                                                                      end)
                                                                                          end)
                                                                                          : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                                      | _ =>
                                                                                         returnm None
                                                                                      end)
                                                                                      : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                                  end)
                                                                                  : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                              | _ => returnm None
                                                                              end)
                                                                              : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                          end)
                                                                          : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                       else returnm None)
                                                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                               end)
                                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                       end)
                                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                               end)
                               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                       end)
                       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
               end)
               : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
       end)
       : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)))
    else returnm None)
    : M (option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string))).

Definition _s4023_ (_s4024_ : string)
: M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string))) :=
   let _s4025_ := _s4024_ in
   (if string_startswith _s4025_ "l" then
      (match (string_drop _s4025_ (projT1 (string_length "l"))) with
       | _s4026_ =>
          (size_mnemonic_matches_prefix _s4026_) >>= fun w__0 : option ((word_width * {n : Z & ArithFact (n >=?
            0)})) =>
          (match w__0 with
           | Some (size, existT _ _s4027_ _) =>
              (match (string_drop _s4026_ _s4027_) with
               | _s4028_ =>
                  (maybe_u_matches_prefix _s4028_) >>= fun w__1 : option ((bool * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (is_unsigned, existT _ _s4029_ _) =>
                      (match (string_drop _s4028_ _s4029_) with
                       | _s4030_ =>
                          (maybe_aq_matches_prefix _s4030_) >>= fun w__2 : option ((bool * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (aq, existT _ _s4031_ _) =>
                              (match (string_drop _s4030_ _s4031_) with
                               | _s4032_ =>
                                  (maybe_rl_matches_prefix _s4032_) >>= fun w__3 : option ((bool * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rl, existT _ _s4033_ _) =>
                                      (match (string_drop _s4032_ _s4033_) with
                                       | _s4034_ =>
                                          (spc_matches_prefix _s4034_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          (match w__4 with
                                           | Some (tt, existT _ _s4035_ _) =>
                                              (match (string_drop _s4034_ _s4035_) with
                                               | _s4036_ =>
                                                  (reg_name_matches_prefix _s4036_) >>= fun w__5 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                    0)})) =>
                                                  (match w__5 with
                                                   | Some (rd, existT _ _s4037_ _) =>
                                                      (match (string_drop _s4036_ _s4037_) with
                                                       | _s4038_ =>
                                                          (sep_matches_prefix _s4038_) >>= fun w__6 : option ((unit * {n : Z & ArithFact (n >=?
                                                            0)})) =>
                                                          (match w__6 with
                                                           | Some (tt, existT _ _s4039_ _) =>
                                                              (match (string_drop _s4038_ _s4039_) with
                                                               | _s4040_ =>
                                                                  (match (hex_bits_12_matches_prefix
                                                                            _s4040_) with
                                                                   | Some (imm, existT _ _s4041_ _) =>
                                                                      (match (string_drop _s4040_
                                                                                _s4041_) with
                                                                       | _s4042_ =>
                                                                          (opt_spc_matches_prefix
                                                                             _s4042_) >>= fun w__7 : option ((unit * {n : Z & ArithFact (n >=?
                                                                            0)})) =>
                                                                          (match w__7 with
                                                                           | Some
                                                                             (tt, existT _ _s4043_ _) =>
                                                                              let _s4044_ :=
                                                                                string_drop _s4042_
                                                                                  _s4043_ in
                                                                              (if string_startswith
                                                                                    _s4044_ "(" then
                                                                                 (match (string_drop
                                                                                           _s4044_
                                                                                           (projT1
                                                                                            (string_length
                                                                                               "("))) with
                                                                                  | _s4045_ =>
                                                                                     (opt_spc_matches_prefix
                                                                                        _s4045_) >>= fun w__8 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                       0)})) =>
                                                                                     (match w__8 with
                                                                                      | Some
                                                                                        (tt, existT _ _s4046_ _) =>
                                                                                         (match (string_drop
                                                                                                   _s4045_
                                                                                                   _s4046_) with
                                                                                          | _s4047_ =>
                                                                                             (reg_name_matches_prefix
                                                                                                _s4047_) >>= fun w__9 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                                                               0)})) =>
                                                                                             (match w__9 with
                                                                                              | Some
                                                                                                (rs1, existT _ _s4048_ _) =>
                                                                                                 (match (string_drop
                                                                                                           _s4047_
                                                                                                           _s4048_) with
                                                                                                  | _s4049_ =>
                                                                                                     (opt_spc_matches_prefix
                                                                                                        _s4049_) >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=?
                                                                                                       0)})) =>
                                                                                                     returnm (match w__10 with
                                                                                                              | Some
                                                                                                                (tt, existT _ _s4050_ _) =>
                                                                                                                 let _s4051_ :=
                                                                                                                   string_drop
                                                                                                                     _s4049_
                                                                                                                     _s4050_ in
                                                                                                                 if
                                                                                                                   string_startswith
                                                                                                                     _s4051_
                                                                                                                     ")"
                                                                                                                 then
                                                                                                                   match (string_drop
                                                                                                                            _s4051_
                                                                                                                            (projT1
                                                                                                                             (string_length
                                                                                                                                ")"))) with
                                                                                                                   | s_ =>
                                                                                                                      Some
                                                                                                                        (size, is_unsigned, aq, rl, rd, imm, rs1, s_)
                                                                                                                   end
                                                                                                                 else
                                                                                                                   None
                                                                                                              | _ =>
                                                                                                                 None
                                                                                                              end)
                                                                                                  end)
                                                                                                  : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                                              | _ =>
                                                                                                 returnm None
                                                                                              end)
                                                                                              : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                                          end)
                                                                                          : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                                      | _ =>
                                                                                         returnm None
                                                                                      end)
                                                                                      : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                                  end)
                                                                                  : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                               else returnm None)
                                                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                           | _ => returnm None
                                                                           end)
                                                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                       end)
                                                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                                   | _ => returnm None
                                                                   end)
                                                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                               end)
                                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                           | _ => returnm None
                                                           end)
                                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                       end)
                                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                                   | _ => returnm None
                                                   end)
                                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                               end)
                                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                           | _ => returnm None
                                           end)
                                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                       end)
                                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                               end)
                               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                       end)
                       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
               end)
               : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
           | _ => returnm None
           end)
           : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
       end)
       : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)))
    else returnm None)
    : M (option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string))).

Definition _s4006_ (_s4007_ : string) : M (option ((rop * mword 5 * mword 5 * mword 5 * string))) :=
   (match _s4007_ with
    | _s4008_ =>
       (rtype_mnemonic_matches_prefix _s4008_) >>= fun w__0 : option ((rop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s4009_ _) =>
           (match (string_drop _s4008_ _s4009_) with
            | _s4010_ =>
               (spc_matches_prefix _s4010_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s4011_ _) =>
                   (match (string_drop _s4010_ _s4011_) with
                    | _s4012_ =>
                       (reg_name_matches_prefix _s4012_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s4013_ _) =>
                           (match (string_drop _s4012_ _s4013_) with
                            | _s4014_ =>
                               (sep_matches_prefix _s4014_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s4015_ _) =>
                                   (match (string_drop _s4014_ _s4015_) with
                                    | _s4016_ =>
                                       (reg_name_matches_prefix _s4016_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4017_ _) =>
                                           (match (string_drop _s4016_ _s4017_) with
                                            | _s4018_ =>
                                               (sep_matches_prefix _s4018_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               (match w__5 with
                                                | Some (tt, existT _ _s4019_ _) =>
                                                   (match (string_drop _s4018_ _s4019_) with
                                                    | _s4020_ =>
                                                       (reg_name_matches_prefix _s4020_) >>= fun w__6 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                                         0)})) =>
                                                       returnm (match w__6 with
                                                                | Some (rs2, existT _ _s4021_ _) =>
                                                                   match (string_drop _s4020_
                                                                            _s4021_) with
                                                                   | s_ =>
                                                                      Some (op, rd, rs1, rs2, s_)
                                                                   end
                                                                | _ => None
                                                                end)
                                                    end)
                                                    : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                                                | _ => returnm None
                                                end)
                                                : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                                            end)
                                            : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                                    end)
                                    : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                            end)
                            : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                    end)
                    : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
                | _ => returnm None
                end)
                : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
            end)
            : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
        | _ => returnm None
        end)
        : M (option ((rop * mword 5 * mword 5 * mword 5 * string)))
    end)
    : M (option ((rop * mword 5 * mword 5 * mword 5 * string))).

Definition _s3989_ (_s3990_ : string) : M (option ((sop * mword 5 * mword 5 * mword 6 * string))) :=
   (match _s3990_ with
    | _s3991_ =>
       (shiftiop_mnemonic_matches_prefix _s3991_) >>= fun w__0 : option ((sop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3992_ _) =>
           (match (string_drop _s3991_ _s3992_) with
            | _s3993_ =>
               (spc_matches_prefix _s3993_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3994_ _) =>
                   (match (string_drop _s3993_ _s3994_) with
                    | _s3995_ =>
                       (reg_name_matches_prefix _s3995_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3996_ _) =>
                           (match (string_drop _s3995_ _s3996_) with
                            | _s3997_ =>
                               (sep_matches_prefix _s3997_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3998_ _) =>
                                   (match (string_drop _s3997_ _s3998_) with
                                    | _s3999_ =>
                                       (reg_name_matches_prefix _s3999_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s4000_ _) =>
                                           (match (string_drop _s3999_ _s4000_) with
                                            | _s4001_ =>
                                               (sep_matches_prefix _s4001_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s4002_ _) =>
                                                           match (string_drop _s4001_ _s4002_) with
                                                           | _s4003_ =>
                                                              match (hex_bits_6_matches_prefix
                                                                       _s4003_) with
                                                              | Some (shamt, existT _ _s4004_ _) =>
                                                                 match (string_drop _s4003_ _s4004_) with
                                                                 | s_ =>
                                                                    Some (op, rd, rs1, shamt, s_)
                                                                 end
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                                    end)
                                    : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                            end)
                            : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                    end)
                    : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
                | _ => returnm None
                end)
                : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
            end)
            : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
        | _ => returnm None
        end)
        : M (option ((sop * mword 5 * mword 5 * mword 6 * string)))
    end)
    : M (option ((sop * mword 5 * mword 5 * mword 6 * string))).

Definition _s3972_ (_s3973_ : string) : M (option ((iop * mword 5 * mword 5 * mword 12 * string))) :=
   (match _s3973_ with
    | _s3974_ =>
       (itype_mnemonic_matches_prefix _s3974_) >>= fun w__0 : option ((iop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3975_ _) =>
           (match (string_drop _s3974_ _s3975_) with
            | _s3976_ =>
               (spc_matches_prefix _s3976_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3977_ _) =>
                   (match (string_drop _s3976_ _s3977_) with
                    | _s3978_ =>
                       (reg_name_matches_prefix _s3978_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3979_ _) =>
                           (match (string_drop _s3978_ _s3979_) with
                            | _s3980_ =>
                               (sep_matches_prefix _s3980_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3981_ _) =>
                                   (match (string_drop _s3980_ _s3981_) with
                                    | _s3982_ =>
                                       (reg_name_matches_prefix _s3982_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs1, existT _ _s3983_ _) =>
                                           (match (string_drop _s3982_ _s3983_) with
                                            | _s3984_ =>
                                               (sep_matches_prefix _s3984_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s3985_ _) =>
                                                           match (string_drop _s3984_ _s3985_) with
                                                           | _s3986_ =>
                                                              match (hex_bits_12_matches_prefix
                                                                       _s3986_) with
                                                              | Some (imm, existT _ _s3987_ _) =>
                                                                 match (string_drop _s3986_ _s3987_) with
                                                                 | s_ => Some (op, rd, rs1, imm, s_)
                                                                 end
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                                    end)
                                    : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                            end)
                            : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                    end)
                    : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
                | _ => returnm None
                end)
                : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
            end)
            : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
        | _ => returnm None
        end)
        : M (option ((iop * mword 5 * mword 5 * mword 12 * string)))
    end)
    : M (option ((iop * mword 5 * mword 5 * mword 12 * string))).

Definition _s3955_ (_s3956_ : string) : M (option ((bop * mword 5 * mword 5 * mword 13 * string))) :=
   (match _s3956_ with
    | _s3957_ =>
       (btype_mnemonic_matches_prefix _s3957_) >>= fun w__0 : option ((bop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3958_ _) =>
           (match (string_drop _s3957_ _s3958_) with
            | _s3959_ =>
               (spc_matches_prefix _s3959_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3960_ _) =>
                   (match (string_drop _s3959_ _s3960_) with
                    | _s3961_ =>
                       (reg_name_matches_prefix _s3961_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rs1, existT _ _s3962_ _) =>
                           (match (string_drop _s3961_ _s3962_) with
                            | _s3963_ =>
                               (sep_matches_prefix _s3963_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               (match w__3 with
                                | Some (tt, existT _ _s3964_ _) =>
                                   (match (string_drop _s3963_ _s3964_) with
                                    | _s3965_ =>
                                       (reg_name_matches_prefix _s3965_) >>= fun w__4 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                         0)})) =>
                                       (match w__4 with
                                        | Some (rs2, existT _ _s3966_ _) =>
                                           (match (string_drop _s3965_ _s3966_) with
                                            | _s3967_ =>
                                               (sep_matches_prefix _s3967_) >>= fun w__5 : option ((unit * {n : Z & ArithFact (n >=?
                                                 0)})) =>
                                               returnm (match w__5 with
                                                        | Some (tt, existT _ _s3968_ _) =>
                                                           match (string_drop _s3967_ _s3968_) with
                                                           | _s3969_ =>
                                                              match (hex_bits_13_matches_prefix
                                                                       _s3969_) with
                                                              | Some (imm, existT _ _s3970_ _) =>
                                                                 match (string_drop _s3969_ _s3970_) with
                                                                 | s_ =>
                                                                    Some (op, rs1, rs2, imm, s_)
                                                                 end
                                                              | _ => None
                                                              end
                                                           end
                                                        | _ => None
                                                        end)
                                            end)
                                            : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                                        | _ => returnm None
                                        end)
                                        : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                                    end)
                                    : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                                | _ => returnm None
                                end)
                                : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                            end)
                            : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                    end)
                    : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
                | _ => returnm None
                end)
                : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
            end)
            : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
        | _ => returnm None
        end)
        : M (option ((bop * mword 5 * mword 5 * mword 13 * string)))
    end)
    : M (option ((bop * mword 5 * mword 5 * mword 13 * string))).

Definition _s3939_ (_s3940_ : string) : M (option ((mword 5 * mword 5 * mword 12 * string))) :=
   let _s3941_ := _s3940_ in
   (if string_startswith _s3941_ "jalr" then
      (match (string_drop _s3941_ (projT1 (string_length "jalr"))) with
       | _s3942_ =>
          (spc_matches_prefix _s3942_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3943_ _) =>
              (match (string_drop _s3942_ _s3943_) with
               | _s3944_ =>
                  (reg_name_matches_prefix _s3944_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3945_ _) =>
                      (match (string_drop _s3944_ _s3945_) with
                       | _s3946_ =>
                          (sep_matches_prefix _s3946_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          (match w__2 with
                           | Some (tt, existT _ _s3947_ _) =>
                              (match (string_drop _s3946_ _s3947_) with
                               | _s3948_ =>
                                  (reg_name_matches_prefix _s3948_) >>= fun w__3 : option ((mword 5 * {n : Z & ArithFact (n >=?
                                    0)})) =>
                                  (match w__3 with
                                   | Some (rs1, existT _ _s3949_ _) =>
                                      (match (string_drop _s3948_ _s3949_) with
                                       | _s3950_ =>
                                          (sep_matches_prefix _s3950_) >>= fun w__4 : option ((unit * {n : Z & ArithFact (n >=?
                                            0)})) =>
                                          returnm (match w__4 with
                                                   | Some (tt, existT _ _s3951_ _) =>
                                                      match (string_drop _s3950_ _s3951_) with
                                                      | _s3952_ =>
                                                         match (hex_bits_12_matches_prefix _s3952_) with
                                                         | Some (imm, existT _ _s3953_ _) =>
                                                            match (string_drop _s3952_ _s3953_) with
                                                            | s_ => Some (rd, rs1, imm, s_)
                                                            end
                                                         | _ => None
                                                         end
                                                      end
                                                   | _ => None
                                                   end)
                                       end)
                                       : M (option ((mword 5 * mword 5 * mword 12 * string)))
                                   | _ => returnm None
                                   end)
                                   : M (option ((mword 5 * mword 5 * mword 12 * string)))
                               end)
                               : M (option ((mword 5 * mword 5 * mword 12 * string)))
                           | _ => returnm None
                           end)
                           : M (option ((mword 5 * mword 5 * mword 12 * string)))
                       end)
                       : M (option ((mword 5 * mword 5 * mword 12 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 5 * mword 12 * string)))
               end)
               : M (option ((mword 5 * mword 5 * mword 12 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 5 * mword 12 * string)))
       end)
       : M (option ((mword 5 * mword 5 * mword 12 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 5 * mword 12 * string))).

Definition _s3927_ (_s3928_ : string) : M (option ((mword 5 * mword 21 * string))) :=
   let _s3929_ := _s3928_ in
   (if string_startswith _s3929_ "jal" then
      (match (string_drop _s3929_ (projT1 (string_length "jal"))) with
       | _s3930_ =>
          (spc_matches_prefix _s3930_) >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=? 0)})) =>
          (match w__0 with
           | Some (tt, existT _ _s3931_ _) =>
              (match (string_drop _s3930_ _s3931_) with
               | _s3932_ =>
                  (reg_name_matches_prefix _s3932_) >>= fun w__1 : option ((mword 5 * {n : Z & ArithFact (n >=?
                    0)})) =>
                  (match w__1 with
                   | Some (rd, existT _ _s3933_ _) =>
                      (match (string_drop _s3932_ _s3933_) with
                       | _s3934_ =>
                          (sep_matches_prefix _s3934_) >>= fun w__2 : option ((unit * {n : Z & ArithFact (n >=?
                            0)})) =>
                          returnm (match w__2 with
                                   | Some (tt, existT _ _s3935_ _) =>
                                      match (string_drop _s3934_ _s3935_) with
                                      | _s3936_ =>
                                         match (hex_bits_21_matches_prefix _s3936_) with
                                         | Some (imm, existT _ _s3937_ _) =>
                                            match (string_drop _s3936_ _s3937_) with
                                            | s_ => Some (rd, imm, s_)
                                            end
                                         | _ => None
                                         end
                                      end
                                   | _ => None
                                   end)
                       end)
                       : M (option ((mword 5 * mword 21 * string)))
                   | _ => returnm None
                   end)
                   : M (option ((mword 5 * mword 21 * string)))
               end)
               : M (option ((mword 5 * mword 21 * string)))
           | _ => returnm None
           end)
           : M (option ((mword 5 * mword 21 * string)))
       end)
       : M (option ((mword 5 * mword 21 * string)))
    else returnm None)
    : M (option ((mword 5 * mword 21 * string))).

Definition _s3914_ (_s3915_ : string) : M (option ((uop * mword 5 * mword 20 * string))) :=
   (match _s3915_ with
    | _s3916_ =>
       (utype_mnemonic_matches_prefix _s3916_) >>= fun w__0 : option ((uop * {n : Z & ArithFact (n >=?
         0)})) =>
       (match w__0 with
        | Some (op, existT _ _s3917_ _) =>
           (match (string_drop _s3916_ _s3917_) with
            | _s3918_ =>
               (spc_matches_prefix _s3918_) >>= fun w__1 : option ((unit * {n : Z & ArithFact (n >=?
                 0)})) =>
               (match w__1 with
                | Some (tt, existT _ _s3919_ _) =>
                   (match (string_drop _s3918_ _s3919_) with
                    | _s3920_ =>
                       (reg_name_matches_prefix _s3920_) >>= fun w__2 : option ((mword 5 * {n : Z & ArithFact (n >=?
                         0)})) =>
                       (match w__2 with
                        | Some (rd, existT _ _s3921_ _) =>
                           (match (string_drop _s3920_ _s3921_) with
                            | _s3922_ =>
                               (sep_matches_prefix _s3922_) >>= fun w__3 : option ((unit * {n : Z & ArithFact (n >=?
                                 0)})) =>
                               returnm (match w__3 with
                                        | Some (tt, existT _ _s3923_ _) =>
                                           match (string_drop _s3922_ _s3923_) with
                                           | _s3924_ =>
                                              match (hex_bits_20_matches_prefix _s3924_) with
                                              | Some (imm, existT _ _s3925_ _) =>
                                                 match (string_drop _s3924_ _s3925_) with
                                                 | s_ => Some (op, rd, imm, s_)
                                                 end
                                              | _ => None
                                              end
                                           end
                                        | _ => None
                                        end)
                            end)
                            : M (option ((uop * mword 5 * mword 20 * string)))
                        | _ => returnm None
                        end)
                        : M (option ((uop * mword 5 * mword 20 * string)))
                    end)
                    : M (option ((uop * mword 5 * mword 20 * string)))
                | _ => returnm None
                end)
                : M (option ((uop * mword 5 * mword 20 * string)))
            end)
            : M (option ((uop * mword 5 * mword 20 * string)))
        | _ => returnm None
        end)
        : M (option ((uop * mword 5 * mword 20 * string)))
    end)
    : M (option ((uop * mword 5 * mword 20 * string))).

Definition assembly_matches_prefix (arg_ : string)
: M (option ((ast * {n : Z & ArithFact (n >=? 0)}))) :=
   let _s3926_ := arg_ in
   (_s3914_ _s3926_) >>= fun w__0 : option ((uop * mword 5 * mword 20 * string)) =>
   (if match w__0 with | Some (op, rd, imm, s_) => true | _ => false end then
      (_s3914_ _s3926_) >>= fun w__1 : option ((uop * mword 5 * mword 20 * string)) =>
      (match w__1 with
       | Some (op, rd, imm, s_) =>
          returnm (Some
                     (UTYPE (imm, rd, op), build_ex
                     (projT1
                      (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
       | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
       end)
       : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
    else
      (_s3927_ _s3926_) >>= fun w__4 : option ((mword 5 * mword 21 * string)) =>
      (if match w__4 with | Some (rd, imm, s_) => true | _ => false end then
         (_s3927_ _s3926_) >>= fun w__5 : option ((mword 5 * mword 21 * string)) =>
         (match w__5 with
          | Some (rd, imm, s_) =>
             returnm (Some
                        (RISCV_JAL (imm, rd), build_ex
                        (projT1
                         (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
          | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
          end)
          : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
       else
         (_s3939_ _s3926_) >>= fun w__8 : option ((mword 5 * mword 5 * mword 12 * string)) =>
         (if match w__8 with | Some (rd, rs1, imm, s_) => true | _ => false end then
            (_s3939_ _s3926_) >>= fun w__9 : option ((mword 5 * mword 5 * mword 12 * string)) =>
            (match w__9 with
             | Some (rd, rs1, imm, s_) =>
                returnm (Some
                           (RISCV_JALR (imm, rs1, rd), build_ex
                           (projT1
                            (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
             | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
             end)
             : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
          else
            (_s3955_ _s3926_) >>= fun w__12 : option ((bop * mword 5 * mword 5 * mword 13 * string)) =>
            (if match w__12 with | Some (op, rs1, rs2, imm, s_) => true | _ => false end then
               (_s3955_ _s3926_) >>= fun w__13 : option ((bop * mword 5 * mword 5 * mword 13 * string)) =>
               (match w__13 with
                | Some (op, rs1, rs2, imm, s_) =>
                   returnm (Some
                              (BTYPE (imm, rs2, rs1, op), build_ex
                              (projT1
                               (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
                | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                end)
                : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
             else
               (_s3972_ _s3926_) >>= fun w__16 : option ((iop * mword 5 * mword 5 * mword 12 * string)) =>
               (if match w__16 with | Some (op, rd, rs1, imm, s_) => true | _ => false end then
                  (_s3972_ _s3926_) >>= fun w__17 : option ((iop * mword 5 * mword 5 * mword 12 * string)) =>
                  (match w__17 with
                   | Some (op, rd, rs1, imm, s_) =>
                      returnm (Some
                                 (ITYPE (imm, rs1, rd, op), build_ex
                                 (projT1
                                  (sub_nat (projT1 (string_length arg_)) (projT1 (string_length s_))))))
                   | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                   end)
                   : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                else
                  (_s3989_ _s3926_) >>= fun w__20 : option ((sop * mword 5 * mword 5 * mword 6 * string)) =>
                  (if match w__20 with | Some (op, rd, rs1, shamt, s_) => true | _ => false end then
                     (_s3989_ _s3926_) >>= fun w__21 : option ((sop * mword 5 * mword 5 * mword 6 * string)) =>
                     (match w__21 with
                      | Some (op, rd, rs1, shamt, s_) =>
                         returnm (Some
                                    (SHIFTIOP (shamt, rs1, rd, op), build_ex
                                    (projT1
                                     (sub_nat (projT1 (string_length arg_))
                                        (projT1
                                         (string_length s_))))))
                      | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                      end)
                      : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                   else
                     (_s4006_ _s3926_) >>= fun w__24 : option ((rop * mword 5 * mword 5 * mword 5 * string)) =>
                     (if match w__24 with | Some (op, rd, rs1, rs2, s_) => true | _ => false end
                      then
                        (_s4006_ _s3926_) >>= fun w__25 : option ((rop * mword 5 * mword 5 * mword 5 * string)) =>
                        (match w__25 with
                         | Some (op, rd, rs1, rs2, s_) =>
                            returnm (Some
                                       (RTYPE (rs2, rs1, rd, op), build_ex
                                       (projT1
                                        (sub_nat (projT1 (string_length arg_))
                                           (projT1
                                            (string_length s_))))))
                         | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                         end)
                         : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                      else
                        (_s4023_ _s3926_) >>= fun w__28 : option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)) =>
                        (if match w__28 with
                            | Some (size, is_unsigned, aq, rl, rd, imm, rs1, s_) => true
                            | _ => false
                            end then
                           (_s4023_ _s3926_) >>= fun w__29 : option ((word_width * bool * bool * bool * mword 5 * mword 12 * mword 5 * string)) =>
                           (match w__29 with
                            | Some (size, is_unsigned, aq, rl, rd, imm, rs1, s_) =>
                               returnm (Some
                                          (LOAD (imm, rs1, rd, is_unsigned, size, aq, rl), build_ex
                                          (projT1
                                           (sub_nat (projT1 (string_length arg_))
                                              (projT1
                                               (string_length s_))))))
                            | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                            end)
                            : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                         else
                           (_s4053_ _s3926_) >>= fun w__32 : option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)) =>
                           (if match w__32 with
                               | Some (size, aq, rl, rs2, imm, rs1, s_) => true
                               | _ => false
                               end then
                              (_s4053_ _s3926_) >>= fun w__33 : option ((word_width * bool * bool * mword 5 * mword 12 * mword 5 * string)) =>
                              (match w__33 with
                               | Some (size, aq, rl, rs2, imm, rs1, s_) =>
                                  returnm (Some
                                             (STORE (imm, rs2, rs1, size, aq, rl), build_ex
                                             (projT1
                                              (sub_nat (projT1 (string_length arg_))
                                                 (projT1
                                                  (string_length s_))))))
                               | _ => exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                               end)
                               : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                            else
                              (_s4081_ _s3926_) >>= fun w__36 : option ((mword 5 * mword 5 * mword 12 * string)) =>
                              (if match w__36 with
                                  | Some (rd, rs1, imm, s_) => Z.eqb 32 64
                                  | _ => false
                                  end then
                                 (_s4081_ _s3926_) >>= fun w__37 : option ((mword 5 * mword 5 * mword 12 * string)) =>
                                 (match w__37 with
                                  | Some (rd, rs1, imm, s_) =>
                                     returnm (Some
                                                (ADDIW (imm, rs1, rd), build_ex
                                                (projT1
                                                 (sub_nat (projT1 (string_length arg_))
                                                    (projT1
                                                     (string_length s_))))))
                                  | _ =>
                                     exit tt  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                  end)
                                  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                               else
                                 (_s4097_ _s3926_) >>= fun w__40 : option ((sop * mword 5 * mword 5 * mword 5 * string)) =>
                                 (if match w__40 with
                                     | Some (op, rd, rs1, shamt, s_) => Z.eqb 32 64
                                     | _ => false
                                     end then
                                    (_s4097_ _s3926_) >>= fun w__41 : option ((sop * mword 5 * mword 5 * mword 5 * string)) =>
                                    (match w__41 with
                                     | Some (op, rd, rs1, shamt, s_) =>
                                        returnm (Some
                                                   (SHIFTW (shamt, rs1, rd, op), build_ex
                                                   (projT1
                                                    (sub_nat (projT1 (string_length arg_))
                                                       (projT1
                                                        (string_length s_))))))
                                     | _ =>
                                        exit tt
                                         : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                     end)
                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                  else
                                    (_s4114_ _s3926_) >>= fun w__44 : option ((ropw * mword 5 * mword 5 * mword 5 * string)) =>
                                    (if match w__44 with
                                        | Some (op, rd, rs1, rs2, s_) => Z.eqb 32 64
                                        | _ => false
                                        end then
                                       (_s4114_ _s3926_) >>= fun w__45 : option ((ropw * mword 5 * mword 5 * mword 5 * string)) =>
                                       (match w__45 with
                                        | Some (op, rd, rs1, rs2, s_) =>
                                           returnm (Some
                                                      (RTYPEW (rs2, rs1, rd, op), build_ex
                                                      (projT1
                                                       (sub_nat (projT1 (string_length arg_))
                                                          (projT1
                                                           (string_length s_))))))
                                        | _ =>
                                           exit tt
                                            : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                        end)
                                        : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                     else
                                       (_s4131_ _s3926_) >>= fun w__48 : option ((sopw * mword 5 * mword 5 * mword 5 * string)) =>
                                       (if match w__48 with
                                           | Some (op, rd, rs1, shamt, s_) => Z.eqb 32 64
                                           | _ => false
                                           end then
                                          (_s4131_ _s3926_) >>= fun w__49 : option ((sopw * mword 5 * mword 5 * mword 5 * string)) =>
                                          (match w__49 with
                                           | Some (op, rd, rs1, shamt, s_) =>
                                              returnm (Some
                                                         (SHIFTIWOP (shamt, rs1, rd, op), build_ex
                                                         (projT1
                                                          (sub_nat (projT1 (string_length arg_))
                                                             (projT1
                                                              (string_length s_))))))
                                           | _ =>
                                              exit tt
                                               : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                           end)
                                           : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                        else
                                          (_s4148_ _s3926_) >>= fun w__52 : option ((mword 4 * mword 4 * string)) =>
                                          (if match w__52 with
                                              | Some (pred, succ, s_) => true
                                              | _ => false
                                              end then
                                             (_s4148_ _s3926_) >>= fun w__53 : option ((mword 4 * mword 4 * string)) =>
                                             (match w__53 with
                                              | Some (pred, succ, s_) =>
                                                 returnm (Some
                                                            (FENCE (pred, succ), build_ex
                                                            (projT1
                                                             (sub_nat (projT1 (string_length arg_))
                                                                (projT1
                                                                 (string_length s_))))))
                                              | _ =>
                                                 exit tt
                                                  : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              end)
                                              : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                           else
                                             (_s4160_ _s3926_) >>= fun w__56 : option ((mword 4 * mword 4 * string)) =>
                                             (if match w__56 with
                                                 | Some (pred, succ, s_) => true
                                                 | _ => false
                                                 end then
                                                (_s4160_ _s3926_) >>= fun w__57 : option ((mword 4 * mword 4 * string)) =>
                                                (match w__57 with
                                                 | Some (pred, succ, s_) =>
                                                    returnm (Some
                                                               (FENCE_TSO (pred, succ), build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else if match (_s4172_ _s3926_) with
                                                      | Some s_ => true
                                                      | _ => false
                                                      end then
                                                (match (_s4172_ _s3926_) with
                                                 | Some s_ =>
                                                    returnm (Some
                                                               (FENCEI tt, build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else if match (_s4176_ _s3926_) with
                                                      | Some s_ => true
                                                      | _ => false
                                                      end then
                                                (match (_s4176_ _s3926_) with
                                                 | Some s_ =>
                                                    returnm (Some
                                                               (ECALL tt, build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else if match (_s4180_ _s3926_) with
                                                      | Some s_ => true
                                                      | _ => false
                                                      end then
                                                (match (_s4180_ _s3926_) with
                                                 | Some s_ =>
                                                    returnm (Some
                                                               (MRET tt, build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else if match (_s4184_ _s3926_) with
                                                      | Some s_ => true
                                                      | _ => false
                                                      end then
                                                (match (_s4184_ _s3926_) with
                                                 | Some s_ =>
                                                    returnm (Some
                                                               (SRET tt, build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else if match (_s4188_ _s3926_) with
                                                      | Some s_ => true
                                                      | _ => false
                                                      end then
                                                (match (_s4188_ _s3926_) with
                                                 | Some s_ =>
                                                    returnm (Some
                                                               (EBREAK tt, build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else if match (_s4192_ _s3926_) with
                                                      | Some s_ => true
                                                      | _ => false
                                                      end then
                                                (match (_s4192_ _s3926_) with
                                                 | Some s_ =>
                                                    returnm (Some
                                                               (WFI tt, build_ex
                                                               (projT1
                                                                (sub_nat
                                                                   (projT1
                                                                    (string_length arg_))
                                                                   (projT1
                                                                    (string_length s_))))))
                                                 | _ =>
                                                    exit tt
                                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 end)
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                              else
                                                (_s4196_ _s3926_) >>= fun w__72 : option ((mword 5 * mword 5 * string)) =>
                                                (if match w__72 with
                                                    | Some (rs1, rs2, s_) => true
                                                    | _ => false
                                                    end then
                                                   (_s4196_ _s3926_) >>= fun w__73 : option ((mword 5 * mword 5 * string)) =>
                                                   (match w__73 with
                                                    | Some (rs1, rs2, s_) =>
                                                       returnm (Some
                                                                  (SFENCE_VMA (rs1, rs2), build_ex
                                                                  (projT1
                                                                   (sub_nat
                                                                      (projT1
                                                                       (string_length arg_))
                                                                      (projT1
                                                                       (string_length s_))))))
                                                    | _ =>
                                                       exit tt
                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                         0)})))
                                                    end)
                                                    : M (option ((ast * {n : Z & ArithFact (n >=? 0)})))
                                                 else
                                                   (_s4208_ _s3926_) >>= fun w__76 : option ((word_width * bool * bool * mword 5 * mword 5 * string)) =>
                                                   (if match w__76 with
                                                       | Some (size, aq, rl, rd, rs1, s_) => true
                                                       | _ => false
                                                       end then
                                                      (_s4208_ _s3926_) >>= fun w__77 : option ((word_width * bool * bool * mword 5 * mword 5 * string)) =>
                                                      (match w__77 with
                                                       | Some (size, aq, rl, rd, rs1, s_) =>
                                                          returnm (Some
                                                                     (LOADRES
                                                                        (aq, rl, rs1, size, rd), build_ex
                                                                     (projT1
                                                                      (sub_nat
                                                                         (projT1
                                                                          (string_length arg_))
                                                                         (projT1
                                                                          (string_length s_))))))
                                                       | _ =>
                                                          exit tt
                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                            0)})))
                                                       end)
                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                        0)})))
                                                    else
                                                      (_s4226_ _s3926_) >>= fun w__80 : option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                      (if match w__80 with
                                                          | Some (size, aq, rl, rd, rs1, rs2, s_) =>
                                                             true
                                                          | _ => false
                                                          end then
                                                         (_s4226_ _s3926_) >>= fun w__81 : option ((word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                         (match w__81 with
                                                          | Some (size, aq, rl, rd, rs1, rs2, s_) =>
                                                             returnm (Some
                                                                        (STORECON
                                                                           (aq, rl, rs2, rs1, size, rd), build_ex
                                                                        (projT1
                                                                         (sub_nat
                                                                            (projT1
                                                                             (string_length arg_))
                                                                            (projT1
                                                                             (string_length s_))))))
                                                          | _ =>
                                                             exit tt
                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                               0)})))
                                                          end)
                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                           0)})))
                                                       else
                                                         (_s4248_ _s3926_) >>= fun w__84 : option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                         (if match w__84 with
                                                             | Some
                                                               (op, width, aq, rl, rd, rs2, rs1, s_) =>
                                                                true
                                                             | _ => false
                                                             end then
                                                            (_s4248_ _s3926_) >>= fun w__85 : option ((amoop * word_width * bool * bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                            (match w__85 with
                                                             | Some
                                                               (op, width, aq, rl, rd, rs2, rs1, s_) =>
                                                                returnm (Some
                                                                           (AMO
                                                                              (op, aq, rl, rs2, rs1, width, rd), build_ex
                                                                           (projT1
                                                                            (sub_nat
                                                                               (projT1
                                                                                (string_length arg_))
                                                                               (projT1
                                                                                (string_length s_))))))
                                                             | _ =>
                                                                exit tt
                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                  0)})))
                                                             end)
                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                              0)})))
                                                          else if match (_s4274_ _s3926_) with
                                                                  | Some s_ => true
                                                                  | _ => false
                                                                  end then
                                                            (match (_s4274_ _s3926_) with
                                                             | Some s_ =>
                                                                returnm (Some
                                                                           (C_NOP tt, build_ex
                                                                           (projT1
                                                                            (sub_nat
                                                                               (projT1
                                                                                (string_length arg_))
                                                                               (projT1
                                                                                (string_length s_))))))
                                                             | _ =>
                                                                exit tt
                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                  0)})))
                                                             end)
                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                              0)})))
                                                          else
                                                            (_s4278_ _s3926_) >>= fun w__90 : option ((mword 3 * mword 8 * string)) =>
                                                            (if match w__90 with
                                                                | Some (rdc, nzimm, s_) =>
                                                                   neq_vec nzimm (Ox"00"  : mword 8)
                                                                | _ => false
                                                                end then
                                                               (_s4278_ _s3926_) >>= fun w__91 : option ((mword 3 * mword 8 * string)) =>
                                                               (match w__91 with
                                                                | Some (rdc, nzimm, s_) =>
                                                                   returnm (Some
                                                                              (C_ADDI4SPN
                                                                                 (rdc, nzimm), build_ex
                                                                              (projT1
                                                                               (sub_nat
                                                                                  (projT1
                                                                                   (string_length
                                                                                      arg_))
                                                                                  (projT1
                                                                                   (string_length s_))))))
                                                                | _ =>
                                                                   exit tt
                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                     0)})))
                                                                end)
                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                 0)})))
                                                             else
                                                               (_s4290_ _s3926_) >>= fun w__94 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                               (if match w__94 with
                                                                   | Some (rdc, rsc, uimm, s_) =>
                                                                      true
                                                                   | _ => false
                                                                   end then
                                                                  (_s4290_ _s3926_) >>= fun w__95 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                  (match w__95 with
                                                                   | Some (rdc, rsc, uimm, s_) =>
                                                                      returnm (Some
                                                                                 (C_LW
                                                                                    (uimm, rsc, rdc), build_ex
                                                                                 (projT1
                                                                                  (sub_nat
                                                                                     (projT1
                                                                                      (string_length
                                                                                         arg_))
                                                                                     (projT1
                                                                                      (string_length
                                                                                         s_))))))
                                                                   | _ =>
                                                                      exit tt
                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                        0)})))
                                                                   end)
                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                    0)})))
                                                                else
                                                                  (_s4306_ _s3926_) >>= fun w__98 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                  (if match w__98 with
                                                                      | Some (rdc, rsc, uimm, s_) =>
                                                                         Z.eqb 32 64
                                                                      | _ => false
                                                                      end then
                                                                     (_s4306_ _s3926_) >>= fun w__99 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                     (match w__99 with
                                                                      | Some (rdc, rsc, uimm, s_) =>
                                                                         returnm (Some
                                                                                    (C_LD
                                                                                       (uimm, rsc, rdc), build_ex
                                                                                    (projT1
                                                                                     (sub_nat
                                                                                        (projT1
                                                                                         (string_length
                                                                                            arg_))
                                                                                        (projT1
                                                                                         (string_length
                                                                                            s_))))))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                           0)})))
                                                                      end)
                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                       0)})))
                                                                   else
                                                                     (_s4322_ _s3926_) >>= fun w__102 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                     (if match w__102 with
                                                                         | Some
                                                                           (rsc1, rsc2, uimm, s_) =>
                                                                            true
                                                                         | _ => false
                                                                         end then
                                                                        (_s4322_ _s3926_) >>= fun w__103 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                        (match w__103 with
                                                                         | Some
                                                                           (rsc1, rsc2, uimm, s_) =>
                                                                            returnm (Some
                                                                                       (C_SW
                                                                                          (uimm, rsc1, rsc2), build_ex
                                                                                       (projT1
                                                                                        (sub_nat
                                                                                           (projT1
                                                                                            (string_length
                                                                                               arg_))
                                                                                           (projT1
                                                                                            (string_length
                                                                                               s_))))))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                              0)})))
                                                                         end)
                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                          0)})))
                                                                      else
                                                                        (_s4338_ _s3926_) >>= fun w__106 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                        (if match w__106 with
                                                                            | Some
                                                                              (rsc1, rsc2, uimm, s_) =>
                                                                               Z.eqb 32 64
                                                                            | _ => false
                                                                            end then
                                                                           (_s4338_ _s3926_) >>= fun w__107 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                           (match w__107 with
                                                                            | Some
                                                                              (rsc1, rsc2, uimm, s_) =>
                                                                               returnm (Some
                                                                                          (C_SD
                                                                                             (uimm, rsc1, rsc2), build_ex
                                                                                          (projT1
                                                                                           (sub_nat
                                                                                              (projT1
                                                                                               (string_length
                                                                                                  arg_))
                                                                                              (projT1
                                                                                               (string_length
                                                                                                  s_))))))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                 0)})))
                                                                            end)
                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                             0)})))
                                                                         else
                                                                           (_s4354_ _s3926_) >>= fun w__110 : option ((mword 5 * mword 6 * string)) =>
                                                                           (if match w__110 with
                                                                               | Some (rsd, nzi, s_) =>
                                                                                  andb
                                                                                    (neq_vec nzi
                                                                                       ('b"000000"
                                                                                        : mword 6))
                                                                                    (neq_vec rsd
                                                                                       zreg)
                                                                               | _ => false
                                                                               end then
                                                                              (_s4354_ _s3926_) >>= fun w__111 : option ((mword 5 * mword 6 * string)) =>
                                                                              (match w__111 with
                                                                               | Some (rsd, nzi, s_) =>
                                                                                  returnm (Some
                                                                                             (C_ADDI
                                                                                                (nzi, rsd), build_ex
                                                                                             (projT1
                                                                                              (sub_nat
                                                                                                 (projT1
                                                                                                  (string_length
                                                                                                     arg_))
                                                                                                 (projT1
                                                                                                  (string_length
                                                                                                     s_))))))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                    0)})))
                                                                               end)
                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                0)})))
                                                                            else
                                                                              (_s4366_ _s3926_) >>= fun w__114 : option ((mword 11 * string)) =>
                                                                              (if match w__114 with
                                                                                  | Some (imm, s_) =>
                                                                                     Z.eqb 32 32
                                                                                  | _ => false
                                                                                  end then
                                                                                 (_s4366_ _s3926_) >>= fun w__115 : option ((mword 11 * string)) =>
                                                                                 (match w__115 with
                                                                                  | Some (imm, s_) =>
                                                                                     returnm (Some
                                                                                                (C_JAL
                                                                                                   imm, build_ex
                                                                                                (projT1
                                                                                                 (sub_nat
                                                                                                    (projT1
                                                                                                     (string_length
                                                                                                        arg_))
                                                                                                    (projT1
                                                                                                     (string_length
                                                                                                        s_))))))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                       0)})))
                                                                                  end)
                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                   0)})))
                                                                               else
                                                                                 (_s4374_ _s3926_) >>= fun w__118 : option ((mword 5 * mword 6 * string)) =>
                                                                                 (if match w__118 with
                                                                                     | Some
                                                                                       (rsd, imm, s_) =>
                                                                                        Z.eqb 32 64
                                                                                     | _ => false
                                                                                     end then
                                                                                    (_s4374_ _s3926_) >>= fun w__119 : option ((mword 5 * mword 6 * string)) =>
                                                                                    (match w__119 with
                                                                                     | Some
                                                                                       (rsd, imm, s_) =>
                                                                                        returnm (Some
                                                                                                   (C_ADDIW
                                                                                                      (imm, rsd), build_ex
                                                                                                   (projT1
                                                                                                    (sub_nat
                                                                                                       (projT1
                                                                                                        (string_length
                                                                                                           arg_))
                                                                                                       (projT1
                                                                                                        (string_length
                                                                                                           s_))))))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                          0)})))
                                                                                     end)
                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                      0)})))
                                                                                  else
                                                                                    (_s4386_ _s3926_) >>= fun w__122 : option ((mword 5 * mword 6 * string)) =>
                                                                                    (if match w__122 with
                                                                                        | Some
                                                                                          (rd, imm, s_) =>
                                                                                           neq_vec
                                                                                             rd zreg
                                                                                        | _ => false
                                                                                        end then
                                                                                       (_s4386_
                                                                                          _s3926_) >>= fun w__123 : option ((mword 5 * mword 6 * string)) =>
                                                                                       (match w__123 with
                                                                                        | Some
                                                                                          (rd, imm, s_) =>
                                                                                           returnm (Some
                                                                                                      (C_LI
                                                                                                         (imm, rd), build_ex
                                                                                                      (projT1
                                                                                                       (sub_nat
                                                                                                          (projT1
                                                                                                           (string_length
                                                                                                              arg_))
                                                                                                          (projT1
                                                                                                           (string_length
                                                                                                              s_))))))
                                                                                        | _ =>
                                                                                           exit tt
                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                             0)})))
                                                                                        end)
                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                         0)})))
                                                                                     else
                                                                                       (_s4398_
                                                                                          _s3926_) >>= fun w__126 : option ((mword 6 * string)) =>
                                                                                       (if match w__126 with
                                                                                           | Some
                                                                                             (imm, s_) =>
                                                                                              neq_vec
                                                                                                imm
                                                                                                ('b"000000"
                                                                                                 : mword 6)
                                                                                           | _ =>
                                                                                              false
                                                                                           end then
                                                                                          (_s4398_
                                                                                             _s3926_) >>= fun w__127 : option ((mword 6 * string)) =>
                                                                                          (match w__127 with
                                                                                           | Some
                                                                                             (imm, s_) =>
                                                                                              returnm (Some
                                                                                                         (C_ADDI16SP
                                                                                                            imm, build_ex
                                                                                                         (projT1
                                                                                                          (sub_nat
                                                                                                             (projT1
                                                                                                              (string_length
                                                                                                                 arg_))
                                                                                                             (projT1
                                                                                                              (string_length
                                                                                                                 s_))))))
                                                                                           | _ =>
                                                                                              exit tt
                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                0)})))
                                                                                           end)
                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                            0)})))
                                                                                        else
                                                                                          (_s4406_
                                                                                             _s3926_) >>= fun w__130 : option ((mword 5 * mword 6 * string)) =>
                                                                                          (if match w__130 with
                                                                                              | Some
                                                                                                (rd, imm, s_) =>
                                                                                                 andb
                                                                                                   (neq_vec
                                                                                                      rd
                                                                                                      zreg)
                                                                                                   (andb
                                                                                                      (neq_vec
                                                                                                         rd
                                                                                                         sp)
                                                                                                      (neq_vec
                                                                                                         imm
                                                                                                         ('b"000000"
                                                                                                          : mword 6)))
                                                                                              | _ =>
                                                                                                 false
                                                                                              end
                                                                                           then
                                                                                             (_s4406_
                                                                                                _s3926_) >>= fun w__131 : option ((mword 5 * mword 6 * string)) =>
                                                                                             (match w__131 with
                                                                                              | Some
                                                                                                (rd, imm, s_) =>
                                                                                                 returnm (Some
                                                                                                            (C_LUI
                                                                                                               (imm, rd), build_ex
                                                                                                            (projT1
                                                                                                             (sub_nat
                                                                                                                (projT1
                                                                                                                 (string_length
                                                                                                                    arg_))
                                                                                                                (projT1
                                                                                                                 (string_length
                                                                                                                    s_))))))
                                                                                              | _ =>
                                                                                                 exit tt
                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                   0)})))
                                                                                              end)
                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                               0)})))
                                                                                           else
                                                                                             (_s4418_
                                                                                                _s3926_) >>= fun w__134 : option ((mword 3 * mword 6 * string)) =>
                                                                                             (if match w__134 with
                                                                                                 | Some
                                                                                                   (rsd, shamt, s_) =>
                                                                                                    neq_vec
                                                                                                      shamt
                                                                                                      ('b"000000"
                                                                                                       : mword 6)
                                                                                                 | _ =>
                                                                                                    false
                                                                                                 end
                                                                                              then
                                                                                                (_s4418_
                                                                                                   _s3926_) >>= fun w__135 : option ((mword 3 * mword 6 * string)) =>
                                                                                                (match w__135 with
                                                                                                 | Some
                                                                                                   (rsd, shamt, s_) =>
                                                                                                    returnm (Some
                                                                                                               (C_SRLI
                                                                                                                  (shamt, rsd), build_ex
                                                                                                               (projT1
                                                                                                                (sub_nat
                                                                                                                   (projT1
                                                                                                                    (string_length
                                                                                                                       arg_))
                                                                                                                   (projT1
                                                                                                                    (string_length
                                                                                                                       s_))))))
                                                                                                 | _ =>
                                                                                                    exit tt
                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                      0)})))
                                                                                                 end)
                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                  0)})))
                                                                                              else
                                                                                                (_s4430_
                                                                                                   _s3926_) >>= fun w__138 : option ((mword 3 * mword 6 * string)) =>
                                                                                                (if match w__138 with
                                                                                                    | Some
                                                                                                      (rsd, shamt, s_) =>
                                                                                                       neq_vec
                                                                                                         shamt
                                                                                                         ('b"000000"
                                                                                                          : mword 6)
                                                                                                    | _ =>
                                                                                                       false
                                                                                                    end
                                                                                                 then
                                                                                                   (_s4430_
                                                                                                      _s3926_) >>= fun w__139 : option ((mword 3 * mword 6 * string)) =>
                                                                                                   (match w__139 with
                                                                                                    | Some
                                                                                                      (rsd, shamt, s_) =>
                                                                                                       returnm (Some
                                                                                                                  (C_SRAI
                                                                                                                     (shamt, rsd), build_ex
                                                                                                                  (projT1
                                                                                                                   (sub_nat
                                                                                                                      (projT1
                                                                                                                       (string_length
                                                                                                                          arg_))
                                                                                                                      (projT1
                                                                                                                       (string_length
                                                                                                                          s_))))))
                                                                                                    | _ =>
                                                                                                       exit tt
                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                         0)})))
                                                                                                    end)
                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                     0)})))
                                                                                                 else
                                                                                                   (_s4442_
                                                                                                      _s3926_) >>= fun w__142 : option ((mword 3 * mword 6 * string)) =>
                                                                                                   (if
                                                                                                      match w__142 with
                                                                                                      | Some
                                                                                                        (rsd, imm, s_) =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                    then
                                                                                                      (_s4442_
                                                                                                         _s3926_) >>= fun w__143 : option ((mword 3 * mword 6 * string)) =>
                                                                                                      (match w__143 with
                                                                                                       | Some
                                                                                                         (rsd, imm, s_) =>
                                                                                                          returnm (Some
                                                                                                                     (C_ANDI
                                                                                                                        (imm, rsd), build_ex
                                                                                                                     (projT1
                                                                                                                      (sub_nat
                                                                                                                         (projT1
                                                                                                                          (string_length
                                                                                                                             arg_))
                                                                                                                         (projT1
                                                                                                                          (string_length
                                                                                                                             s_))))))
                                                                                                       | _ =>
                                                                                                          exit tt
                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                            0)})))
                                                                                                       end)
                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                        0)})))
                                                                                                    else
                                                                                                      (_s4454_
                                                                                                         _s3926_) >>= fun w__146 : option ((mword 3 * mword 3 * string)) =>
                                                                                                      (if
                                                                                                         match w__146 with
                                                                                                         | Some
                                                                                                           (rsd, rs2, s_) =>
                                                                                                            true
                                                                                                         | _ =>
                                                                                                            false
                                                                                                         end
                                                                                                       then
                                                                                                         (_s4454_
                                                                                                            _s3926_) >>= fun w__147 : option ((mword 3 * mword 3 * string)) =>
                                                                                                         (match w__147 with
                                                                                                          | Some
                                                                                                            (rsd, rs2, s_) =>
                                                                                                             returnm (Some
                                                                                                                        (C_SUB
                                                                                                                           (rsd, rs2), build_ex
                                                                                                                        (projT1
                                                                                                                         (sub_nat
                                                                                                                            (projT1
                                                                                                                             (string_length
                                                                                                                                arg_))
                                                                                                                            (projT1
                                                                                                                             (string_length
                                                                                                                                s_))))))
                                                                                                          | _ =>
                                                                                                             exit tt
                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                               0)})))
                                                                                                          end)
                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                           0)})))
                                                                                                       else
                                                                                                         (_s4466_
                                                                                                            _s3926_) >>= fun w__150 : option ((mword 3 * mword 3 * string)) =>
                                                                                                         (if
                                                                                                            match w__150 with
                                                                                                            | Some
                                                                                                              (rsd, rs2, s_) =>
                                                                                                               true
                                                                                                            | _ =>
                                                                                                               false
                                                                                                            end
                                                                                                          then
                                                                                                            (_s4466_
                                                                                                               _s3926_) >>= fun w__151 : option ((mword 3 * mword 3 * string)) =>
                                                                                                            (match w__151 with
                                                                                                             | Some
                                                                                                               (rsd, rs2, s_) =>
                                                                                                                returnm (Some
                                                                                                                           (C_XOR
                                                                                                                              (rsd, rs2), build_ex
                                                                                                                           (projT1
                                                                                                                            (sub_nat
                                                                                                                               (projT1
                                                                                                                                (string_length
                                                                                                                                   arg_))
                                                                                                                               (projT1
                                                                                                                                (string_length
                                                                                                                                   s_))))))
                                                                                                             | _ =>
                                                                                                                exit tt
                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                  0)})))
                                                                                                             end)
                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                              0)})))
                                                                                                          else
                                                                                                            (_s4478_
                                                                                                               _s3926_) >>= fun w__154 : option ((mword 3 * mword 3 * string)) =>
                                                                                                            (if
                                                                                                               match w__154 with
                                                                                                               | Some
                                                                                                                 (rsd, rs2, s_) =>
                                                                                                                  true
                                                                                                               | _ =>
                                                                                                                  false
                                                                                                               end
                                                                                                             then
                                                                                                               (_s4478_
                                                                                                                  _s3926_) >>= fun w__155 : option ((mword 3 * mword 3 * string)) =>
                                                                                                               (match w__155 with
                                                                                                                | Some
                                                                                                                  (rsd, rs2, s_) =>
                                                                                                                   returnm (Some
                                                                                                                              (C_OR
                                                                                                                                 (rsd, rs2), build_ex
                                                                                                                              (projT1
                                                                                                                               (sub_nat
                                                                                                                                  (projT1
                                                                                                                                   (string_length
                                                                                                                                      arg_))
                                                                                                                                  (projT1
                                                                                                                                   (string_length
                                                                                                                                      s_))))))
                                                                                                                | _ =>
                                                                                                                   exit tt
                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                     0)})))
                                                                                                                end)
                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                 0)})))
                                                                                                             else
                                                                                                               (_s4490_
                                                                                                                  _s3926_) >>= fun w__158 : option ((mword 3 * mword 3 * string)) =>
                                                                                                               (if
                                                                                                                  match w__158 with
                                                                                                                  | Some
                                                                                                                    (rsd, rs2, s_) =>
                                                                                                                     true
                                                                                                                  | _ =>
                                                                                                                     false
                                                                                                                  end
                                                                                                                then
                                                                                                                  (_s4490_
                                                                                                                     _s3926_) >>= fun w__159 : option ((mword 3 * mword 3 * string)) =>
                                                                                                                  (match w__159 with
                                                                                                                   | Some
                                                                                                                     (rsd, rs2, s_) =>
                                                                                                                      returnm (Some
                                                                                                                                 (C_AND
                                                                                                                                    (rsd, rs2), build_ex
                                                                                                                                 (projT1
                                                                                                                                  (sub_nat
                                                                                                                                     (projT1
                                                                                                                                      (string_length
                                                                                                                                         arg_))
                                                                                                                                     (projT1
                                                                                                                                      (string_length
                                                                                                                                         s_))))))
                                                                                                                   | _ =>
                                                                                                                      exit tt
                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                        0)})))
                                                                                                                   end)
                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                    0)})))
                                                                                                                else
                                                                                                                  (_s4502_
                                                                                                                     _s3926_) >>= fun w__162 : option ((mword 3 * mword 3 * string)) =>
                                                                                                                  (if
                                                                                                                     match w__162 with
                                                                                                                     | Some
                                                                                                                       (rsd, rs2, s_) =>
                                                                                                                        Z.eqb
                                                                                                                          32
                                                                                                                          64
                                                                                                                     | _ =>
                                                                                                                        false
                                                                                                                     end
                                                                                                                   then
                                                                                                                     (_s4502_
                                                                                                                        _s3926_) >>= fun w__163 : option ((mword 3 * mword 3 * string)) =>
                                                                                                                     (match w__163 with
                                                                                                                      | Some
                                                                                                                        (rsd, rs2, s_) =>
                                                                                                                         returnm (Some
                                                                                                                                    (C_SUBW
                                                                                                                                       (rsd, rs2), build_ex
                                                                                                                                    (projT1
                                                                                                                                     (sub_nat
                                                                                                                                        (projT1
                                                                                                                                         (string_length
                                                                                                                                            arg_))
                                                                                                                                        (projT1
                                                                                                                                         (string_length
                                                                                                                                            s_))))))
                                                                                                                      | _ =>
                                                                                                                         exit tt
                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                           0)})))
                                                                                                                      end)
                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                       0)})))
                                                                                                                   else
                                                                                                                     (_s4514_
                                                                                                                        _s3926_) >>= fun w__166 : option ((mword 3 * mword 3 * string)) =>
                                                                                                                     (if
                                                                                                                        match w__166 with
                                                                                                                        | Some
                                                                                                                          (rsd, rs2, s_) =>
                                                                                                                           Z.eqb
                                                                                                                             32
                                                                                                                             64
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                      then
                                                                                                                        (_s4514_
                                                                                                                           _s3926_) >>= fun w__167 : option ((mword 3 * mword 3 * string)) =>
                                                                                                                        (match w__167 with
                                                                                                                         | Some
                                                                                                                           (rsd, rs2, s_) =>
                                                                                                                            returnm (Some
                                                                                                                                       (C_ADDW
                                                                                                                                          (rsd, rs2), build_ex
                                                                                                                                       (projT1
                                                                                                                                        (sub_nat
                                                                                                                                           (projT1
                                                                                                                                            (string_length
                                                                                                                                               arg_))
                                                                                                                                           (projT1
                                                                                                                                            (string_length
                                                                                                                                               s_))))))
                                                                                                                         | _ =>
                                                                                                                            exit tt
                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                              0)})))
                                                                                                                         end)
                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                          0)})))
                                                                                                                      else
                                                                                                                        (_s4526_
                                                                                                                           _s3926_) >>= fun w__170 : option ((mword 11 * string)) =>
                                                                                                                        (if
                                                                                                                           match w__170 with
                                                                                                                           | Some
                                                                                                                             (imm, s_) =>
                                                                                                                              true
                                                                                                                           | _ =>
                                                                                                                              false
                                                                                                                           end
                                                                                                                         then
                                                                                                                           (_s4526_
                                                                                                                              _s3926_) >>= fun w__171 : option ((mword 11 * string)) =>
                                                                                                                           (match w__171 with
                                                                                                                            | Some
                                                                                                                              (imm, s_) =>
                                                                                                                               returnm (Some
                                                                                                                                          (C_J
                                                                                                                                             imm, build_ex
                                                                                                                                          (projT1
                                                                                                                                           (sub_nat
                                                                                                                                              (projT1
                                                                                                                                               (string_length
                                                                                                                                                  arg_))
                                                                                                                                              (projT1
                                                                                                                                               (string_length
                                                                                                                                                  s_))))))
                                                                                                                            | _ =>
                                                                                                                               exit tt
                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                 0)})))
                                                                                                                            end)
                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                             0)})))
                                                                                                                         else
                                                                                                                           (_s4534_
                                                                                                                              _s3926_) >>= fun w__174 : option ((mword 3 * mword 8 * string)) =>
                                                                                                                           (if
                                                                                                                              match w__174 with
                                                                                                                              | Some
                                                                                                                                (rs, imm, s_) =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                            then
                                                                                                                              (_s4534_
                                                                                                                                 _s3926_) >>= fun w__175 : option ((mword 3 * mword 8 * string)) =>
                                                                                                                              (match w__175 with
                                                                                                                               | Some
                                                                                                                                 (rs, imm, s_) =>
                                                                                                                                  returnm (Some
                                                                                                                                             (C_BEQZ
                                                                                                                                                (imm, rs), build_ex
                                                                                                                                             (projT1
                                                                                                                                              (sub_nat
                                                                                                                                                 (projT1
                                                                                                                                                  (string_length
                                                                                                                                                     arg_))
                                                                                                                                                 (projT1
                                                                                                                                                  (string_length
                                                                                                                                                     s_))))))
                                                                                                                               | _ =>
                                                                                                                                  exit tt
                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                    0)})))
                                                                                                                               end)
                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                0)})))
                                                                                                                            else
                                                                                                                              (_s4546_
                                                                                                                                 _s3926_) >>= fun w__178 : option ((mword 3 * mword 8 * string)) =>
                                                                                                                              (if
                                                                                                                                 match w__178 with
                                                                                                                                 | Some
                                                                                                                                   (rs, imm, s_) =>
                                                                                                                                    true
                                                                                                                                 | _ =>
                                                                                                                                    false
                                                                                                                                 end
                                                                                                                               then
                                                                                                                                 (_s4546_
                                                                                                                                    _s3926_) >>= fun w__179 : option ((mword 3 * mword 8 * string)) =>
                                                                                                                                 (match w__179 with
                                                                                                                                  | Some
                                                                                                                                    (rs, imm, s_) =>
                                                                                                                                     returnm (Some
                                                                                                                                                (C_BNEZ
                                                                                                                                                   (imm, rs), build_ex
                                                                                                                                                (projT1
                                                                                                                                                 (sub_nat
                                                                                                                                                    (projT1
                                                                                                                                                     (string_length
                                                                                                                                                        arg_))
                                                                                                                                                    (projT1
                                                                                                                                                     (string_length
                                                                                                                                                        s_))))))
                                                                                                                                  | _ =>
                                                                                                                                     exit tt
                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                       0)})))
                                                                                                                                  end)
                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                   0)})))
                                                                                                                               else
                                                                                                                                 (_s4558_
                                                                                                                                    _s3926_) >>= fun w__182 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                 (if
                                                                                                                                    match w__182 with
                                                                                                                                    | Some
                                                                                                                                      (rsd, shamt, s_) =>
                                                                                                                                       andb
                                                                                                                                         (neq_vec
                                                                                                                                            shamt
                                                                                                                                            ('b"000000"
                                                                                                                                             : mword 6))
                                                                                                                                         (neq_vec
                                                                                                                                            rsd
                                                                                                                                            zreg)
                                                                                                                                    | _ =>
                                                                                                                                       false
                                                                                                                                    end
                                                                                                                                  then
                                                                                                                                    (_s4558_
                                                                                                                                       _s3926_) >>= fun w__183 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                    (match w__183 with
                                                                                                                                     | Some
                                                                                                                                       (rsd, shamt, s_) =>
                                                                                                                                        returnm (Some
                                                                                                                                                   (C_SLLI
                                                                                                                                                      (shamt, rsd), build_ex
                                                                                                                                                   (projT1
                                                                                                                                                    (sub_nat
                                                                                                                                                       (projT1
                                                                                                                                                        (string_length
                                                                                                                                                           arg_))
                                                                                                                                                       (projT1
                                                                                                                                                        (string_length
                                                                                                                                                           s_))))))
                                                                                                                                     | _ =>
                                                                                                                                        exit tt
                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                          0)})))
                                                                                                                                     end)
                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                      0)})))
                                                                                                                                  else
                                                                                                                                    (_s4570_
                                                                                                                                       _s3926_) >>= fun w__186 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                    (if
                                                                                                                                       match w__186 with
                                                                                                                                       | Some
                                                                                                                                         (rd, uimm, s_) =>
                                                                                                                                          neq_vec
                                                                                                                                            rd
                                                                                                                                            zreg
                                                                                                                                       | _ =>
                                                                                                                                          false
                                                                                                                                       end
                                                                                                                                     then
                                                                                                                                       (_s4570_
                                                                                                                                          _s3926_) >>= fun w__187 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                       (match w__187 with
                                                                                                                                        | Some
                                                                                                                                          (rd, uimm, s_) =>
                                                                                                                                           returnm (Some
                                                                                                                                                      (C_LWSP
                                                                                                                                                         (uimm, rd), build_ex
                                                                                                                                                      (projT1
                                                                                                                                                       (sub_nat
                                                                                                                                                          (projT1
                                                                                                                                                           (string_length
                                                                                                                                                              arg_))
                                                                                                                                                          (projT1
                                                                                                                                                           (string_length
                                                                                                                                                              s_))))))
                                                                                                                                        | _ =>
                                                                                                                                           exit tt
                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                             0)})))
                                                                                                                                        end)
                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                         0)})))
                                                                                                                                     else
                                                                                                                                       (_s4582_
                                                                                                                                          _s3926_) >>= fun w__190 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                       (if
                                                                                                                                          match w__190 with
                                                                                                                                          | Some
                                                                                                                                            (rd, uimm, s_) =>
                                                                                                                                             andb
                                                                                                                                               (neq_vec
                                                                                                                                                  rd
                                                                                                                                                  zreg)
                                                                                                                                               (Z.eqb
                                                                                                                                                  32
                                                                                                                                                  64)
                                                                                                                                          | _ =>
                                                                                                                                             false
                                                                                                                                          end
                                                                                                                                        then
                                                                                                                                          (_s4582_
                                                                                                                                             _s3926_) >>= fun w__191 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                          (match w__191 with
                                                                                                                                           | Some
                                                                                                                                             (rd, uimm, s_) =>
                                                                                                                                              returnm (Some
                                                                                                                                                         (C_LDSP
                                                                                                                                                            (uimm, rd), build_ex
                                                                                                                                                         (projT1
                                                                                                                                                          (sub_nat
                                                                                                                                                             (projT1
                                                                                                                                                              (string_length
                                                                                                                                                                 arg_))
                                                                                                                                                             (projT1
                                                                                                                                                              (string_length
                                                                                                                                                                 s_))))))
                                                                                                                                           | _ =>
                                                                                                                                              exit tt
                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                0)})))
                                                                                                                                           end)
                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                            0)})))
                                                                                                                                        else
                                                                                                                                          (_s4594_
                                                                                                                                             _s3926_) >>= fun w__194 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                          (if
                                                                                                                                             match w__194 with
                                                                                                                                             | Some
                                                                                                                                               (rd, uimm, s_) =>
                                                                                                                                                true
                                                                                                                                             | _ =>
                                                                                                                                                false
                                                                                                                                             end
                                                                                                                                           then
                                                                                                                                             (_s4594_
                                                                                                                                                _s3926_) >>= fun w__195 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                             (match w__195 with
                                                                                                                                              | Some
                                                                                                                                                (rd, uimm, s_) =>
                                                                                                                                                 returnm (Some
                                                                                                                                                            (C_SWSP
                                                                                                                                                               (uimm, rd), build_ex
                                                                                                                                                            (projT1
                                                                                                                                                             (sub_nat
                                                                                                                                                                (projT1
                                                                                                                                                                 (string_length
                                                                                                                                                                    arg_))
                                                                                                                                                                (projT1
                                                                                                                                                                 (string_length
                                                                                                                                                                    s_))))))
                                                                                                                                              | _ =>
                                                                                                                                                 exit tt
                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                   0)})))
                                                                                                                                              end)
                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                               0)})))
                                                                                                                                           else
                                                                                                                                             (_s4606_
                                                                                                                                                _s3926_) >>= fun w__198 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                             (if
                                                                                                                                                match w__198 with
                                                                                                                                                | Some
                                                                                                                                                  (rs2, uimm, s_) =>
                                                                                                                                                   Z.eqb
                                                                                                                                                     32
                                                                                                                                                     64
                                                                                                                                                | _ =>
                                                                                                                                                   false
                                                                                                                                                end
                                                                                                                                              then
                                                                                                                                                (_s4606_
                                                                                                                                                   _s3926_) >>= fun w__199 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                                (match w__199 with
                                                                                                                                                 | Some
                                                                                                                                                   (rs2, uimm, s_) =>
                                                                                                                                                    returnm (Some
                                                                                                                                                               (C_SDSP
                                                                                                                                                                  (uimm, rs2), build_ex
                                                                                                                                                               (projT1
                                                                                                                                                                (sub_nat
                                                                                                                                                                   (projT1
                                                                                                                                                                    (string_length
                                                                                                                                                                       arg_))
                                                                                                                                                                   (projT1
                                                                                                                                                                    (string_length
                                                                                                                                                                       s_))))))
                                                                                                                                                 | _ =>
                                                                                                                                                    exit tt
                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                      0)})))
                                                                                                                                                 end)
                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                  0)})))
                                                                                                                                              else
                                                                                                                                                (_s4618_
                                                                                                                                                   _s3926_) >>= fun w__202 : option ((mword 5 * string)) =>
                                                                                                                                                (if
                                                                                                                                                   match w__202 with
                                                                                                                                                   | Some
                                                                                                                                                     (rs1, s_) =>
                                                                                                                                                      neq_vec
                                                                                                                                                        rs1
                                                                                                                                                        zreg
                                                                                                                                                   | _ =>
                                                                                                                                                      false
                                                                                                                                                   end
                                                                                                                                                 then
                                                                                                                                                   (_s4618_
                                                                                                                                                      _s3926_) >>= fun w__203 : option ((mword 5 * string)) =>
                                                                                                                                                   (match w__203 with
                                                                                                                                                    | Some
                                                                                                                                                      (rs1, s_) =>
                                                                                                                                                       returnm (Some
                                                                                                                                                                  (C_JR
                                                                                                                                                                     rs1, build_ex
                                                                                                                                                                  (projT1
                                                                                                                                                                   (sub_nat
                                                                                                                                                                      (projT1
                                                                                                                                                                       (string_length
                                                                                                                                                                          arg_))
                                                                                                                                                                      (projT1
                                                                                                                                                                       (string_length
                                                                                                                                                                          s_))))))
                                                                                                                                                    | _ =>
                                                                                                                                                       exit tt
                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                         0)})))
                                                                                                                                                    end)
                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                     0)})))
                                                                                                                                                 else
                                                                                                                                                   (_s4626_
                                                                                                                                                      _s3926_) >>= fun w__206 : option ((mword 5 * string)) =>
                                                                                                                                                   (if
                                                                                                                                                      match w__206 with
                                                                                                                                                      | Some
                                                                                                                                                        (rs1, s_) =>
                                                                                                                                                         neq_vec
                                                                                                                                                           rs1
                                                                                                                                                           zreg
                                                                                                                                                      | _ =>
                                                                                                                                                         false
                                                                                                                                                      end
                                                                                                                                                    then
                                                                                                                                                      (_s4626_
                                                                                                                                                         _s3926_) >>= fun w__207 : option ((mword 5 * string)) =>
                                                                                                                                                      (match w__207 with
                                                                                                                                                       | Some
                                                                                                                                                         (rs1, s_) =>
                                                                                                                                                          returnm (Some
                                                                                                                                                                     (C_JALR
                                                                                                                                                                        rs1, build_ex
                                                                                                                                                                     (projT1
                                                                                                                                                                      (sub_nat
                                                                                                                                                                         (projT1
                                                                                                                                                                          (string_length
                                                                                                                                                                             arg_))
                                                                                                                                                                         (projT1
                                                                                                                                                                          (string_length
                                                                                                                                                                             s_))))))
                                                                                                                                                       | _ =>
                                                                                                                                                          exit tt
                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                            0)})))
                                                                                                                                                       end)
                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                        0)})))
                                                                                                                                                    else
                                                                                                                                                      (_s4634_
                                                                                                                                                         _s3926_) >>= fun w__210 : option ((mword 5 * mword 5 * string)) =>
                                                                                                                                                      (if
                                                                                                                                                         match w__210 with
                                                                                                                                                         | Some
                                                                                                                                                           (rd, rs2, s_) =>
                                                                                                                                                            andb
                                                                                                                                                              (neq_vec
                                                                                                                                                                 rd
                                                                                                                                                                 zreg)
                                                                                                                                                              (neq_vec
                                                                                                                                                                 rs2
                                                                                                                                                                 zreg)
                                                                                                                                                         | _ =>
                                                                                                                                                            false
                                                                                                                                                         end
                                                                                                                                                       then
                                                                                                                                                         (_s4634_
                                                                                                                                                            _s3926_) >>= fun w__211 : option ((mword 5 * mword 5 * string)) =>
                                                                                                                                                         (match w__211 with
                                                                                                                                                          | Some
                                                                                                                                                            (rd, rs2, s_) =>
                                                                                                                                                             returnm (Some
                                                                                                                                                                        (C_MV
                                                                                                                                                                           (rd, rs2), build_ex
                                                                                                                                                                        (projT1
                                                                                                                                                                         (sub_nat
                                                                                                                                                                            (projT1
                                                                                                                                                                             (string_length
                                                                                                                                                                                arg_))
                                                                                                                                                                            (projT1
                                                                                                                                                                             (string_length
                                                                                                                                                                                s_))))))
                                                                                                                                                          | _ =>
                                                                                                                                                             exit tt
                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                               0)})))
                                                                                                                                                          end)
                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                           0)})))
                                                                                                                                                       else if
                                                                                                                                                         match (_s4646_
                                                                                                                                                                  _s3926_) with
                                                                                                                                                         | Some
                                                                                                                                                           s_ =>
                                                                                                                                                            true
                                                                                                                                                         | _ =>
                                                                                                                                                            false
                                                                                                                                                         end
                                                                                                                                                       then
                                                                                                                                                         (match (_s4646_
                                                                                                                                                                   _s3926_) with
                                                                                                                                                          | Some
                                                                                                                                                            s_ =>
                                                                                                                                                             returnm (Some
                                                                                                                                                                        (C_EBREAK
                                                                                                                                                                           tt, build_ex
                                                                                                                                                                        (projT1
                                                                                                                                                                         (sub_nat
                                                                                                                                                                            (projT1
                                                                                                                                                                             (string_length
                                                                                                                                                                                arg_))
                                                                                                                                                                            (projT1
                                                                                                                                                                             (string_length
                                                                                                                                                                                s_))))))
                                                                                                                                                          | _ =>
                                                                                                                                                             exit tt
                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                               0)})))
                                                                                                                                                          end)
                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                           0)})))
                                                                                                                                                       else
                                                                                                                                                         (_s4650_
                                                                                                                                                            _s3926_) >>= fun w__216 : option ((mword 5 * mword 5 * string)) =>
                                                                                                                                                         (if
                                                                                                                                                            match w__216 with
                                                                                                                                                            | Some
                                                                                                                                                              (rsd, rs2, s_) =>
                                                                                                                                                               andb
                                                                                                                                                                 (neq_vec
                                                                                                                                                                    rsd
                                                                                                                                                                    zreg)
                                                                                                                                                                 (neq_vec
                                                                                                                                                                    rs2
                                                                                                                                                                    zreg)
                                                                                                                                                            | _ =>
                                                                                                                                                               false
                                                                                                                                                            end
                                                                                                                                                          then
                                                                                                                                                            (_s4650_
                                                                                                                                                               _s3926_) >>= fun w__217 : option ((mword 5 * mword 5 * string)) =>
                                                                                                                                                            (match w__217 with
                                                                                                                                                             | Some
                                                                                                                                                               (rsd, rs2, s_) =>
                                                                                                                                                                returnm (Some
                                                                                                                                                                           (C_ADD
                                                                                                                                                                              (rsd, rs2), build_ex
                                                                                                                                                                           (projT1
                                                                                                                                                                            (sub_nat
                                                                                                                                                                               (projT1
                                                                                                                                                                                (string_length
                                                                                                                                                                                   arg_))
                                                                                                                                                                               (projT1
                                                                                                                                                                                (string_length
                                                                                                                                                                                   s_))))))
                                                                                                                                                             | _ =>
                                                                                                                                                                exit tt
                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                  0)})))
                                                                                                                                                             end)
                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                              0)})))
                                                                                                                                                          else
                                                                                                                                                            (_s4662_
                                                                                                                                                               _s3926_) >>= fun w__220 : option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                            (if
                                                                                                                                                               match w__220 with
                                                                                                                                                               | Some
                                                                                                                                                                 (high, signed1, signed2, rd, rs1, rs2, s_) =>
                                                                                                                                                                  true
                                                                                                                                                               | _ =>
                                                                                                                                                                  false
                                                                                                                                                               end
                                                                                                                                                             then
                                                                                                                                                               (_s4662_
                                                                                                                                                                  _s3926_) >>= fun w__221 : option ((bool * bool * bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                               (match w__221 with
                                                                                                                                                                | Some
                                                                                                                                                                  (high, signed1, signed2, rd, rs1, rs2, s_) =>
                                                                                                                                                                   returnm (Some
                                                                                                                                                                              (MUL
                                                                                                                                                                                 (rs2, rs1, rd, high, signed1, signed2), build_ex
                                                                                                                                                                              (projT1
                                                                                                                                                                               (sub_nat
                                                                                                                                                                                  (projT1
                                                                                                                                                                                   (string_length
                                                                                                                                                                                      arg_))
                                                                                                                                                                                  (projT1
                                                                                                                                                                                   (string_length
                                                                                                                                                                                      s_))))))
                                                                                                                                                                | _ =>
                                                                                                                                                                   exit tt
                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                     0)})))
                                                                                                                                                                end)
                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                 0)})))
                                                                                                                                                             else
                                                                                                                                                               (_s4679_
                                                                                                                                                                  _s3926_) >>= fun w__224 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                               (if
                                                                                                                                                                  match w__224 with
                                                                                                                                                                  | Some
                                                                                                                                                                    (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                     true
                                                                                                                                                                  | _ =>
                                                                                                                                                                     false
                                                                                                                                                                  end
                                                                                                                                                                then
                                                                                                                                                                  (_s4679_
                                                                                                                                                                     _s3926_) >>= fun w__225 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                  (match w__225 with
                                                                                                                                                                   | Some
                                                                                                                                                                     (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                      returnm (Some
                                                                                                                                                                                 (DIV
                                                                                                                                                                                    (rs2, rs1, rd, s), build_ex
                                                                                                                                                                                 (projT1
                                                                                                                                                                                  (sub_nat
                                                                                                                                                                                     (projT1
                                                                                                                                                                                      (string_length
                                                                                                                                                                                         arg_))
                                                                                                                                                                                     (projT1
                                                                                                                                                                                      (string_length
                                                                                                                                                                                         s_))))))
                                                                                                                                                                   | _ =>
                                                                                                                                                                      exit tt
                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                        0)})))
                                                                                                                                                                   end)
                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                    0)})))
                                                                                                                                                                else
                                                                                                                                                                  (_s4697_
                                                                                                                                                                     _s3926_) >>= fun w__228 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                  (if
                                                                                                                                                                     match w__228 with
                                                                                                                                                                     | Some
                                                                                                                                                                       (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                        true
                                                                                                                                                                     | _ =>
                                                                                                                                                                        false
                                                                                                                                                                     end
                                                                                                                                                                   then
                                                                                                                                                                     (_s4697_
                                                                                                                                                                        _s3926_) >>= fun w__229 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                     (match w__229 with
                                                                                                                                                                      | Some
                                                                                                                                                                        (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                         returnm (Some
                                                                                                                                                                                    (REM
                                                                                                                                                                                       (rs2, rs1, rd, s), build_ex
                                                                                                                                                                                    (projT1
                                                                                                                                                                                     (sub_nat
                                                                                                                                                                                        (projT1
                                                                                                                                                                                         (string_length
                                                                                                                                                                                            arg_))
                                                                                                                                                                                        (projT1
                                                                                                                                                                                         (string_length
                                                                                                                                                                                            s_))))))
                                                                                                                                                                      | _ =>
                                                                                                                                                                         exit tt
                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                           0)})))
                                                                                                                                                                      end)
                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                       0)})))
                                                                                                                                                                   else
                                                                                                                                                                     (_s4715_
                                                                                                                                                                        _s3926_) >>= fun w__232 : option ((mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                     (if
                                                                                                                                                                        match w__232 with
                                                                                                                                                                        | Some
                                                                                                                                                                          (rd, rs1, rs2, s_) =>
                                                                                                                                                                           Z.eqb
                                                                                                                                                                             32
                                                                                                                                                                             64
                                                                                                                                                                        | _ =>
                                                                                                                                                                           false
                                                                                                                                                                        end
                                                                                                                                                                      then
                                                                                                                                                                        (_s4715_
                                                                                                                                                                           _s3926_) >>= fun w__233 : option ((mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                        (match w__233 with
                                                                                                                                                                         | Some
                                                                                                                                                                           (rd, rs1, rs2, s_) =>
                                                                                                                                                                            returnm (Some
                                                                                                                                                                                       (MULW
                                                                                                                                                                                          (rs2, rs1, rd), build_ex
                                                                                                                                                                                       (projT1
                                                                                                                                                                                        (sub_nat
                                                                                                                                                                                           (projT1
                                                                                                                                                                                            (string_length
                                                                                                                                                                                               arg_))
                                                                                                                                                                                           (projT1
                                                                                                                                                                                            (string_length
                                                                                                                                                                                               s_))))))
                                                                                                                                                                         | _ =>
                                                                                                                                                                            exit tt
                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                              0)})))
                                                                                                                                                                         end)
                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                          0)})))
                                                                                                                                                                      else
                                                                                                                                                                        (_s4731_
                                                                                                                                                                           _s3926_) >>= fun w__236 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                        (if
                                                                                                                                                                           match w__236 with
                                                                                                                                                                           | Some
                                                                                                                                                                             (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                              Z.eqb
                                                                                                                                                                                32
                                                                                                                                                                                64
                                                                                                                                                                           | _ =>
                                                                                                                                                                              false
                                                                                                                                                                           end
                                                                                                                                                                         then
                                                                                                                                                                           (_s4731_
                                                                                                                                                                              _s3926_) >>= fun w__237 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                           (match w__237 with
                                                                                                                                                                            | Some
                                                                                                                                                                              (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                               returnm (Some
                                                                                                                                                                                          (DIVW
                                                                                                                                                                                             (rs2, rs1, rd, s), build_ex
                                                                                                                                                                                          (projT1
                                                                                                                                                                                           (sub_nat
                                                                                                                                                                                              (projT1
                                                                                                                                                                                               (string_length
                                                                                                                                                                                                  arg_))
                                                                                                                                                                                              (projT1
                                                                                                                                                                                               (string_length
                                                                                                                                                                                                  s_))))))
                                                                                                                                                                            | _ =>
                                                                                                                                                                               exit tt
                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                 0)})))
                                                                                                                                                                            end)
                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                             0)})))
                                                                                                                                                                         else
                                                                                                                                                                           (_s4750_
                                                                                                                                                                              _s3926_) >>= fun w__240 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                           (if
                                                                                                                                                                              match w__240 with
                                                                                                                                                                              | Some
                                                                                                                                                                                (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                                 Z.eqb
                                                                                                                                                                                   32
                                                                                                                                                                                   64
                                                                                                                                                                              | _ =>
                                                                                                                                                                                 false
                                                                                                                                                                              end
                                                                                                                                                                            then
                                                                                                                                                                              (_s4750_
                                                                                                                                                                                 _s3926_) >>= fun w__241 : option ((bool * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                              (match w__241 with
                                                                                                                                                                               | Some
                                                                                                                                                                                 (s, rd, rs1, rs2, s_) =>
                                                                                                                                                                                  returnm (Some
                                                                                                                                                                                             (REMW
                                                                                                                                                                                                (rs2, rs1, rd, s), build_ex
                                                                                                                                                                                             (projT1
                                                                                                                                                                                              (sub_nat
                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                  (string_length
                                                                                                                                                                                                     arg_))
                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                  (string_length
                                                                                                                                                                                                     s_))))))
                                                                                                                                                                               | _ =>
                                                                                                                                                                                  exit tt
                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                    0)})))
                                                                                                                                                                               end)
                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                0)})))
                                                                                                                                                                            else
                                                                                                                                                                              (_s4769_
                                                                                                                                                                                 _s3926_) >>= fun w__244 : option ((csrop * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                              (if
                                                                                                                                                                                 match w__244 with
                                                                                                                                                                                 | Some
                                                                                                                                                                                   (op, rd, csr, rs1, s_) =>
                                                                                                                                                                                    true
                                                                                                                                                                                 | _ =>
                                                                                                                                                                                    false
                                                                                                                                                                                 end
                                                                                                                                                                               then
                                                                                                                                                                                 (_s4769_
                                                                                                                                                                                    _s3926_) >>= fun w__245 : option ((csrop * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                 (match w__245 with
                                                                                                                                                                                  | Some
                                                                                                                                                                                    (op, rd, csr, rs1, s_) =>
                                                                                                                                                                                     returnm (Some
                                                                                                                                                                                                (CSR
                                                                                                                                                                                                   (csr, rs1, rd, true, op), build_ex
                                                                                                                                                                                                (projT1
                                                                                                                                                                                                 (sub_nat
                                                                                                                                                                                                    (projT1
                                                                                                                                                                                                     (string_length
                                                                                                                                                                                                        arg_))
                                                                                                                                                                                                    (projT1
                                                                                                                                                                                                     (string_length
                                                                                                                                                                                                        s_))))))
                                                                                                                                                                                  | _ =>
                                                                                                                                                                                     exit tt
                                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                       0)})))
                                                                                                                                                                                  end)
                                                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                   0)})))
                                                                                                                                                                               else
                                                                                                                                                                                 (_s4787_
                                                                                                                                                                                    _s3926_) >>= fun w__248 : option ((csrop * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                 (if
                                                                                                                                                                                    match w__248 with
                                                                                                                                                                                    | Some
                                                                                                                                                                                      (op, rd, csr, rs1, s_) =>
                                                                                                                                                                                       true
                                                                                                                                                                                    | _ =>
                                                                                                                                                                                       false
                                                                                                                                                                                    end
                                                                                                                                                                                  then
                                                                                                                                                                                    (_s4787_
                                                                                                                                                                                       _s3926_) >>= fun w__249 : option ((csrop * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                    (match w__249 with
                                                                                                                                                                                     | Some
                                                                                                                                                                                       (op, rd, csr, rs1, s_) =>
                                                                                                                                                                                        returnm (Some
                                                                                                                                                                                                   (CSR
                                                                                                                                                                                                      (csr, rs1, rd, false, op), build_ex
                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                    (sub_nat
                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                        (string_length
                                                                                                                                                                                                           arg_))
                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                        (string_length
                                                                                                                                                                                                           s_))))))
                                                                                                                                                                                     | _ =>
                                                                                                                                                                                        exit tt
                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                          0)})))
                                                                                                                                                                                     end)
                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                      0)})))
                                                                                                                                                                                  else if
                                                                                                                                                                                    match (_s4804_
                                                                                                                                                                                             _s3926_) with
                                                                                                                                                                                    | Some
                                                                                                                                                                                      s_ =>
                                                                                                                                                                                       true
                                                                                                                                                                                    | _ =>
                                                                                                                                                                                       false
                                                                                                                                                                                    end
                                                                                                                                                                                  then
                                                                                                                                                                                    (match (_s4804_
                                                                                                                                                                                              _s3926_) with
                                                                                                                                                                                     | Some
                                                                                                                                                                                       s_ =>
                                                                                                                                                                                        returnm (Some
                                                                                                                                                                                                   (URET
                                                                                                                                                                                                      tt, build_ex
                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                    (sub_nat
                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                        (string_length
                                                                                                                                                                                                           arg_))
                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                        (string_length
                                                                                                                                                                                                           s_))))))
                                                                                                                                                                                     | _ =>
                                                                                                                                                                                        exit tt
                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                          0)})))
                                                                                                                                                                                     end)
                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                      0)})))
                                                                                                                                                                                  else
                                                                                                                                                                                    (_s4808_
                                                                                                                                                                                       _s3926_) >>= fun w__254 : option ((word_width * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                    (if
                                                                                                                                                                                       match w__254 with
                                                                                                                                                                                       | Some
                                                                                                                                                                                         (width, rd, imm, rs1, s_) =>
                                                                                                                                                                                          true
                                                                                                                                                                                       | _ =>
                                                                                                                                                                                          false
                                                                                                                                                                                       end
                                                                                                                                                                                     then
                                                                                                                                                                                       (_s4808_
                                                                                                                                                                                          _s3926_) >>= fun w__255 : option ((word_width * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                       (match w__255 with
                                                                                                                                                                                        | Some
                                                                                                                                                                                          (width, rd, imm, rs1, s_) =>
                                                                                                                                                                                           returnm (Some
                                                                                                                                                                                                      (LOAD_FP
                                                                                                                                                                                                         (imm, rs1, rd, width), build_ex
                                                                                                                                                                                                      (projT1
                                                                                                                                                                                                       (sub_nat
                                                                                                                                                                                                          (projT1
                                                                                                                                                                                                           (string_length
                                                                                                                                                                                                              arg_))
                                                                                                                                                                                                          (projT1
                                                                                                                                                                                                           (string_length
                                                                                                                                                                                                              s_))))))
                                                                                                                                                                                        | _ =>
                                                                                                                                                                                           exit tt
                                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                             0)})))
                                                                                                                                                                                        end)
                                                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                         0)})))
                                                                                                                                                                                     else
                                                                                                                                                                                       (_s4832_
                                                                                                                                                                                          _s3926_) >>= fun w__258 : option ((word_width * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                       (if
                                                                                                                                                                                          match w__258 with
                                                                                                                                                                                          | Some
                                                                                                                                                                                            (width, rs2, imm, rs1, s_) =>
                                                                                                                                                                                             true
                                                                                                                                                                                          | _ =>
                                                                                                                                                                                             false
                                                                                                                                                                                          end
                                                                                                                                                                                        then
                                                                                                                                                                                          (_s4832_
                                                                                                                                                                                             _s3926_) >>= fun w__259 : option ((word_width * mword 5 * mword 12 * mword 5 * string)) =>
                                                                                                                                                                                          (match w__259 with
                                                                                                                                                                                           | Some
                                                                                                                                                                                             (width, rs2, imm, rs1, s_) =>
                                                                                                                                                                                              returnm (Some
                                                                                                                                                                                                         (STORE_FP
                                                                                                                                                                                                            (imm, rs2, rs1, width), build_ex
                                                                                                                                                                                                         (projT1
                                                                                                                                                                                                          (sub_nat
                                                                                                                                                                                                             (projT1
                                                                                                                                                                                                              (string_length
                                                                                                                                                                                                                 arg_))
                                                                                                                                                                                                             (projT1
                                                                                                                                                                                                              (string_length
                                                                                                                                                                                                                 s_))))))
                                                                                                                                                                                           | _ =>
                                                                                                                                                                                              exit tt
                                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                0)})))
                                                                                                                                                                                           end)
                                                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                            0)})))
                                                                                                                                                                                        else
                                                                                                                                                                                          (_s4856_
                                                                                                                                                                                             _s3926_) >>= fun w__262 : option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                          (if
                                                                                                                                                                                             match w__262 with
                                                                                                                                                                                             | Some
                                                                                                                                                                                               (op, rd, rs1, rs2, rs3, rm, s_) =>
                                                                                                                                                                                                true
                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                false
                                                                                                                                                                                             end
                                                                                                                                                                                           then
                                                                                                                                                                                             (_s4856_
                                                                                                                                                                                                _s3926_) >>= fun w__263 : option ((f_madd_op_S * mword 5 * mword 5 * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                             (match w__263 with
                                                                                                                                                                                              | Some
                                                                                                                                                                                                (op, rd, rs1, rs2, rs3, rm, s_) =>
                                                                                                                                                                                                 returnm (Some
                                                                                                                                                                                                            (F_MADD_TYPE_S
                                                                                                                                                                                                               (rs3, rs2, rs1, rm, rd, op), build_ex
                                                                                                                                                                                                            (projT1
                                                                                                                                                                                                             (sub_nat
                                                                                                                                                                                                                (projT1
                                                                                                                                                                                                                 (string_length
                                                                                                                                                                                                                    arg_))
                                                                                                                                                                                                                (projT1
                                                                                                                                                                                                                 (string_length
                                                                                                                                                                                                                    s_))))))
                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                 exit tt
                                                                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                   0)})))
                                                                                                                                                                                              end)
                                                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                               0)})))
                                                                                                                                                                                           else
                                                                                                                                                                                             (_s4881_
                                                                                                                                                                                                _s3926_) >>= fun w__266 : option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                             (if
                                                                                                                                                                                                match w__266 with
                                                                                                                                                                                                | Some
                                                                                                                                                                                                  (op, rd, rs1, rs2, rm, s_) =>
                                                                                                                                                                                                   true
                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                   false
                                                                                                                                                                                                end
                                                                                                                                                                                              then
                                                                                                                                                                                                (_s4881_
                                                                                                                                                                                                   _s3926_) >>= fun w__267 : option ((f_bin_rm_op_S * mword 5 * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                (match w__267 with
                                                                                                                                                                                                 | Some
                                                                                                                                                                                                   (op, rd, rs1, rs2, rm, s_) =>
                                                                                                                                                                                                    returnm (Some
                                                                                                                                                                                                               (F_BIN_RM_TYPE_S
                                                                                                                                                                                                                  (rs2, rs1, rm, rd, op), build_ex
                                                                                                                                                                                                               (projT1
                                                                                                                                                                                                                (sub_nat
                                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                                    (string_length
                                                                                                                                                                                                                       arg_))
                                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                                    (string_length
                                                                                                                                                                                                                       s_))))))
                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                    exit tt
                                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                      0)})))
                                                                                                                                                                                                 end)
                                                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                  0)})))
                                                                                                                                                                                              else
                                                                                                                                                                                                (_s4902_
                                                                                                                                                                                                   _s3926_) >>= fun w__270 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                (if
                                                                                                                                                                                                   match w__270 with
                                                                                                                                                                                                   | Some
                                                                                                                                                                                                     (FSQRT_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                      true
                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                      false
                                                                                                                                                                                                   end
                                                                                                                                                                                                 then
                                                                                                                                                                                                   (_s4902_
                                                                                                                                                                                                      _s3926_) >>= fun w__271 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                   (match w__271 with
                                                                                                                                                                                                    | Some
                                                                                                                                                                                                      (FSQRT_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                       returnm (Some
                                                                                                                                                                                                                  (F_UN_RM_TYPE_S
                                                                                                                                                                                                                     (rs1, rm, rd, FSQRT_S), build_ex
                                                                                                                                                                                                                  (projT1
                                                                                                                                                                                                                   (sub_nat
                                                                                                                                                                                                                      (projT1
                                                                                                                                                                                                                       (string_length
                                                                                                                                                                                                                          arg_))
                                                                                                                                                                                                                      (projT1
                                                                                                                                                                                                                       (string_length
                                                                                                                                                                                                                          s_))))))
                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                       exit tt
                                                                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                         0)})))
                                                                                                                                                                                                    end)
                                                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                     0)})))
                                                                                                                                                                                                 else
                                                                                                                                                                                                   (_s4919_
                                                                                                                                                                                                      _s3926_) >>= fun w__274 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                   (if
                                                                                                                                                                                                      match w__274 with
                                                                                                                                                                                                      | Some
                                                                                                                                                                                                        (FCVT_W_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                         true
                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                         false
                                                                                                                                                                                                      end
                                                                                                                                                                                                    then
                                                                                                                                                                                                      (_s4919_
                                                                                                                                                                                                         _s3926_) >>= fun w__275 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                      (match w__275 with
                                                                                                                                                                                                       | Some
                                                                                                                                                                                                         (FCVT_W_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                          returnm (Some
                                                                                                                                                                                                                     (F_UN_RM_TYPE_S
                                                                                                                                                                                                                        (rs1, rm, rd, FCVT_W_S), build_ex
                                                                                                                                                                                                                     (projT1
                                                                                                                                                                                                                      (sub_nat
                                                                                                                                                                                                                         (projT1
                                                                                                                                                                                                                          (string_length
                                                                                                                                                                                                                             arg_))
                                                                                                                                                                                                                         (projT1
                                                                                                                                                                                                                          (string_length
                                                                                                                                                                                                                             s_))))))
                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                          exit tt
                                                                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                            0)})))
                                                                                                                                                                                                       end)
                                                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                        0)})))
                                                                                                                                                                                                    else
                                                                                                                                                                                                      (_s4936_
                                                                                                                                                                                                         _s3926_) >>= fun w__278 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                      (if
                                                                                                                                                                                                         match w__278 with
                                                                                                                                                                                                         | Some
                                                                                                                                                                                                           (FCVT_WU_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                            true
                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                            false
                                                                                                                                                                                                         end
                                                                                                                                                                                                       then
                                                                                                                                                                                                         (_s4936_
                                                                                                                                                                                                            _s3926_) >>= fun w__279 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                         (match w__279 with
                                                                                                                                                                                                          | Some
                                                                                                                                                                                                            (FCVT_WU_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                             returnm (Some
                                                                                                                                                                                                                        (F_UN_RM_TYPE_S
                                                                                                                                                                                                                           (rs1, rm, rd, FCVT_WU_S), build_ex
                                                                                                                                                                                                                        (projT1
                                                                                                                                                                                                                         (sub_nat
                                                                                                                                                                                                                            (projT1
                                                                                                                                                                                                                             (string_length
                                                                                                                                                                                                                                arg_))
                                                                                                                                                                                                                            (projT1
                                                                                                                                                                                                                             (string_length
                                                                                                                                                                                                                                s_))))))
                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                             exit tt
                                                                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                               0)})))
                                                                                                                                                                                                          end)
                                                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                           0)})))
                                                                                                                                                                                                       else
                                                                                                                                                                                                         (_s4953_
                                                                                                                                                                                                            _s3926_) >>= fun w__282 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                         (if
                                                                                                                                                                                                            match w__282 with
                                                                                                                                                                                                            | Some
                                                                                                                                                                                                              (FCVT_S_W, rd, rs1, rm, s_) =>
                                                                                                                                                                                                               true
                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                               false
                                                                                                                                                                                                            end
                                                                                                                                                                                                          then
                                                                                                                                                                                                            (_s4953_
                                                                                                                                                                                                               _s3926_) >>= fun w__283 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                            (match w__283 with
                                                                                                                                                                                                             | Some
                                                                                                                                                                                                               (FCVT_S_W, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                returnm (Some
                                                                                                                                                                                                                           (F_UN_RM_TYPE_S
                                                                                                                                                                                                                              (rs1, rm, rd, FCVT_S_W), build_ex
                                                                                                                                                                                                                           (projT1
                                                                                                                                                                                                                            (sub_nat
                                                                                                                                                                                                                               (projT1
                                                                                                                                                                                                                                (string_length
                                                                                                                                                                                                                                   arg_))
                                                                                                                                                                                                                               (projT1
                                                                                                                                                                                                                                (string_length
                                                                                                                                                                                                                                   s_))))))
                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                exit tt
                                                                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                  0)})))
                                                                                                                                                                                                             end)
                                                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                              0)})))
                                                                                                                                                                                                          else
                                                                                                                                                                                                            (_s4970_
                                                                                                                                                                                                               _s3926_) >>= fun w__286 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                            (if
                                                                                                                                                                                                               match w__286 with
                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                 (FCVT_S_WU, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                  true
                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                  false
                                                                                                                                                                                                               end
                                                                                                                                                                                                             then
                                                                                                                                                                                                               (_s4970_
                                                                                                                                                                                                                  _s3926_) >>= fun w__287 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                               (match w__287 with
                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                  (FCVT_S_WU, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                   returnm (Some
                                                                                                                                                                                                                              (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                 (rs1, rm, rd, FCVT_S_WU), build_ex
                                                                                                                                                                                                                              (projT1
                                                                                                                                                                                                                               (sub_nat
                                                                                                                                                                                                                                  (projT1
                                                                                                                                                                                                                                   (string_length
                                                                                                                                                                                                                                      arg_))
                                                                                                                                                                                                                                  (projT1
                                                                                                                                                                                                                                   (string_length
                                                                                                                                                                                                                                      s_))))))
                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                   exit tt
                                                                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                     0)})))
                                                                                                                                                                                                                end)
                                                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                 0)})))
                                                                                                                                                                                                             else
                                                                                                                                                                                                               (_s4987_
                                                                                                                                                                                                                  _s3926_) >>= fun w__290 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                               (if
                                                                                                                                                                                                                  match w__290 with
                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                    (FCVT_L_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                     true
                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                     false
                                                                                                                                                                                                                  end
                                                                                                                                                                                                                then
                                                                                                                                                                                                                  (_s4987_
                                                                                                                                                                                                                     _s3926_) >>= fun w__291 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                  (match w__291 with
                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                     (FCVT_L_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                      returnm (Some
                                                                                                                                                                                                                                 (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                    (rs1, rm, rd, FCVT_L_S), build_ex
                                                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                                                  (sub_nat
                                                                                                                                                                                                                                     (projT1
                                                                                                                                                                                                                                      (string_length
                                                                                                                                                                                                                                         arg_))
                                                                                                                                                                                                                                     (projT1
                                                                                                                                                                                                                                      (string_length
                                                                                                                                                                                                                                         s_))))))
                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                      exit tt
                                                                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                        0)})))
                                                                                                                                                                                                                   end)
                                                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                    0)})))
                                                                                                                                                                                                                else
                                                                                                                                                                                                                  (_s5004_
                                                                                                                                                                                                                     _s3926_) >>= fun w__294 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                  (if
                                                                                                                                                                                                                     match w__294 with
                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                       (FCVT_LU_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                        true
                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                        false
                                                                                                                                                                                                                     end
                                                                                                                                                                                                                   then
                                                                                                                                                                                                                     (_s5004_
                                                                                                                                                                                                                        _s3926_) >>= fun w__295 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                     (match w__295 with
                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                        (FCVT_LU_S, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                         returnm (Some
                                                                                                                                                                                                                                    (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                       (rs1, rm, rd, FCVT_LU_S), build_ex
                                                                                                                                                                                                                                    (projT1
                                                                                                                                                                                                                                     (sub_nat
                                                                                                                                                                                                                                        (projT1
                                                                                                                                                                                                                                         (string_length
                                                                                                                                                                                                                                            arg_))
                                                                                                                                                                                                                                        (projT1
                                                                                                                                                                                                                                         (string_length
                                                                                                                                                                                                                                            s_))))))
                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                         exit tt
                                                                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                           0)})))
                                                                                                                                                                                                                      end)
                                                                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                       0)})))
                                                                                                                                                                                                                   else
                                                                                                                                                                                                                     (_s5021_
                                                                                                                                                                                                                        _s3926_) >>= fun w__298 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                     (if
                                                                                                                                                                                                                        match w__298 with
                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                          (FCVT_S_L, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                           true
                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                           false
                                                                                                                                                                                                                        end
                                                                                                                                                                                                                      then
                                                                                                                                                                                                                        (_s5021_
                                                                                                                                                                                                                           _s3926_) >>= fun w__299 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                        (match w__299 with
                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                           (FCVT_S_L, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                            returnm (Some
                                                                                                                                                                                                                                       (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                          (rs1, rm, rd, FCVT_S_L), build_ex
                                                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                                                        (sub_nat
                                                                                                                                                                                                                                           (projT1
                                                                                                                                                                                                                                            (string_length
                                                                                                                                                                                                                                               arg_))
                                                                                                                                                                                                                                           (projT1
                                                                                                                                                                                                                                            (string_length
                                                                                                                                                                                                                                               s_))))))
                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                            exit tt
                                                                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                              0)})))
                                                                                                                                                                                                                         end)
                                                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                          0)})))
                                                                                                                                                                                                                      else
                                                                                                                                                                                                                        (_s5038_
                                                                                                                                                                                                                           _s3926_) >>= fun w__302 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                        (if
                                                                                                                                                                                                                           match w__302 with
                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                             (FCVT_S_LU, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                              false
                                                                                                                                                                                                                           end
                                                                                                                                                                                                                         then
                                                                                                                                                                                                                           (_s5038_
                                                                                                                                                                                                                              _s3926_) >>= fun w__303 : option ((f_un_rm_op_S * mword 5 * mword 5 * rounding_mode * string)) =>
                                                                                                                                                                                                                           (match w__303 with
                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                              (FCVT_S_LU, rd, rs1, rm, s_) =>
                                                                                                                                                                                                                               returnm (Some
                                                                                                                                                                                                                                          (F_UN_RM_TYPE_S
                                                                                                                                                                                                                                             (rs1, rm, rd, FCVT_S_LU), build_ex
                                                                                                                                                                                                                                          (projT1
                                                                                                                                                                                                                                           (sub_nat
                                                                                                                                                                                                                                              (projT1
                                                                                                                                                                                                                                               (string_length
                                                                                                                                                                                                                                                  arg_))
                                                                                                                                                                                                                                              (projT1
                                                                                                                                                                                                                                               (string_length
                                                                                                                                                                                                                                                  s_))))))
                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                               exit tt
                                                                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                 0)})))
                                                                                                                                                                                                                            end)
                                                                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                             0)})))
                                                                                                                                                                                                                         else
                                                                                                                                                                                                                           (_s5055_
                                                                                                                                                                                                                              _s3926_) >>= fun w__306 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                           (if
                                                                                                                                                                                                                              match w__306 with
                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                (FSGNJ_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                 true
                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                 false
                                                                                                                                                                                                                              end
                                                                                                                                                                                                                            then
                                                                                                                                                                                                                              (_s5055_
                                                                                                                                                                                                                                 _s3926_) >>= fun w__307 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                              (match w__307 with
                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                 (FSGNJ_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                  returnm (Some
                                                                                                                                                                                                                                             (F_BIN_TYPE_S
                                                                                                                                                                                                                                                (rs2, rs1, rd, FSGNJ_S), build_ex
                                                                                                                                                                                                                                             (projT1
                                                                                                                                                                                                                                              (sub_nat
                                                                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                                                                  (string_length
                                                                                                                                                                                                                                                     arg_))
                                                                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                                                                  (string_length
                                                                                                                                                                                                                                                     s_))))))
                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                  exit tt
                                                                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                    0)})))
                                                                                                                                                                                                                               end)
                                                                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                0)})))
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                              (_s5072_
                                                                                                                                                                                                                                 _s3926_) >>= fun w__310 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                              (if
                                                                                                                                                                                                                                 match w__310 with
                                                                                                                                                                                                                                 | Some
                                                                                                                                                                                                                                   (FSGNJN_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                                                    false
                                                                                                                                                                                                                                 end
                                                                                                                                                                                                                               then
                                                                                                                                                                                                                                 (_s5072_
                                                                                                                                                                                                                                    _s3926_) >>= fun w__311 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                 (match w__311 with
                                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                                    (FSGNJN_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                     returnm (Some
                                                                                                                                                                                                                                                (F_BIN_TYPE_S
                                                                                                                                                                                                                                                   (rs2, rs1, rd, FSGNJN_S), build_ex
                                                                                                                                                                                                                                                (projT1
                                                                                                                                                                                                                                                 (sub_nat
                                                                                                                                                                                                                                                    (projT1
                                                                                                                                                                                                                                                     (string_length
                                                                                                                                                                                                                                                        arg_))
                                                                                                                                                                                                                                                    (projT1
                                                                                                                                                                                                                                                     (string_length
                                                                                                                                                                                                                                                        s_))))))
                                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                                     exit tt
                                                                                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                       0)})))
                                                                                                                                                                                                                                  end)
                                                                                                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                   0)})))
                                                                                                                                                                                                                               else
                                                                                                                                                                                                                                 (_s5089_
                                                                                                                                                                                                                                    _s3926_) >>= fun w__314 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                 (if
                                                                                                                                                                                                                                    match w__314 with
                                                                                                                                                                                                                                    | Some
                                                                                                                                                                                                                                      (FSGNJX_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                       true
                                                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                                                       false
                                                                                                                                                                                                                                    end
                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                    (_s5089_
                                                                                                                                                                                                                                       _s3926_) >>= fun w__315 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                    (match w__315 with
                                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                                       (FSGNJX_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                        returnm (Some
                                                                                                                                                                                                                                                   (F_BIN_TYPE_S
                                                                                                                                                                                                                                                      (rs2, rs1, rd, FSGNJX_S), build_ex
                                                                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                                                                    (sub_nat
                                                                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                                                                        (string_length
                                                                                                                                                                                                                                                           arg_))
                                                                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                                                                        (string_length
                                                                                                                                                                                                                                                           s_))))))
                                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                                        exit tt
                                                                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                          0)})))
                                                                                                                                                                                                                                     end)
                                                                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                      0)})))
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                    (_s5106_
                                                                                                                                                                                                                                       _s3926_) >>= fun w__318 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                    (if
                                                                                                                                                                                                                                       match w__318 with
                                                                                                                                                                                                                                       | Some
                                                                                                                                                                                                                                         (FMIN_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                                                          false
                                                                                                                                                                                                                                       end
                                                                                                                                                                                                                                     then
                                                                                                                                                                                                                                       (_s5106_
                                                                                                                                                                                                                                          _s3926_) >>= fun w__319 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                       (match w__319 with
                                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                                          (FMIN_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                           returnm (Some
                                                                                                                                                                                                                                                      (F_BIN_TYPE_S
                                                                                                                                                                                                                                                         (rs2, rs1, rd, FMIN_S), build_ex
                                                                                                                                                                                                                                                      (projT1
                                                                                                                                                                                                                                                       (sub_nat
                                                                                                                                                                                                                                                          (projT1
                                                                                                                                                                                                                                                           (string_length
                                                                                                                                                                                                                                                              arg_))
                                                                                                                                                                                                                                                          (projT1
                                                                                                                                                                                                                                                           (string_length
                                                                                                                                                                                                                                                              s_))))))
                                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                                           exit tt
                                                                                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                             0)})))
                                                                                                                                                                                                                                        end)
                                                                                                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                         0)})))
                                                                                                                                                                                                                                     else
                                                                                                                                                                                                                                       (_s5123_
                                                                                                                                                                                                                                          _s3926_) >>= fun w__322 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                       (if
                                                                                                                                                                                                                                          match w__322 with
                                                                                                                                                                                                                                          | Some
                                                                                                                                                                                                                                            (FMAX_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                             true
                                                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                                                             false
                                                                                                                                                                                                                                          end
                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                          (_s5123_
                                                                                                                                                                                                                                             _s3926_) >>= fun w__323 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                          (match w__323 with
                                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                                             (FMAX_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                              returnm (Some
                                                                                                                                                                                                                                                         (F_BIN_TYPE_S
                                                                                                                                                                                                                                                            (rs2, rs1, rd, FMAX_S), build_ex
                                                                                                                                                                                                                                                         (projT1
                                                                                                                                                                                                                                                          (sub_nat
                                                                                                                                                                                                                                                             (projT1
                                                                                                                                                                                                                                                              (string_length
                                                                                                                                                                                                                                                                 arg_))
                                                                                                                                                                                                                                                             (projT1
                                                                                                                                                                                                                                                              (string_length
                                                                                                                                                                                                                                                                 s_))))))
                                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                                              exit tt
                                                                                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                0)})))
                                                                                                                                                                                                                                           end)
                                                                                                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                            0)})))
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                          (_s5140_
                                                                                                                                                                                                                                             _s3926_) >>= fun w__326 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                          (if
                                                                                                                                                                                                                                             match w__326 with
                                                                                                                                                                                                                                             | Some
                                                                                                                                                                                                                                               (FEQ_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                                                false
                                                                                                                                                                                                                                             end
                                                                                                                                                                                                                                           then
                                                                                                                                                                                                                                             (_s5140_
                                                                                                                                                                                                                                                _s3926_) >>= fun w__327 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                             (match w__327 with
                                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                                (FEQ_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                                 returnm (Some
                                                                                                                                                                                                                                                            (F_BIN_TYPE_S
                                                                                                                                                                                                                                                               (rs2, rs1, rd, FEQ_S), build_ex
                                                                                                                                                                                                                                                            (projT1
                                                                                                                                                                                                                                                             (sub_nat
                                                                                                                                                                                                                                                                (projT1
                                                                                                                                                                                                                                                                 (string_length
                                                                                                                                                                                                                                                                    arg_))
                                                                                                                                                                                                                                                                (projT1
                                                                                                                                                                                                                                                                 (string_length
                                                                                                                                                                                                                                                                    s_))))))
                                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                                 exit tt
                                                                                                                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                   0)})))
                                                                                                                                                                                                                                              end)
                                                                                                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                               0)})))
                                                                                                                                                                                                                                           else
                                                                                                                                                                                                                                             (_s5157_
                                                                                                                                                                                                                                                _s3926_) >>= fun w__330 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                             (if
                                                                                                                                                                                                                                                match w__330 with
                                                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                                                  (FLT_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                                   true
                                                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                                                   false
                                                                                                                                                                                                                                                end
                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                (_s5157_
                                                                                                                                                                                                                                                   _s3926_) >>= fun w__331 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                (match w__331 with
                                                                                                                                                                                                                                                 | Some
                                                                                                                                                                                                                                                   (FLT_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                                    returnm (Some
                                                                                                                                                                                                                                                               (F_BIN_TYPE_S
                                                                                                                                                                                                                                                                  (rs2, rs1, rd, FLT_S), build_ex
                                                                                                                                                                                                                                                               (projT1
                                                                                                                                                                                                                                                                (sub_nat
                                                                                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                                                                                    (string_length
                                                                                                                                                                                                                                                                       arg_))
                                                                                                                                                                                                                                                                   (projT1
                                                                                                                                                                                                                                                                    (string_length
                                                                                                                                                                                                                                                                       s_))))))
                                                                                                                                                                                                                                                 | _ =>
                                                                                                                                                                                                                                                    exit tt
                                                                                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                      0)})))
                                                                                                                                                                                                                                                 end)
                                                                                                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                  0)})))
                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                (_s5174_
                                                                                                                                                                                                                                                   _s3926_) >>= fun w__334 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                (if
                                                                                                                                                                                                                                                   match w__334 with
                                                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                                                     (FLE_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                                                      false
                                                                                                                                                                                                                                                   end
                                                                                                                                                                                                                                                 then
                                                                                                                                                                                                                                                   (_s5174_
                                                                                                                                                                                                                                                      _s3926_) >>= fun w__335 : option ((f_bin_op_S * mword 5 * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                   (match w__335 with
                                                                                                                                                                                                                                                    | Some
                                                                                                                                                                                                                                                      (FLE_S, rd, rs1, rs2, s_) =>
                                                                                                                                                                                                                                                       returnm (Some
                                                                                                                                                                                                                                                                  (F_BIN_TYPE_S
                                                                                                                                                                                                                                                                     (rs2, rs1, rd, FLE_S), build_ex
                                                                                                                                                                                                                                                                  (projT1
                                                                                                                                                                                                                                                                   (sub_nat
                                                                                                                                                                                                                                                                      (projT1
                                                                                                                                                                                                                                                                       (string_length
                                                                                                                                                                                                                                                                          arg_))
                                                                                                                                                                                                                                                                      (projT1
                                                                                                                                                                                                                                                                       (string_length
                                                                                                                                                                                                                                                                          s_))))))
                                                                                                                                                                                                                                                    | _ =>
                                                                                                                                                                                                                                                       exit tt
                                                                                                                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                         0)})))
                                                                                                                                                                                                                                                    end)
                                                                                                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                     0)})))
                                                                                                                                                                                                                                                 else
                                                                                                                                                                                                                                                   (_s5191_
                                                                                                                                                                                                                                                      _s3926_) >>= fun w__338 : option ((f_un_op_S * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                   (if
                                                                                                                                                                                                                                                      match w__338 with
                                                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                                                        (FMV_X_W, rd, rs1, s_) =>
                                                                                                                                                                                                                                                         true
                                                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                                                         false
                                                                                                                                                                                                                                                      end
                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                      (_s5191_
                                                                                                                                                                                                                                                         _s3926_) >>= fun w__339 : option ((f_un_op_S * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                      (match w__339 with
                                                                                                                                                                                                                                                       | Some
                                                                                                                                                                                                                                                         (FMV_X_W, rd, rs1, s_) =>
                                                                                                                                                                                                                                                          returnm (Some
                                                                                                                                                                                                                                                                     (F_UN_TYPE_S
                                                                                                                                                                                                                                                                        (rs1, rd, FMV_X_W), build_ex
                                                                                                                                                                                                                                                                     (projT1
                                                                                                                                                                                                                                                                      (sub_nat
                                                                                                                                                                                                                                                                         (projT1
                                                                                                                                                                                                                                                                          (string_length
                                                                                                                                                                                                                                                                             arg_))
                                                                                                                                                                                                                                                                         (projT1
                                                                                                                                                                                                                                                                          (string_length
                                                                                                                                                                                                                                                                             s_))))))
                                                                                                                                                                                                                                                       | _ =>
                                                                                                                                                                                                                                                          exit tt
                                                                                                                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                            0)})))
                                                                                                                                                                                                                                                       end)
                                                                                                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                        0)})))
                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                      (_s5204_
                                                                                                                                                                                                                                                         _s3926_) >>= fun w__342 : option ((f_un_op_S * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                      (if
                                                                                                                                                                                                                                                         match w__342 with
                                                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                                                           (FMV_W_X, rd, rs1, s_) =>
                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                                                            false
                                                                                                                                                                                                                                                         end
                                                                                                                                                                                                                                                       then
                                                                                                                                                                                                                                                         (_s5204_
                                                                                                                                                                                                                                                            _s3926_) >>= fun w__343 : option ((f_un_op_S * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                         (match w__343 with
                                                                                                                                                                                                                                                          | Some
                                                                                                                                                                                                                                                            (FMV_W_X, rd, rs1, s_) =>
                                                                                                                                                                                                                                                             returnm (Some
                                                                                                                                                                                                                                                                        (F_UN_TYPE_S
                                                                                                                                                                                                                                                                           (rs1, rd, FMV_W_X), build_ex
                                                                                                                                                                                                                                                                        (projT1
                                                                                                                                                                                                                                                                         (sub_nat
                                                                                                                                                                                                                                                                            (projT1
                                                                                                                                                                                                                                                                             (string_length
                                                                                                                                                                                                                                                                                arg_))
                                                                                                                                                                                                                                                                            (projT1
                                                                                                                                                                                                                                                                             (string_length
                                                                                                                                                                                                                                                                                s_))))))
                                                                                                                                                                                                                                                          | _ =>
                                                                                                                                                                                                                                                             exit tt
                                                                                                                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                               0)})))
                                                                                                                                                                                                                                                          end)
                                                                                                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                           0)})))
                                                                                                                                                                                                                                                       else
                                                                                                                                                                                                                                                         (_s5217_
                                                                                                                                                                                                                                                            _s3926_) >>= fun w__346 : option ((f_un_op_S * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                         (if
                                                                                                                                                                                                                                                            match w__346 with
                                                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                                                              (FCLASS_S, rd, rs1, s_) =>
                                                                                                                                                                                                                                                               true
                                                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                                                               false
                                                                                                                                                                                                                                                            end
                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                            (_s5217_
                                                                                                                                                                                                                                                               _s3926_) >>= fun w__347 : option ((f_un_op_S * mword 5 * mword 5 * string)) =>
                                                                                                                                                                                                                                                            (match w__347 with
                                                                                                                                                                                                                                                             | Some
                                                                                                                                                                                                                                                               (FCLASS_S, rd, rs1, s_) =>
                                                                                                                                                                                                                                                                returnm (Some
                                                                                                                                                                                                                                                                           (F_UN_TYPE_S
                                                                                                                                                                                                                                                                              (rs1, rd, FCLASS_S), build_ex
                                                                                                                                                                                                                                                                           (projT1
                                                                                                                                                                                                                                                                            (sub_nat
                                                                                                                                                                                                                                                                               (projT1
                                                                                                                                                                                                                                                                                (string_length
                                                                                                                                                                                                                                                                                   arg_))
                                                                                                                                                                                                                                                                               (projT1
                                                                                                                                                                                                                                                                                (string_length
                                                                                                                                                                                                                                                                                   s_))))))
                                                                                                                                                                                                                                                             | _ =>
                                                                                                                                                                                                                                                                exit tt
                                                                                                                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                  0)})))
                                                                                                                                                                                                                                                             end)
                                                                                                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                              0)})))
                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                            (_s5230_
                                                                                                                                                                                                                                                               _s3926_) >>= fun w__350 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                                                                                                                                            (if
                                                                                                                                                                                                                                                               match w__350 with
                                                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                                                 (rd, imm, s_) =>
                                                                                                                                                                                                                                                                  Z.eqb
                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                                                  false
                                                                                                                                                                                                                                                               end
                                                                                                                                                                                                                                                             then
                                                                                                                                                                                                                                                               (_s5230_
                                                                                                                                                                                                                                                                  _s3926_) >>= fun w__351 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                                                                                                                                               (match w__351 with
                                                                                                                                                                                                                                                                | Some
                                                                                                                                                                                                                                                                  (rd, imm, s_) =>
                                                                                                                                                                                                                                                                   returnm (Some
                                                                                                                                                                                                                                                                              (C_FLWSP
                                                                                                                                                                                                                                                                                 (imm, rd), build_ex
                                                                                                                                                                                                                                                                              (projT1
                                                                                                                                                                                                                                                                               (sub_nat
                                                                                                                                                                                                                                                                                  (projT1
                                                                                                                                                                                                                                                                                   (string_length
                                                                                                                                                                                                                                                                                      arg_))
                                                                                                                                                                                                                                                                                  (projT1
                                                                                                                                                                                                                                                                                   (string_length
                                                                                                                                                                                                                                                                                      s_))))))
                                                                                                                                                                                                                                                                | _ =>
                                                                                                                                                                                                                                                                   exit tt
                                                                                                                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                     0)})))
                                                                                                                                                                                                                                                                end)
                                                                                                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                 0)})))
                                                                                                                                                                                                                                                             else
                                                                                                                                                                                                                                                               (_s5242_
                                                                                                                                                                                                                                                                  _s3926_) >>= fun w__354 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                                                                                                                                               (if
                                                                                                                                                                                                                                                                  match w__354 with
                                                                                                                                                                                                                                                                  | Some
                                                                                                                                                                                                                                                                    (rd, uimm, s_) =>
                                                                                                                                                                                                                                                                     Z.eqb
                                                                                                                                                                                                                                                                       32
                                                                                                                                                                                                                                                                       32
                                                                                                                                                                                                                                                                  | _ =>
                                                                                                                                                                                                                                                                     false
                                                                                                                                                                                                                                                                  end
                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                  (_s5242_
                                                                                                                                                                                                                                                                     _s3926_) >>= fun w__355 : option ((mword 5 * mword 6 * string)) =>
                                                                                                                                                                                                                                                                  (match w__355 with
                                                                                                                                                                                                                                                                   | Some
                                                                                                                                                                                                                                                                     (rd, uimm, s_) =>
                                                                                                                                                                                                                                                                      returnm (Some
                                                                                                                                                                                                                                                                                 (C_FSWSP
                                                                                                                                                                                                                                                                                    (uimm, rd), build_ex
                                                                                                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                                                                                                  (sub_nat
                                                                                                                                                                                                                                                                                     (projT1
                                                                                                                                                                                                                                                                                      (string_length
                                                                                                                                                                                                                                                                                         arg_))
                                                                                                                                                                                                                                                                                     (projT1
                                                                                                                                                                                                                                                                                      (string_length
                                                                                                                                                                                                                                                                                         s_))))))
                                                                                                                                                                                                                                                                   | _ =>
                                                                                                                                                                                                                                                                      exit tt
                                                                                                                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                        0)})))
                                                                                                                                                                                                                                                                   end)
                                                                                                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                    0)})))
                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                  (_s5254_
                                                                                                                                                                                                                                                                     _s3926_) >>= fun w__358 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                                                                                                                                                                                                                  (if
                                                                                                                                                                                                                                                                     match w__358 with
                                                                                                                                                                                                                                                                     | Some
                                                                                                                                                                                                                                                                       (rdc, rsc, uimm, s_) =>
                                                                                                                                                                                                                                                                        Z.eqb
                                                                                                                                                                                                                                                                          32
                                                                                                                                                                                                                                                                          32
                                                                                                                                                                                                                                                                     | _ =>
                                                                                                                                                                                                                                                                        false
                                                                                                                                                                                                                                                                     end
                                                                                                                                                                                                                                                                   then
                                                                                                                                                                                                                                                                     (_s5254_
                                                                                                                                                                                                                                                                        _s3926_) >>= fun w__359 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                                                                                                                                                                                                                     (match w__359 with
                                                                                                                                                                                                                                                                      | Some
                                                                                                                                                                                                                                                                        (rdc, rsc, uimm, s_) =>
                                                                                                                                                                                                                                                                         returnm (Some
                                                                                                                                                                                                                                                                                    (C_FLW
                                                                                                                                                                                                                                                                                       (uimm, rsc, rdc), build_ex
                                                                                                                                                                                                                                                                                    (projT1
                                                                                                                                                                                                                                                                                     (sub_nat
                                                                                                                                                                                                                                                                                        (projT1
                                                                                                                                                                                                                                                                                         (string_length
                                                                                                                                                                                                                                                                                            arg_))
                                                                                                                                                                                                                                                                                        (projT1
                                                                                                                                                                                                                                                                                         (string_length
                                                                                                                                                                                                                                                                                            s_))))))
                                                                                                                                                                                                                                                                      | _ =>
                                                                                                                                                                                                                                                                         exit tt
                                                                                                                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                           0)})))
                                                                                                                                                                                                                                                                      end)
                                                                                                                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                       0)})))
                                                                                                                                                                                                                                                                   else
                                                                                                                                                                                                                                                                     (_s5270_
                                                                                                                                                                                                                                                                        _s3926_) >>= fun w__362 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                                                                                                                                                                                                                     (if
                                                                                                                                                                                                                                                                        match w__362 with
                                                                                                                                                                                                                                                                        | Some
                                                                                                                                                                                                                                                                          (rsc1, rsc2, uimm, s_) =>
                                                                                                                                                                                                                                                                           Z.eqb
                                                                                                                                                                                                                                                                             32
                                                                                                                                                                                                                                                                             32
                                                                                                                                                                                                                                                                        | _ =>
                                                                                                                                                                                                                                                                           false
                                                                                                                                                                                                                                                                        end
                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                        (_s5270_
                                                                                                                                                                                                                                                                           _s3926_) >>= fun w__363 : option ((mword 3 * mword 3 * mword 5 * string)) =>
                                                                                                                                                                                                                                                                        (match w__363 with
                                                                                                                                                                                                                                                                         | Some
                                                                                                                                                                                                                                                                           (rsc1, rsc2, uimm, s_) =>
                                                                                                                                                                                                                                                                            returnm (Some
                                                                                                                                                                                                                                                                                       (C_FSW
                                                                                                                                                                                                                                                                                          (uimm, rsc1, rsc2), build_ex
                                                                                                                                                                                                                                                                                       (projT1
                                                                                                                                                                                                                                                                                        (sub_nat
                                                                                                                                                                                                                                                                                           (projT1
                                                                                                                                                                                                                                                                                            (string_length
                                                                                                                                                                                                                                                                                               arg_))
                                                                                                                                                                                                                                                                                           (projT1
                                                                                                                                                                                                                                                                                            (string_length
                                                                                                                                                                                                                                                                                               s_))))))
                                                                                                                                                                                                                                                                         | _ =>
                                                                                                                                                                                                                                                                            exit tt
                                                                                                                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                              0)})))
                                                                                                                                                                                                                                                                         end)
                                                                                                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                          0)})))
                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                        (_s5286_
                                                                                                                                                                                                                                                                           _s3926_) >>= fun w__366 : option ((mword 32 * string)) =>
                                                                                                                                                                                                                                                                        (if
                                                                                                                                                                                                                                                                           match w__366 with
                                                                                                                                                                                                                                                                           | Some
                                                                                                                                                                                                                                                                             (s, s_) =>
                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                           | _ =>
                                                                                                                                                                                                                                                                              false
                                                                                                                                                                                                                                                                           end
                                                                                                                                                                                                                                                                         then
                                                                                                                                                                                                                                                                           (_s5286_
                                                                                                                                                                                                                                                                              _s3926_) >>= fun w__367 : option ((mword 32 * string)) =>
                                                                                                                                                                                                                                                                           (match w__367 with
                                                                                                                                                                                                                                                                            | Some
                                                                                                                                                                                                                                                                              (s, s_) =>
                                                                                                                                                                                                                                                                               returnm (Some
                                                                                                                                                                                                                                                                                          (ILLEGAL
                                                                                                                                                                                                                                                                                             s, build_ex
                                                                                                                                                                                                                                                                                          (projT1
                                                                                                                                                                                                                                                                                           (sub_nat
                                                                                                                                                                                                                                                                                              (projT1
                                                                                                                                                                                                                                                                                               (string_length
                                                                                                                                                                                                                                                                                                  arg_))
                                                                                                                                                                                                                                                                                              (projT1
                                                                                                                                                                                                                                                                                               (string_length
                                                                                                                                                                                                                                                                                                  s_))))))
                                                                                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                                                                                               exit tt
                                                                                                                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                                 0)})))
                                                                                                                                                                                                                                                                            end)
                                                                                                                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                             0)})))
                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                           (_s5294_
                                                                                                                                                                                                                                                                              _s3926_) >>= fun w__370 : option ((mword 16 * string)) =>
                                                                                                                                                                                                                                                                           (if
                                                                                                                                                                                                                                                                              match w__370 with
                                                                                                                                                                                                                                                                              | Some
                                                                                                                                                                                                                                                                                (s, s_) =>
                                                                                                                                                                                                                                                                                 true
                                                                                                                                                                                                                                                                              | _ =>
                                                                                                                                                                                                                                                                                 false
                                                                                                                                                                                                                                                                              end
                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                              (_s5294_
                                                                                                                                                                                                                                                                                 _s3926_) >>= fun w__371 : option ((mword 16 * string)) =>
                                                                                                                                                                                                                                                                              (match w__371 with
                                                                                                                                                                                                                                                                               | Some
                                                                                                                                                                                                                                                                                 (s, s_) =>
                                                                                                                                                                                                                                                                                  returnm (Some
                                                                                                                                                                                                                                                                                             (C_ILLEGAL
                                                                                                                                                                                                                                                                                                s, build_ex
                                                                                                                                                                                                                                                                                             (projT1
                                                                                                                                                                                                                                                                                              (sub_nat
                                                                                                                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                                                                                                                  (string_length
                                                                                                                                                                                                                                                                                                     arg_))
                                                                                                                                                                                                                                                                                                 (projT1
                                                                                                                                                                                                                                                                                                  (string_length
                                                                                                                                                                                                                                                                                                     s_))))))
                                                                                                                                                                                                                                                                               | _ =>
                                                                                                                                                                                                                                                                                  exit tt
                                                                                                                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                                    0)})))
                                                                                                                                                                                                                                                                               end)
                                                                                                                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                                0)})))
                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                              returnm None)
                                                                                                                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                             0)}))))
                                                                                                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                          0)}))))
                                                                                                                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                       0)}))))
                                                                                                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                    0)}))))
                                                                                                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                                 0)}))))
                                                                                                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                              0)}))))
                                                                                                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                           0)}))))
                                                                                                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                        0)}))))
                                                                                                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                     0)}))))
                                                                                                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                                  0)}))))
                                                                                                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                               0)}))))
                                                                                                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                            0)}))))
                                                                                                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                         0)}))))
                                                                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                      0)}))))
                                                                                                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                   0)}))))
                                                                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                                0)}))))
                                                                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                             0)}))))
                                                                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                          0)}))))
                                                                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                       0)}))))
                                                                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                    0)}))))
                                                                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                                 0)}))))
                                                                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                              0)}))))
                                                                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                           0)}))))
                                                                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                        0)}))))
                                                                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                     0)}))))
                                                                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                                  0)}))))
                                                                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                               0)}))))
                                                                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                            0)}))))
                                                                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                         0)}))))
                                                                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                      0)}))))
                                                                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                   0)}))))
                                                                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                                0)}))))
                                                                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                             0)}))))
                                                                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                          0)}))))
                                                                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                       0)}))))
                                                                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                    0)}))))
                                                                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                                 0)}))))
                                                                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                              0)}))))
                                                                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                           0)}))))
                                                                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                        0)}))))
                                                                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                     0)}))))
                                                                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                                  0)}))))
                                                                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                               0)}))))
                                                                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                            0)}))))
                                                                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                         0)}))))
                                                                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                      0)}))))
                                                                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                   0)}))))
                                                                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                                0)}))))
                                                                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                             0)}))))
                                                                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                          0)}))))
                                                                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                       0)}))))
                                                                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                    0)}))))
                                                                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                                 0)}))))
                                                                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                              0)}))))
                                                                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                           0)}))))
                                                                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                        0)}))))
                                                                                                    : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                     0)}))))
                                                                                                 : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                                  0)}))))
                                                                                              : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                               0)}))))
                                                                                           : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                            0)}))))
                                                                                        : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                         0)}))))
                                                                                     : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                      0)}))))
                                                                                  : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                   0)}))))
                                                                               : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                                0)}))))
                                                                            : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                             0)}))))
                                                                         : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                          0)}))))
                                                                      : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                       0)}))))
                                                                   : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                    0)}))))
                                                                : M (option ((ast * {n : Z & ArithFact (n >=?
                                                                 0)}))))
                                                             : M (option ((ast * {n : Z & ArithFact (n >=?
                                                              0)}))))
                                                          : M (option ((ast * {n : Z & ArithFact (n >=?
                                                           0)}))))
                                                       : M (option ((ast * {n : Z & ArithFact (n >=?
                                                        0)}))))
                                                    : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                                                 : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                                              : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                                           : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                                        : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                                     : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                                  : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                               : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                            : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                         : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                      : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                   : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
                : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
             : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
          : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
       : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))))
    : M (option ((ast * {n : Z & ArithFact (n >=? 0)}))).

Definition print_insn (insn : ast) : M (string) := (assembly_forwards insn)  : M (string).

Definition decode (bv : mword 32) : M (ast) := (encdec_backwards bv)  : M (ast).

Definition decodeCompressed (bv : mword 16) : M (ast) :=
   (encdec_compressed_backwards bv)  : M (ast).



