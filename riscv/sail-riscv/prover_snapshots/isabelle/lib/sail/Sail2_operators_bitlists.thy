chapter \<open>Generated by Lem from \<open>../../src/gen_lib/sail2_operators_bitlists.lem\<close>.\<close>

theory "Sail2_operators_bitlists" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "LEM.Lem_machine_word"
  "Sail2_values"
  "Sail2_operators"
  "Sail2_prompt_monad"
  "Sail2_prompt"

begin 

\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Machine_word\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>

\<comment> \<open>\<open> Specialisation of operators to bit lists \<close>\<close>

\<comment> \<open>\<open>val uint_maybe : list bitU -> maybe integer\<close>\<close>
definition uint_maybe  :: "(bitU)list \<Rightarrow>(int)option "  where 
     " uint_maybe v = ( unsigned_of_bits (List.map (\<lambda> b. b) v))"

definition uint_fail  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow>('c,(int),'b)monad "  where 
     " uint_fail dict_Sail2_values_Bitvector_a v = ( maybe_fail (''uint'') (
  (unsigned_method   dict_Sail2_values_Bitvector_a) v))"

definition uint_nondet  :: "(bitU)list \<Rightarrow>('b,(int),'a)monad "  where 
     " uint_nondet v = (
  bools_of_bits_nondet v \<bind> (\<lambda> bs . 
  return (int_of_bools False bs)))"

definition uint  :: "(bitU)list \<Rightarrow> int "  where 
     " uint v = ( maybe_failwith (uint_maybe v))"


\<comment> \<open>\<open>val sint_maybe : list bitU -> maybe integer\<close>\<close>
definition sint_maybe  :: "(bitU)list \<Rightarrow>(int)option "  where 
     " sint_maybe v = ( signed_of_bits (List.map (\<lambda> b. b) v))"

definition sint_fail  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow>('c,(int),'b)monad "  where 
     " sint_fail dict_Sail2_values_Bitvector_a v = ( maybe_fail (''sint'') (
  (signed_method   dict_Sail2_values_Bitvector_a) v))"

definition sint_nondet  :: "(bitU)list \<Rightarrow>('b,(int),'a)monad "  where 
     " sint_nondet v = (
  bools_of_bits_nondet v \<bind> (\<lambda> bs . 
  return (int_of_bools True bs)))"

definition sint  :: "(bitU)list \<Rightarrow> int "  where 
     " sint v = ( maybe_failwith (sint_maybe v))"


\<comment> \<open>\<open>val extz_vec : integer -> list bitU -> list bitU\<close>\<close>
definition extz_vec  :: " int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " extz_vec = ( 
  extz_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val exts_vec : integer -> list bitU -> list bitU\<close>\<close>
definition exts_vec  :: " int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " exts_vec = ( 
  exts_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val zero_extend : list bitU -> integer -> list bitU\<close>\<close>
definition zero_extend  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " zero_extend bits len = ( extz_bits len bits )"


\<comment> \<open>\<open>val sign_extend : list bitU -> integer -> list bitU\<close>\<close>
definition sign_extend  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " sign_extend bits len = ( exts_bits len bits )"


\<comment> \<open>\<open>val zeros : integer -> list bitU\<close>\<close>
definition zeros  :: " int \<Rightarrow>(bitU)list "  where 
     " zeros len = ( repeat [B0] len )"


\<comment> \<open>\<open>val vector_truncate : list bitU -> integer -> list bitU\<close>\<close>
definition vector_truncate  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " vector_truncate bs len = ( extz_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) len bs )"


\<comment> \<open>\<open>val vector_truncateLSB : list bitU -> integer -> list bitU\<close>\<close>
definition vector_truncateLSB  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " vector_truncateLSB bs len = ( take_list len bs )"


\<comment> \<open>\<open>val vec_of_bits_maybe    : list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits_fail     : forall 'rv 'e. list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits_nondet   : forall 'rv 'e. list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits_failwith : list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits          : list bitU -> list bitU\<close>\<close>

\<comment> \<open>\<open>val access_vec_inc : list bitU -> integer -> bitU\<close>\<close>
definition access_vec_inc  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU "  where 
     " access_vec_inc = ( 
  access_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val access_vec_dec : list bitU -> integer -> bitU\<close>\<close>
definition access_vec_dec  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU "  where 
     " access_vec_dec = ( 
  access_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val update_vec_inc : list bitU -> integer -> bitU -> list bitU\<close>\<close>
definition update_vec_inc  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " update_vec_inc = ( 
  update_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition update_vec_inc_maybe  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>((bitU)list)option "  where 
     " update_vec_inc_maybe v i b = ( Some (update_vec_inc v i b))"

definition update_vec_inc_fail  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " update_vec_inc_fail v i b = ( return (update_vec_inc v i b))"

definition update_vec_inc_nondet  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " update_vec_inc_nondet v i b = ( return (update_vec_inc v i b))"


\<comment> \<open>\<open>val update_vec_dec : list bitU -> integer -> bitU -> list bitU\<close>\<close>
definition update_vec_dec  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " update_vec_dec = ( 
  update_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition update_vec_dec_maybe  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>((bitU)list)option "  where 
     " update_vec_dec_maybe v i b = ( Some (update_vec_dec v i b))"

definition update_vec_dec_fail  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " update_vec_dec_fail v i b = ( return (update_vec_dec v i b))"

definition update_vec_dec_nondet  :: "(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " update_vec_dec_nondet v i b = ( return (update_vec_dec v i b))"


\<comment> \<open>\<open>val subrange_vec_inc : list bitU -> integer -> integer -> list bitU\<close>\<close>
definition subrange_vec_inc  :: "(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " subrange_vec_inc = ( 
  subrange_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val subrange_vec_dec : list bitU -> integer -> integer -> list bitU\<close>\<close>
definition subrange_vec_dec  :: "(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " subrange_vec_dec = ( 
  subrange_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val update_subrange_vec_inc : list bitU -> integer -> integer -> list bitU -> list bitU\<close>\<close>
definition update_subrange_vec_inc  :: "(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " update_subrange_vec_inc = ( 
  update_subrange_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict)
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val update_subrange_vec_dec : list bitU -> integer -> integer -> list bitU -> list bitU\<close>\<close>
definition update_subrange_vec_dec  :: "(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " update_subrange_vec_dec = ( 
  update_subrange_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict)
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val concat_vec : list bitU -> list bitU -> list bitU\<close>\<close>
definition concat_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " concat_vec = ( 
  concat_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict)
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val cons_vec : bitU -> list bitU -> list bitU\<close>\<close>
definition cons_vec  :: " bitU \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " cons_vec = ( 
  cons_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition cons_vec_maybe  :: " bitU \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option "  where 
     " cons_vec_maybe b v = ( Some (cons_vec b v))"

definition cons_vec_fail  :: " bitU \<Rightarrow>(bitU)list \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " cons_vec_fail b v = ( return (cons_vec b v))"

definition cons_vec_nondet  :: " bitU \<Rightarrow>(bitU)list \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " cons_vec_nondet b v = ( return (cons_vec b v))"


\<comment> \<open>\<open>val cast_unit_vec : bitU -> list bitU\<close>\<close>
definition cast_unit_vec  :: " bitU \<Rightarrow>(bitU)list "  where 
     " cast_unit_vec = ( cast_unit_bv )"

definition cast_unit_vec_maybe  :: " bitU \<Rightarrow>((bitU)list)option "  where 
     " cast_unit_vec_maybe b = ( Some (cast_unit_vec b))"

definition cast_unit_vec_fail  :: " bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " cast_unit_vec_fail b = ( return (cast_unit_vec b))"

definition cast_unit_vec_nondet  :: " bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " cast_unit_vec_nondet b = ( return (cast_unit_vec b))"


\<comment> \<open>\<open>val vec_of_bit : integer -> bitU -> list bitU\<close>\<close>
definition vec_of_bit  :: " int \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " vec_of_bit = ( bv_of_bit )"

definition vec_of_bit_maybe  :: " int \<Rightarrow> bitU \<Rightarrow>((bitU)list)option "  where 
     " vec_of_bit_maybe len b = ( Some (vec_of_bit len b))"

definition vec_of_bit_fail  :: " int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " vec_of_bit_fail len b = ( return (vec_of_bit len b))"

definition vec_of_bit_nondet  :: " int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " vec_of_bit_nondet len b = ( return (vec_of_bit len b))"


\<comment> \<open>\<open>val msb : list bitU -> bitU\<close>\<close>
definition msb  :: "(bitU)list \<Rightarrow> bitU "  where 
     " msb = ( 
  most_significant
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val int_of_vec_maybe : bool -> list bitU -> maybe integer\<close>\<close>
definition int_of_vec_maybe  :: " bool \<Rightarrow>(bitU)list \<Rightarrow>(int)option "  where 
     " int_of_vec_maybe = ( 
  int_of_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition int_of_vec_fail  :: " bool \<Rightarrow>(bitU)list \<Rightarrow>('b,(int),'a)monad "  where 
     " int_of_vec_fail sign v = ( maybe_fail (''int_of_vec'') (int_of_vec_maybe sign v))"

definition int_of_vec_nondet  :: " bool \<Rightarrow>(bitU)list \<Rightarrow>('b,(int),'a)monad "  where 
     " int_of_vec_nondet sign v = ( bools_of_bits_nondet v \<bind> (\<lambda> v .  return (int_of_bools sign v)))"

definition int_of_vec  :: " bool \<Rightarrow>(bitU)list \<Rightarrow> int "  where 
     " int_of_vec sign v = ( maybe_failwith (int_of_vec_maybe sign v))"


\<comment> \<open>\<open>val string_of_bits : list bitU -> string\<close>\<close>
definition string_of_bits  :: "(bitU)list \<Rightarrow> string "  where 
     " string_of_bits = ( 
  string_of_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val decimal_string_of_bits : list bitU -> string\<close>\<close>
definition decimal_string_of_bits  :: "(bitU)list \<Rightarrow> string "  where 
     " decimal_string_of_bits = ( 
  decimal_string_of_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val and_vec : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val or_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val xor_vec : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val not_vec : list bitU -> list bitU\<close>\<close>
definition and_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " and_vec = ( binop_list and_bit )"

definition or_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "   where 
     " or_vec  = ( binop_list or_bit )"

definition xor_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " xor_vec = ( binop_list xor_bit )"

definition not_vec  :: "(bitU)list \<Rightarrow>(bitU)list "  where 
     " not_vec = ( List.map not_bit )"


\<comment> \<open>\<open>val arith_op_double_bl : forall 'a 'b. Bitvector 'a =>
  (integer -> integer -> integer) -> bool -> 'a -> 'a -> list bitU\<close>\<close>
definition arith_op_double_bl  :: " 'a Bitvector_class \<Rightarrow>(int \<Rightarrow> int \<Rightarrow> int)\<Rightarrow> bool \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow>(bitU)list "  where 
     " arith_op_double_bl dict_Sail2_values_Bitvector_a op1 sign l r = (
  (let len =(( 2 :: int) *
  (length_method   dict_Sail2_values_Bitvector_a) l) in
  (let l' = (if sign then exts_bv 
  dict_Sail2_values_Bitvector_a len l else extz_bv dict_Sail2_values_Bitvector_a len l) in
  (let r' = (if sign then exts_bv 
  dict_Sail2_values_Bitvector_a len r else extz_bv dict_Sail2_values_Bitvector_a len r) in
  List.map (\<lambda> b. b) (arith_op_bits op1 sign (List.map (\<lambda> b. b) l') (List.map (\<lambda> b. b) r'))))))"


\<comment> \<open>\<open>val add_vec   : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val adds_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_vec   : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val subs_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mult_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mults_vec : list bitU -> list bitU -> list bitU\<close>\<close>
definition add_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "    where 
     " add_vec   = ( (\<lambda> l r. List.map (\<lambda> b. b) (arith_op_bits (+) False (List.map (\<lambda> b. b) l) (List.map (\<lambda> b. b) r))))"

definition adds_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "   where 
     " adds_vec  = ( (\<lambda> l r. List.map (\<lambda> b. b) (arith_op_bits (+) True (List.map (\<lambda> b. b) l) (List.map (\<lambda> b. b) r))))"

definition sub_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "    where 
     " sub_vec   = ( (\<lambda> l r. List.map (\<lambda> b. b) (arith_op_bits (-) False (List.map (\<lambda> b. b) l) (List.map (\<lambda> b. b) r))))"

definition subs_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "   where 
     " subs_vec  = ( (\<lambda> l r. List.map (\<lambda> b. b) (arith_op_bits (-) True (List.map (\<lambda> b. b) l) (List.map (\<lambda> b. b) r))))"

definition mult_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "   where 
     " mult_vec  = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) ( * ) False )"

definition mults_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " mults_vec = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) ( * ) True )"


\<comment> \<open>\<open>val add_vec_int       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_vec_int       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mult_vec_int      : list bitU -> integer -> list bitU\<close>\<close>
definition add_vec_int  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " add_vec_int   l r = ( arith_op_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (+) False l r )"

definition sub_vec_int  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " sub_vec_int   l r = ( arith_op_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (-) False l r )"

definition mult_vec_int  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " mult_vec_int  l r = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) ( * ) False l (List.map (\<lambda> b. b) (bits_of_int (int (List.length l)) r)))"


\<comment> \<open>\<open>val add_int_vec       : integer -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_int_vec       : integer -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mult_int_vec      : integer -> list bitU -> list bitU\<close>\<close>
definition add_int_vec  :: " int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " add_int_vec   l r = ( arith_op_int_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (+) False l r )"

definition sub_int_vec  :: " int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " sub_int_vec   l r = ( arith_op_int_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (-) False l r )"

definition mult_int_vec  :: " int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " mult_int_vec  l r = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) ( * ) False (List.map (\<lambda> b. b) (bits_of_int (int (List.length r)) l)) r )"


\<comment> \<open>\<open>val add_vec_bit      : list bitU -> bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val adds_vec_bit     : list bitU -> bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_vec_bit      : list bitU -> bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val subs_vec_bit     : list bitU -> bitU -> list bitU\<close>\<close>

definition add_vec_bool  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a "  where 
     " add_vec_bool dict_Sail2_values_Bitvector_a       l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (+) False l r )"

definition add_vec_bit_maybe  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option "  where 
     " add_vec_bit_maybe dict_Sail2_values_Bitvector_a  l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (+) False l r )"

definition add_vec_bit_fail  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " add_vec_bit_fail dict_Sail2_values_Bitvector_a   l r = ( maybe_fail (''add_vec_bit'') (add_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))"

definition add_vec_bit_nondet  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " add_vec_bit_nondet dict_Sail2_values_Bitvector_a l r = ( bool_of_bitU_nondet r \<bind> (\<lambda> r .  return (add_vec_bool 
  dict_Sail2_values_Bitvector_a l r)))"

definition add_vec_bit  :: "(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " add_vec_bit        l r = ( case_option (repeat [BU] (int (List.length l))) id (add_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"


definition adds_vec_bool  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a "  where 
     " adds_vec_bool dict_Sail2_values_Bitvector_a       l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (+) True l r )"

definition adds_vec_bit_maybe  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option "  where 
     " adds_vec_bit_maybe dict_Sail2_values_Bitvector_a  l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (+) True l r )"

definition adds_vec_bit_fail  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " adds_vec_bit_fail dict_Sail2_values_Bitvector_a   l r = ( maybe_fail (''adds_vec_bit'') (adds_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))"

definition adds_vec_bit_nondet  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " adds_vec_bit_nondet dict_Sail2_values_Bitvector_a l r = ( bool_of_bitU_nondet r \<bind> (\<lambda> r .  return (adds_vec_bool 
  dict_Sail2_values_Bitvector_a l r)))"

definition adds_vec_bit  :: "(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " adds_vec_bit        l r = ( case_option (repeat [BU] (int (List.length l))) id (adds_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"


definition sub_vec_bool  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a "  where 
     " sub_vec_bool dict_Sail2_values_Bitvector_a        l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (-) False l r )"

definition sub_vec_bit_maybe  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option "  where 
     " sub_vec_bit_maybe dict_Sail2_values_Bitvector_a   l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (-) False l r )"

definition sub_vec_bit_fail  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " sub_vec_bit_fail dict_Sail2_values_Bitvector_a    l r = ( maybe_fail (''sub_vec_bit'') (sub_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))"

definition sub_vec_bit_nondet  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " sub_vec_bit_nondet dict_Sail2_values_Bitvector_a  l r = ( bool_of_bitU_nondet r \<bind> (\<lambda> r .  return (sub_vec_bool 
  dict_Sail2_values_Bitvector_a l r)))"

definition sub_vec_bit  :: "(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " sub_vec_bit         l r = ( case_option (repeat [BU] (int (List.length l))) id (sub_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"


definition subs_vec_bool  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a "  where 
     " subs_vec_bool dict_Sail2_values_Bitvector_a       l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (-) True l r )"

definition subs_vec_bit_maybe  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option "  where 
     " subs_vec_bit_maybe dict_Sail2_values_Bitvector_a  l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (-) True l r )"

definition subs_vec_bit_fail  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " subs_vec_bit_fail dict_Sail2_values_Bitvector_a   l r = ( maybe_fail (''sub_vec_bit'') (subs_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))"

definition subs_vec_bit_nondet  :: " 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad "  where 
     " subs_vec_bit_nondet dict_Sail2_values_Bitvector_a l r = ( bool_of_bitU_nondet r \<bind> (\<lambda> r .  return (subs_vec_bool 
  dict_Sail2_values_Bitvector_a l r)))"

definition subs_vec_bit  :: "(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list "  where 
     " subs_vec_bit        l r = ( case_option (repeat [BU] (int (List.length l))) id (subs_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"


\<comment> \<open>\<open>val add_overflow_vec         : list bitU -> list bitU -> (list bitU * bitU * bitU)
val add_overflow_vec_signed  : list bitU -> list bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec         : list bitU -> list bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec_signed  : list bitU -> list bitU -> (list bitU * bitU * bitU)
val mult_overflow_vec        : list bitU -> list bitU -> (list bitU * bitU * bitU)
val mult_overflow_vec_signed : list bitU -> list bitU -> (list bitU * bitU * bitU)
let add_overflow_vec         = add_overflow_bv
let add_overflow_vec_signed  = add_overflow_bv_signed
let sub_overflow_vec         = sub_overflow_bv
let sub_overflow_vec_signed  = sub_overflow_bv_signed
let mult_overflow_vec        = mult_overflow_bv
let mult_overflow_vec_signed = mult_overflow_bv_signed

val add_overflow_vec_bit         : list bitU -> bitU -> (list bitU * bitU * bitU)
val add_overflow_vec_bit_signed  : list bitU -> bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec_bit         : list bitU -> bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec_bit_signed  : list bitU -> bitU -> (list bitU * bitU * bitU)
let add_overflow_vec_bit         = add_overflow_bv_bit
let add_overflow_vec_bit_signed  = add_overflow_bv_bit_signed
let sub_overflow_vec_bit         = sub_overflow_bv_bit
let sub_overflow_vec_bit_signed  = sub_overflow_bv_bit_signed\<close>\<close>

\<comment> \<open>\<open>val shiftl       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val shiftr       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val arith_shiftr : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val rotl         : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val rotr         : list bitU -> integer -> list bitU\<close>\<close>
definition shiftl  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "        where 
     " shiftl       = ( 
  shiftl_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition shiftr  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "        where 
     " shiftr       = ( 
  shiftr_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition arith_shiftr  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " arith_shiftr = ( 
  arith_shiftr_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition rotl  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "          where 
     " rotl         = ( 
  rotl_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition rotr  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "          where 
     " rotr         = ( 
  rotr_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val mod_vec        : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mod_vec_maybe  : list bitU -> list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val mod_vec_fail   : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val mod_vec_nondet : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
definition mod_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " mod_vec        l r = ( case_option (repeat [BU] (int (List.length l))) id (mod_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition mod_vec_maybe  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option "  where 
     " mod_vec_maybe  l r = ( mod_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )"

definition mod_vec_fail  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " mod_vec_fail   l r = ( maybe_fail (''mod_vec'') (mod_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition mod_vec_nondet  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " mod_vec_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (mod_vec l r))"


\<comment> \<open>\<open>val quot_vec        : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val quot_vec_maybe  : list bitU -> list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val quot_vec_fail   : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val quot_vec_nondet : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
definition quot_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " quot_vec        l r = ( case_option (repeat [BU] (int (List.length l))) id (quot_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition quot_vec_maybe  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option "  where 
     " quot_vec_maybe  l r = ( quot_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )"

definition quot_vec_fail  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " quot_vec_fail   l r = ( maybe_fail (''quot_vec'') (quot_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition quot_vec_nondet  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " quot_vec_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (quot_vec l r))"


\<comment> \<open>\<open>val quots_vec        : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val quots_vec_maybe  : list bitU -> list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val quots_vec_fail   : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val quots_vec_nondet : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
definition quots_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " quots_vec        l r = ( case_option (repeat [BU] (int (List.length l))) id (quots_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition quots_vec_maybe  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option "  where 
     " quots_vec_maybe  l r = ( quots_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )"

definition quots_vec_fail  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " quots_vec_fail   l r = ( maybe_fail (''quots_vec'') (quots_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition quots_vec_nondet  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " quots_vec_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (quots_vec l r))"


\<comment> \<open>\<open>val mod_vec_int        : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mod_vec_int_maybe  : list bitU -> integer -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val mod_vec_int_fail   : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val mod_vec_int_nondet : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
definition mod_vec_int  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " mod_vec_int        l r = ( case_option (repeat [BU] (int (List.length l))) id (mod_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition mod_vec_int_maybe  :: "(bitU)list \<Rightarrow> int \<Rightarrow>((bitU)list)option "  where 
     " mod_vec_int_maybe  l r = ( mod_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )"

definition mod_vec_int_fail  :: "(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " mod_vec_int_fail   l r = ( maybe_fail (''mod_vec_int'') (mod_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition mod_vec_int_nondet  :: "(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " mod_vec_int_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (mod_vec_int l r))"


\<comment> \<open>\<open>val quot_vec_int        : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val quot_vec_int_maybe  : list bitU -> integer -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val quot_vec_int_fail   : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val quot_vec_int_nondet : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
definition quot_vec_int  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " quot_vec_int        l r = ( case_option (repeat [BU] (int (List.length l))) id (quot_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition quot_vec_int_maybe  :: "(bitU)list \<Rightarrow> int \<Rightarrow>((bitU)list)option "  where 
     " quot_vec_int_maybe  l r = ( quot_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )"

definition quot_vec_int_fail  :: "(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " quot_vec_int_fail   l r = ( maybe_fail (''quot_vec_int'') (quot_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))"

definition quot_vec_int_nondet  :: "(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad "  where 
     " quot_vec_int_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (quot_vec_int l r))"


\<comment> \<open>\<open>val replicate_bits : list bitU -> integer -> list bitU\<close>\<close>
definition replicate_bits  :: "(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " replicate_bits = ( 
  replicate_bits_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val duplicate : bitU -> integer -> list bitU\<close>\<close>
definition duplicate  :: " bitU \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " duplicate = ( 
  duplicate_bit_bv instance_Sail2_values_BitU_Sail2_values_bitU_dict )"

definition duplicate_maybe  :: " bitU \<Rightarrow> int \<Rightarrow>((bitU)list)option "  where 
     " duplicate_maybe b n = ( Some (duplicate b n))"

definition duplicate_fail  :: " bitU \<Rightarrow> int \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " duplicate_fail b n = ( return (duplicate b n))"

definition duplicate_nondet  :: " bitU \<Rightarrow> int \<Rightarrow>('b,((bitU)list),'a)monad "  where 
     " duplicate_nondet b n = (
  bool_of_bitU_nondet b \<bind> (\<lambda> b . 
  return (duplicate (bitU_of_bool b) n)))"


\<comment> \<open>\<open>val reverse_endianness : list bitU -> list bitU\<close>\<close>
definition reverse_endianness  :: "(bitU)list \<Rightarrow>(bitU)list "  where 
     " reverse_endianness v = ( reverse_endianness_list v )"


\<comment> \<open>\<open>val get_slice_int : integer -> integer -> integer -> list bitU\<close>\<close>
definition get_slice_int  :: " int \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " get_slice_int = ( 
  get_slice_int_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val set_slice_int : integer -> integer -> integer -> list bitU -> integer\<close>\<close>
definition set_slice_int  :: " int \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow> int "  where 
     " set_slice_int = ( 
  set_slice_int_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"


\<comment> \<open>\<open>val slice : list bitU -> integer -> integer -> list bitU\<close>\<close>
definition slice  :: "(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list "  where 
     " slice v lo len = (
  subrange_vec_dec v ((lo + len) -( 1 :: int)) lo )"


\<comment> \<open>\<open>val set_slice : integer -> integer -> list bitU -> integer -> list bitU -> list bitU\<close>\<close>
definition set_slice  :: " int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list "  where 
     " set_slice (out_len::ii) (slice_len::ii) out (n::ii) v = (
  update_subrange_vec_dec out ((n + slice_len) -( 1 :: int)) n v )"


\<comment> \<open>\<open>val eq_vec    : list bitU -> list bitU -> bool\<close>\<close>
\<comment> \<open>\<open>val neq_vec   : list bitU -> list bitU -> bool\<close>\<close>
definition eq_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow> bool "     where 
     " eq_vec    = ( 
  eq_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

definition neq_vec  :: "(bitU)list \<Rightarrow>(bitU)list \<Rightarrow> bool "    where 
     " neq_vec   = ( 
  neq_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )"

end
